{"version":3,"sources":["meteor://ðŸ’»app/server/dbrules.js"],"names":[],"mappings":"yBAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,G","file":"/server/dbrules.js","sourcesContent":["unusualDays.deny({\n\tremove: function(userId, doc) {\n\t\t//ensure that no appointments will be left stranded by this day being removed.\n\t\tvar provider = doc.providerName;\n\t\tvar cleanDate = moment(doc.date);\n\t\tvar provObj = providers.findOne({name: provider});\n\t\tvar startDate = cleanDate.clone().tz(\"Pacific/Auckland\").hour(provObj.startTime).toDate();\n\t\tvar endDate = cleanDate.clone().tz(\"Pacific/Auckland\").hour(provObj.endTime).toDate();\n\t\tvar dayTwix = moment(startDate).twix(endDate);\n\t\tconsole.log(dayTwix.format());\n\t\t//build query\n\t\tvar midnight = moment(cleanDate).startOf(\"day\").toDate();\n\t\tvar midday = moment(cleanDate).endOf(\"day\").toDate();\n\t\tvar appoints = appointmentList.find({date: {$gte: midnight, $lt: midday},\n\t\t\tproviderName: provider}).fetch();\n\t\tvar ret = false;\n\t\t_.each(appoints, function(appoint) {\n\t\t\tconsole.log(appoint);\n\t\t\tif(!dayTwix.contains(appoint.date)) {\n\t\t\t\tconsole.log(\"fail\");\n\t\t\t\tret = true;\n\t\t\t}\n\t\t});\n\t\treturn ret;\n\t}\n});\n\nappointmentList.allow({\n\tinsert: function(userId, appointment) {\n\t\tif (Roles.userIsInRole(userId, 'provider') && appointment.providerName != Meteor.users.findOne(userId).providerName) {\n\t\t\tthrow new Meteor.Error (403, \"Provider tried to add appointment for user other than herself.\")\n\t\t}\n\t\treturn true;\n\t},\n\tupdate: function(userId, appointment) {\n\n\t\tif (Roles.userIsInRole(userId, 'provider') && appointment.providerName != Meteor.users.findOne(userId).providerName) {\n\t\t\tthrow new Meteor.Error (403, \"Provider tried to edit appointment for user other than herself.\");\n\t\t}\n\t\treturn true;\n\t},\n\tremove:function(userId, appointment) {\n\n\t\tif (Roles.userIsInRole(userId, 'provider') && appointment.providerName != Meteor.users.findOne(userId).providerName) {\n\t\t\tthrow new Meteor.Error (403, \"Provider tried to delete appointment for user other than herself.\");\n\t\t}\n\t\treturn true;\n\t},\n\tfetch: [\"providerName\"]\n});\n\nblockouts.allow({\n\tinsert: function(userId, blockout) {\n\t\tif (Roles.userIsInRole(userId, 'provider') && blockout.providerName != Meteor.users.findOne(userId).providerName) {\n\t\t\tthrow new Meteor.Error (403, \"Provider tried to add blockout for user other than herself.\")\n\t\t}\n\t\treturn true;\n\t},\n\tupdate: function(userId, blockout) {\n\n\t\tif (Roles.userIsInRole(userId, 'provider') && blockout.providerName != Meteor.users.findOne(userId).providerName) {\n\t\t\tthrow new Meteor.Error (403, \"Provider tried to edit blockout for user other than herself.\");\n\t\t}\n\t\treturn true;\n\t},\n\tremove:function(userId, blockout) {\n\n\t\tif (Roles.userIsInRole(userId, 'provider') && blockout.providerName != Meteor.users.findOne(userId).providerName) {\n\t\t\tthrow new Meteor.Error (403, \"Provider tried to delete blockout for user other than herself.\");\n\t\t}\n\t\treturn true;\n\t},\n\tfetch: [\"providerName\"]\n});\n\nMeteor.users.allow({\n\tupdate: function(userId, user) {\n\t\tif(Roles.userIsInRole(userId, 'admin')) {\n\t\t\treturn true;\n\t\t}\n\t\tthrow new Meteor.Error(403, \"Nice try punk. Only admins can edit users.\")\n\t},\n\tinsert: function(userId, user) {\n\t\tif(Roles.userIsInRole(userId, 'admin')) {\n\t\t\treturn true;\n\t\t}\n\t\tthrow new Meteor.Error(403, \"Nice try punk. Only admins can add users.\")\n\t},\n\tremove: function(userId, user) {\n\t\tif(Roles.userIsInRole(userId, 'admin')) {\n\t\t\treturn true;\n\t\t}\n\t\tthrow new Meteor.Error(403, \"Nice try punk. Only admins can delete users.\")\n\t}\n});\n\nunusualDays.allow({\n\tinsert: function(userId, unusualDay) {\n\t\tif (Roles.userIsInRole(userId, 'provider') && unusualDay.providerName != Meteor.users.findOne(userId).providerName) {\n\t\t\tthrow new Meteor.Error (403, \"Provider tried to add unusualDay for user other than herself.\")\n\t\t}\n\t\treturn true;\n\t},\n\tupdate: function(userId, unusualDay) {\n\n\t\tif (Roles.userIsInRole(userId, 'provider') && unusualDay.providerName != Meteor.users.findOne(userId).providerName) {\n\t\t\tthrow new Meteor.Error (403, \"Provider tried to edit blockout for user other than herself.\");\n\t\t}\n\t\treturn true;\n\t},\n\tremove:function(userId, unusualDay) {\n\n\t\tif (Roles.userIsInRole(userId, 'provider') && unusualDay.providerName != Meteor.users.findOne(userId).providerName) {\n\t\t\tthrow new Meteor.Error (403, \"Provider tried to delete blockout for user other than herself.\");\n\t\t}\n\t\treturn true;\n\t},\n\tfetch: [\"providerName\"]\n});\n\nproviders.allow({\n\tinsert: function(userId, provider) {\n\t\tif (Roles.userIsInRole(userId, 'provider') && provider.name != Meteor.users.findOne(userId).providerName) {\n\t\t\tthrow new Meteor.Error (403, \"Provider tried to add provider for user other than herself.\")\n\t\t}\n\t\treturn true;\n\t},\n\tupdate: function(userId, provider) {\n\n\t\tif (Roles.userIsInRole(userId, 'provider') && provider.name != Meteor.users.findOne(userId).providerName) {\n\t\t\tthrow new Meteor.Error (403, \"Provider tried to edit provider for user other than herself.\");\n\t\t}\n\t\treturn true;\n\t},\n\tremove:function(userId, provider) {\n\n\t\tif (Roles.userIsInRole(userId, 'provider') && provider.name != Meteor.users.findOne(userId).providerName) {\n\t\t\tthrow new Meteor.Error (403, \"Provider tried to delete provider for user other than herself.\");\n\t\t}\n\t\treturn true;\n\t},\n\tfetch: [\"name\"]\n});"]}