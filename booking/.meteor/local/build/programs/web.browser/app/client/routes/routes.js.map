{"version":3,"sources":["meteor://ðŸ’»app/client/routes/routes.js"],"names":[],"mappings":"yfile":"/client/routes/routes.js","sourcesContent":["subs = new SubsManager({\n\tcacheLimit: 20,//number of subs to cache\n\texpireIn: 20//minutes to hold on to subs\n});\n\nRouter.configure({\n  \n  notFoundTemplate: 'notFound',\n  \n\tlayoutTemplate: 'singlePageMasterLayout'\n});\nRouter.onBeforeAction(mustBeSignedIn, {except: ['loginPage']});\nfunction mustBeSignedIn() {\n\tif (Meteor.loggingIn()) {\n\t\t//console.log(\"currently logging in\");\n\t\tthis.render('loading');\n\t} else {\n\t\tuser = Meteor.user();\n\t\tif (!user) {\n\t\t\t//console.log(\"need to log in\");\n\t\t\tconsole.log(Router.current().route.getName());\n\t\t\tthis.render(\"loginPage\");\n\t\t\t//Router.go('loginPage', {redirect: Router.current().route.path()});\n\t\t} else {\n\t\t\tthis.next();\n\t\t}\n\t}\n}\nRouter.onBeforeAction(correctProviderName, {except: ['loginPage']});\nfunction correctProviderName() {\n\tif (Roles.userIsInRole(Meteor.user(), \"provider\") && Meteor.user().providerName !== Session.get(\"selectedProviderName\")) {\n\t\tSession.set(\"selectedProviderName\",Meteor.user().providerName);\n\t}\n\tthis.next();\n}\nRouter.onBeforeAction(cleanupTimer);\nfunction cleanupTimer() {\n\t\n\tthis.next();\n}\n\nreturnStandardSubs = function(date, providerName, appntId, blockId) {\n\t//date should be a string in YYYY-MM-DD format\n\tif (!providers.findOne({name: providerName})) {\n\t\tproviderName = providers.findOne().name;\n\t\t\n\t}\n\tvar thedate = moment(date, 'YYYY-MM-DD').startOf('day').toDate();\n\tvar list = [];\n\tif (typeof date === \"string\" && typeof providerName === \"string\") {\n\t\tSession.set(\"date\", thedate);\n\t\tSession.set(\"selectedProviderName\", providerName);\n\t\tlist = list.concat([Meteor.subscribe('appointmentList', Session.get('date'), Session.get(\"selectedProviderName\")),\n\t\t\tMeteor.subscribe(\"unusualDays\", Session.get(\"date\")),\n\t\t\tMeteor.subscribe('blockouts', Session.get('date'), Session.get(\"selectedProviderName\"))]);\n\t}\n\tif (typeof appntId === \"string\") {\n\t\tlist = list.concat(Meteor.subscribe('singleAppoint', appntId));\n\t} \n\t\n\treturn list;\n\n\n\n};\n\n\nRouter.route('index', {\n\tpath: '/',\n\taction: function() {\n\t\tif (this.ready()) {\n\t\t\tRouter.go('bookingTable',\n\t\t\t\t{date: moment().startOf('day').format('YYYY-MM-DD'),\n\t\t\t\t\tproviderName: providers.findOne().name});\n\t\t}\n\t}\n});\n\n\nRouter.route('newAppointment', {\n\tpath: '/new/:date/:providerName/:time?',\n\tlayoutTemplate: \"sideEditMasterTemplate\",\n\ttemplate: 'appointmentEdit',\n\t\n\twaitOn: function() {\n\t\tif (Meteor.user()) {\n\t\t\tconsole.log(\"NewAppointment here, grabbing my standard subs!\");\n\t\t\treturn returnStandardSubs(this.params.date, this.params.providerName, null, null);\n\t\t}\n\n\t},\n\tonBeforeAction: function () {\n\t\tconsole.log(\"new onbeforeaction\");\n\n\t\tSession.set(\"formForInsert\", true);\n\t\tSession.set(\"currentlyEditingDoc\", null);\n\t\t\n\t\tif (this.params.time) {\n\t\t\tSession.set(\"newTime\", this.params.time.replace('-', ':').replace('-', ' '));\n\t\t}\n\t\tthis.next();\n\t},\n\taction: function() {\n\t\tconsole.log(\"newAppointment action\");\n\t\tif(this.ready()) {\n\t\t\tconsole.log(\"newAppointment ready\");\n\t\t\tthis.render('bookingTable', {to: \"right\"});\n\t\t\tthis.render();\n\t\t}\n\t},\n\tonStop: function() {\n\t\tSession.set(\"newTime\", null);//remove Highlight\n\t}\n});\nRouter.route('editAppointment', {\n\tpath: '/edit/:id',\n\tlayoutTemplate: \"sideEditMasterTemplate\",\n\ttemplate: 'appointmentEdit',\n\t\n\tonBeforeAction: function () {\n\t\tconsole.log(\"edit onbeforeaction\");\n\t\t\tvar handle = Meteor.subscribe('singleAppoint', this.params.id);\n\t\t\tif (handle.ready()) {\n\t\t\t\tvar appoint = appointmentList.findOne(this.params.id);\n\t\t\t\tif (!appoint) {this.render(\"notFound\")}\n\t\t\t\tSession.set('date', moment(appoint.date).startOf('day').toDate());\n\t\t\t\tSession.set('selectedProviderName', appoint.providerName);\n\t\t\t\tTracker.autorun(function() {\n\t\t\t\t\tvar subs = returnStandardSubs(moment(Session.get('date')).startOf('day').format('YYYY-MM-DD'),\n\t\t\t\t\t\tSession.get('selectedProviderName'),\n\t\t\t\t\t\tnull,\n\t\t\t\t\t\tnull);\n\t\t\t\t});\n\t\t\t\t//this.wait(subs);\n\t\t\t\tSession.set(\"formForInsert\", false);\n\t\t\t\tSession.set(\"currentlyEditingDoc\", this.params.id);\n\t\t\t\tthis.next();\n\t\t\t}\n\n\n\n\t},\n\taction: function() {\n\t\tif(this.ready()) {\n\t\t\tthis.render('bookingTable', {to: 'right'});\n\t\t\tthis.render();\n\t\t}\n\t},\n\tonAfterAction: function() {\n\t\t//console.log(\"edit onafteraction\");\n\t},\n\tonStop: function() {\n\t\t//console.log(\"edit onstop\");\n\t\tSession.set(\"formForInsert\", true);\n\t\tSession.set(\"currentlyEditingDoc\", null);\n\t}\n});\n\n\nRouter.route('userList', {\n\tpath: '/users',\n\twaitOn: function() {\n\t\tif(Meteor.user()) {\n\t\t\treturn Meteor.subscribe(\"userList\");\n\t\t}\n\t}\n});\n\nRouter.route('loginPage', {\n\tpath: '/login/(.*)',\n\ttemplate: 'loginPage',\n\tonBeforeAction: function() {\n\t\tif(this.params) {\n\t\t\tSession.set('loginRedirect', this.params[0]);\n\t\t}\n\t\t//console.log(this.params[0]);\n\t\tthis.next();\n\t}\n});\n\n\n\nRouter.route('calendar', {\n\ttemplate:\"calendar\",\n\tpath: '/calendar/:year/:month',\n\twaitOn: function() {\n\t\tif (Meteor.user()) {\n\t\t\tvar startDate = moment().year(this.params.year).month(this.params.month).startOf('month').subtract(5, \"days\");\n\t\t\tvar endDate = moment().year(this.params.year).month(this.params.month).endOf('month').add(10, \"days\");\n\t\t\treturn Meteor.subscribe(\"unusualDaysRange\", startDate.toDate(), endDate.toDate());\n\t\t}\n\t},\n\tonBeforeAction: function() {\n\t\tSession.set(\"calendarStart\", moment().year(this.params.year).month(this.params.month).startOf('month').toDate());\n\t\tSession.set(\"calendarEnd\", moment().year(this.params.year).month(this.params.month).endOf('month').toDate());\n\t\tSession.set(\"date\", moment().year(this.params.year).month(this.params.month).startOf('month').toDate());\n\t\tthis.next();\n\t}\n});\n\nRouter.route('bookingTable', {\n\tpath: '/:date/:providerName',\n\twaitOn: function() {\n\t\tif(Meteor.user()) {\n\t\t\treturn returnStandardSubs(this.params.date, this.params.providerName);\n\t\t}\n\t},\n\tonBeforeAction: function () {\n\t\tSession.setDefault(\"formForInsert\", true);\n\t\tAutoForm.resetForm(\"insertAppointmentFormInner\");\n\t\tAutoForm.resetForm(\"insertBlockoutFormInner\");\n\t\tSession.set(\"newTime\", null);\n\t\tthis.next();\n\t},\n\taction: function() {\n\t\tif(this.ready()) {\n\t\t\tthis.render();\n\t\t}\n\t}\n});\n\n\n"]}