{"version":3,"sources":["meteor://ðŸ’»app/client/views/CabBooking/bookingTable.js"],"names":[],"mappings":"yfile":"/client/views/CabBooking/bookingTable.js","sourcesContent":["Template.bookingTable.helpers({\n\tunusualDays: function() {\n\t\treturn unusualDays.findOne({date: Session.get(\"date\"), providerName: Session.get(\"selectedProviderName\")});\n\t},\n\tday: function() {\n\t\tvar momentobj = moment(Session.get(\"date\"));\n\t\tvar ret = momentobj.format(\"dddd, MMMM Do GGGG\");\n\t\treturn ret + \" -\"+ dayDelta(Session.get(\"date\"));\n\t},\n\tbookingTableWrapperStyle: function() {\n\t\tif (Router.current().route.getName() !== \"printout\") {\n\t\t\treturn {style: \"height:700px; overflow-y:auto;\"}\n\t\t}\n\t},\n\tnotPrintout: function() {\n\t\treturn Router.current().route.getName() !== \"printout\";\n\t},\n\ttimes: function(){\n\t\tif (Roles.userIsInRole(Meteor.userId(), \"provider\")) {\n\t\t\tconsole.log(\"user is provider, setting selected provider name\");\n\t\t\tSession.set(\"selectedProviderName\", Meteor.user().providerName);\n\t\t}\n\t\tvar provObject = getProvObject(Session.get(\"date\"), Session.get('selectedProviderName'));\n\t\tif (!provObject) {\n\t\t\tconsole.log(\"provider not yet available, bailing out\");\n\t\t\treturn;\n\t\t}\n\t\t// console.log(provObject);\n\t\tvar dateCounter = moment().startOf('day').hours(provObject.startTime);\n\t\tvar dateTarget = moment().startOf('day').hours(provObject.endTime);\n\t\tvar ret = [];\n\t\tvar theTime;\n\t\twhile(dateTarget.diff(dateCounter) > 0)\n\t\t{\n\t\t\ttheTime = dateCounter.format(\"h:mm A\");\n\t\t\tret.push({time: theTime, rowTimeId:theTime});\n\t\t\tdateCounter.add(provObject.appointmentLength, \"minutes\");\n\t\t}\n\t\tvar finalTime = dateCounter.format(\"h:mm A\");\n\t\t// console.log(JSON.stringify({time: finalTime}));\n\t\tret.push({time: finalTime, rowTimeId:finalTime});\n\t\treturn ret;\n\t},\n\n\tblockouts: function() {\n\t\treturn getBlockouts(Session.get(\"selectedProviderName\"), Session.get('date'));\n\t},\n\tappointments: function() {\n\t\tvar theDate = Session.get(\"date\");\n\t\tstartDate = moment(theDate).startOf(\"day\").toDate();\n\t\tendDate = moment(theDate).endOf(\"day\").toDate();\n\t\t// console.log(JSON.stringify({date: {$gte: startDate, $lt: endDate}}));\n\t\tqueryPointer = appointmentList.find({date: {$gte: startDate, $lt: endDate},\n\t\t\tproviderName: Session.get(\"selectedProviderName\")});\n\t\treturn queryPointer;\n\t},\n\tproviderNames: function() {\n\t\treturn providers.find({}, {fields: {name: 1}})\n\t},\n\tselected: function() {\n\t\tif(Session.get(\"selectedProviderName\") === this.name) {\n\t\t\treturn \"active\";\n\t\t}\n\t},\n\ttodaysUnusualTimes: function () {\n\t\treturn unusualDays.findOne({date:Session.get('date'), providerName: Session.get(\"selectedProviderName\")})\n\t},\n\n\tbuttonStyle: function() {\n\t\t\n\t\tif (unusualDays.findOne({date:Session.get('date'), providerName: Session.get(\"selectedProviderName\")})){\n\t\t\treturn \"display: none;\";\n\t\t}\n\t\telse {\n\t\t\treturn \"\";\n\t\t}\n\t},\n\tnotes: function () {\n\t\ttry{\n\t\t\treturn unusualDays.findOne({date:Session.get('date'), providerName: Session.get(\"selectedProviderName\")}).notes\n\t\t} catch(e) {/*fails when there is no unusualDay for today.*/}\n\t},\n\tnoneSelected: function() {\n\t\treturn Session.get('selectedProviderName') === undefined || !Session.get('selectedProviderName')\n\n\t}\n\n});\n\n\n\nTemplate.bookingTable.events({\n\t'click .providerTab': function(event) {\n\t\tevent.preventDefault();\n\t\tconsole.log($(event.currentTarget).data(\"name\"));\n\t\tchangeParams({providerName: $(event.currentTarget).data(\"name\")});\n\t},\n\t'dblclick .appointmentItem': function(event) {\n\t\tevent.stopImmediatePropagation();\n\t\tRouter.go('editAppointment', {id: $(event.currentTarget).data(\"id\")});\n\t},\n\t'dblclick .blockoutItem': function(event) {\n\t\tevent.stopImmediatePropagation();\n\t\ttry{\n\t\t\tif($(event.currentTarget).data(\"id\")) {\n\t\t\t\tRouter.go('editBlockout', {id: $(event.currentTarget).data(\"id\")});\n\t\t\t\treturn;\n\t\t\t}\n\t\t} catch (e) {}\n\t\tif(confirm('This is a repeating blockout, and must be edited from the providers menu. Go there?')){\n\t\t\tRouter.go('/providers');\n\t\t}\n\n\t},\n\t'click #customTimesButton': function(event) {\n\t\tvar provObject = providers.findOne({name: Session.get(\"selectedProviderName\")});\n\t\tunusualDays.insert({date: Session.get('date'),\n\t\t\tproviderName: Session.get(\"selectedProviderName\"),\n\t\t\tstartTime: provObject.startTime,\n\t\t\tendTime: provObject.endTime,\n\t\t\tappointmentLength: provObject.appointmentLength});\n\t},\n\t'click #deleteCustomTimes': function(event) {\n\t\tunusualDays.remove(unusualDays.findOne({date:Session.get('date'), providerName: Session.get(\"selectedProviderName\")})._id);\n\t},\n\t'dblclick td.rowContent': function(event) {\n\t\tif (Router.current().route.getName() === \"newBlockoutForm\") {\n\t\t\tnewAppointment(event.currentTarget.id, true);\n\t\t} else {\n\t\t\tnewAppointment(event.currentTarget.id);\n\t\t}\n\t}\n});\n\nTemplate.bookingTable.created = function() {\n\tSession.set('timesRendered', false);\n};\n\nTemplate.bookingTable.rendered = function() {\n\t//console.log(\"rerendering\");\n\t//rerenderDep.changed();\n\tfillJqueryCache();\n\tSession.set('timesRendered', true);\n\tTracker.autorun(function() {\n\t\t// /appointToScrollTo\n\t\t// var pos = $('div[data-id=\"'+Session.get(\"currentlyEditingDoc\")+'\"]')[0].offsetTop\n\t\tvar pos = Session.get(\"scrollToPoint\");\n\t\tif (pos === null || typeof pos === \"undefined\") {return;}\n\t\tconsole.log(\"Scrolling to :\" + pos);\n\t\t$(\"#bookingTableWrapper\").animate({\n\t\t\tscrollTop: pos,\n\t\t\tscrollLeft: 0\n\t\t});\n\t\tTracker.nonreactive(function() {\n\t\t\tSession.set(\"scrollToPoint\", null);\n\t\t})\n\t\t\n\t})\n};\n\nTemplate.bookingTable.onDestroyed(function() {\n\tjquerycache = {}; //clear the jquery cache\n});\n\n\n\nTemplate.timeRow.helpers({\n\trowHighlightClass: function() {\n\t\tif (moment(Session.get(\"newTime\"), \"hh:mm A\").format(\"h:mm A\") == this.time && Session.get(\"formForInsert\") === true) {\n\t\t\t//console.log(\"highlighting row \"+ Session.get(\"newTime\"));\n\t\t\treturn \"bg-success\";\n\t\t}\n\t\t\n\t}\n\n});\nTemplate.timeRow.rendered = function(){\n\tif(Session.equals(\"newTime\", this.data.time)) {\n\t\t//console.log(\"Newtime is : \"+ Session.get(\"newTime\"));\n\t\tSession.set(\"scrollToPoint\", this.firstNode.offsetTop);\n\t}\n};\n\n"]}