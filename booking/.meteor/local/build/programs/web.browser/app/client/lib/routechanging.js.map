{"version":3,"sources":["meteor://ðŸ’»app/client/lib/routechanging.js"],"names":[],"mappings":"YAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,E","file":"/client/lib/routechanging.js","sourcesContent":["\nchangeParams = function(inputObj) {\n\t// Call it like this: changeParams({time: \"12:00 AM\", date: \"2015-02-02\", providerName: \"Provider\"})\n\t//All input must be ready-for-url\n\t//Provides non-destructive in-place changing of URL parameters\n\tvar newparams = {};\n\tfor (param in Router.current().params) { //first, copy out all old params\n\t\tif (!Router.current().params.hasOwnProperty(param)) {\n\t\t\tcontinue;//ignores BS properties\n\t\t}\n\t\t//console.log(Router.current().params[param]);\n\t\tnewparams[param] = Router.current().params[param];\n\t}\n\tfor (param in inputObj) {//then replace/add all input params\n\t\tif (!Router.current().params.hasOwnProperty(param)) {\n\t\t\tcontinue;//ignores BS properties\n\t\t}\n\t\t//console.log(inputObj[param]);\n\t\tnewparams[param] = inputObj[param];\n\t}\n\tif (inputObj.hasOwnProperty('route')) {//finally, change route if requested.\n\t\tRouter.go(inputObj.route, newparams);\n\t} else {\n\t\tRouter.go(Router.current().route.getName(), newparams);\n\t}\n\n};\nnewAppointment = function(newtime, block) {\n\t//if block is true, we'll go to newBlockout instead\n\tif (typeof block === \"undefined\") {\n\t\tblock = false;\n\t}\n\tconsole.log(\"newAppointment with time \" + newtime);\n\tvar newparams = {};\n\tif (newtime && newtime instanceof Date) {\n\t\tnewtime = moment(newtime).format('h-mm-A');\n\t} else if (newtime && typeof newtime === \"string\") {\n\t\tnewtime = newtime.replace(':', \"-\").replace(' ', \"-\");\n\t\t//change 12:40 PM to 12-40-PM\n\t}\n\tif (Router.current().params.providerName && Router.current().params.date) {\n\t\tnewparams.date = Router.current().params.date;\n\t\tnewparams.providerName = Router.current().params.providerName;\n\t} else if (Session.get('date') && Session.get(\"selectedProviderName\")) {\n\t\tnewparams.date = moment(Session.get('date')).startOf('day').format('YYYY-MM-DD');\n\t\tnewparams.providerName = Session.get(\"selectedProviderName\");\n\t} else {\n\t\tconsole.error(\"newAppointment called without date or providerName set\");\n\t\tnewparams.date = moment().startOf('day').format('YYYY-MM-DD');\n\t\tnewparams.providerName = providers.findOne().name;\n\t}\n\tif (newtime) {\n\t\tnewparams.time = newtime;\n\t} else {\n\t\tnewparams.time = \"12-00-AM\"\n\t}\n\tconsole.log(newparams);\n\tif (!block) {\n\t\tRouter.go('newAppointment', newparams);\n\t} else {\n\t\tRouter.go('newBlockout', newparams);\n\t}\n};\ngoHome = function(newDate, newProv) {//newDate is a date obj please\n\tvar newparams = {};\n\tif (Session.get('date') && Session.get('selectedProviderName')) {\n\t\tnewparams.date = moment(Session.get('date')).format('YYYY-MM-DD');\n\t\tnewparams.providerName= Session.get('selectedProviderName');\n\t} else {\n\t\tRouter.go('/'); //when moving from non-bookingtable pages.\n\t}\n\tif(newDate) {\n\t\tnewparams.date = moment(newDate).format('YYYY-MM-DD');\n\t}\n\tif(newProv) {\n\t\tnewparams.providerName = newProv;\n\t}\n\n\tRouter.go('bookingTable', newparams);\n};"]}