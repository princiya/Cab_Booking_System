{"version":3,"sources":["meteor://ðŸ’»app/lib/providers.js"],"names":[],"mappings":"yfile":"/lib/providers.js","sourcesContent":["providers =  new Meteor.Collection(\"providers\");\n// blockoutSchema = new SimpleSchema({\n\n// });\n// providers.attachSchema(blockoutSchema);\nproviders.attachSchema(new SimpleSchema({\n\tname: {\n\t\ttype: String,\n\t\tlabel: \"Name\",\n\t\tunique: true,\n\t\tindex: true\n\t},\n\tstartTime: {\n\t\ttype: Number,\n\t\tlabel: \"Usual Start Hour\",\n\t\tmin: 0,\n\t\tmax: 22,\n\t\t//TODO: When this is set, verify that no\n\t\t//current appointments voilate the new boundries\n\t\tdefaultValue: 9,\n\t\tcustom: function(){\n\t\t\tif (this.field(\"endTime\").value <= this.value){\n\t\t\t\treturn \"before\"\n\t\t\t}\n\t\t\tif (Meteor.isServer) {\n\t\t\t\tvar appoints = appointmentList.find({providerName: this.field('name').value}).fetch();\n\t\t\t\t//console.log(appoints);\n\t\t\t\tfor (var appointIndex in appoints) {\n\t\t\t\t\tif (appoints.hasOwnProperty(appointIndex)) {\n\t\t\t\t\t\tconsole.log(\"comparing \" + moment(appoints[appointIndex].date).hours() + \" with new hour: \"+this.value);\n\t\t\t\t\t\tif (moment(appoints[appointIndex].date).hours() < this.value) {\n\t\t\t\t\t\t\treturn \"wouldPushOutOfBounds\";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\tendTime: {\n\t\ttype: Number,\n\t\tlabel: \"Usual End Hour (24h)\",\n\t\tmin: 1,\n\t\tmax: 23,\n\t\tdefaultValue: 17,\n\t\tcustom: function(){\n\t\t\t//need to get server to iterate over all appointments\n\t\t\t//and check they are still valid in new bounds\n\t\t\tif (Meteor.isServer) {\n\t\t\t\tvar appoints = appointmentList.find({providerName: this.field('name').value}).fetch();\n\t\t\t\tfor (var appointIndex in appoints) {\n\t\t\t\t\tif (appoints.hasOwnProperty(appointIndex)) {\n\t\t\t\t\t\tif (moment(appoints[appointIndex].date).hours() > this.value) {\n\t\t\t\t\t\t\treturn \"wouldPushOutOfBounds\";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\tappointmentLength: {\n\t\ttype: Number,\n\t\tlabel: \"Usual Appointment Length\",\n\t\tmin: 5,\n\t\tmax: 120,\n\t\tdefaultValue: 15,\n\t\tcustom: function(){\n\t\t\tif (this.value % 5 !== 0){\n\t\t\t\treturn \"mod5\";\n\t\t\t}\n\t\t}\n\t},\n\tblockouts: {\n\t\ttype: [Object],\n\t\t// maxCount: 7,\n\t\toptional: true\n\t},\n\t\"blockouts.$.day\": {\n\t\ttype: String,\n\t\tlabel: \"Day of week\",\n\t\tallowedValues: [\n\t\t\"monday\",\n\t\t\"tuesday\",\n\t\t\"wednesday\",\n\t\t\"thursday\",\n\t\t\"friday\",\n\t\t\"saturday\",\n\t\t\"sunday\",\n\t\t\"all\" ]\n\t},\n\t\"blockouts.$.title\": {\n\t\ttype: String,\n\t\tlabel: \"Title\"\n\t},\n\t\"blockouts.$.time\": {\n\t\ttype: String,\n\t\tlabel: \"Start Time\",\n\t\tregEx: /^[0-2]?\\d:\\d\\d [APap]m|M$/,\n\t\tautoform: {\n\t\t\ttype: \"timePicker\"\n\t\t},\n\t\tcustom: function() {\n\t\t\tvar dateObj = moment(this.value, \"h:mm A\");\n\t\t\tvar compareTwix = moment(dateObj).twix(moment(dateObj).add(this.siblingField('length').value, \"minutes\"));\n\t\t\tvar provObject = providers.findOne(this.docId);\n\t\t\tvar exampleTwix = moment().startOf('day').hour(provObject.startTime).twix(\n\t\t\t\tmoment().startOf('day').hour(provObject.endTime));\n\t\t\tif (!exampleTwix.engulfs(compareTwix)) {\n\t\t\t\treturn \"dateOutOfBounds\"\n\t\t\t}\n\t\t}\n\t},\n\t\"blockouts.$.length\": {\n\t\ttype: Number,\n\t\tlabel: \"Length\",\n\t\tmin:5,\n\t\tdefaultValue: 15,\n\t\tautoform: {\n\t\t\tstep: 5\n\t\t},\n\t\tcustom: function(){\n\t\t\tif (this.value % 5 !== 0){\n\t\t\t\treturn \"mod5\";\n\t\t\t}\n\t\t}\n\t}\n}));\n\n// blockoutSchema.simpleSchema().messages({\n// \tmod5: \"[label] must be a multiple of 5\",\n// })\nproviders.simpleSchema().messages({\n\tmod5: \"[label] must be a multiple of 5\",\n\tbefore: \"[label] must be before End Time.\",\n\twouldPushOutOfBounds: \"This change would push appointments out of bounds.\",\n\tdateOutOfBounds: \"This repeating blockout is out of the usual day for this provider.\"\n});\nif (Meteor.isServer){\n\tif (providers.find({}).fetch().length === 0) {\n\t\tproviders.insert({name: \"Default Provider\"})\n\t}\n}\n\n// console.log(providers.find().fetch())\n"]}