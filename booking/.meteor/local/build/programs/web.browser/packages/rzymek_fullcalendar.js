//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var moment = Package['momentjs:moment'].moment;
var Template = Package.templating.Template;
var Blaze = Package.blaze.Blaze;
var UI = Package.blaze.UI;
var Handlebars = Package.blaze.Handlebars;
var Spacebars = Package.spacebars.Spacebars;
var HTML = Package.htmljs.HTML;

(function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rzymek_fullcalendar/fullcalendar/dist/fullcalendar.js                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/*!                                                                                                                    // 1
 * FullCalendar v2.5.0                                                                                                 // 2
 * Docs & License: http://fullcalendar.io/                                                                             // 3
 * (c) 2015 Adam Shaw                                                                                                  // 4
 */                                                                                                                    // 5
                                                                                                                       // 6
(function(factory) {                                                                                                   // 7
	if (typeof define === 'function' && define.amd) {                                                                     // 8
		define([ 'jquery', 'moment' ], factory);                                                                             // 9
	}                                                                                                                     // 10
	else if (typeof exports === 'object') { // Node/CommonJS                                                              // 11
		module.exports = factory(require('jquery'), require('moment'));                                                      // 12
	}                                                                                                                     // 13
	else {                                                                                                                // 14
		factory(jQuery, moment);                                                                                             // 15
	}                                                                                                                     // 16
})(function($, moment) {                                                                                               // 17
                                                                                                                       // 18
;;                                                                                                                     // 19
                                                                                                                       // 20
var FC = $.fullCalendar = {                                                                                            // 21
	version: "2.5.0",                                                                                                     // 22
	internalApiVersion: 1                                                                                                 // 23
};                                                                                                                     // 24
var fcViews = FC.views = {};                                                                                           // 25
                                                                                                                       // 26
                                                                                                                       // 27
$.fn.fullCalendar = function(options) {                                                                                // 28
	var args = Array.prototype.slice.call(arguments, 1); // for a possible method call                                    // 29
	var res = this; // what this function will return (this jQuery object by default)                                     // 30
                                                                                                                       // 31
	this.each(function(i, _element) { // loop each DOM element involved                                                   // 32
		var element = $(_element);                                                                                           // 33
		var calendar = element.data('fullCalendar'); // get the existing calendar object (if any)                            // 34
		var singleRes; // the returned value of this single method call                                                      // 35
                                                                                                                       // 36
		// a method call                                                                                                     // 37
		if (typeof options === 'string') {                                                                                   // 38
			if (calendar && $.isFunction(calendar[options])) {                                                                  // 39
				singleRes = calendar[options].apply(calendar, args);                                                               // 40
				if (!i) {                                                                                                          // 41
					res = singleRes; // record the first method call result                                                           // 42
				}                                                                                                                  // 43
				if (options === 'destroy') { // for the destroy method, must remove Calendar object data                           // 44
					element.removeData('fullCalendar');                                                                               // 45
				}                                                                                                                  // 46
			}                                                                                                                   // 47
		}                                                                                                                    // 48
		// a new calendar initialization                                                                                     // 49
		else if (!calendar) { // don't initialize twice                                                                      // 50
			calendar = new Calendar(element, options);                                                                          // 51
			element.data('fullCalendar', calendar);                                                                             // 52
			calendar.render();                                                                                                  // 53
		}                                                                                                                    // 54
	});                                                                                                                   // 55
	                                                                                                                      // 56
	return res;                                                                                                           // 57
};                                                                                                                     // 58
                                                                                                                       // 59
                                                                                                                       // 60
var complexOptions = [ // names of options that are objects whose properties should be combined                        // 61
	'header',                                                                                                             // 62
	'buttonText',                                                                                                         // 63
	'buttonIcons',                                                                                                        // 64
	'themeButtonIcons'                                                                                                    // 65
];                                                                                                                     // 66
                                                                                                                       // 67
                                                                                                                       // 68
// Merges an array of option objects into a single object                                                              // 69
function mergeOptions(optionObjs) {                                                                                    // 70
	return mergeProps(optionObjs, complexOptions);                                                                        // 71
}                                                                                                                      // 72
                                                                                                                       // 73
                                                                                                                       // 74
// Given options specified for the calendar's constructor, massages any legacy options into a non-legacy form.         // 75
// Converts View-Option-Hashes into the View-Specific-Options format.                                                  // 76
function massageOverrides(input) {                                                                                     // 77
	var overrides = { views: input.views || {} }; // the output. ensure a `views` hash                                    // 78
	var subObj;                                                                                                           // 79
                                                                                                                       // 80
	// iterate through all option override properties (except `views`)                                                    // 81
	$.each(input, function(name, val) {                                                                                   // 82
		if (name != 'views') {                                                                                               // 83
                                                                                                                       // 84
			// could the value be a legacy View-Option-Hash?                                                                    // 85
			if (                                                                                                                // 86
				$.isPlainObject(val) &&                                                                                            // 87
				!/(time|duration|interval)$/i.test(name) && // exclude duration options. might be given as objects                 // 88
				$.inArray(name, complexOptions) == -1 // complex options aren't allowed to be View-Option-Hashes                   // 89
			) {                                                                                                                 // 90
				subObj = null;                                                                                                     // 91
                                                                                                                       // 92
				// iterate through the properties of this possible View-Option-Hash value                                          // 93
				$.each(val, function(subName, subVal) {                                                                            // 94
                                                                                                                       // 95
					// is the property targeting a view?                                                                              // 96
					if (/^(month|week|day|default|basic(Week|Day)?|agenda(Week|Day)?)$/.test(subName)) {                              // 97
						if (!overrides.views[subName]) { // ensure the view-target entry exists                                          // 98
							overrides.views[subName] = {};                                                                                  // 99
						}                                                                                                                // 100
						overrides.views[subName][name] = subVal; // record the value in the `views` object                               // 101
					}                                                                                                                 // 102
					else { // a non-View-Option-Hash property                                                                         // 103
						if (!subObj) {                                                                                                   // 104
							subObj = {};                                                                                                    // 105
						}                                                                                                                // 106
						subObj[subName] = subVal; // accumulate these unrelated values for later                                         // 107
					}                                                                                                                 // 108
				});                                                                                                                // 109
                                                                                                                       // 110
				if (subObj) { // non-View-Option-Hash properties? transfer them as-is                                              // 111
					overrides[name] = subObj;                                                                                         // 112
				}                                                                                                                  // 113
			}                                                                                                                   // 114
			else {                                                                                                              // 115
				overrides[name] = val; // transfer normal options as-is                                                            // 116
			}                                                                                                                   // 117
		}                                                                                                                    // 118
	});                                                                                                                   // 119
                                                                                                                       // 120
	return overrides;                                                                                                     // 121
}                                                                                                                      // 122
                                                                                                                       // 123
;;                                                                                                                     // 124
                                                                                                                       // 125
// exports                                                                                                             // 126
FC.intersectRanges = intersectRanges;                                                                                  // 127
FC.applyAll = applyAll;                                                                                                // 128
FC.debounce = debounce;                                                                                                // 129
FC.isInt = isInt;                                                                                                      // 130
FC.htmlEscape = htmlEscape;                                                                                            // 131
FC.cssToStr = cssToStr;                                                                                                // 132
FC.proxy = proxy;                                                                                                      // 133
FC.capitaliseFirstLetter = capitaliseFirstLetter;                                                                      // 134
                                                                                                                       // 135
                                                                                                                       // 136
/* FullCalendar-specific DOM Utilities                                                                                 // 137
----------------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 139
                                                                                                                       // 140
// Given the scrollbar widths of some other container, create borders/margins on rowEls in order to match the left     // 141
// and right space that was offset by the scrollbars. A 1-pixel border first, then margin beyond that.                 // 142
function compensateScroll(rowEls, scrollbarWidths) {                                                                   // 143
	if (scrollbarWidths.left) {                                                                                           // 144
		rowEls.css({                                                                                                         // 145
			'border-left-width': 1,                                                                                             // 146
			'margin-left': scrollbarWidths.left - 1                                                                             // 147
		});                                                                                                                  // 148
	}                                                                                                                     // 149
	if (scrollbarWidths.right) {                                                                                          // 150
		rowEls.css({                                                                                                         // 151
			'border-right-width': 1,                                                                                            // 152
			'margin-right': scrollbarWidths.right - 1                                                                           // 153
		});                                                                                                                  // 154
	}                                                                                                                     // 155
}                                                                                                                      // 156
                                                                                                                       // 157
                                                                                                                       // 158
// Undoes compensateScroll and restores all borders/margins                                                            // 159
function uncompensateScroll(rowEls) {                                                                                  // 160
	rowEls.css({                                                                                                          // 161
		'margin-left': '',                                                                                                   // 162
		'margin-right': '',                                                                                                  // 163
		'border-left-width': '',                                                                                             // 164
		'border-right-width': ''                                                                                             // 165
	});                                                                                                                   // 166
}                                                                                                                      // 167
                                                                                                                       // 168
                                                                                                                       // 169
// Make the mouse cursor express that an event is not allowed in the current area                                      // 170
function disableCursor() {                                                                                             // 171
	$('body').addClass('fc-not-allowed');                                                                                 // 172
}                                                                                                                      // 173
                                                                                                                       // 174
                                                                                                                       // 175
// Returns the mouse cursor to its original look                                                                       // 176
function enableCursor() {                                                                                              // 177
	$('body').removeClass('fc-not-allowed');                                                                              // 178
}                                                                                                                      // 179
                                                                                                                       // 180
                                                                                                                       // 181
// Given a total available height to fill, have `els` (essentially child rows) expand to accomodate.                   // 182
// By default, all elements that are shorter than the recommended height are expanded uniformly, not considering       // 183
// any other els that are already too tall. if `shouldRedistribute` is on, it considers these tall rows and            // 184
// reduces the available height.                                                                                       // 185
function distributeHeight(els, availableHeight, shouldRedistribute) {                                                  // 186
                                                                                                                       // 187
	// *FLOORING NOTE*: we floor in certain places because zoom can give inaccurate floating-point dimensions,            // 188
	// and it is better to be shorter than taller, to avoid creating unnecessary scrollbars.                              // 189
                                                                                                                       // 190
	var minOffset1 = Math.floor(availableHeight / els.length); // for non-last element                                    // 191
	var minOffset2 = Math.floor(availableHeight - minOffset1 * (els.length - 1)); // for last element *FLOORING NOTE*     // 192
	var flexEls = []; // elements that are allowed to expand. array of DOM nodes                                          // 193
	var flexOffsets = []; // amount of vertical space it takes up                                                         // 194
	var flexHeights = []; // actual css height                                                                            // 195
	var usedHeight = 0;                                                                                                   // 196
                                                                                                                       // 197
	undistributeHeight(els); // give all elements their natural height                                                    // 198
                                                                                                                       // 199
	// find elements that are below the recommended height (expandable).                                                  // 200
	// important to query for heights in a single first pass (to avoid reflow oscillation).                               // 201
	els.each(function(i, el) {                                                                                            // 202
		var minOffset = i === els.length - 1 ? minOffset2 : minOffset1;                                                      // 203
		var naturalOffset = $(el).outerHeight(true);                                                                         // 204
                                                                                                                       // 205
		if (naturalOffset < minOffset) {                                                                                     // 206
			flexEls.push(el);                                                                                                   // 207
			flexOffsets.push(naturalOffset);                                                                                    // 208
			flexHeights.push($(el).height());                                                                                   // 209
		}                                                                                                                    // 210
		else {                                                                                                               // 211
			// this element stretches past recommended height (non-expandable). mark the space as occupied.                     // 212
			usedHeight += naturalOffset;                                                                                        // 213
		}                                                                                                                    // 214
	});                                                                                                                   // 215
                                                                                                                       // 216
	// readjust the recommended height to only consider the height available to non-maxed-out rows.                       // 217
	if (shouldRedistribute) {                                                                                             // 218
		availableHeight -= usedHeight;                                                                                       // 219
		minOffset1 = Math.floor(availableHeight / flexEls.length);                                                           // 220
		minOffset2 = Math.floor(availableHeight - minOffset1 * (flexEls.length - 1)); // *FLOORING NOTE*                     // 221
	}                                                                                                                     // 222
                                                                                                                       // 223
	// assign heights to all expandable elements                                                                          // 224
	$(flexEls).each(function(i, el) {                                                                                     // 225
		var minOffset = i === flexEls.length - 1 ? minOffset2 : minOffset1;                                                  // 226
		var naturalOffset = flexOffsets[i];                                                                                  // 227
		var naturalHeight = flexHeights[i];                                                                                  // 228
		var newHeight = minOffset - (naturalOffset - naturalHeight); // subtract the margin/padding                          // 229
                                                                                                                       // 230
		if (naturalOffset < minOffset) { // we check this again because redistribution might have changed things             // 231
			$(el).height(newHeight);                                                                                            // 232
		}                                                                                                                    // 233
	});                                                                                                                   // 234
}                                                                                                                      // 235
                                                                                                                       // 236
                                                                                                                       // 237
// Undoes distrubuteHeight, restoring all els to their natural height                                                  // 238
function undistributeHeight(els) {                                                                                     // 239
	els.height('');                                                                                                       // 240
}                                                                                                                      // 241
                                                                                                                       // 242
                                                                                                                       // 243
// Given `els`, a jQuery set of <td> cells, find the cell with the largest natural width and set the widths of all the
// cells to be that width.                                                                                             // 245
// PREREQUISITE: if you want a cell to take up width, it needs to have a single inner element w/ display:inline        // 246
function matchCellWidths(els) {                                                                                        // 247
	var maxInnerWidth = 0;                                                                                                // 248
                                                                                                                       // 249
	els.find('> *').each(function(i, innerEl) {                                                                           // 250
		var innerWidth = $(innerEl).outerWidth();                                                                            // 251
		if (innerWidth > maxInnerWidth) {                                                                                    // 252
			maxInnerWidth = innerWidth;                                                                                         // 253
		}                                                                                                                    // 254
	});                                                                                                                   // 255
                                                                                                                       // 256
	maxInnerWidth++; // sometimes not accurate of width the text needs to stay on one line. insurance                     // 257
                                                                                                                       // 258
	els.width(maxInnerWidth);                                                                                             // 259
                                                                                                                       // 260
	return maxInnerWidth;                                                                                                 // 261
}                                                                                                                      // 262
                                                                                                                       // 263
                                                                                                                       // 264
// Turns a container element into a scroller if its contents is taller than the allotted height.                       // 265
// Returns true if the element is now a scroller, false otherwise.                                                     // 266
// NOTE: this method is best because it takes weird zooming dimensions into account                                    // 267
function setPotentialScroller(containerEl, height) {                                                                   // 268
	containerEl.height(height).addClass('fc-scroller');                                                                   // 269
                                                                                                                       // 270
	// are scrollbars needed?                                                                                             // 271
	if (containerEl[0].scrollHeight - 1 > containerEl[0].clientHeight) { // !!! -1 because IE is often off-by-one :(      // 272
		return true;                                                                                                         // 273
	}                                                                                                                     // 274
                                                                                                                       // 275
	unsetScroller(containerEl); // undo                                                                                   // 276
	return false;                                                                                                         // 277
}                                                                                                                      // 278
                                                                                                                       // 279
                                                                                                                       // 280
// Takes an element that might have been a scroller, and turns it back into a normal element.                          // 281
function unsetScroller(containerEl) {                                                                                  // 282
	containerEl.height('').removeClass('fc-scroller');                                                                    // 283
}                                                                                                                      // 284
                                                                                                                       // 285
                                                                                                                       // 286
/* General DOM Utilities                                                                                               // 287
----------------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 289
FC.getOuterRect = getOuterRect;                                                                                        // 290
FC.getClientRect = getClientRect;                                                                                      // 291
FC.getContentRect = getContentRect;                                                                                    // 292
FC.getScrollbarWidths = getScrollbarWidths;                                                                            // 293
                                                                                                                       // 294
                                                                                                                       // 295
// borrowed from https://github.com/jquery/jquery-ui/blob/1.11.0/ui/core.js#L51                                        // 296
function getScrollParent(el) {                                                                                         // 297
	var position = el.css('position'),                                                                                    // 298
		scrollParent = el.parents().filter(function() {                                                                      // 299
			var parent = $(this);                                                                                               // 300
			return (/(auto|scroll)/).test(                                                                                      // 301
				parent.css('overflow') + parent.css('overflow-y') + parent.css('overflow-x')                                       // 302
			);                                                                                                                  // 303
		}).eq(0);                                                                                                            // 304
                                                                                                                       // 305
	return position === 'fixed' || !scrollParent.length ? $(el[0].ownerDocument || document) : scrollParent;              // 306
}                                                                                                                      // 307
                                                                                                                       // 308
                                                                                                                       // 309
// Queries the outer bounding area of a jQuery element.                                                                // 310
// Returns a rectangle with absolute coordinates: left, right (exclusive), top, bottom (exclusive).                    // 311
function getOuterRect(el) {                                                                                            // 312
	var offset = el.offset();                                                                                             // 313
                                                                                                                       // 314
	return {                                                                                                              // 315
		left: offset.left,                                                                                                   // 316
		right: offset.left + el.outerWidth(),                                                                                // 317
		top: offset.top,                                                                                                     // 318
		bottom: offset.top + el.outerHeight()                                                                                // 319
	};                                                                                                                    // 320
}                                                                                                                      // 321
                                                                                                                       // 322
                                                                                                                       // 323
// Queries the area within the margin/border/scrollbars of a jQuery element. Does not go within the padding.           // 324
// Returns a rectangle with absolute coordinates: left, right (exclusive), top, bottom (exclusive).                    // 325
// NOTE: should use clientLeft/clientTop, but very unreliable cross-browser.                                           // 326
function getClientRect(el) {                                                                                           // 327
	var offset = el.offset();                                                                                             // 328
	var scrollbarWidths = getScrollbarWidths(el);                                                                         // 329
	var left = offset.left + getCssFloat(el, 'border-left-width') + scrollbarWidths.left;                                 // 330
	var top = offset.top + getCssFloat(el, 'border-top-width') + scrollbarWidths.top;                                     // 331
                                                                                                                       // 332
	return {                                                                                                              // 333
		left: left,                                                                                                          // 334
		right: left + el[0].clientWidth, // clientWidth includes padding but NOT scrollbars                                  // 335
		top: top,                                                                                                            // 336
		bottom: top + el[0].clientHeight // clientHeight includes padding but NOT scrollbars                                 // 337
	};                                                                                                                    // 338
}                                                                                                                      // 339
                                                                                                                       // 340
                                                                                                                       // 341
// Queries the area within the margin/border/padding of a jQuery element. Assumed not to have scrollbars.              // 342
// Returns a rectangle with absolute coordinates: left, right (exclusive), top, bottom (exclusive).                    // 343
function getContentRect(el) {                                                                                          // 344
	var offset = el.offset(); // just outside of border, margin not included                                              // 345
	var left = offset.left + getCssFloat(el, 'border-left-width') + getCssFloat(el, 'padding-left');                      // 346
	var top = offset.top + getCssFloat(el, 'border-top-width') + getCssFloat(el, 'padding-top');                          // 347
                                                                                                                       // 348
	return {                                                                                                              // 349
		left: left,                                                                                                          // 350
		right: left + el.width(),                                                                                            // 351
		top: top,                                                                                                            // 352
		bottom: top + el.height()                                                                                            // 353
	};                                                                                                                    // 354
}                                                                                                                      // 355
                                                                                                                       // 356
                                                                                                                       // 357
// Returns the computed left/right/top/bottom scrollbar widths for the given jQuery element.                           // 358
// NOTE: should use clientLeft/clientTop, but very unreliable cross-browser.                                           // 359
function getScrollbarWidths(el) {                                                                                      // 360
	var leftRightWidth = el.innerWidth() - el[0].clientWidth; // the paddings cancel out, leaving the scrollbars          // 361
	var widths = {                                                                                                        // 362
		left: 0,                                                                                                             // 363
		right: 0,                                                                                                            // 364
		top: 0,                                                                                                              // 365
		bottom: el.innerHeight() - el[0].clientHeight // the paddings cancel out, leaving the bottom scrollbar               // 366
	};                                                                                                                    // 367
                                                                                                                       // 368
	if (getIsLeftRtlScrollbars() && el.css('direction') == 'rtl') { // is the scrollbar on the left side?                 // 369
		widths.left = leftRightWidth;                                                                                        // 370
	}                                                                                                                     // 371
	else {                                                                                                                // 372
		widths.right = leftRightWidth;                                                                                       // 373
	}                                                                                                                     // 374
                                                                                                                       // 375
	return widths;                                                                                                        // 376
}                                                                                                                      // 377
                                                                                                                       // 378
                                                                                                                       // 379
// Logic for determining if, when the element is right-to-left, the scrollbar appears on the left side                 // 380
                                                                                                                       // 381
var _isLeftRtlScrollbars = null;                                                                                       // 382
                                                                                                                       // 383
function getIsLeftRtlScrollbars() { // responsible for caching the computation                                         // 384
	if (_isLeftRtlScrollbars === null) {                                                                                  // 385
		_isLeftRtlScrollbars = computeIsLeftRtlScrollbars();                                                                 // 386
	}                                                                                                                     // 387
	return _isLeftRtlScrollbars;                                                                                          // 388
}                                                                                                                      // 389
                                                                                                                       // 390
function computeIsLeftRtlScrollbars() { // creates an offscreen test element, then removes it                          // 391
	var el = $('<div><div/></div>')                                                                                       // 392
		.css({                                                                                                               // 393
			position: 'absolute',                                                                                               // 394
			top: -1000,                                                                                                         // 395
			left: 0,                                                                                                            // 396
			border: 0,                                                                                                          // 397
			padding: 0,                                                                                                         // 398
			overflow: 'scroll',                                                                                                 // 399
			direction: 'rtl'                                                                                                    // 400
		})                                                                                                                   // 401
		.appendTo('body');                                                                                                   // 402
	var innerEl = el.children();                                                                                          // 403
	var res = innerEl.offset().left > el.offset().left; // is the inner div shifted to accommodate a left scrollbar?      // 404
	el.remove();                                                                                                          // 405
	return res;                                                                                                           // 406
}                                                                                                                      // 407
                                                                                                                       // 408
                                                                                                                       // 409
// Retrieves a jQuery element's computed CSS value as a floating-point number.                                         // 410
// If the queried value is non-numeric (ex: IE can return "medium" for border width), will just return zero.           // 411
function getCssFloat(el, prop) {                                                                                       // 412
	return parseFloat(el.css(prop)) || 0;                                                                                 // 413
}                                                                                                                      // 414
                                                                                                                       // 415
                                                                                                                       // 416
// Returns a boolean whether this was a left mouse click and no ctrl key (which means right click on Mac)              // 417
function isPrimaryMouseButton(ev) {                                                                                    // 418
	return ev.which == 1 && !ev.ctrlKey;                                                                                  // 419
}                                                                                                                      // 420
                                                                                                                       // 421
                                                                                                                       // 422
/* Geometry                                                                                                            // 423
----------------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 425
FC.intersectRects = intersectRects;                                                                                    // 426
                                                                                                                       // 427
// Returns a new rectangle that is the intersection of the two rectangles. If they don't intersect, returns false      // 428
function intersectRects(rect1, rect2) {                                                                                // 429
	var res = {                                                                                                           // 430
		left: Math.max(rect1.left, rect2.left),                                                                              // 431
		right: Math.min(rect1.right, rect2.right),                                                                           // 432
		top: Math.max(rect1.top, rect2.top),                                                                                 // 433
		bottom: Math.min(rect1.bottom, rect2.bottom)                                                                         // 434
	};                                                                                                                    // 435
                                                                                                                       // 436
	if (res.left < res.right && res.top < res.bottom) {                                                                   // 437
		return res;                                                                                                          // 438
	}                                                                                                                     // 439
	return false;                                                                                                         // 440
}                                                                                                                      // 441
                                                                                                                       // 442
                                                                                                                       // 443
// Returns a new point that will have been moved to reside within the given rectangle                                  // 444
function constrainPoint(point, rect) {                                                                                 // 445
	return {                                                                                                              // 446
		left: Math.min(Math.max(point.left, rect.left), rect.right),                                                         // 447
		top: Math.min(Math.max(point.top, rect.top), rect.bottom)                                                            // 448
	};                                                                                                                    // 449
}                                                                                                                      // 450
                                                                                                                       // 451
                                                                                                                       // 452
// Returns a point that is the center of the given rectangle                                                           // 453
function getRectCenter(rect) {                                                                                         // 454
	return {                                                                                                              // 455
		left: (rect.left + rect.right) / 2,                                                                                  // 456
		top: (rect.top + rect.bottom) / 2                                                                                    // 457
	};                                                                                                                    // 458
}                                                                                                                      // 459
                                                                                                                       // 460
                                                                                                                       // 461
// Subtracts point2's coordinates from point1's coordinates, returning a delta                                         // 462
function diffPoints(point1, point2) {                                                                                  // 463
	return {                                                                                                              // 464
		left: point1.left - point2.left,                                                                                     // 465
		top: point1.top - point2.top                                                                                         // 466
	};                                                                                                                    // 467
}                                                                                                                      // 468
                                                                                                                       // 469
                                                                                                                       // 470
/* Object Ordering by Field                                                                                            // 471
----------------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 473
FC.parseFieldSpecs = parseFieldSpecs;                                                                                  // 474
FC.compareByFieldSpecs = compareByFieldSpecs;                                                                          // 475
FC.compareByFieldSpec = compareByFieldSpec;                                                                            // 476
FC.flexibleCompare = flexibleCompare;                                                                                  // 477
                                                                                                                       // 478
                                                                                                                       // 479
function parseFieldSpecs(input) {                                                                                      // 480
	var specs = [];                                                                                                       // 481
	var tokens = [];                                                                                                      // 482
	var i, token;                                                                                                         // 483
                                                                                                                       // 484
	if (typeof input === 'string') {                                                                                      // 485
		tokens = input.split(/\s*,\s*/);                                                                                     // 486
	}                                                                                                                     // 487
	else if (typeof input === 'function') {                                                                               // 488
		tokens = [ input ];                                                                                                  // 489
	}                                                                                                                     // 490
	else if ($.isArray(input)) {                                                                                          // 491
		tokens = input;                                                                                                      // 492
	}                                                                                                                     // 493
                                                                                                                       // 494
	for (i = 0; i < tokens.length; i++) {                                                                                 // 495
		token = tokens[i];                                                                                                   // 496
                                                                                                                       // 497
		if (typeof token === 'string') {                                                                                     // 498
			specs.push(                                                                                                         // 499
				token.charAt(0) == '-' ?                                                                                           // 500
					{ field: token.substring(1), order: -1 } :                                                                        // 501
					{ field: token, order: 1 }                                                                                        // 502
			);                                                                                                                  // 503
		}                                                                                                                    // 504
		else if (typeof token === 'function') {                                                                              // 505
			specs.push({ func: token });                                                                                        // 506
		}                                                                                                                    // 507
	}                                                                                                                     // 508
                                                                                                                       // 509
	return specs;                                                                                                         // 510
}                                                                                                                      // 511
                                                                                                                       // 512
                                                                                                                       // 513
function compareByFieldSpecs(obj1, obj2, fieldSpecs) {                                                                 // 514
	var i;                                                                                                                // 515
	var cmp;                                                                                                              // 516
                                                                                                                       // 517
	for (i = 0; i < fieldSpecs.length; i++) {                                                                             // 518
		cmp = compareByFieldSpec(obj1, obj2, fieldSpecs[i]);                                                                 // 519
		if (cmp) {                                                                                                           // 520
			return cmp;                                                                                                         // 521
		}                                                                                                                    // 522
	}                                                                                                                     // 523
                                                                                                                       // 524
	return 0;                                                                                                             // 525
}                                                                                                                      // 526
                                                                                                                       // 527
                                                                                                                       // 528
function compareByFieldSpec(obj1, obj2, fieldSpec) {                                                                   // 529
	if (fieldSpec.func) {                                                                                                 // 530
		return fieldSpec.func(obj1, obj2);                                                                                   // 531
	}                                                                                                                     // 532
	return flexibleCompare(obj1[fieldSpec.field], obj2[fieldSpec.field]) *                                                // 533
		(fieldSpec.order || 1);                                                                                              // 534
}                                                                                                                      // 535
                                                                                                                       // 536
                                                                                                                       // 537
function flexibleCompare(a, b) {                                                                                       // 538
	if (!a && !b) {                                                                                                       // 539
		return 0;                                                                                                            // 540
	}                                                                                                                     // 541
	if (b == null) {                                                                                                      // 542
		return -1;                                                                                                           // 543
	}                                                                                                                     // 544
	if (a == null) {                                                                                                      // 545
		return 1;                                                                                                            // 546
	}                                                                                                                     // 547
	if ($.type(a) === 'string' || $.type(b) === 'string') {                                                               // 548
		return String(a).localeCompare(String(b));                                                                           // 549
	}                                                                                                                     // 550
	return a - b;                                                                                                         // 551
}                                                                                                                      // 552
                                                                                                                       // 553
                                                                                                                       // 554
/* FullCalendar-specific Misc Utilities                                                                                // 555
----------------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 557
                                                                                                                       // 558
// Computes the intersection of the two ranges. Returns undefined if no intersection.                                  // 559
// Expects all dates to be normalized to the same timezone beforehand.                                                 // 560
// TODO: move to date section?                                                                                         // 561
function intersectRanges(subjectRange, constraintRange) {                                                              // 562
	var subjectStart = subjectRange.start;                                                                                // 563
	var subjectEnd = subjectRange.end;                                                                                    // 564
	var constraintStart = constraintRange.start;                                                                          // 565
	var constraintEnd = constraintRange.end;                                                                              // 566
	var segStart, segEnd;                                                                                                 // 567
	var isStart, isEnd;                                                                                                   // 568
                                                                                                                       // 569
	if (subjectEnd > constraintStart && subjectStart < constraintEnd) { // in bounds at all?                              // 570
                                                                                                                       // 571
		if (subjectStart >= constraintStart) {                                                                               // 572
			segStart = subjectStart.clone();                                                                                    // 573
			isStart = true;                                                                                                     // 574
		}                                                                                                                    // 575
		else {                                                                                                               // 576
			segStart = constraintStart.clone();                                                                                 // 577
			isStart =  false;                                                                                                   // 578
		}                                                                                                                    // 579
                                                                                                                       // 580
		if (subjectEnd <= constraintEnd) {                                                                                   // 581
			segEnd = subjectEnd.clone();                                                                                        // 582
			isEnd = true;                                                                                                       // 583
		}                                                                                                                    // 584
		else {                                                                                                               // 585
			segEnd = constraintEnd.clone();                                                                                     // 586
			isEnd = false;                                                                                                      // 587
		}                                                                                                                    // 588
                                                                                                                       // 589
		return {                                                                                                             // 590
			start: segStart,                                                                                                    // 591
			end: segEnd,                                                                                                        // 592
			isStart: isStart,                                                                                                   // 593
			isEnd: isEnd                                                                                                        // 594
		};                                                                                                                   // 595
	}                                                                                                                     // 596
}                                                                                                                      // 597
                                                                                                                       // 598
                                                                                                                       // 599
/* Date Utilities                                                                                                      // 600
----------------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 602
FC.computeIntervalUnit = computeIntervalUnit;                                                                          // 603
FC.divideRangeByDuration = divideRangeByDuration;                                                                      // 604
FC.divideDurationByDuration = divideDurationByDuration;                                                                // 605
FC.multiplyDuration = multiplyDuration;                                                                                // 606
FC.durationHasTime = durationHasTime;                                                                                  // 607
                                                                                                                       // 608
var dayIDs = [ 'sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat' ];                                                      // 609
var intervalUnits = [ 'year', 'month', 'week', 'day', 'hour', 'minute', 'second', 'millisecond' ];                     // 610
                                                                                                                       // 611
                                                                                                                       // 612
// Diffs the two moments into a Duration where full-days are recorded first, then the remaining time.                  // 613
// Moments will have their timezones normalized.                                                                       // 614
function diffDayTime(a, b) {                                                                                           // 615
	return moment.duration({                                                                                              // 616
		days: a.clone().stripTime().diff(b.clone().stripTime(), 'days'),                                                     // 617
		ms: a.time() - b.time() // time-of-day from day start. disregards timezone                                           // 618
	});                                                                                                                   // 619
}                                                                                                                      // 620
                                                                                                                       // 621
                                                                                                                       // 622
// Diffs the two moments via their start-of-day (regardless of timezone). Produces whole-day durations.                // 623
function diffDay(a, b) {                                                                                               // 624
	return moment.duration({                                                                                              // 625
		days: a.clone().stripTime().diff(b.clone().stripTime(), 'days')                                                      // 626
	});                                                                                                                   // 627
}                                                                                                                      // 628
                                                                                                                       // 629
                                                                                                                       // 630
// Diffs two moments, producing a duration, made of a whole-unit-increment of the given unit. Uses rounding.           // 631
function diffByUnit(a, b, unit) {                                                                                      // 632
	return moment.duration(                                                                                               // 633
		Math.round(a.diff(b, unit, true)), // returnFloat=true                                                               // 634
		unit                                                                                                                 // 635
	);                                                                                                                    // 636
}                                                                                                                      // 637
                                                                                                                       // 638
                                                                                                                       // 639
// Computes the unit name of the largest whole-unit period of time.                                                    // 640
// For example, 48 hours will be "days" whereas 49 hours will be "hours".                                              // 641
// Accepts start/end, a range object, or an original duration object.                                                  // 642
function computeIntervalUnit(start, end) {                                                                             // 643
	var i, unit;                                                                                                          // 644
	var val;                                                                                                              // 645
                                                                                                                       // 646
	for (i = 0; i < intervalUnits.length; i++) {                                                                          // 647
		unit = intervalUnits[i];                                                                                             // 648
		val = computeRangeAs(unit, start, end);                                                                              // 649
                                                                                                                       // 650
		if (val >= 1 && isInt(val)) {                                                                                        // 651
			break;                                                                                                              // 652
		}                                                                                                                    // 653
	}                                                                                                                     // 654
                                                                                                                       // 655
	return unit; // will be "milliseconds" if nothing else matches                                                        // 656
}                                                                                                                      // 657
                                                                                                                       // 658
                                                                                                                       // 659
// Computes the number of units (like "hours") in the given range.                                                     // 660
// Range can be a {start,end} object, separate start/end args, or a Duration.                                          // 661
// Results are based on Moment's .as() and .diff() methods, so results can depend on internal handling                 // 662
// of month-diffing logic (which tends to vary from version to version).                                               // 663
function computeRangeAs(unit, start, end) {                                                                            // 664
                                                                                                                       // 665
	if (end != null) { // given start, end                                                                                // 666
		return end.diff(start, unit, true);                                                                                  // 667
	}                                                                                                                     // 668
	else if (moment.isDuration(start)) { // given duration                                                                // 669
		return start.as(unit);                                                                                               // 670
	}                                                                                                                     // 671
	else { // given { start, end } range object                                                                           // 672
		return start.end.diff(start.start, unit, true);                                                                      // 673
	}                                                                                                                     // 674
}                                                                                                                      // 675
                                                                                                                       // 676
                                                                                                                       // 677
// Intelligently divides a range (specified by a start/end params) by a duration                                       // 678
function divideRangeByDuration(start, end, dur) {                                                                      // 679
	var months;                                                                                                           // 680
                                                                                                                       // 681
	if (durationHasTime(dur)) {                                                                                           // 682
		return (end - start) / dur;                                                                                          // 683
	}                                                                                                                     // 684
	months = dur.asMonths();                                                                                              // 685
	if (Math.abs(months) >= 1 && isInt(months)) {                                                                         // 686
		return end.diff(start, 'months', true) / months;                                                                     // 687
	}                                                                                                                     // 688
	return end.diff(start, 'days', true) / dur.asDays();                                                                  // 689
}                                                                                                                      // 690
                                                                                                                       // 691
                                                                                                                       // 692
// Intelligently divides one duration by another                                                                       // 693
function divideDurationByDuration(dur1, dur2) {                                                                        // 694
	var months1, months2;                                                                                                 // 695
                                                                                                                       // 696
	if (durationHasTime(dur1) || durationHasTime(dur2)) {                                                                 // 697
		return dur1 / dur2;                                                                                                  // 698
	}                                                                                                                     // 699
	months1 = dur1.asMonths();                                                                                            // 700
	months2 = dur2.asMonths();                                                                                            // 701
	if (                                                                                                                  // 702
		Math.abs(months1) >= 1 && isInt(months1) &&                                                                          // 703
		Math.abs(months2) >= 1 && isInt(months2)                                                                             // 704
	) {                                                                                                                   // 705
		return months1 / months2;                                                                                            // 706
	}                                                                                                                     // 707
	return dur1.asDays() / dur2.asDays();                                                                                 // 708
}                                                                                                                      // 709
                                                                                                                       // 710
                                                                                                                       // 711
// Intelligently multiplies a duration by a number                                                                     // 712
function multiplyDuration(dur, n) {                                                                                    // 713
	var months;                                                                                                           // 714
                                                                                                                       // 715
	if (durationHasTime(dur)) {                                                                                           // 716
		return moment.duration(dur * n);                                                                                     // 717
	}                                                                                                                     // 718
	months = dur.asMonths();                                                                                              // 719
	if (Math.abs(months) >= 1 && isInt(months)) {                                                                         // 720
		return moment.duration({ months: months * n });                                                                      // 721
	}                                                                                                                     // 722
	return moment.duration({ days: dur.asDays() * n });                                                                   // 723
}                                                                                                                      // 724
                                                                                                                       // 725
                                                                                                                       // 726
// Returns a boolean about whether the given duration has any time parts (hours/minutes/seconds/ms)                    // 727
function durationHasTime(dur) {                                                                                        // 728
	return Boolean(dur.hours() || dur.minutes() || dur.seconds() || dur.milliseconds());                                  // 729
}                                                                                                                      // 730
                                                                                                                       // 731
                                                                                                                       // 732
function isNativeDate(input) {                                                                                         // 733
	return  Object.prototype.toString.call(input) === '[object Date]' || input instanceof Date;                           // 734
}                                                                                                                      // 735
                                                                                                                       // 736
                                                                                                                       // 737
// Returns a boolean about whether the given input is a time string, like "06:40:00" or "06:00"                        // 738
function isTimeString(str) {                                                                                           // 739
	return /^\d+\:\d+(?:\:\d+\.?(?:\d{3})?)?$/.test(str);                                                                 // 740
}                                                                                                                      // 741
                                                                                                                       // 742
                                                                                                                       // 743
/* Logging and Debug                                                                                                   // 744
----------------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 746
FC.log = function() {                                                                                                  // 747
	var console = window.console;                                                                                         // 748
                                                                                                                       // 749
	if (console && console.log) {                                                                                         // 750
		return console.log.apply(console, arguments);                                                                        // 751
	}                                                                                                                     // 752
};                                                                                                                     // 753
                                                                                                                       // 754
FC.warn = function() {                                                                                                 // 755
	var console = window.console;                                                                                         // 756
                                                                                                                       // 757
	if (console && console.warn) {                                                                                        // 758
		return console.warn.apply(console, arguments);                                                                       // 759
	}                                                                                                                     // 760
	else {                                                                                                                // 761
		return FC.log.apply(FC, arguments);                                                                                  // 762
	}                                                                                                                     // 763
};                                                                                                                     // 764
                                                                                                                       // 765
                                                                                                                       // 766
/* General Utilities                                                                                                   // 767
----------------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 769
var hasOwnPropMethod = {}.hasOwnProperty;                                                                              // 770
                                                                                                                       // 771
                                                                                                                       // 772
// Merges an array of objects into a single object.                                                                    // 773
// The second argument allows for an array of property names who's object values will be merged together.              // 774
function mergeProps(propObjs, complexProps) {                                                                          // 775
	var dest = {};                                                                                                        // 776
	var i, name;                                                                                                          // 777
	var complexObjs;                                                                                                      // 778
	var j, val;                                                                                                           // 779
	var props;                                                                                                            // 780
                                                                                                                       // 781
	if (complexProps) {                                                                                                   // 782
		for (i = 0; i < complexProps.length; i++) {                                                                          // 783
			name = complexProps[i];                                                                                             // 784
			complexObjs = [];                                                                                                   // 785
                                                                                                                       // 786
			// collect the trailing object values, stopping when a non-object is discovered                                     // 787
			for (j = propObjs.length - 1; j >= 0; j--) {                                                                        // 788
				val = propObjs[j][name];                                                                                           // 789
                                                                                                                       // 790
				if (typeof val === 'object') {                                                                                     // 791
					complexObjs.unshift(val);                                                                                         // 792
				}                                                                                                                  // 793
				else if (val !== undefined) {                                                                                      // 794
					dest[name] = val; // if there were no objects, this value will be used                                            // 795
					break;                                                                                                            // 796
				}                                                                                                                  // 797
			}                                                                                                                   // 798
                                                                                                                       // 799
			// if the trailing values were objects, use the merged value                                                        // 800
			if (complexObjs.length) {                                                                                           // 801
				dest[name] = mergeProps(complexObjs);                                                                              // 802
			}                                                                                                                   // 803
		}                                                                                                                    // 804
	}                                                                                                                     // 805
                                                                                                                       // 806
	// copy values into the destination, going from last to first                                                         // 807
	for (i = propObjs.length - 1; i >= 0; i--) {                                                                          // 808
		props = propObjs[i];                                                                                                 // 809
                                                                                                                       // 810
		for (name in props) {                                                                                                // 811
			if (!(name in dest)) { // if already assigned by previous props or complex props, don't reassign                    // 812
				dest[name] = props[name];                                                                                          // 813
			}                                                                                                                   // 814
		}                                                                                                                    // 815
	}                                                                                                                     // 816
                                                                                                                       // 817
	return dest;                                                                                                          // 818
}                                                                                                                      // 819
                                                                                                                       // 820
                                                                                                                       // 821
// Create an object that has the given prototype. Just like Object.create                                              // 822
function createObject(proto) {                                                                                         // 823
	var f = function() {};                                                                                                // 824
	f.prototype = proto;                                                                                                  // 825
	return new f();                                                                                                       // 826
}                                                                                                                      // 827
                                                                                                                       // 828
                                                                                                                       // 829
function copyOwnProps(src, dest) {                                                                                     // 830
	for (var name in src) {                                                                                               // 831
		if (hasOwnProp(src, name)) {                                                                                         // 832
			dest[name] = src[name];                                                                                             // 833
		}                                                                                                                    // 834
	}                                                                                                                     // 835
}                                                                                                                      // 836
                                                                                                                       // 837
                                                                                                                       // 838
// Copies over certain methods with the same names as Object.prototype methods. Overcomes an IE<=8 bug:                // 839
// https://developer.mozilla.org/en-US/docs/ECMAScript_DontEnum_attribute#JScript_DontEnum_Bug                         // 840
function copyNativeMethods(src, dest) {                                                                                // 841
	var names = [ 'constructor', 'toString', 'valueOf' ];                                                                 // 842
	var i, name;                                                                                                          // 843
                                                                                                                       // 844
	for (i = 0; i < names.length; i++) {                                                                                  // 845
		name = names[i];                                                                                                     // 846
                                                                                                                       // 847
		if (src[name] !== Object.prototype[name]) {                                                                          // 848
			dest[name] = src[name];                                                                                             // 849
		}                                                                                                                    // 850
	}                                                                                                                     // 851
}                                                                                                                      // 852
                                                                                                                       // 853
                                                                                                                       // 854
function hasOwnProp(obj, name) {                                                                                       // 855
	return hasOwnPropMethod.call(obj, name);                                                                              // 856
}                                                                                                                      // 857
                                                                                                                       // 858
                                                                                                                       // 859
// Is the given value a non-object non-function value?                                                                 // 860
function isAtomic(val) {                                                                                               // 861
	return /undefined|null|boolean|number|string/.test($.type(val));                                                      // 862
}                                                                                                                      // 863
                                                                                                                       // 864
                                                                                                                       // 865
function applyAll(functions, thisObj, args) {                                                                          // 866
	if ($.isFunction(functions)) {                                                                                        // 867
		functions = [ functions ];                                                                                           // 868
	}                                                                                                                     // 869
	if (functions) {                                                                                                      // 870
		var i;                                                                                                               // 871
		var ret;                                                                                                             // 872
		for (i=0; i<functions.length; i++) {                                                                                 // 873
			ret = functions[i].apply(thisObj, args) || ret;                                                                     // 874
		}                                                                                                                    // 875
		return ret;                                                                                                          // 876
	}                                                                                                                     // 877
}                                                                                                                      // 878
                                                                                                                       // 879
                                                                                                                       // 880
function firstDefined() {                                                                                              // 881
	for (var i=0; i<arguments.length; i++) {                                                                              // 882
		if (arguments[i] !== undefined) {                                                                                    // 883
			return arguments[i];                                                                                                // 884
		}                                                                                                                    // 885
	}                                                                                                                     // 886
}                                                                                                                      // 887
                                                                                                                       // 888
                                                                                                                       // 889
function htmlEscape(s) {                                                                                               // 890
	return (s + '').replace(/&/g, '&amp;')                                                                                // 891
		.replace(/</g, '&lt;')                                                                                               // 892
		.replace(/>/g, '&gt;')                                                                                               // 893
		.replace(/'/g, '&#039;')                                                                                             // 894
		.replace(/"/g, '&quot;')                                                                                             // 895
		.replace(/\n/g, '<br />');                                                                                           // 896
}                                                                                                                      // 897
                                                                                                                       // 898
                                                                                                                       // 899
function stripHtmlEntities(text) {                                                                                     // 900
	return text.replace(/&.*?;/g, '');                                                                                    // 901
}                                                                                                                      // 902
                                                                                                                       // 903
                                                                                                                       // 904
// Given a hash of CSS properties, returns a string of CSS.                                                            // 905
// Uses property names as-is (no camel-case conversion). Will not make statements for null/undefined values.           // 906
function cssToStr(cssProps) {                                                                                          // 907
	var statements = [];                                                                                                  // 908
                                                                                                                       // 909
	$.each(cssProps, function(name, val) {                                                                                // 910
		if (val != null) {                                                                                                   // 911
			statements.push(name + ':' + val);                                                                                  // 912
		}                                                                                                                    // 913
	});                                                                                                                   // 914
                                                                                                                       // 915
	return statements.join(';');                                                                                          // 916
}                                                                                                                      // 917
                                                                                                                       // 918
                                                                                                                       // 919
function capitaliseFirstLetter(str) {                                                                                  // 920
	return str.charAt(0).toUpperCase() + str.slice(1);                                                                    // 921
}                                                                                                                      // 922
                                                                                                                       // 923
                                                                                                                       // 924
function compareNumbers(a, b) { // for .sort()                                                                         // 925
	return a - b;                                                                                                         // 926
}                                                                                                                      // 927
                                                                                                                       // 928
                                                                                                                       // 929
function isInt(n) {                                                                                                    // 930
	return n % 1 === 0;                                                                                                   // 931
}                                                                                                                      // 932
                                                                                                                       // 933
                                                                                                                       // 934
// Returns a method bound to the given object context.                                                                 // 935
// Just like one of the jQuery.proxy signatures, but without the undesired behavior of treating the same method with   // 936
// different contexts as identical when binding/unbinding events.                                                      // 937
function proxy(obj, methodName) {                                                                                      // 938
	var method = obj[methodName];                                                                                         // 939
                                                                                                                       // 940
	return function() {                                                                                                   // 941
		return method.apply(obj, arguments);                                                                                 // 942
	};                                                                                                                    // 943
}                                                                                                                      // 944
                                                                                                                       // 945
                                                                                                                       // 946
// Returns a function, that, as long as it continues to be invoked, will not                                           // 947
// be triggered. The function will be called after it stops being called for                                           // 948
// N milliseconds.                                                                                                     // 949
// https://github.com/jashkenas/underscore/blob/1.6.0/underscore.js#L714                                               // 950
function debounce(func, wait) {                                                                                        // 951
	var timeoutId;                                                                                                        // 952
	var args;                                                                                                             // 953
	var context;                                                                                                          // 954
	var timestamp; // of most recent call                                                                                 // 955
	var later = function() {                                                                                              // 956
		var last = +new Date() - timestamp;                                                                                  // 957
		if (last < wait && last > 0) {                                                                                       // 958
			timeoutId = setTimeout(later, wait - last);                                                                         // 959
		}                                                                                                                    // 960
		else {                                                                                                               // 961
			timeoutId = null;                                                                                                   // 962
			func.apply(context, args);                                                                                          // 963
			if (!timeoutId) {                                                                                                   // 964
				context = args = null;                                                                                             // 965
			}                                                                                                                   // 966
		}                                                                                                                    // 967
	};                                                                                                                    // 968
                                                                                                                       // 969
	return function() {                                                                                                   // 970
		context = this;                                                                                                      // 971
		args = arguments;                                                                                                    // 972
		timestamp = +new Date();                                                                                             // 973
		if (!timeoutId) {                                                                                                    // 974
			timeoutId = setTimeout(later, wait);                                                                                // 975
		}                                                                                                                    // 976
	};                                                                                                                    // 977
}                                                                                                                      // 978
                                                                                                                       // 979
;;                                                                                                                     // 980
                                                                                                                       // 981
var ambigDateOfMonthRegex = /^\s*\d{4}-\d\d$/;                                                                         // 982
var ambigTimeOrZoneRegex =                                                                                             // 983
	/^\s*\d{4}-(?:(\d\d-\d\d)|(W\d\d$)|(W\d\d-\d)|(\d\d\d))((T| )(\d\d(:\d\d(:\d\d(\.\d+)?)?)?)?)?$/;                     // 984
var newMomentProto = moment.fn; // where we will attach our new methods                                                // 985
var oldMomentProto = $.extend({}, newMomentProto); // copy of original moment methods                                  // 986
var allowValueOptimization;                                                                                            // 987
var setUTCValues; // function defined below                                                                            // 988
var setLocalValues; // function defined below                                                                          // 989
                                                                                                                       // 990
                                                                                                                       // 991
// Creating                                                                                                            // 992
// -------------------------------------------------------------------------------------------------                   // 993
                                                                                                                       // 994
// Creates a new moment, similar to the vanilla moment(...) constructor, but with                                      // 995
// extra features (ambiguous time, enhanced formatting). When given an existing moment,                                // 996
// it will function as a clone (and retain the zone of the moment). Anything else will                                 // 997
// result in a moment in the local zone.                                                                               // 998
FC.moment = function() {                                                                                               // 999
	return makeMoment(arguments);                                                                                         // 1000
};                                                                                                                     // 1001
                                                                                                                       // 1002
// Sames as FC.moment, but forces the resulting moment to be in the UTC timezone.                                      // 1003
FC.moment.utc = function() {                                                                                           // 1004
	var mom = makeMoment(arguments, true);                                                                                // 1005
                                                                                                                       // 1006
	// Force it into UTC because makeMoment doesn't guarantee it                                                          // 1007
	// (if given a pre-existing moment for example)                                                                       // 1008
	if (mom.hasTime()) { // don't give ambiguously-timed moments a UTC zone                                               // 1009
		mom.utc();                                                                                                           // 1010
	}                                                                                                                     // 1011
                                                                                                                       // 1012
	return mom;                                                                                                           // 1013
};                                                                                                                     // 1014
                                                                                                                       // 1015
// Same as FC.moment, but when given an ISO8601 string, the timezone offset is preserved.                              // 1016
// ISO8601 strings with no timezone offset will become ambiguously zoned.                                              // 1017
FC.moment.parseZone = function() {                                                                                     // 1018
	return makeMoment(arguments, true, true);                                                                             // 1019
};                                                                                                                     // 1020
                                                                                                                       // 1021
// Builds an enhanced moment from args. When given an existing moment, it clones. When given a                         // 1022
// native Date, or called with no arguments (the current time), the resulting moment will be local.                    // 1023
// Anything else needs to be "parsed" (a string or an array), and will be affected by:                                 // 1024
//    parseAsUTC - if there is no zone information, should we parse the input in UTC?                                  // 1025
//    parseZone - if there is zone information, should we force the zone of the moment?                                // 1026
function makeMoment(args, parseAsUTC, parseZone) {                                                                     // 1027
	var input = args[0];                                                                                                  // 1028
	var isSingleString = args.length == 1 && typeof input === 'string';                                                   // 1029
	var isAmbigTime;                                                                                                      // 1030
	var isAmbigZone;                                                                                                      // 1031
	var ambigMatch;                                                                                                       // 1032
	var mom;                                                                                                              // 1033
                                                                                                                       // 1034
	if (moment.isMoment(input)) {                                                                                         // 1035
		mom = moment.apply(null, args); // clone it                                                                          // 1036
		transferAmbigs(input, mom); // the ambig flags weren't transfered with the clone                                     // 1037
	}                                                                                                                     // 1038
	else if (isNativeDate(input) || input === undefined) {                                                                // 1039
		mom = moment.apply(null, args); // will be local                                                                     // 1040
	}                                                                                                                     // 1041
	else { // "parsing" is required                                                                                       // 1042
		isAmbigTime = false;                                                                                                 // 1043
		isAmbigZone = false;                                                                                                 // 1044
                                                                                                                       // 1045
		if (isSingleString) {                                                                                                // 1046
			if (ambigDateOfMonthRegex.test(input)) {                                                                            // 1047
				// accept strings like '2014-05', but convert to the first of the month                                            // 1048
				input += '-01';                                                                                                    // 1049
				args = [ input ]; // for when we pass it on to moment's constructor                                                // 1050
				isAmbigTime = true;                                                                                                // 1051
				isAmbigZone = true;                                                                                                // 1052
			}                                                                                                                   // 1053
			else if ((ambigMatch = ambigTimeOrZoneRegex.exec(input))) {                                                         // 1054
				isAmbigTime = !ambigMatch[5]; // no time part?                                                                     // 1055
				isAmbigZone = true;                                                                                                // 1056
			}                                                                                                                   // 1057
		}                                                                                                                    // 1058
		else if ($.isArray(input)) {                                                                                         // 1059
			// arrays have no timezone information, so assume ambiguous zone                                                    // 1060
			isAmbigZone = true;                                                                                                 // 1061
		}                                                                                                                    // 1062
		// otherwise, probably a string with a format                                                                        // 1063
                                                                                                                       // 1064
		if (parseAsUTC || isAmbigTime) {                                                                                     // 1065
			mom = moment.utc.apply(moment, args);                                                                               // 1066
		}                                                                                                                    // 1067
		else {                                                                                                               // 1068
			mom = moment.apply(null, args);                                                                                     // 1069
		}                                                                                                                    // 1070
                                                                                                                       // 1071
		if (isAmbigTime) {                                                                                                   // 1072
			mom._ambigTime = true;                                                                                              // 1073
			mom._ambigZone = true; // ambiguous time always means ambiguous zone                                                // 1074
		}                                                                                                                    // 1075
		else if (parseZone) { // let's record the inputted zone somehow                                                      // 1076
			if (isAmbigZone) {                                                                                                  // 1077
				mom._ambigZone = true;                                                                                             // 1078
			}                                                                                                                   // 1079
			else if (isSingleString) {                                                                                          // 1080
				if (mom.utcOffset) {                                                                                               // 1081
					mom.utcOffset(input); // if not a valid zone, will assign UTC                                                     // 1082
				}                                                                                                                  // 1083
				else {                                                                                                             // 1084
					mom.zone(input); // for moment-pre-2.9                                                                            // 1085
				}                                                                                                                  // 1086
			}                                                                                                                   // 1087
		}                                                                                                                    // 1088
	}                                                                                                                     // 1089
                                                                                                                       // 1090
	mom._fullCalendar = true; // flag for extended functionality                                                          // 1091
                                                                                                                       // 1092
	return mom;                                                                                                           // 1093
}                                                                                                                      // 1094
                                                                                                                       // 1095
                                                                                                                       // 1096
// A clone method that works with the flags related to our enhanced functionality.                                     // 1097
// In the future, use moment.momentProperties                                                                          // 1098
newMomentProto.clone = function() {                                                                                    // 1099
	var mom = oldMomentProto.clone.apply(this, arguments);                                                                // 1100
                                                                                                                       // 1101
	// these flags weren't transfered with the clone                                                                      // 1102
	transferAmbigs(this, mom);                                                                                            // 1103
	if (this._fullCalendar) {                                                                                             // 1104
		mom._fullCalendar = true;                                                                                            // 1105
	}                                                                                                                     // 1106
                                                                                                                       // 1107
	return mom;                                                                                                           // 1108
};                                                                                                                     // 1109
                                                                                                                       // 1110
                                                                                                                       // 1111
// Week Number                                                                                                         // 1112
// -------------------------------------------------------------------------------------------------                   // 1113
                                                                                                                       // 1114
                                                                                                                       // 1115
// Returns the week number, considering the locale's custom week number calcuation                                     // 1116
// `weeks` is an alias for `week`                                                                                      // 1117
newMomentProto.week = newMomentProto.weeks = function(input) {                                                         // 1118
	var weekCalc = (this._locale || this._lang) // works pre-moment-2.8                                                   // 1119
		._fullCalendar_weekCalc;                                                                                             // 1120
                                                                                                                       // 1121
	if (input == null && typeof weekCalc === 'function') { // custom function only works for getter                       // 1122
		return weekCalc(this);                                                                                               // 1123
	}                                                                                                                     // 1124
	else if (weekCalc === 'ISO') {                                                                                        // 1125
		return oldMomentProto.isoWeek.apply(this, arguments); // ISO getter/setter                                           // 1126
	}                                                                                                                     // 1127
                                                                                                                       // 1128
	return oldMomentProto.week.apply(this, arguments); // local getter/setter                                             // 1129
};                                                                                                                     // 1130
                                                                                                                       // 1131
                                                                                                                       // 1132
// Time-of-day                                                                                                         // 1133
// -------------------------------------------------------------------------------------------------                   // 1134
                                                                                                                       // 1135
// GETTER                                                                                                              // 1136
// Returns a Duration with the hours/minutes/seconds/ms values of the moment.                                          // 1137
// If the moment has an ambiguous time, a duration of 00:00 will be returned.                                          // 1138
//                                                                                                                     // 1139
// SETTER                                                                                                              // 1140
// You can supply a Duration, a Moment, or a Duration-like argument.                                                   // 1141
// When setting the time, and the moment has an ambiguous time, it then becomes unambiguous.                           // 1142
newMomentProto.time = function(time) {                                                                                 // 1143
                                                                                                                       // 1144
	// Fallback to the original method (if there is one) if this moment wasn't created via FullCalendar.                  // 1145
	// `time` is a generic enough method name where this precaution is necessary to avoid collisions w/ other plugins.    // 1146
	if (!this._fullCalendar) {                                                                                            // 1147
		return oldMomentProto.time.apply(this, arguments);                                                                   // 1148
	}                                                                                                                     // 1149
                                                                                                                       // 1150
	if (time == null) { // getter                                                                                         // 1151
		return moment.duration({                                                                                             // 1152
			hours: this.hours(),                                                                                                // 1153
			minutes: this.minutes(),                                                                                            // 1154
			seconds: this.seconds(),                                                                                            // 1155
			milliseconds: this.milliseconds()                                                                                   // 1156
		});                                                                                                                  // 1157
	}                                                                                                                     // 1158
	else { // setter                                                                                                      // 1159
                                                                                                                       // 1160
		this._ambigTime = false; // mark that the moment now has a time                                                      // 1161
                                                                                                                       // 1162
		if (!moment.isDuration(time) && !moment.isMoment(time)) {                                                            // 1163
			time = moment.duration(time);                                                                                       // 1164
		}                                                                                                                    // 1165
                                                                                                                       // 1166
		// The day value should cause overflow (so 24 hours becomes 00:00:00 of next day).                                   // 1167
		// Only for Duration times, not Moment times.                                                                        // 1168
		var dayHours = 0;                                                                                                    // 1169
		if (moment.isDuration(time)) {                                                                                       // 1170
			dayHours = Math.floor(time.asDays()) * 24;                                                                          // 1171
		}                                                                                                                    // 1172
                                                                                                                       // 1173
		// We need to set the individual fields.                                                                             // 1174
		// Can't use startOf('day') then add duration. In case of DST at start of day.                                       // 1175
		return this.hours(dayHours + time.hours())                                                                           // 1176
			.minutes(time.minutes())                                                                                            // 1177
			.seconds(time.seconds())                                                                                            // 1178
			.milliseconds(time.milliseconds());                                                                                 // 1179
	}                                                                                                                     // 1180
};                                                                                                                     // 1181
                                                                                                                       // 1182
// Converts the moment to UTC, stripping out its time-of-day and timezone offset,                                      // 1183
// but preserving its YMD. A moment with a stripped time will display no time                                          // 1184
// nor timezone offset when .format() is called.                                                                       // 1185
newMomentProto.stripTime = function() {                                                                                // 1186
	var a;                                                                                                                // 1187
                                                                                                                       // 1188
	if (!this._ambigTime) {                                                                                               // 1189
                                                                                                                       // 1190
		// get the values before any conversion happens                                                                      // 1191
		a = this.toArray(); // array of y/m/d/h/m/s/ms                                                                       // 1192
                                                                                                                       // 1193
		// TODO: use keepLocalTime in the future                                                                             // 1194
		this.utc(); // set the internal UTC flag (will clear the ambig flags)                                                // 1195
		setUTCValues(this, a.slice(0, 3)); // set the year/month/date. time will be zero                                     // 1196
                                                                                                                       // 1197
		// Mark the time as ambiguous. This needs to happen after the .utc() call, which might call .utcOffset(),            // 1198
		// which clears all ambig flags. Same with setUTCValues with moment-timezone.                                        // 1199
		this._ambigTime = true;                                                                                              // 1200
		this._ambigZone = true; // if ambiguous time, also ambiguous timezone offset                                         // 1201
	}                                                                                                                     // 1202
                                                                                                                       // 1203
	return this; // for chaining                                                                                          // 1204
};                                                                                                                     // 1205
                                                                                                                       // 1206
// Returns if the moment has a non-ambiguous time (boolean)                                                            // 1207
newMomentProto.hasTime = function() {                                                                                  // 1208
	return !this._ambigTime;                                                                                              // 1209
};                                                                                                                     // 1210
                                                                                                                       // 1211
                                                                                                                       // 1212
// Timezone                                                                                                            // 1213
// -------------------------------------------------------------------------------------------------                   // 1214
                                                                                                                       // 1215
// Converts the moment to UTC, stripping out its timezone offset, but preserving its                                   // 1216
// YMD and time-of-day. A moment with a stripped timezone offset will display no                                       // 1217
// timezone offset when .format() is called.                                                                           // 1218
// TODO: look into Moment's keepLocalTime functionality                                                                // 1219
newMomentProto.stripZone = function() {                                                                                // 1220
	var a, wasAmbigTime;                                                                                                  // 1221
                                                                                                                       // 1222
	if (!this._ambigZone) {                                                                                               // 1223
                                                                                                                       // 1224
		// get the values before any conversion happens                                                                      // 1225
		a = this.toArray(); // array of y/m/d/h/m/s/ms                                                                       // 1226
		wasAmbigTime = this._ambigTime;                                                                                      // 1227
                                                                                                                       // 1228
		this.utc(); // set the internal UTC flag (might clear the ambig flags, depending on Moment internals)                // 1229
		setUTCValues(this, a); // will set the year/month/date/hours/minutes/seconds/ms                                      // 1230
                                                                                                                       // 1231
		// the above call to .utc()/.utcOffset() unfortunately might clear the ambig flags, so restore                       // 1232
		this._ambigTime = wasAmbigTime || false;                                                                             // 1233
                                                                                                                       // 1234
		// Mark the zone as ambiguous. This needs to happen after the .utc() call, which might call .utcOffset(),            // 1235
		// which clears the ambig flags. Same with setUTCValues with moment-timezone.                                        // 1236
		this._ambigZone = true;                                                                                              // 1237
	}                                                                                                                     // 1238
                                                                                                                       // 1239
	return this; // for chaining                                                                                          // 1240
};                                                                                                                     // 1241
                                                                                                                       // 1242
// Returns of the moment has a non-ambiguous timezone offset (boolean)                                                 // 1243
newMomentProto.hasZone = function() {                                                                                  // 1244
	return !this._ambigZone;                                                                                              // 1245
};                                                                                                                     // 1246
                                                                                                                       // 1247
                                                                                                                       // 1248
// this method implicitly marks a zone                                                                                 // 1249
newMomentProto.local = function() {                                                                                    // 1250
	var a = this.toArray(); // year,month,date,hours,minutes,seconds,ms as an array                                       // 1251
	var wasAmbigZone = this._ambigZone;                                                                                   // 1252
                                                                                                                       // 1253
	oldMomentProto.local.apply(this, arguments);                                                                          // 1254
                                                                                                                       // 1255
	// ensure non-ambiguous                                                                                               // 1256
	// this probably already happened via local() -> utcOffset(), but don't rely on Moment's internals                    // 1257
	this._ambigTime = false;                                                                                              // 1258
	this._ambigZone = false;                                                                                              // 1259
                                                                                                                       // 1260
	if (wasAmbigZone) {                                                                                                   // 1261
		// If the moment was ambiguously zoned, the date fields were stored as UTC.                                          // 1262
		// We want to preserve these, but in local time.                                                                     // 1263
		// TODO: look into Moment's keepLocalTime functionality                                                              // 1264
		setLocalValues(this, a);                                                                                             // 1265
	}                                                                                                                     // 1266
                                                                                                                       // 1267
	return this; // for chaining                                                                                          // 1268
};                                                                                                                     // 1269
                                                                                                                       // 1270
                                                                                                                       // 1271
// implicitly marks a zone                                                                                             // 1272
newMomentProto.utc = function() {                                                                                      // 1273
	oldMomentProto.utc.apply(this, arguments);                                                                            // 1274
                                                                                                                       // 1275
	// ensure non-ambiguous                                                                                               // 1276
	// this probably already happened via utc() -> utcOffset(), but don't rely on Moment's internals                      // 1277
	this._ambigTime = false;                                                                                              // 1278
	this._ambigZone = false;                                                                                              // 1279
                                                                                                                       // 1280
	return this;                                                                                                          // 1281
};                                                                                                                     // 1282
                                                                                                                       // 1283
                                                                                                                       // 1284
// methods for arbitrarily manipulating timezone offset.                                                               // 1285
// should clear time/zone ambiguity when called.                                                                       // 1286
$.each([                                                                                                               // 1287
	'zone', // only in moment-pre-2.9. deprecated afterwards                                                              // 1288
	'utcOffset'                                                                                                           // 1289
], function(i, name) {                                                                                                 // 1290
	if (oldMomentProto[name]) { // original method exists?                                                                // 1291
                                                                                                                       // 1292
		// this method implicitly marks a zone (will probably get called upon .utc() and .local())                           // 1293
		newMomentProto[name] = function(tzo) {                                                                               // 1294
                                                                                                                       // 1295
			if (tzo != null) { // setter                                                                                        // 1296
				// these assignments needs to happen before the original zone method is called.                                    // 1297
				// I forget why, something to do with a browser crash.                                                             // 1298
				this._ambigTime = false;                                                                                           // 1299
				this._ambigZone = false;                                                                                           // 1300
			}                                                                                                                   // 1301
                                                                                                                       // 1302
			return oldMomentProto[name].apply(this, arguments);                                                                 // 1303
		};                                                                                                                   // 1304
	}                                                                                                                     // 1305
});                                                                                                                    // 1306
                                                                                                                       // 1307
                                                                                                                       // 1308
// Formatting                                                                                                          // 1309
// -------------------------------------------------------------------------------------------------                   // 1310
                                                                                                                       // 1311
newMomentProto.format = function() {                                                                                   // 1312
	if (this._fullCalendar && arguments[0]) { // an enhanced moment? and a format string provided?                        // 1313
		return formatDate(this, arguments[0]); // our extended formatting                                                    // 1314
	}                                                                                                                     // 1315
	if (this._ambigTime) {                                                                                                // 1316
		return oldMomentFormat(this, 'YYYY-MM-DD');                                                                          // 1317
	}                                                                                                                     // 1318
	if (this._ambigZone) {                                                                                                // 1319
		return oldMomentFormat(this, 'YYYY-MM-DD[T]HH:mm:ss');                                                               // 1320
	}                                                                                                                     // 1321
	return oldMomentProto.format.apply(this, arguments);                                                                  // 1322
};                                                                                                                     // 1323
                                                                                                                       // 1324
newMomentProto.toISOString = function() {                                                                              // 1325
	if (this._ambigTime) {                                                                                                // 1326
		return oldMomentFormat(this, 'YYYY-MM-DD');                                                                          // 1327
	}                                                                                                                     // 1328
	if (this._ambigZone) {                                                                                                // 1329
		return oldMomentFormat(this, 'YYYY-MM-DD[T]HH:mm:ss');                                                               // 1330
	}                                                                                                                     // 1331
	return oldMomentProto.toISOString.apply(this, arguments);                                                             // 1332
};                                                                                                                     // 1333
                                                                                                                       // 1334
                                                                                                                       // 1335
// Querying                                                                                                            // 1336
// -------------------------------------------------------------------------------------------------                   // 1337
                                                                                                                       // 1338
// Is the moment within the specified range? `end` is exclusive.                                                       // 1339
// FYI, this method is not a standard Moment method, so always do our enhanced logic.                                  // 1340
newMomentProto.isWithin = function(start, end) {                                                                       // 1341
	var a = commonlyAmbiguate([ this, start, end ]);                                                                      // 1342
	return a[0] >= a[1] && a[0] < a[2];                                                                                   // 1343
};                                                                                                                     // 1344
                                                                                                                       // 1345
// When isSame is called with units, timezone ambiguity is normalized before the comparison happens.                   // 1346
// If no units specified, the two moments must be identically the same, with matching ambig flags.                     // 1347
newMomentProto.isSame = function(input, units) {                                                                       // 1348
	var a;                                                                                                                // 1349
                                                                                                                       // 1350
	// only do custom logic if this is an enhanced moment                                                                 // 1351
	if (!this._fullCalendar) {                                                                                            // 1352
		return oldMomentProto.isSame.apply(this, arguments);                                                                 // 1353
	}                                                                                                                     // 1354
                                                                                                                       // 1355
	if (units) {                                                                                                          // 1356
		a = commonlyAmbiguate([ this, input ], true); // normalize timezones but don't erase times                           // 1357
		return oldMomentProto.isSame.call(a[0], a[1], units);                                                                // 1358
	}                                                                                                                     // 1359
	else {                                                                                                                // 1360
		input = FC.moment.parseZone(input); // normalize input                                                               // 1361
		return oldMomentProto.isSame.call(this, input) &&                                                                    // 1362
			Boolean(this._ambigTime) === Boolean(input._ambigTime) &&                                                           // 1363
			Boolean(this._ambigZone) === Boolean(input._ambigZone);                                                             // 1364
	}                                                                                                                     // 1365
};                                                                                                                     // 1366
                                                                                                                       // 1367
// Make these query methods work with ambiguous moments                                                                // 1368
$.each([                                                                                                               // 1369
	'isBefore',                                                                                                           // 1370
	'isAfter'                                                                                                             // 1371
], function(i, methodName) {                                                                                           // 1372
	newMomentProto[methodName] = function(input, units) {                                                                 // 1373
		var a;                                                                                                               // 1374
                                                                                                                       // 1375
		// only do custom logic if this is an enhanced moment                                                                // 1376
		if (!this._fullCalendar) {                                                                                           // 1377
			return oldMomentProto[methodName].apply(this, arguments);                                                           // 1378
		}                                                                                                                    // 1379
                                                                                                                       // 1380
		a = commonlyAmbiguate([ this, input ]);                                                                              // 1381
		return oldMomentProto[methodName].call(a[0], a[1], units);                                                           // 1382
	};                                                                                                                    // 1383
});                                                                                                                    // 1384
                                                                                                                       // 1385
                                                                                                                       // 1386
// Misc Internals                                                                                                      // 1387
// -------------------------------------------------------------------------------------------------                   // 1388
                                                                                                                       // 1389
// given an array of moment-like inputs, return a parallel array w/ moments similarly ambiguated.                      // 1390
// for example, of one moment has ambig time, but not others, all moments will have their time stripped.               // 1391
// set `preserveTime` to `true` to keep times, but only normalize zone ambiguity.                                      // 1392
// returns the original moments if no modifications are necessary.                                                     // 1393
function commonlyAmbiguate(inputs, preserveTime) {                                                                     // 1394
	var anyAmbigTime = false;                                                                                             // 1395
	var anyAmbigZone = false;                                                                                             // 1396
	var len = inputs.length;                                                                                              // 1397
	var moms = [];                                                                                                        // 1398
	var i, mom;                                                                                                           // 1399
                                                                                                                       // 1400
	// parse inputs into real moments and query their ambig flags                                                         // 1401
	for (i = 0; i < len; i++) {                                                                                           // 1402
		mom = inputs[i];                                                                                                     // 1403
		if (!moment.isMoment(mom)) {                                                                                         // 1404
			mom = FC.moment.parseZone(mom);                                                                                     // 1405
		}                                                                                                                    // 1406
		anyAmbigTime = anyAmbigTime || mom._ambigTime;                                                                       // 1407
		anyAmbigZone = anyAmbigZone || mom._ambigZone;                                                                       // 1408
		moms.push(mom);                                                                                                      // 1409
	}                                                                                                                     // 1410
                                                                                                                       // 1411
	// strip each moment down to lowest common ambiguity                                                                  // 1412
	// use clones to avoid modifying the original moments                                                                 // 1413
	for (i = 0; i < len; i++) {                                                                                           // 1414
		mom = moms[i];                                                                                                       // 1415
		if (!preserveTime && anyAmbigTime && !mom._ambigTime) {                                                              // 1416
			moms[i] = mom.clone().stripTime();                                                                                  // 1417
		}                                                                                                                    // 1418
		else if (anyAmbigZone && !mom._ambigZone) {                                                                          // 1419
			moms[i] = mom.clone().stripZone();                                                                                  // 1420
		}                                                                                                                    // 1421
	}                                                                                                                     // 1422
                                                                                                                       // 1423
	return moms;                                                                                                          // 1424
}                                                                                                                      // 1425
                                                                                                                       // 1426
// Transfers all the flags related to ambiguous time/zone from the `src` moment to the `dest` moment                   // 1427
// TODO: look into moment.momentProperties for this.                                                                   // 1428
function transferAmbigs(src, dest) {                                                                                   // 1429
	if (src._ambigTime) {                                                                                                 // 1430
		dest._ambigTime = true;                                                                                              // 1431
	}                                                                                                                     // 1432
	else if (dest._ambigTime) {                                                                                           // 1433
		dest._ambigTime = false;                                                                                             // 1434
	}                                                                                                                     // 1435
                                                                                                                       // 1436
	if (src._ambigZone) {                                                                                                 // 1437
		dest._ambigZone = true;                                                                                              // 1438
	}                                                                                                                     // 1439
	else if (dest._ambigZone) {                                                                                           // 1440
		dest._ambigZone = false;                                                                                             // 1441
	}                                                                                                                     // 1442
}                                                                                                                      // 1443
                                                                                                                       // 1444
                                                                                                                       // 1445
// Sets the year/month/date/etc values of the moment from the given array.                                             // 1446
// Inefficient because it calls each individual setter.                                                                // 1447
function setMomentValues(mom, a) {                                                                                     // 1448
	mom.year(a[0] || 0)                                                                                                   // 1449
		.month(a[1] || 0)                                                                                                    // 1450
		.date(a[2] || 0)                                                                                                     // 1451
		.hours(a[3] || 0)                                                                                                    // 1452
		.minutes(a[4] || 0)                                                                                                  // 1453
		.seconds(a[5] || 0)                                                                                                  // 1454
		.milliseconds(a[6] || 0);                                                                                            // 1455
}                                                                                                                      // 1456
                                                                                                                       // 1457
// Can we set the moment's internal date directly?                                                                     // 1458
allowValueOptimization = '_d' in moment() && 'updateOffset' in moment;                                                 // 1459
                                                                                                                       // 1460
// Utility function. Accepts a moment and an array of the UTC year/month/date/etc values to set.                       // 1461
// Assumes the given moment is already in UTC mode.                                                                    // 1462
setUTCValues = allowValueOptimization ? function(mom, a) {                                                             // 1463
	// simlate what moment's accessors do                                                                                 // 1464
	mom._d.setTime(Date.UTC.apply(Date, a));                                                                              // 1465
	moment.updateOffset(mom, false); // keepTime=false                                                                    // 1466
} : setMomentValues;                                                                                                   // 1467
                                                                                                                       // 1468
// Utility function. Accepts a moment and an array of the local year/month/date/etc values to set.                     // 1469
// Assumes the given moment is already in local mode.                                                                  // 1470
setLocalValues = allowValueOptimization ? function(mom, a) {                                                           // 1471
	// simlate what moment's accessors do                                                                                 // 1472
	mom._d.setTime(+new Date( // FYI, there is now way to apply an array of args to a constructor                         // 1473
		a[0] || 0,                                                                                                           // 1474
		a[1] || 0,                                                                                                           // 1475
		a[2] || 0,                                                                                                           // 1476
		a[3] || 0,                                                                                                           // 1477
		a[4] || 0,                                                                                                           // 1478
		a[5] || 0,                                                                                                           // 1479
		a[6] || 0                                                                                                            // 1480
	));                                                                                                                   // 1481
	moment.updateOffset(mom, false); // keepTime=false                                                                    // 1482
} : setMomentValues;                                                                                                   // 1483
                                                                                                                       // 1484
;;                                                                                                                     // 1485
                                                                                                                       // 1486
// Single Date Formatting                                                                                              // 1487
// -------------------------------------------------------------------------------------------------                   // 1488
                                                                                                                       // 1489
                                                                                                                       // 1490
// call this if you want Moment's original format method to be used                                                    // 1491
function oldMomentFormat(mom, formatStr) {                                                                             // 1492
	return oldMomentProto.format.call(mom, formatStr); // oldMomentProto defined in moment-ext.js                         // 1493
}                                                                                                                      // 1494
                                                                                                                       // 1495
                                                                                                                       // 1496
// Formats `date` with a Moment formatting string, but allow our non-zero areas and                                    // 1497
// additional token.                                                                                                   // 1498
function formatDate(date, formatStr) {                                                                                 // 1499
	return formatDateWithChunks(date, getFormatStringChunks(formatStr));                                                  // 1500
}                                                                                                                      // 1501
                                                                                                                       // 1502
                                                                                                                       // 1503
function formatDateWithChunks(date, chunks) {                                                                          // 1504
	var s = '';                                                                                                           // 1505
	var i;                                                                                                                // 1506
                                                                                                                       // 1507
	for (i=0; i<chunks.length; i++) {                                                                                     // 1508
		s += formatDateWithChunk(date, chunks[i]);                                                                           // 1509
	}                                                                                                                     // 1510
                                                                                                                       // 1511
	return s;                                                                                                             // 1512
}                                                                                                                      // 1513
                                                                                                                       // 1514
                                                                                                                       // 1515
// addition formatting tokens we want recognized                                                                       // 1516
var tokenOverrides = {                                                                                                 // 1517
	t: function(date) { // "a" or "p"                                                                                     // 1518
		return oldMomentFormat(date, 'a').charAt(0);                                                                         // 1519
	},                                                                                                                    // 1520
	T: function(date) { // "A" or "P"                                                                                     // 1521
		return oldMomentFormat(date, 'A').charAt(0);                                                                         // 1522
	}                                                                                                                     // 1523
};                                                                                                                     // 1524
                                                                                                                       // 1525
                                                                                                                       // 1526
function formatDateWithChunk(date, chunk) {                                                                            // 1527
	var token;                                                                                                            // 1528
	var maybeStr;                                                                                                         // 1529
                                                                                                                       // 1530
	if (typeof chunk === 'string') { // a literal string                                                                  // 1531
		return chunk;                                                                                                        // 1532
	}                                                                                                                     // 1533
	else if ((token = chunk.token)) { // a token, like "YYYY"                                                             // 1534
		if (tokenOverrides[token]) {                                                                                         // 1535
			return tokenOverrides[token](date); // use our custom token                                                         // 1536
		}                                                                                                                    // 1537
		return oldMomentFormat(date, token);                                                                                 // 1538
	}                                                                                                                     // 1539
	else if (chunk.maybe) { // a grouping of other chunks that must be non-zero                                           // 1540
		maybeStr = formatDateWithChunks(date, chunk.maybe);                                                                  // 1541
		if (maybeStr.match(/[1-9]/)) {                                                                                       // 1542
			return maybeStr;                                                                                                    // 1543
		}                                                                                                                    // 1544
	}                                                                                                                     // 1545
                                                                                                                       // 1546
	return '';                                                                                                            // 1547
}                                                                                                                      // 1548
                                                                                                                       // 1549
                                                                                                                       // 1550
// Date Range Formatting                                                                                               // 1551
// -------------------------------------------------------------------------------------------------                   // 1552
// TODO: make it work with timezone offset                                                                             // 1553
                                                                                                                       // 1554
// Using a formatting string meant for a single date, generate a range string, like                                    // 1555
// "Sep 2 - 9 2013", that intelligently inserts a separator where the dates differ.                                    // 1556
// If the dates are the same as far as the format string is concerned, just return a single                            // 1557
// rendering of one date, without any separator.                                                                       // 1558
function formatRange(date1, date2, formatStr, separator, isRTL) {                                                      // 1559
	var localeData;                                                                                                       // 1560
                                                                                                                       // 1561
	date1 = FC.moment.parseZone(date1);                                                                                   // 1562
	date2 = FC.moment.parseZone(date2);                                                                                   // 1563
                                                                                                                       // 1564
	localeData = (date1.localeData || date1.lang).call(date1); // works with moment-pre-2.8                               // 1565
                                                                                                                       // 1566
	// Expand localized format strings, like "LL" -> "MMMM D YYYY"                                                        // 1567
	formatStr = localeData.longDateFormat(formatStr) || formatStr;                                                        // 1568
	// BTW, this is not important for `formatDate` because it is impossible to put custom tokens                          // 1569
	// or non-zero areas in Moment's localized format strings.                                                            // 1570
                                                                                                                       // 1571
	separator = separator || ' - ';                                                                                       // 1572
                                                                                                                       // 1573
	return formatRangeWithChunks(                                                                                         // 1574
		date1,                                                                                                               // 1575
		date2,                                                                                                               // 1576
		getFormatStringChunks(formatStr),                                                                                    // 1577
		separator,                                                                                                           // 1578
		isRTL                                                                                                                // 1579
	);                                                                                                                    // 1580
}                                                                                                                      // 1581
FC.formatRange = formatRange; // expose                                                                                // 1582
                                                                                                                       // 1583
                                                                                                                       // 1584
function formatRangeWithChunks(date1, date2, chunks, separator, isRTL) {                                               // 1585
	var unzonedDate1 = date1.clone().stripZone(); // for formatSimilarChunk                                               // 1586
	var unzonedDate2 = date2.clone().stripZone(); // "                                                                    // 1587
	var chunkStr; // the rendering of the chunk                                                                           // 1588
	var leftI;                                                                                                            // 1589
	var leftStr = '';                                                                                                     // 1590
	var rightI;                                                                                                           // 1591
	var rightStr = '';                                                                                                    // 1592
	var middleI;                                                                                                          // 1593
	var middleStr1 = '';                                                                                                  // 1594
	var middleStr2 = '';                                                                                                  // 1595
	var middleStr = '';                                                                                                   // 1596
                                                                                                                       // 1597
	// Start at the leftmost side of the formatting string and continue until you hit a token                             // 1598
	// that is not the same between dates.                                                                                // 1599
	for (leftI=0; leftI<chunks.length; leftI++) {                                                                         // 1600
		chunkStr = formatSimilarChunk(date1, date2, unzonedDate1, unzonedDate2, chunks[leftI]);                              // 1601
		if (chunkStr === false) {                                                                                            // 1602
			break;                                                                                                              // 1603
		}                                                                                                                    // 1604
		leftStr += chunkStr;                                                                                                 // 1605
	}                                                                                                                     // 1606
                                                                                                                       // 1607
	// Similarly, start at the rightmost side of the formatting string and move left                                      // 1608
	for (rightI=chunks.length-1; rightI>leftI; rightI--) {                                                                // 1609
		chunkStr = formatSimilarChunk(date1, date2, unzonedDate1, unzonedDate2,  chunks[rightI]);                            // 1610
		if (chunkStr === false) {                                                                                            // 1611
			break;                                                                                                              // 1612
		}                                                                                                                    // 1613
		rightStr = chunkStr + rightStr;                                                                                      // 1614
	}                                                                                                                     // 1615
                                                                                                                       // 1616
	// The area in the middle is different for both of the dates.                                                         // 1617
	// Collect them distinctly so we can jam them together later.                                                         // 1618
	for (middleI=leftI; middleI<=rightI; middleI++) {                                                                     // 1619
		middleStr1 += formatDateWithChunk(date1, chunks[middleI]);                                                           // 1620
		middleStr2 += formatDateWithChunk(date2, chunks[middleI]);                                                           // 1621
	}                                                                                                                     // 1622
                                                                                                                       // 1623
	if (middleStr1 || middleStr2) {                                                                                       // 1624
		if (isRTL) {                                                                                                         // 1625
			middleStr = middleStr2 + separator + middleStr1;                                                                    // 1626
		}                                                                                                                    // 1627
		else {                                                                                                               // 1628
			middleStr = middleStr1 + separator + middleStr2;                                                                    // 1629
		}                                                                                                                    // 1630
	}                                                                                                                     // 1631
                                                                                                                       // 1632
	return leftStr + middleStr + rightStr;                                                                                // 1633
}                                                                                                                      // 1634
                                                                                                                       // 1635
                                                                                                                       // 1636
var similarUnitMap = {                                                                                                 // 1637
	Y: 'year',                                                                                                            // 1638
	M: 'month',                                                                                                           // 1639
	D: 'day', // day of month                                                                                             // 1640
	d: 'day', // day of week                                                                                              // 1641
	// prevents a separator between anything time-related...                                                              // 1642
	A: 'second', // AM/PM                                                                                                 // 1643
	a: 'second', // am/pm                                                                                                 // 1644
	T: 'second', // A/P                                                                                                   // 1645
	t: 'second', // a/p                                                                                                   // 1646
	H: 'second', // hour (24)                                                                                             // 1647
	h: 'second', // hour (12)                                                                                             // 1648
	m: 'second', // minute                                                                                                // 1649
	s: 'second' // second                                                                                                 // 1650
};                                                                                                                     // 1651
// TODO: week maybe?                                                                                                   // 1652
                                                                                                                       // 1653
                                                                                                                       // 1654
// Given a formatting chunk, and given that both dates are similar in the regard the                                   // 1655
// formatting chunk is concerned, format date1 against `chunk`. Otherwise, return `false`.                             // 1656
function formatSimilarChunk(date1, date2, unzonedDate1, unzonedDate2, chunk) {                                         // 1657
	var token;                                                                                                            // 1658
	var unit;                                                                                                             // 1659
                                                                                                                       // 1660
	if (typeof chunk === 'string') { // a literal string                                                                  // 1661
		return chunk;                                                                                                        // 1662
	}                                                                                                                     // 1663
	else if ((token = chunk.token)) {                                                                                     // 1664
		unit = similarUnitMap[token.charAt(0)];                                                                              // 1665
                                                                                                                       // 1666
		// are the dates the same for this unit of measurement?                                                              // 1667
		// use the unzoned dates for this calculation because unreliable when near DST (bug #2396)                           // 1668
		if (unit && unzonedDate1.isSame(unzonedDate2, unit)) {                                                               // 1669
			return oldMomentFormat(date1, token); // would be the same if we used `date2`                                       // 1670
			// BTW, don't support custom tokens                                                                                 // 1671
		}                                                                                                                    // 1672
	}                                                                                                                     // 1673
                                                                                                                       // 1674
	return false; // the chunk is NOT the same for the two dates                                                          // 1675
	// BTW, don't support splitting on non-zero areas                                                                     // 1676
}                                                                                                                      // 1677
                                                                                                                       // 1678
                                                                                                                       // 1679
// Chunking Utils                                                                                                      // 1680
// -------------------------------------------------------------------------------------------------                   // 1681
                                                                                                                       // 1682
                                                                                                                       // 1683
var formatStringChunkCache = {};                                                                                       // 1684
                                                                                                                       // 1685
                                                                                                                       // 1686
function getFormatStringChunks(formatStr) {                                                                            // 1687
	if (formatStr in formatStringChunkCache) {                                                                            // 1688
		return formatStringChunkCache[formatStr];                                                                            // 1689
	}                                                                                                                     // 1690
	return (formatStringChunkCache[formatStr] = chunkFormatString(formatStr));                                            // 1691
}                                                                                                                      // 1692
                                                                                                                       // 1693
                                                                                                                       // 1694
// Break the formatting string into an array of chunks                                                                 // 1695
function chunkFormatString(formatStr) {                                                                                // 1696
	var chunks = [];                                                                                                      // 1697
	var chunker = /\[([^\]]*)\]|\(([^\)]*)\)|(LTS|LT|(\w)\4*o?)|([^\w\[\(]+)/g; // TODO: more descrimination              // 1698
	var match;                                                                                                            // 1699
                                                                                                                       // 1700
	while ((match = chunker.exec(formatStr))) {                                                                           // 1701
		if (match[1]) { // a literal string inside [ ... ]                                                                   // 1702
			chunks.push(match[1]);                                                                                              // 1703
		}                                                                                                                    // 1704
		else if (match[2]) { // non-zero formatting inside ( ... )                                                           // 1705
			chunks.push({ maybe: chunkFormatString(match[2]) });                                                                // 1706
		}                                                                                                                    // 1707
		else if (match[3]) { // a formatting token                                                                           // 1708
			chunks.push({ token: match[3] });                                                                                   // 1709
		}                                                                                                                    // 1710
		else if (match[5]) { // an unenclosed literal string                                                                 // 1711
			chunks.push(match[5]);                                                                                              // 1712
		}                                                                                                                    // 1713
	}                                                                                                                     // 1714
                                                                                                                       // 1715
	return chunks;                                                                                                        // 1716
}                                                                                                                      // 1717
                                                                                                                       // 1718
;;                                                                                                                     // 1719
                                                                                                                       // 1720
FC.Class = Class; // export                                                                                            // 1721
                                                                                                                       // 1722
// Class that all other classes will inherit from                                                                      // 1723
function Class() { }                                                                                                   // 1724
                                                                                                                       // 1725
                                                                                                                       // 1726
// Called on a class to create a subclass.                                                                             // 1727
// Last argument contains instance methods. Any argument before the last are considered mixins.                        // 1728
Class.extend = function() {                                                                                            // 1729
	var len = arguments.length;                                                                                           // 1730
	var i;                                                                                                                // 1731
	var members;                                                                                                          // 1732
                                                                                                                       // 1733
	for (i = 0; i < len; i++) {                                                                                           // 1734
		members = arguments[i];                                                                                              // 1735
		if (i < len - 1) { // not the last argument?                                                                         // 1736
			mixIntoClass(this, members);                                                                                        // 1737
		}                                                                                                                    // 1738
	}                                                                                                                     // 1739
                                                                                                                       // 1740
	return extendClass(this, members || {}); // members will be undefined if no arguments                                 // 1741
};                                                                                                                     // 1742
                                                                                                                       // 1743
                                                                                                                       // 1744
// Adds new member variables/methods to the class's prototype.                                                         // 1745
// Can be called with another class, or a plain object hash containing new members.                                    // 1746
Class.mixin = function(members) {                                                                                      // 1747
	mixIntoClass(this, members);                                                                                          // 1748
};                                                                                                                     // 1749
                                                                                                                       // 1750
                                                                                                                       // 1751
function extendClass(superClass, members) {                                                                            // 1752
	var subClass;                                                                                                         // 1753
                                                                                                                       // 1754
	// ensure a constructor for the subclass, forwarding all arguments to the super-constructor if it doesn't exist       // 1755
	if (hasOwnProp(members, 'constructor')) {                                                                             // 1756
		subClass = members.constructor;                                                                                      // 1757
	}                                                                                                                     // 1758
	if (typeof subClass !== 'function') {                                                                                 // 1759
		subClass = members.constructor = function() {                                                                        // 1760
			superClass.apply(this, arguments);                                                                                  // 1761
		};                                                                                                                   // 1762
	}                                                                                                                     // 1763
                                                                                                                       // 1764
	// build the base prototype for the subclass, which is an new object chained to the superclass's prototype            // 1765
	subClass.prototype = createObject(superClass.prototype);                                                              // 1766
                                                                                                                       // 1767
	// copy each member variable/method onto the the subclass's prototype                                                 // 1768
	copyOwnProps(members, subClass.prototype);                                                                            // 1769
	copyNativeMethods(members, subClass.prototype); // hack for IE8                                                       // 1770
                                                                                                                       // 1771
	// copy over all class variables/methods to the subclass, such as `extend` and `mixin`                                // 1772
	copyOwnProps(superClass, subClass);                                                                                   // 1773
                                                                                                                       // 1774
	return subClass;                                                                                                      // 1775
}                                                                                                                      // 1776
                                                                                                                       // 1777
                                                                                                                       // 1778
function mixIntoClass(theClass, members) {                                                                             // 1779
	copyOwnProps(members.prototype || members, theClass.prototype); // TODO: copyNativeMethods?                           // 1780
}                                                                                                                      // 1781
;;                                                                                                                     // 1782
                                                                                                                       // 1783
var Emitter = FC.Emitter = Class.extend({                                                                              // 1784
                                                                                                                       // 1785
	callbackHash: null,                                                                                                   // 1786
                                                                                                                       // 1787
                                                                                                                       // 1788
	on: function(name, callback) {                                                                                        // 1789
		this.getCallbacks(name).add(callback);                                                                               // 1790
		return this; // for chaining                                                                                         // 1791
	},                                                                                                                    // 1792
                                                                                                                       // 1793
                                                                                                                       // 1794
	off: function(name, callback) {                                                                                       // 1795
		this.getCallbacks(name).remove(callback);                                                                            // 1796
		return this; // for chaining                                                                                         // 1797
	},                                                                                                                    // 1798
                                                                                                                       // 1799
                                                                                                                       // 1800
	trigger: function(name) { // args...                                                                                  // 1801
		var args = Array.prototype.slice.call(arguments, 1);                                                                 // 1802
                                                                                                                       // 1803
		this.triggerWith(name, this, args);                                                                                  // 1804
                                                                                                                       // 1805
		return this; // for chaining                                                                                         // 1806
	},                                                                                                                    // 1807
                                                                                                                       // 1808
                                                                                                                       // 1809
	triggerWith: function(name, context, args) {                                                                          // 1810
		var callbacks = this.getCallbacks(name);                                                                             // 1811
                                                                                                                       // 1812
		callbacks.fireWith(context, args);                                                                                   // 1813
                                                                                                                       // 1814
		return this; // for chaining                                                                                         // 1815
	},                                                                                                                    // 1816
                                                                                                                       // 1817
                                                                                                                       // 1818
	getCallbacks: function(name) {                                                                                        // 1819
		var callbacks;                                                                                                       // 1820
                                                                                                                       // 1821
		if (!this.callbackHash) {                                                                                            // 1822
			this.callbackHash = {};                                                                                             // 1823
		}                                                                                                                    // 1824
                                                                                                                       // 1825
		callbacks = this.callbackHash[name];                                                                                 // 1826
		if (!callbacks) {                                                                                                    // 1827
			callbacks = this.callbackHash[name] = $.Callbacks();                                                                // 1828
		}                                                                                                                    // 1829
                                                                                                                       // 1830
		return callbacks;                                                                                                    // 1831
	}                                                                                                                     // 1832
                                                                                                                       // 1833
});                                                                                                                    // 1834
;;                                                                                                                     // 1835
                                                                                                                       // 1836
/* A rectangular panel that is absolutely positioned over other content                                                // 1837
------------------------------------------------------------------------------------------------------------------------
Options:                                                                                                               // 1839
	- className (string)                                                                                                  // 1840
	- content (HTML string or jQuery element set)                                                                         // 1841
	- parentEl                                                                                                            // 1842
	- top                                                                                                                 // 1843
	- left                                                                                                                // 1844
	- right (the x coord of where the right edge should be. not a "CSS" right)                                            // 1845
	- autoHide (boolean)                                                                                                  // 1846
	- show (callback)                                                                                                     // 1847
	- hide (callback)                                                                                                     // 1848
*/                                                                                                                     // 1849
                                                                                                                       // 1850
var Popover = Class.extend({                                                                                           // 1851
                                                                                                                       // 1852
	isHidden: true,                                                                                                       // 1853
	options: null,                                                                                                        // 1854
	el: null, // the container element for the popover. generated by this object                                          // 1855
	documentMousedownProxy: null, // document mousedown handler bound to `this`                                           // 1856
	margin: 10, // the space required between the popover and the edges of the scroll container                           // 1857
                                                                                                                       // 1858
                                                                                                                       // 1859
	constructor: function(options) {                                                                                      // 1860
		this.options = options || {};                                                                                        // 1861
	},                                                                                                                    // 1862
                                                                                                                       // 1863
                                                                                                                       // 1864
	// Shows the popover on the specified position. Renders it if not already                                             // 1865
	show: function() {                                                                                                    // 1866
		if (this.isHidden) {                                                                                                 // 1867
			if (!this.el) {                                                                                                     // 1868
				this.render();                                                                                                     // 1869
			}                                                                                                                   // 1870
			this.el.show();                                                                                                     // 1871
			this.position();                                                                                                    // 1872
			this.isHidden = false;                                                                                              // 1873
			this.trigger('show');                                                                                               // 1874
		}                                                                                                                    // 1875
	},                                                                                                                    // 1876
                                                                                                                       // 1877
                                                                                                                       // 1878
	// Hides the popover, through CSS, but does not remove it from the DOM                                                // 1879
	hide: function() {                                                                                                    // 1880
		if (!this.isHidden) {                                                                                                // 1881
			this.el.hide();                                                                                                     // 1882
			this.isHidden = true;                                                                                               // 1883
			this.trigger('hide');                                                                                               // 1884
		}                                                                                                                    // 1885
	},                                                                                                                    // 1886
                                                                                                                       // 1887
                                                                                                                       // 1888
	// Creates `this.el` and renders content inside of it                                                                 // 1889
	render: function() {                                                                                                  // 1890
		var _this = this;                                                                                                    // 1891
		var options = this.options;                                                                                          // 1892
                                                                                                                       // 1893
		this.el = $('<div class="fc-popover"/>')                                                                             // 1894
			.addClass(options.className || '')                                                                                  // 1895
			.css({                                                                                                              // 1896
				// position initially to the top left to avoid creating scrollbars                                                 // 1897
				top: 0,                                                                                                            // 1898
				left: 0                                                                                                            // 1899
			})                                                                                                                  // 1900
			.append(options.content)                                                                                            // 1901
			.appendTo(options.parentEl);                                                                                        // 1902
                                                                                                                       // 1903
		// when a click happens on anything inside with a 'fc-close' className, hide the popover                             // 1904
		this.el.on('click', '.fc-close', function() {                                                                        // 1905
			_this.hide();                                                                                                       // 1906
		});                                                                                                                  // 1907
                                                                                                                       // 1908
		if (options.autoHide) {                                                                                              // 1909
			$(document).on('mousedown', this.documentMousedownProxy = proxy(this, 'documentMousedown'));                        // 1910
		}                                                                                                                    // 1911
	},                                                                                                                    // 1912
                                                                                                                       // 1913
                                                                                                                       // 1914
	// Triggered when the user clicks *anywhere* in the document, for the autoHide feature                                // 1915
	documentMousedown: function(ev) {                                                                                     // 1916
		// only hide the popover if the click happened outside the popover                                                   // 1917
		if (this.el && !$(ev.target).closest(this.el).length) {                                                              // 1918
			this.hide();                                                                                                        // 1919
		}                                                                                                                    // 1920
	},                                                                                                                    // 1921
                                                                                                                       // 1922
                                                                                                                       // 1923
	// Hides and unregisters any handlers                                                                                 // 1924
	removeElement: function() {                                                                                           // 1925
		this.hide();                                                                                                         // 1926
                                                                                                                       // 1927
		if (this.el) {                                                                                                       // 1928
			this.el.remove();                                                                                                   // 1929
			this.el = null;                                                                                                     // 1930
		}                                                                                                                    // 1931
                                                                                                                       // 1932
		$(document).off('mousedown', this.documentMousedownProxy);                                                           // 1933
	},                                                                                                                    // 1934
                                                                                                                       // 1935
                                                                                                                       // 1936
	// Positions the popover optimally, using the top/left/right options                                                  // 1937
	position: function() {                                                                                                // 1938
		var options = this.options;                                                                                          // 1939
		var origin = this.el.offsetParent().offset();                                                                        // 1940
		var width = this.el.outerWidth();                                                                                    // 1941
		var height = this.el.outerHeight();                                                                                  // 1942
		var windowEl = $(window);                                                                                            // 1943
		var viewportEl = getScrollParent(this.el);                                                                           // 1944
		var viewportTop;                                                                                                     // 1945
		var viewportLeft;                                                                                                    // 1946
		var viewportOffset;                                                                                                  // 1947
		var top; // the "position" (not "offset") values for the popover                                                     // 1948
		var left; //                                                                                                         // 1949
                                                                                                                       // 1950
		// compute top and left                                                                                              // 1951
		top = options.top || 0;                                                                                              // 1952
		if (options.left !== undefined) {                                                                                    // 1953
			left = options.left;                                                                                                // 1954
		}                                                                                                                    // 1955
		else if (options.right !== undefined) {                                                                              // 1956
			left = options.right - width; // derive the left value from the right value                                         // 1957
		}                                                                                                                    // 1958
		else {                                                                                                               // 1959
			left = 0;                                                                                                           // 1960
		}                                                                                                                    // 1961
                                                                                                                       // 1962
		if (viewportEl.is(window) || viewportEl.is(document)) { // normalize getScrollParent's result                        // 1963
			viewportEl = windowEl;                                                                                              // 1964
			viewportTop = 0; // the window is always at the top left                                                            // 1965
			viewportLeft = 0; // (and .offset() won't work if called here)                                                      // 1966
		}                                                                                                                    // 1967
		else {                                                                                                               // 1968
			viewportOffset = viewportEl.offset();                                                                               // 1969
			viewportTop = viewportOffset.top;                                                                                   // 1970
			viewportLeft = viewportOffset.left;                                                                                 // 1971
		}                                                                                                                    // 1972
                                                                                                                       // 1973
		// if the window is scrolled, it causes the visible area to be further down                                          // 1974
		viewportTop += windowEl.scrollTop();                                                                                 // 1975
		viewportLeft += windowEl.scrollLeft();                                                                               // 1976
                                                                                                                       // 1977
		// constrain to the view port. if constrained by two edges, give precedence to top/left                              // 1978
		if (options.viewportConstrain !== false) {                                                                           // 1979
			top = Math.min(top, viewportTop + viewportEl.outerHeight() - height - this.margin);                                 // 1980
			top = Math.max(top, viewportTop + this.margin);                                                                     // 1981
			left = Math.min(left, viewportLeft + viewportEl.outerWidth() - width - this.margin);                                // 1982
			left = Math.max(left, viewportLeft + this.margin);                                                                  // 1983
		}                                                                                                                    // 1984
                                                                                                                       // 1985
		this.el.css({                                                                                                        // 1986
			top: top - origin.top,                                                                                              // 1987
			left: left - origin.left                                                                                            // 1988
		});                                                                                                                  // 1989
	},                                                                                                                    // 1990
                                                                                                                       // 1991
                                                                                                                       // 1992
	// Triggers a callback. Calls a function in the option hash of the same name.                                         // 1993
	// Arguments beyond the first `name` are forwarded on.                                                                // 1994
	// TODO: better code reuse for this. Repeat code                                                                      // 1995
	trigger: function(name) {                                                                                             // 1996
		if (this.options[name]) {                                                                                            // 1997
			this.options[name].apply(this, Array.prototype.slice.call(arguments, 1));                                           // 1998
		}                                                                                                                    // 1999
	}                                                                                                                     // 2000
                                                                                                                       // 2001
});                                                                                                                    // 2002
                                                                                                                       // 2003
;;                                                                                                                     // 2004
                                                                                                                       // 2005
/*                                                                                                                     // 2006
A cache for the left/right/top/bottom/width/height values for one or more elements.                                    // 2007
Works with both offset (from topleft document) and position (from offsetParent).                                       // 2008
                                                                                                                       // 2009
options:                                                                                                               // 2010
- els                                                                                                                  // 2011
- isHorizontal                                                                                                         // 2012
- isVertical                                                                                                           // 2013
*/                                                                                                                     // 2014
var CoordCache = FC.CoordCache = Class.extend({                                                                        // 2015
                                                                                                                       // 2016
	els: null, // jQuery set (assumed to be siblings)                                                                     // 2017
	forcedOffsetParentEl: null, // options can override the natural offsetParent                                          // 2018
	origin: null, // {left,top} position of offsetParent of els                                                           // 2019
	boundingRect: null, // constrain cordinates to this rectangle. {left,right,top,bottom} or null                        // 2020
	isHorizontal: false, // whether to query for left/right/width                                                         // 2021
	isVertical: false, // whether to query for top/bottom/height                                                          // 2022
                                                                                                                       // 2023
	// arrays of coordinates (offsets from topleft of document)                                                           // 2024
	lefts: null,                                                                                                          // 2025
	rights: null,                                                                                                         // 2026
	tops: null,                                                                                                           // 2027
	bottoms: null,                                                                                                        // 2028
                                                                                                                       // 2029
                                                                                                                       // 2030
	constructor: function(options) {                                                                                      // 2031
		this.els = $(options.els);                                                                                           // 2032
		this.isHorizontal = options.isHorizontal;                                                                            // 2033
		this.isVertical = options.isVertical;                                                                                // 2034
		this.forcedOffsetParentEl = options.offsetParent ? $(options.offsetParent) : null;                                   // 2035
	},                                                                                                                    // 2036
                                                                                                                       // 2037
                                                                                                                       // 2038
	// Queries the els for coordinates and stores them.                                                                   // 2039
	// Call this method before using and of the get* methods below.                                                       // 2040
	build: function() {                                                                                                   // 2041
		var offsetParentEl = this.forcedOffsetParentEl || this.els.eq(0).offsetParent();                                     // 2042
                                                                                                                       // 2043
		this.origin = offsetParentEl.offset();                                                                               // 2044
		this.boundingRect = this.queryBoundingRect();                                                                        // 2045
                                                                                                                       // 2046
		if (this.isHorizontal) {                                                                                             // 2047
			this.buildElHorizontals();                                                                                          // 2048
		}                                                                                                                    // 2049
		if (this.isVertical) {                                                                                               // 2050
			this.buildElVerticals();                                                                                            // 2051
		}                                                                                                                    // 2052
	},                                                                                                                    // 2053
                                                                                                                       // 2054
                                                                                                                       // 2055
	// Destroys all internal data about coordinates, freeing memory                                                       // 2056
	clear: function() {                                                                                                   // 2057
		this.origin = null;                                                                                                  // 2058
		this.boundingRect = null;                                                                                            // 2059
		this.lefts = null;                                                                                                   // 2060
		this.rights = null;                                                                                                  // 2061
		this.tops = null;                                                                                                    // 2062
		this.bottoms = null;                                                                                                 // 2063
	},                                                                                                                    // 2064
                                                                                                                       // 2065
                                                                                                                       // 2066
	// Compute and return what the elements' bounding rectangle is, from the user's perspective.                          // 2067
	// Right now, only returns a rectangle if constrained by an overflow:scroll element.                                  // 2068
	queryBoundingRect: function() {                                                                                       // 2069
		var scrollParentEl = getScrollParent(this.els.eq(0));                                                                // 2070
                                                                                                                       // 2071
		if (!scrollParentEl.is(document)) {                                                                                  // 2072
			return getClientRect(scrollParentEl);                                                                               // 2073
		}                                                                                                                    // 2074
	},                                                                                                                    // 2075
                                                                                                                       // 2076
                                                                                                                       // 2077
	// Populates the left/right internal coordinate arrays                                                                // 2078
	buildElHorizontals: function() {                                                                                      // 2079
		var lefts = [];                                                                                                      // 2080
		var rights = [];                                                                                                     // 2081
                                                                                                                       // 2082
		this.els.each(function(i, node) {                                                                                    // 2083
			var el = $(node);                                                                                                   // 2084
			var left = el.offset().left;                                                                                        // 2085
			var width = el.outerWidth();                                                                                        // 2086
                                                                                                                       // 2087
			lefts.push(left);                                                                                                   // 2088
			rights.push(left + width);                                                                                          // 2089
		});                                                                                                                  // 2090
                                                                                                                       // 2091
		this.lefts = lefts;                                                                                                  // 2092
		this.rights = rights;                                                                                                // 2093
	},                                                                                                                    // 2094
                                                                                                                       // 2095
                                                                                                                       // 2096
	// Populates the top/bottom internal coordinate arrays                                                                // 2097
	buildElVerticals: function() {                                                                                        // 2098
		var tops = [];                                                                                                       // 2099
		var bottoms = [];                                                                                                    // 2100
                                                                                                                       // 2101
		this.els.each(function(i, node) {                                                                                    // 2102
			var el = $(node);                                                                                                   // 2103
			var top = el.offset().top;                                                                                          // 2104
			var height = el.outerHeight();                                                                                      // 2105
                                                                                                                       // 2106
			tops.push(top);                                                                                                     // 2107
			bottoms.push(top + height);                                                                                         // 2108
		});                                                                                                                  // 2109
                                                                                                                       // 2110
		this.tops = tops;                                                                                                    // 2111
		this.bottoms = bottoms;                                                                                              // 2112
	},                                                                                                                    // 2113
                                                                                                                       // 2114
                                                                                                                       // 2115
	// Given a left offset (from document left), returns the index of the el that it horizontally intersects.             // 2116
	// If no intersection is made, or outside of the boundingRect, returns undefined.                                     // 2117
	getHorizontalIndex: function(leftOffset) {                                                                            // 2118
		var boundingRect = this.boundingRect;                                                                                // 2119
		var lefts = this.lefts;                                                                                              // 2120
		var rights = this.rights;                                                                                            // 2121
		var len = lefts.length;                                                                                              // 2122
		var i;                                                                                                               // 2123
                                                                                                                       // 2124
		if (!boundingRect || (leftOffset >= boundingRect.left && leftOffset < boundingRect.right)) {                         // 2125
			for (i = 0; i < len; i++) {                                                                                         // 2126
				if (leftOffset >= lefts[i] && leftOffset < rights[i]) {                                                            // 2127
					return i;                                                                                                         // 2128
				}                                                                                                                  // 2129
			}                                                                                                                   // 2130
		}                                                                                                                    // 2131
	},                                                                                                                    // 2132
                                                                                                                       // 2133
                                                                                                                       // 2134
	// Given a top offset (from document top), returns the index of the el that it vertically intersects.                 // 2135
	// If no intersection is made, or outside of the boundingRect, returns undefined.                                     // 2136
	getVerticalIndex: function(topOffset) {                                                                               // 2137
		var boundingRect = this.boundingRect;                                                                                // 2138
		var tops = this.tops;                                                                                                // 2139
		var bottoms = this.bottoms;                                                                                          // 2140
		var len = tops.length;                                                                                               // 2141
		var i;                                                                                                               // 2142
                                                                                                                       // 2143
		if (!boundingRect || (topOffset >= boundingRect.top && topOffset < boundingRect.bottom)) {                           // 2144
			for (i = 0; i < len; i++) {                                                                                         // 2145
				if (topOffset >= tops[i] && topOffset < bottoms[i]) {                                                              // 2146
					return i;                                                                                                         // 2147
				}                                                                                                                  // 2148
			}                                                                                                                   // 2149
		}                                                                                                                    // 2150
	},                                                                                                                    // 2151
                                                                                                                       // 2152
                                                                                                                       // 2153
	// Gets the left offset (from document left) of the element at the given index                                        // 2154
	getLeftOffset: function(leftIndex) {                                                                                  // 2155
		return this.lefts[leftIndex];                                                                                        // 2156
	},                                                                                                                    // 2157
                                                                                                                       // 2158
                                                                                                                       // 2159
	// Gets the left position (from offsetParent left) of the element at the given index                                  // 2160
	getLeftPosition: function(leftIndex) {                                                                                // 2161
		return this.lefts[leftIndex] - this.origin.left;                                                                     // 2162
	},                                                                                                                    // 2163
                                                                                                                       // 2164
                                                                                                                       // 2165
	// Gets the right offset (from document left) of the element at the given index.                                      // 2166
	// This value is NOT relative to the document's right edge, like the CSS concept of "right" would be.                 // 2167
	getRightOffset: function(leftIndex) {                                                                                 // 2168
		return this.rights[leftIndex];                                                                                       // 2169
	},                                                                                                                    // 2170
                                                                                                                       // 2171
                                                                                                                       // 2172
	// Gets the right position (from offsetParent left) of the element at the given index.                                // 2173
	// This value is NOT relative to the offsetParent's right edge, like the CSS concept of "right" would be.             // 2174
	getRightPosition: function(leftIndex) {                                                                               // 2175
		return this.rights[leftIndex] - this.origin.left;                                                                    // 2176
	},                                                                                                                    // 2177
                                                                                                                       // 2178
                                                                                                                       // 2179
	// Gets the width of the element at the given index                                                                   // 2180
	getWidth: function(leftIndex) {                                                                                       // 2181
		return this.rights[leftIndex] - this.lefts[leftIndex];                                                               // 2182
	},                                                                                                                    // 2183
                                                                                                                       // 2184
                                                                                                                       // 2185
	// Gets the top offset (from document top) of the element at the given index                                          // 2186
	getTopOffset: function(topIndex) {                                                                                    // 2187
		return this.tops[topIndex];                                                                                          // 2188
	},                                                                                                                    // 2189
                                                                                                                       // 2190
                                                                                                                       // 2191
	// Gets the top position (from offsetParent top) of the element at the given position                                 // 2192
	getTopPosition: function(topIndex) {                                                                                  // 2193
		return this.tops[topIndex] - this.origin.top;                                                                        // 2194
	},                                                                                                                    // 2195
                                                                                                                       // 2196
	// Gets the bottom offset (from the document top) of the element at the given index.                                  // 2197
	// This value is NOT relative to the offsetParent's bottom edge, like the CSS concept of "bottom" would be.           // 2198
	getBottomOffset: function(topIndex) {                                                                                 // 2199
		return this.bottoms[topIndex];                                                                                       // 2200
	},                                                                                                                    // 2201
                                                                                                                       // 2202
                                                                                                                       // 2203
	// Gets the bottom position (from the offsetParent top) of the element at the given index.                            // 2204
	// This value is NOT relative to the offsetParent's bottom edge, like the CSS concept of "bottom" would be.           // 2205
	getBottomPosition: function(topIndex) {                                                                               // 2206
		return this.bottoms[topIndex] - this.origin.top;                                                                     // 2207
	},                                                                                                                    // 2208
                                                                                                                       // 2209
                                                                                                                       // 2210
	// Gets the height of the element at the given index                                                                  // 2211
	getHeight: function(topIndex) {                                                                                       // 2212
		return this.bottoms[topIndex] - this.tops[topIndex];                                                                 // 2213
	}                                                                                                                     // 2214
                                                                                                                       // 2215
});                                                                                                                    // 2216
                                                                                                                       // 2217
;;                                                                                                                     // 2218
                                                                                                                       // 2219
/* Tracks a drag's mouse movement, firing various handlers                                                             // 2220
----------------------------------------------------------------------------------------------------------------------*/
// TODO: use Emitter                                                                                                   // 2222
                                                                                                                       // 2223
var DragListener = FC.DragListener = Class.extend({                                                                    // 2224
                                                                                                                       // 2225
	options: null,                                                                                                        // 2226
                                                                                                                       // 2227
	isListening: false,                                                                                                   // 2228
	isDragging: false,                                                                                                    // 2229
                                                                                                                       // 2230
	// coordinates of the initial mousedown                                                                               // 2231
	originX: null,                                                                                                        // 2232
	originY: null,                                                                                                        // 2233
                                                                                                                       // 2234
	// handler attached to the document, bound to the DragListener's `this`                                               // 2235
	mousemoveProxy: null,                                                                                                 // 2236
	mouseupProxy: null,                                                                                                   // 2237
                                                                                                                       // 2238
	// for IE8 bug-fighting behavior, for now                                                                             // 2239
	subjectEl: null, // the element being draged. optional                                                                // 2240
	subjectHref: null,                                                                                                    // 2241
                                                                                                                       // 2242
	scrollEl: null,                                                                                                       // 2243
	scrollBounds: null, // { top, bottom, left, right }                                                                   // 2244
	scrollTopVel: null, // pixels per second                                                                              // 2245
	scrollLeftVel: null, // pixels per second                                                                             // 2246
	scrollIntervalId: null, // ID of setTimeout for scrolling animation loop                                              // 2247
	scrollHandlerProxy: null, // this-scoped function for handling when scrollEl is scrolled                              // 2248
                                                                                                                       // 2249
	scrollSensitivity: 30, // pixels from edge for scrolling to start                                                     // 2250
	scrollSpeed: 200, // pixels per second, at maximum speed                                                              // 2251
	scrollIntervalMs: 50, // millisecond wait between scroll increment                                                    // 2252
                                                                                                                       // 2253
                                                                                                                       // 2254
	constructor: function(options) {                                                                                      // 2255
		options = options || {};                                                                                             // 2256
		this.options = options;                                                                                              // 2257
		this.subjectEl = options.subjectEl;                                                                                  // 2258
	},                                                                                                                    // 2259
                                                                                                                       // 2260
                                                                                                                       // 2261
	// Call this when the user does a mousedown. Will probably lead to startListening                                     // 2262
	mousedown: function(ev) {                                                                                             // 2263
		if (isPrimaryMouseButton(ev)) {                                                                                      // 2264
                                                                                                                       // 2265
			ev.preventDefault(); // prevents native selection in most browsers                                                  // 2266
                                                                                                                       // 2267
			this.startListening(ev);                                                                                            // 2268
                                                                                                                       // 2269
			// start the drag immediately if there is no minimum distance for a drag start                                      // 2270
			if (!this.options.distance) {                                                                                       // 2271
				this.startDrag(ev);                                                                                                // 2272
			}                                                                                                                   // 2273
		}                                                                                                                    // 2274
	},                                                                                                                    // 2275
                                                                                                                       // 2276
                                                                                                                       // 2277
	// Call this to start tracking mouse movements                                                                        // 2278
	startListening: function(ev) {                                                                                        // 2279
		var scrollParent;                                                                                                    // 2280
                                                                                                                       // 2281
		if (!this.isListening) {                                                                                             // 2282
                                                                                                                       // 2283
			// grab scroll container and attach handler                                                                         // 2284
			if (ev && this.options.scroll) {                                                                                    // 2285
				scrollParent = getScrollParent($(ev.target));                                                                      // 2286
				if (!scrollParent.is(window) && !scrollParent.is(document)) {                                                      // 2287
					this.scrollEl = scrollParent;                                                                                     // 2288
                                                                                                                       // 2289
					// scope to `this`, and use `debounce` to make sure rapid calls don't happen                                      // 2290
					this.scrollHandlerProxy = debounce(proxy(this, 'scrollHandler'), 100);                                            // 2291
					this.scrollEl.on('scroll', this.scrollHandlerProxy);                                                              // 2292
				}                                                                                                                  // 2293
			}                                                                                                                   // 2294
                                                                                                                       // 2295
			$(document)                                                                                                         // 2296
				.on('mousemove', this.mousemoveProxy = proxy(this, 'mousemove'))                                                   // 2297
				.on('mouseup', this.mouseupProxy = proxy(this, 'mouseup'))                                                         // 2298
				.on('selectstart', this.preventDefault); // prevents native selection in IE<=8                                     // 2299
                                                                                                                       // 2300
			if (ev) {                                                                                                           // 2301
				this.originX = ev.pageX;                                                                                           // 2302
				this.originY = ev.pageY;                                                                                           // 2303
			}                                                                                                                   // 2304
			else {                                                                                                              // 2305
				// if no starting information was given, origin will be the topleft corner of the screen.                          // 2306
				// if so, dx/dy in the future will be the absolute coordinates.                                                    // 2307
				this.originX = 0;                                                                                                  // 2308
				this.originY = 0;                                                                                                  // 2309
			}                                                                                                                   // 2310
                                                                                                                       // 2311
			this.isListening = true;                                                                                            // 2312
			this.listenStart(ev);                                                                                               // 2313
		}                                                                                                                    // 2314
	},                                                                                                                    // 2315
                                                                                                                       // 2316
                                                                                                                       // 2317
	// Called when drag listening has started (but a real drag has not necessarily began)                                 // 2318
	listenStart: function(ev) {                                                                                           // 2319
		this.trigger('listenStart', ev);                                                                                     // 2320
	},                                                                                                                    // 2321
                                                                                                                       // 2322
                                                                                                                       // 2323
	// Called when the user moves the mouse                                                                               // 2324
	mousemove: function(ev) {                                                                                             // 2325
		var dx = ev.pageX - this.originX;                                                                                    // 2326
		var dy = ev.pageY - this.originY;                                                                                    // 2327
		var minDistance;                                                                                                     // 2328
		var distanceSq; // current distance from the origin, squared                                                         // 2329
                                                                                                                       // 2330
		if (!this.isDragging) { // if not already dragging...                                                                // 2331
			// then start the drag if the minimum distance criteria is met                                                      // 2332
			minDistance = this.options.distance || 1;                                                                           // 2333
			distanceSq = dx * dx + dy * dy;                                                                                     // 2334
			if (distanceSq >= minDistance * minDistance) { // use pythagorean theorem                                           // 2335
				this.startDrag(ev);                                                                                                // 2336
			}                                                                                                                   // 2337
		}                                                                                                                    // 2338
                                                                                                                       // 2339
		if (this.isDragging) {                                                                                               // 2340
			this.drag(dx, dy, ev); // report a drag, even if this mousemove initiated the drag                                  // 2341
		}                                                                                                                    // 2342
	},                                                                                                                    // 2343
                                                                                                                       // 2344
                                                                                                                       // 2345
	// Call this to initiate a legitimate drag.                                                                           // 2346
	// This function is called internally from this class, but can also be called explicitly from outside                 // 2347
	startDrag: function(ev) {                                                                                             // 2348
                                                                                                                       // 2349
		if (!this.isListening) { // startDrag must have manually initiated                                                   // 2350
			this.startListening();                                                                                              // 2351
		}                                                                                                                    // 2352
                                                                                                                       // 2353
		if (!this.isDragging) {                                                                                              // 2354
			this.isDragging = true;                                                                                             // 2355
			this.dragStart(ev);                                                                                                 // 2356
		}                                                                                                                    // 2357
	},                                                                                                                    // 2358
                                                                                                                       // 2359
                                                                                                                       // 2360
	// Called when the actual drag has started (went beyond minDistance)                                                  // 2361
	dragStart: function(ev) {                                                                                             // 2362
		var subjectEl = this.subjectEl;                                                                                      // 2363
                                                                                                                       // 2364
		this.trigger('dragStart', ev);                                                                                       // 2365
                                                                                                                       // 2366
		// remove a mousedown'd <a>'s href so it is not visited (IE8 bug)                                                    // 2367
		if ((this.subjectHref = subjectEl ? subjectEl.attr('href') : null)) {                                                // 2368
			subjectEl.removeAttr('href');                                                                                       // 2369
		}                                                                                                                    // 2370
	},                                                                                                                    // 2371
                                                                                                                       // 2372
                                                                                                                       // 2373
	// Called while the mouse is being moved and when we know a legitimate drag is taking place                           // 2374
	drag: function(dx, dy, ev) {                                                                                          // 2375
		this.trigger('drag', dx, dy, ev);                                                                                    // 2376
		this.updateScroll(ev); // will possibly cause scrolling                                                              // 2377
	},                                                                                                                    // 2378
                                                                                                                       // 2379
                                                                                                                       // 2380
	// Called when the user does a mouseup                                                                                // 2381
	mouseup: function(ev) {                                                                                               // 2382
		this.stopListening(ev);                                                                                              // 2383
	},                                                                                                                    // 2384
                                                                                                                       // 2385
                                                                                                                       // 2386
	// Called when the drag is over. Will not cause listening to stop however.                                            // 2387
	// A concluding 'cellOut' event will NOT be triggered.                                                                // 2388
	stopDrag: function(ev) {                                                                                              // 2389
		if (this.isDragging) {                                                                                               // 2390
			this.stopScrolling();                                                                                               // 2391
			this.dragStop(ev);                                                                                                  // 2392
			this.isDragging = false;                                                                                            // 2393
		}                                                                                                                    // 2394
	},                                                                                                                    // 2395
                                                                                                                       // 2396
                                                                                                                       // 2397
	// Called when dragging has been stopped                                                                              // 2398
	dragStop: function(ev) {                                                                                              // 2399
		var _this = this;                                                                                                    // 2400
                                                                                                                       // 2401
		this.trigger('dragStop', ev);                                                                                        // 2402
                                                                                                                       // 2403
		// restore a mousedown'd <a>'s href (for IE8 bug)                                                                    // 2404
		setTimeout(function() { // must be outside of the click's execution                                                  // 2405
			if (_this.subjectHref) {                                                                                            // 2406
				_this.subjectEl.attr('href', _this.subjectHref);                                                                   // 2407
			}                                                                                                                   // 2408
		}, 0);                                                                                                               // 2409
	},                                                                                                                    // 2410
                                                                                                                       // 2411
                                                                                                                       // 2412
	// Call this to stop listening to the user's mouse events                                                             // 2413
	stopListening: function(ev) {                                                                                         // 2414
		this.stopDrag(ev); // if there's a current drag, kill it                                                             // 2415
                                                                                                                       // 2416
		if (this.isListening) {                                                                                              // 2417
                                                                                                                       // 2418
			// remove the scroll handler if there is a scrollEl                                                                 // 2419
			if (this.scrollEl) {                                                                                                // 2420
				this.scrollEl.off('scroll', this.scrollHandlerProxy);                                                              // 2421
				this.scrollHandlerProxy = null;                                                                                    // 2422
			}                                                                                                                   // 2423
                                                                                                                       // 2424
			$(document)                                                                                                         // 2425
				.off('mousemove', this.mousemoveProxy)                                                                             // 2426
				.off('mouseup', this.mouseupProxy)                                                                                 // 2427
				.off('selectstart', this.preventDefault);                                                                          // 2428
                                                                                                                       // 2429
			this.mousemoveProxy = null;                                                                                         // 2430
			this.mouseupProxy = null;                                                                                           // 2431
                                                                                                                       // 2432
			this.isListening = false;                                                                                           // 2433
			this.listenStop(ev);                                                                                                // 2434
		}                                                                                                                    // 2435
	},                                                                                                                    // 2436
                                                                                                                       // 2437
                                                                                                                       // 2438
	// Called when drag listening has stopped                                                                             // 2439
	listenStop: function(ev) {                                                                                            // 2440
		this.trigger('listenStop', ev);                                                                                      // 2441
	},                                                                                                                    // 2442
                                                                                                                       // 2443
                                                                                                                       // 2444
	// Triggers a callback. Calls a function in the option hash of the same name.                                         // 2445
	// Arguments beyond the first `name` are forwarded on.                                                                // 2446
	trigger: function(name) {                                                                                             // 2447
		if (this.options[name]) {                                                                                            // 2448
			this.options[name].apply(this, Array.prototype.slice.call(arguments, 1));                                           // 2449
		}                                                                                                                    // 2450
	},                                                                                                                    // 2451
                                                                                                                       // 2452
                                                                                                                       // 2453
	// Stops a given mouse event from doing it's native browser action. In our case, text selection.                      // 2454
	preventDefault: function(ev) {                                                                                        // 2455
		ev.preventDefault();                                                                                                 // 2456
	},                                                                                                                    // 2457
                                                                                                                       // 2458
                                                                                                                       // 2459
	/* Scrolling                                                                                                          // 2460
	------------------------------------------------------------------------------------------------------------------*/  // 2461
                                                                                                                       // 2462
                                                                                                                       // 2463
	// Computes and stores the bounding rectangle of scrollEl                                                             // 2464
	computeScrollBounds: function() {                                                                                     // 2465
		var el = this.scrollEl;                                                                                              // 2466
                                                                                                                       // 2467
		this.scrollBounds = el ? getOuterRect(el) : null;                                                                    // 2468
			// TODO: use getClientRect in future. but prevents auto scrolling when on top of scrollbars                         // 2469
	},                                                                                                                    // 2470
                                                                                                                       // 2471
                                                                                                                       // 2472
	// Called when the dragging is in progress and scrolling should be updated                                            // 2473
	updateScroll: function(ev) {                                                                                          // 2474
		var sensitivity = this.scrollSensitivity;                                                                            // 2475
		var bounds = this.scrollBounds;                                                                                      // 2476
		var topCloseness, bottomCloseness;                                                                                   // 2477
		var leftCloseness, rightCloseness;                                                                                   // 2478
		var topVel = 0;                                                                                                      // 2479
		var leftVel = 0;                                                                                                     // 2480
                                                                                                                       // 2481
		if (bounds) { // only scroll if scrollEl exists                                                                      // 2482
                                                                                                                       // 2483
			// compute closeness to edges. valid range is from 0.0 - 1.0                                                        // 2484
			topCloseness = (sensitivity - (ev.pageY - bounds.top)) / sensitivity;                                               // 2485
			bottomCloseness = (sensitivity - (bounds.bottom - ev.pageY)) / sensitivity;                                         // 2486
			leftCloseness = (sensitivity - (ev.pageX - bounds.left)) / sensitivity;                                             // 2487
			rightCloseness = (sensitivity - (bounds.right - ev.pageX)) / sensitivity;                                           // 2488
                                                                                                                       // 2489
			// translate vertical closeness into velocity.                                                                      // 2490
			// mouse must be completely in bounds for velocity to happen.                                                       // 2491
			if (topCloseness >= 0 && topCloseness <= 1) {                                                                       // 2492
				topVel = topCloseness * this.scrollSpeed * -1; // negative. for scrolling up                                       // 2493
			}                                                                                                                   // 2494
			else if (bottomCloseness >= 0 && bottomCloseness <= 1) {                                                            // 2495
				topVel = bottomCloseness * this.scrollSpeed;                                                                       // 2496
			}                                                                                                                   // 2497
                                                                                                                       // 2498
			// translate horizontal closeness into velocity                                                                     // 2499
			if (leftCloseness >= 0 && leftCloseness <= 1) {                                                                     // 2500
				leftVel = leftCloseness * this.scrollSpeed * -1; // negative. for scrolling left                                   // 2501
			}                                                                                                                   // 2502
			else if (rightCloseness >= 0 && rightCloseness <= 1) {                                                              // 2503
				leftVel = rightCloseness * this.scrollSpeed;                                                                       // 2504
			}                                                                                                                   // 2505
		}                                                                                                                    // 2506
                                                                                                                       // 2507
		this.setScrollVel(topVel, leftVel);                                                                                  // 2508
	},                                                                                                                    // 2509
                                                                                                                       // 2510
                                                                                                                       // 2511
	// Sets the speed-of-scrolling for the scrollEl                                                                       // 2512
	setScrollVel: function(topVel, leftVel) {                                                                             // 2513
                                                                                                                       // 2514
		this.scrollTopVel = topVel;                                                                                          // 2515
		this.scrollLeftVel = leftVel;                                                                                        // 2516
                                                                                                                       // 2517
		this.constrainScrollVel(); // massages into realistic values                                                         // 2518
                                                                                                                       // 2519
		// if there is non-zero velocity, and an animation loop hasn't already started, then START                           // 2520
		if ((this.scrollTopVel || this.scrollLeftVel) && !this.scrollIntervalId) {                                           // 2521
			this.scrollIntervalId = setInterval(                                                                                // 2522
				proxy(this, 'scrollIntervalFunc'), // scope to `this`                                                              // 2523
				this.scrollIntervalMs                                                                                              // 2524
			);                                                                                                                  // 2525
		}                                                                                                                    // 2526
	},                                                                                                                    // 2527
                                                                                                                       // 2528
                                                                                                                       // 2529
	// Forces scrollTopVel and scrollLeftVel to be zero if scrolling has already gone all the way                         // 2530
	constrainScrollVel: function() {                                                                                      // 2531
		var el = this.scrollEl;                                                                                              // 2532
                                                                                                                       // 2533
		if (this.scrollTopVel < 0) { // scrolling up?                                                                        // 2534
			if (el.scrollTop() <= 0) { // already scrolled all the way up?                                                      // 2535
				this.scrollTopVel = 0;                                                                                             // 2536
			}                                                                                                                   // 2537
		}                                                                                                                    // 2538
		else if (this.scrollTopVel > 0) { // scrolling down?                                                                 // 2539
			if (el.scrollTop() + el[0].clientHeight >= el[0].scrollHeight) { // already scrolled all the way down?              // 2540
				this.scrollTopVel = 0;                                                                                             // 2541
			}                                                                                                                   // 2542
		}                                                                                                                    // 2543
                                                                                                                       // 2544
		if (this.scrollLeftVel < 0) { // scrolling left?                                                                     // 2545
			if (el.scrollLeft() <= 0) { // already scrolled all the left?                                                       // 2546
				this.scrollLeftVel = 0;                                                                                            // 2547
			}                                                                                                                   // 2548
		}                                                                                                                    // 2549
		else if (this.scrollLeftVel > 0) { // scrolling right?                                                               // 2550
			if (el.scrollLeft() + el[0].clientWidth >= el[0].scrollWidth) { // already scrolled all the way right?              // 2551
				this.scrollLeftVel = 0;                                                                                            // 2552
			}                                                                                                                   // 2553
		}                                                                                                                    // 2554
	},                                                                                                                    // 2555
                                                                                                                       // 2556
                                                                                                                       // 2557
	// This function gets called during every iteration of the scrolling animation loop                                   // 2558
	scrollIntervalFunc: function() {                                                                                      // 2559
		var el = this.scrollEl;                                                                                              // 2560
		var frac = this.scrollIntervalMs / 1000; // considering animation frequency, what the vel should be mult'd by        // 2561
                                                                                                                       // 2562
		// change the value of scrollEl's scroll                                                                             // 2563
		if (this.scrollTopVel) {                                                                                             // 2564
			el.scrollTop(el.scrollTop() + this.scrollTopVel * frac);                                                            // 2565
		}                                                                                                                    // 2566
		if (this.scrollLeftVel) {                                                                                            // 2567
			el.scrollLeft(el.scrollLeft() + this.scrollLeftVel * frac);                                                         // 2568
		}                                                                                                                    // 2569
                                                                                                                       // 2570
		this.constrainScrollVel(); // since the scroll values changed, recompute the velocities                              // 2571
                                                                                                                       // 2572
		// if scrolled all the way, which causes the vels to be zero, stop the animation loop                                // 2573
		if (!this.scrollTopVel && !this.scrollLeftVel) {                                                                     // 2574
			this.stopScrolling();                                                                                               // 2575
		}                                                                                                                    // 2576
	},                                                                                                                    // 2577
                                                                                                                       // 2578
                                                                                                                       // 2579
	// Kills any existing scrolling animation loop                                                                        // 2580
	stopScrolling: function() {                                                                                           // 2581
		if (this.scrollIntervalId) {                                                                                         // 2582
			clearInterval(this.scrollIntervalId);                                                                               // 2583
			this.scrollIntervalId = null;                                                                                       // 2584
                                                                                                                       // 2585
			// when all done with scrolling, recompute positions since they probably changed                                    // 2586
			this.scrollStop();                                                                                                  // 2587
		}                                                                                                                    // 2588
	},                                                                                                                    // 2589
                                                                                                                       // 2590
                                                                                                                       // 2591
	// Get called when the scrollEl is scrolled (NOTE: this is delayed via debounce)                                      // 2592
	scrollHandler: function() {                                                                                           // 2593
		// recompute all coordinates, but *only* if this is *not* part of our scrolling animation                            // 2594
		if (!this.scrollIntervalId) {                                                                                        // 2595
			this.scrollStop();                                                                                                  // 2596
		}                                                                                                                    // 2597
	},                                                                                                                    // 2598
                                                                                                                       // 2599
                                                                                                                       // 2600
	// Called when scrolling has stopped, whether through auto scroll, or the user scrolling                              // 2601
	scrollStop: function() {                                                                                              // 2602
	}                                                                                                                     // 2603
                                                                                                                       // 2604
});                                                                                                                    // 2605
                                                                                                                       // 2606
;;                                                                                                                     // 2607
                                                                                                                       // 2608
/* Tracks mouse movements over a component and raises events about which hit the mouse is over.                        // 2609
------------------------------------------------------------------------------------------------------------------------
options:                                                                                                               // 2611
- subjectEl                                                                                                            // 2612
- subjectCenter                                                                                                        // 2613
*/                                                                                                                     // 2614
                                                                                                                       // 2615
var HitDragListener = DragListener.extend({                                                                            // 2616
                                                                                                                       // 2617
	component: null, // converts coordinates to hits                                                                      // 2618
		// methods: prepareHits, releaseHits, queryHit                                                                       // 2619
                                                                                                                       // 2620
	origHit: null, // the hit the mouse was over when listening started                                                   // 2621
	hit: null, // the hit the mouse is over                                                                               // 2622
	coordAdjust: null, // delta that will be added to the mouse coordinates when computing collisions                     // 2623
                                                                                                                       // 2624
                                                                                                                       // 2625
	constructor: function(component, options) {                                                                           // 2626
		DragListener.call(this, options); // call the super-constructor                                                      // 2627
                                                                                                                       // 2628
		this.component = component;                                                                                          // 2629
	},                                                                                                                    // 2630
                                                                                                                       // 2631
                                                                                                                       // 2632
	// Called when drag listening starts (but a real drag has not necessarily began).                                     // 2633
	// ev might be undefined if dragging was started manually.                                                            // 2634
	listenStart: function(ev) {                                                                                           // 2635
		var subjectEl = this.subjectEl;                                                                                      // 2636
		var subjectRect;                                                                                                     // 2637
		var origPoint;                                                                                                       // 2638
		var point;                                                                                                           // 2639
                                                                                                                       // 2640
		DragListener.prototype.listenStart.apply(this, arguments); // call the super-method                                  // 2641
                                                                                                                       // 2642
		this.computeCoords();                                                                                                // 2643
                                                                                                                       // 2644
		if (ev) {                                                                                                            // 2645
			origPoint = { left: ev.pageX, top: ev.pageY };                                                                      // 2646
			point = origPoint;                                                                                                  // 2647
                                                                                                                       // 2648
			// constrain the point to bounds of the element being dragged                                                       // 2649
			if (subjectEl) {                                                                                                    // 2650
				subjectRect = getOuterRect(subjectEl); // used for centering as well                                               // 2651
				point = constrainPoint(point, subjectRect);                                                                        // 2652
			}                                                                                                                   // 2653
                                                                                                                       // 2654
			this.origHit = this.queryHit(point.left, point.top);                                                                // 2655
                                                                                                                       // 2656
			// treat the center of the subject as the collision point?                                                          // 2657
			if (subjectEl && this.options.subjectCenter) {                                                                      // 2658
                                                                                                                       // 2659
				// only consider the area the subject overlaps the hit. best for large subjects.                                   // 2660
				// TODO: skip this if hit didn't supply left/right/top/bottom                                                      // 2661
				if (this.origHit) {                                                                                                // 2662
					subjectRect = intersectRects(this.origHit, subjectRect) ||                                                        // 2663
						subjectRect; // in case there is no intersection                                                                 // 2664
				}                                                                                                                  // 2665
                                                                                                                       // 2666
				point = getRectCenter(subjectRect);                                                                                // 2667
			}                                                                                                                   // 2668
                                                                                                                       // 2669
			this.coordAdjust = diffPoints(point, origPoint); // point - origPoint                                               // 2670
		}                                                                                                                    // 2671
		else {                                                                                                               // 2672
			this.origHit = null;                                                                                                // 2673
			this.coordAdjust = null;                                                                                            // 2674
		}                                                                                                                    // 2675
	},                                                                                                                    // 2676
                                                                                                                       // 2677
                                                                                                                       // 2678
	// Recomputes the drag-critical positions of elements                                                                 // 2679
	computeCoords: function() {                                                                                           // 2680
		this.component.prepareHits();                                                                                        // 2681
		this.computeScrollBounds(); // why is this here???                                                                   // 2682
	},                                                                                                                    // 2683
                                                                                                                       // 2684
                                                                                                                       // 2685
	// Called when the actual drag has started                                                                            // 2686
	dragStart: function(ev) {                                                                                             // 2687
		var hit;                                                                                                             // 2688
                                                                                                                       // 2689
		DragListener.prototype.dragStart.apply(this, arguments); // call the super-method                                    // 2690
                                                                                                                       // 2691
		// might be different from this.origHit if the min-distance is large                                                 // 2692
		hit = this.queryHit(ev.pageX, ev.pageY);                                                                             // 2693
                                                                                                                       // 2694
		// report the initial hit the mouse is over                                                                          // 2695
		// especially important if no min-distance and drag starts immediately                                               // 2696
		if (hit) {                                                                                                           // 2697
			this.hitOver(hit);                                                                                                  // 2698
		}                                                                                                                    // 2699
	},                                                                                                                    // 2700
                                                                                                                       // 2701
                                                                                                                       // 2702
	// Called when the drag moves                                                                                         // 2703
	drag: function(dx, dy, ev) {                                                                                          // 2704
		var hit;                                                                                                             // 2705
                                                                                                                       // 2706
		DragListener.prototype.drag.apply(this, arguments); // call the super-method                                         // 2707
                                                                                                                       // 2708
		hit = this.queryHit(ev.pageX, ev.pageY);                                                                             // 2709
                                                                                                                       // 2710
		if (!isHitsEqual(hit, this.hit)) { // a different hit than before?                                                   // 2711
			if (this.hit) {                                                                                                     // 2712
				this.hitOut();                                                                                                     // 2713
			}                                                                                                                   // 2714
			if (hit) {                                                                                                          // 2715
				this.hitOver(hit);                                                                                                 // 2716
			}                                                                                                                   // 2717
		}                                                                                                                    // 2718
	},                                                                                                                    // 2719
                                                                                                                       // 2720
                                                                                                                       // 2721
	// Called when dragging has been stopped                                                                              // 2722
	dragStop: function() {                                                                                                // 2723
		this.hitDone();                                                                                                      // 2724
		DragListener.prototype.dragStop.apply(this, arguments); // call the super-method                                     // 2725
	},                                                                                                                    // 2726
                                                                                                                       // 2727
                                                                                                                       // 2728
	// Called when a the mouse has just moved over a new hit                                                              // 2729
	hitOver: function(hit) {                                                                                              // 2730
		var isOrig = isHitsEqual(hit, this.origHit);                                                                         // 2731
                                                                                                                       // 2732
		this.hit = hit;                                                                                                      // 2733
                                                                                                                       // 2734
		this.trigger('hitOver', this.hit, isOrig, this.origHit);                                                             // 2735
	},                                                                                                                    // 2736
                                                                                                                       // 2737
                                                                                                                       // 2738
	// Called when the mouse has just moved out of a hit                                                                  // 2739
	hitOut: function() {                                                                                                  // 2740
		if (this.hit) {                                                                                                      // 2741
			this.trigger('hitOut', this.hit);                                                                                   // 2742
			this.hitDone();                                                                                                     // 2743
			this.hit = null;                                                                                                    // 2744
		}                                                                                                                    // 2745
	},                                                                                                                    // 2746
                                                                                                                       // 2747
                                                                                                                       // 2748
	// Called after a hitOut. Also called before a dragStop                                                               // 2749
	hitDone: function() {                                                                                                 // 2750
		if (this.hit) {                                                                                                      // 2751
			this.trigger('hitDone', this.hit);                                                                                  // 2752
		}                                                                                                                    // 2753
	},                                                                                                                    // 2754
                                                                                                                       // 2755
                                                                                                                       // 2756
	// Called when drag listening has stopped                                                                             // 2757
	listenStop: function() {                                                                                              // 2758
		DragListener.prototype.listenStop.apply(this, arguments); // call the super-method                                   // 2759
                                                                                                                       // 2760
		this.origHit = null;                                                                                                 // 2761
		this.hit = null;                                                                                                     // 2762
                                                                                                                       // 2763
		this.component.releaseHits();                                                                                        // 2764
	},                                                                                                                    // 2765
                                                                                                                       // 2766
                                                                                                                       // 2767
	// Called when scrolling has stopped, whether through auto scroll, or the user scrolling                              // 2768
	scrollStop: function() {                                                                                              // 2769
		DragListener.prototype.scrollStop.apply(this, arguments); // call the super-method                                   // 2770
                                                                                                                       // 2771
		this.computeCoords(); // hits' absolute positions will be in new places. recompute                                   // 2772
	},                                                                                                                    // 2773
                                                                                                                       // 2774
                                                                                                                       // 2775
	// Gets the hit underneath the coordinates for the given mouse event                                                  // 2776
	queryHit: function(left, top) {                                                                                       // 2777
                                                                                                                       // 2778
		if (this.coordAdjust) {                                                                                              // 2779
			left += this.coordAdjust.left;                                                                                      // 2780
			top += this.coordAdjust.top;                                                                                        // 2781
		}                                                                                                                    // 2782
                                                                                                                       // 2783
		return this.component.queryHit(left, top);                                                                           // 2784
	}                                                                                                                     // 2785
                                                                                                                       // 2786
});                                                                                                                    // 2787
                                                                                                                       // 2788
                                                                                                                       // 2789
// Returns `true` if the hits are identically equal. `false` otherwise. Must be from the same component.               // 2790
// Two null values will be considered equal, as two "out of the component" states are the same.                        // 2791
function isHitsEqual(hit0, hit1) {                                                                                     // 2792
                                                                                                                       // 2793
	if (!hit0 && !hit1) {                                                                                                 // 2794
		return true;                                                                                                         // 2795
	}                                                                                                                     // 2796
                                                                                                                       // 2797
	if (hit0 && hit1) {                                                                                                   // 2798
		return hit0.component === hit1.component &&                                                                          // 2799
			isHitPropsWithin(hit0, hit1) &&                                                                                     // 2800
			isHitPropsWithin(hit1, hit0); // ensures all props are identical                                                    // 2801
	}                                                                                                                     // 2802
                                                                                                                       // 2803
	return false;                                                                                                         // 2804
}                                                                                                                      // 2805
                                                                                                                       // 2806
                                                                                                                       // 2807
// Returns true if all of subHit's non-standard properties are within superHit                                         // 2808
function isHitPropsWithin(subHit, superHit) {                                                                          // 2809
	for (var propName in subHit) {                                                                                        // 2810
		if (!/^(component|left|right|top|bottom)$/.test(propName)) {                                                         // 2811
			if (subHit[propName] !== superHit[propName]) {                                                                      // 2812
				return false;                                                                                                      // 2813
			}                                                                                                                   // 2814
		}                                                                                                                    // 2815
	}                                                                                                                     // 2816
	return true;                                                                                                          // 2817
}                                                                                                                      // 2818
                                                                                                                       // 2819
;;                                                                                                                     // 2820
                                                                                                                       // 2821
/* Creates a clone of an element and lets it track the mouse as it moves                                               // 2822
----------------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 2824
var MouseFollower = Class.extend({                                                                                     // 2825
                                                                                                                       // 2826
	options: null,                                                                                                        // 2827
                                                                                                                       // 2828
	sourceEl: null, // the element that will be cloned and made to look like it is dragging                               // 2829
	el: null, // the clone of `sourceEl` that will track the mouse                                                        // 2830
	parentEl: null, // the element that `el` (the clone) will be attached to                                              // 2831
                                                                                                                       // 2832
	// the initial position of el, relative to the offset parent. made to match the initial offset of sourceEl            // 2833
	top0: null,                                                                                                           // 2834
	left0: null,                                                                                                          // 2835
                                                                                                                       // 2836
	// the initial position of the mouse                                                                                  // 2837
	mouseY0: null,                                                                                                        // 2838
	mouseX0: null,                                                                                                        // 2839
                                                                                                                       // 2840
	// the number of pixels the mouse has moved from its initial position                                                 // 2841
	topDelta: null,                                                                                                       // 2842
	leftDelta: null,                                                                                                      // 2843
                                                                                                                       // 2844
	mousemoveProxy: null, // document mousemove handler, bound to the MouseFollower's `this`                              // 2845
                                                                                                                       // 2846
	isFollowing: false,                                                                                                   // 2847
	isHidden: false,                                                                                                      // 2848
	isAnimating: false, // doing the revert animation?                                                                    // 2849
                                                                                                                       // 2850
	constructor: function(sourceEl, options) {                                                                            // 2851
		this.options = options = options || {};                                                                              // 2852
		this.sourceEl = sourceEl;                                                                                            // 2853
		this.parentEl = options.parentEl ? $(options.parentEl) : sourceEl.parent(); // default to sourceEl's parent          // 2854
	},                                                                                                                    // 2855
                                                                                                                       // 2856
                                                                                                                       // 2857
	// Causes the element to start following the mouse                                                                    // 2858
	start: function(ev) {                                                                                                 // 2859
		if (!this.isFollowing) {                                                                                             // 2860
			this.isFollowing = true;                                                                                            // 2861
                                                                                                                       // 2862
			this.mouseY0 = ev.pageY;                                                                                            // 2863
			this.mouseX0 = ev.pageX;                                                                                            // 2864
			this.topDelta = 0;                                                                                                  // 2865
			this.leftDelta = 0;                                                                                                 // 2866
                                                                                                                       // 2867
			if (!this.isHidden) {                                                                                               // 2868
				this.updatePosition();                                                                                             // 2869
			}                                                                                                                   // 2870
                                                                                                                       // 2871
			$(document).on('mousemove', this.mousemoveProxy = proxy(this, 'mousemove'));                                        // 2872
		}                                                                                                                    // 2873
	},                                                                                                                    // 2874
                                                                                                                       // 2875
                                                                                                                       // 2876
	// Causes the element to stop following the mouse. If shouldRevert is true, will animate back to original position.   // 2877
	// `callback` gets invoked when the animation is complete. If no animation, it is invoked immediately.                // 2878
	stop: function(shouldRevert, callback) {                                                                              // 2879
		var _this = this;                                                                                                    // 2880
		var revertDuration = this.options.revertDuration;                                                                    // 2881
                                                                                                                       // 2882
		function complete() {                                                                                                // 2883
			this.isAnimating = false;                                                                                           // 2884
			_this.removeElement();                                                                                              // 2885
                                                                                                                       // 2886
			this.top0 = this.left0 = null; // reset state for future updatePosition calls                                       // 2887
                                                                                                                       // 2888
			if (callback) {                                                                                                     // 2889
				callback();                                                                                                        // 2890
			}                                                                                                                   // 2891
		}                                                                                                                    // 2892
                                                                                                                       // 2893
		if (this.isFollowing && !this.isAnimating) { // disallow more than one stop animation at a time                      // 2894
			this.isFollowing = false;                                                                                           // 2895
                                                                                                                       // 2896
			$(document).off('mousemove', this.mousemoveProxy);                                                                  // 2897
                                                                                                                       // 2898
			if (shouldRevert && revertDuration && !this.isHidden) { // do a revert animation?                                   // 2899
				this.isAnimating = true;                                                                                           // 2900
				this.el.animate({                                                                                                  // 2901
					top: this.top0,                                                                                                   // 2902
					left: this.left0                                                                                                  // 2903
				}, {                                                                                                               // 2904
					duration: revertDuration,                                                                                         // 2905
					complete: complete                                                                                                // 2906
				});                                                                                                                // 2907
			}                                                                                                                   // 2908
			else {                                                                                                              // 2909
				complete();                                                                                                        // 2910
			}                                                                                                                   // 2911
		}                                                                                                                    // 2912
	},                                                                                                                    // 2913
                                                                                                                       // 2914
                                                                                                                       // 2915
	// Gets the tracking element. Create it if necessary                                                                  // 2916
	getEl: function() {                                                                                                   // 2917
		var el = this.el;                                                                                                    // 2918
                                                                                                                       // 2919
		if (!el) {                                                                                                           // 2920
			this.sourceEl.width(); // hack to force IE8 to compute correct bounding box                                         // 2921
			el = this.el = this.sourceEl.clone()                                                                                // 2922
				.css({                                                                                                             // 2923
					position: 'absolute',                                                                                             // 2924
					visibility: '', // in case original element was hidden (commonly through hideEvents())                            // 2925
					display: this.isHidden ? 'none' : '', // for when initially hidden                                                // 2926
					margin: 0,                                                                                                        // 2927
					right: 'auto', // erase and set width instead                                                                     // 2928
					bottom: 'auto', // erase and set height instead                                                                   // 2929
					width: this.sourceEl.width(), // explicit height in case there was a 'right' value                                // 2930
					height: this.sourceEl.height(), // explicit width in case there was a 'bottom' value                              // 2931
					opacity: this.options.opacity || '',                                                                              // 2932
					zIndex: this.options.zIndex                                                                                       // 2933
				})                                                                                                                 // 2934
				.appendTo(this.parentEl);                                                                                          // 2935
		}                                                                                                                    // 2936
                                                                                                                       // 2937
		return el;                                                                                                           // 2938
	},                                                                                                                    // 2939
                                                                                                                       // 2940
                                                                                                                       // 2941
	// Removes the tracking element if it has already been created                                                        // 2942
	removeElement: function() {                                                                                           // 2943
		if (this.el) {                                                                                                       // 2944
			this.el.remove();                                                                                                   // 2945
			this.el = null;                                                                                                     // 2946
		}                                                                                                                    // 2947
	},                                                                                                                    // 2948
                                                                                                                       // 2949
                                                                                                                       // 2950
	// Update the CSS position of the tracking element                                                                    // 2951
	updatePosition: function() {                                                                                          // 2952
		var sourceOffset;                                                                                                    // 2953
		var origin;                                                                                                          // 2954
                                                                                                                       // 2955
		this.getEl(); // ensure this.el                                                                                      // 2956
                                                                                                                       // 2957
		// make sure origin info was computed                                                                                // 2958
		if (this.top0 === null) {                                                                                            // 2959
			this.sourceEl.width(); // hack to force IE8 to compute correct bounding box                                         // 2960
			sourceOffset = this.sourceEl.offset();                                                                              // 2961
			origin = this.el.offsetParent().offset();                                                                           // 2962
			this.top0 = sourceOffset.top - origin.top;                                                                          // 2963
			this.left0 = sourceOffset.left - origin.left;                                                                       // 2964
		}                                                                                                                    // 2965
                                                                                                                       // 2966
		this.el.css({                                                                                                        // 2967
			top: this.top0 + this.topDelta,                                                                                     // 2968
			left: this.left0 + this.leftDelta                                                                                   // 2969
		});                                                                                                                  // 2970
	},                                                                                                                    // 2971
                                                                                                                       // 2972
                                                                                                                       // 2973
	// Gets called when the user moves the mouse                                                                          // 2974
	mousemove: function(ev) {                                                                                             // 2975
		this.topDelta = ev.pageY - this.mouseY0;                                                                             // 2976
		this.leftDelta = ev.pageX - this.mouseX0;                                                                            // 2977
                                                                                                                       // 2978
		if (!this.isHidden) {                                                                                                // 2979
			this.updatePosition();                                                                                              // 2980
		}                                                                                                                    // 2981
	},                                                                                                                    // 2982
                                                                                                                       // 2983
                                                                                                                       // 2984
	// Temporarily makes the tracking element invisible. Can be called before following starts                            // 2985
	hide: function() {                                                                                                    // 2986
		if (!this.isHidden) {                                                                                                // 2987
			this.isHidden = true;                                                                                               // 2988
			if (this.el) {                                                                                                      // 2989
				this.el.hide();                                                                                                    // 2990
			}                                                                                                                   // 2991
		}                                                                                                                    // 2992
	},                                                                                                                    // 2993
                                                                                                                       // 2994
                                                                                                                       // 2995
	// Show the tracking element after it has been temporarily hidden                                                     // 2996
	show: function() {                                                                                                    // 2997
		if (this.isHidden) {                                                                                                 // 2998
			this.isHidden = false;                                                                                              // 2999
			this.updatePosition();                                                                                              // 3000
			this.getEl().show();                                                                                                // 3001
		}                                                                                                                    // 3002
	}                                                                                                                     // 3003
                                                                                                                       // 3004
});                                                                                                                    // 3005
                                                                                                                       // 3006
;;                                                                                                                     // 3007
                                                                                                                       // 3008
/* An abstract class comprised of a "grid" of areas that each represent a specific datetime                            // 3009
----------------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 3011
var Grid = FC.Grid = Class.extend({                                                                                    // 3012
                                                                                                                       // 3013
	view: null, // a View object                                                                                          // 3014
	isRTL: null, // shortcut to the view's isRTL option                                                                   // 3015
                                                                                                                       // 3016
	start: null,                                                                                                          // 3017
	end: null,                                                                                                            // 3018
                                                                                                                       // 3019
	el: null, // the containing element                                                                                   // 3020
	elsByFill: null, // a hash of jQuery element sets used for rendering each fill. Keyed by fill name.                   // 3021
                                                                                                                       // 3022
	externalDragStartProxy: null, // binds the Grid's scope to externalDragStart (in DayGrid.events)                      // 3023
                                                                                                                       // 3024
	// derived from options                                                                                               // 3025
	eventTimeFormat: null,                                                                                                // 3026
	displayEventTime: null,                                                                                               // 3027
	displayEventEnd: null,                                                                                                // 3028
                                                                                                                       // 3029
	minResizeDuration: null, // TODO: hack. set by subclasses. minumum event resize duration                              // 3030
                                                                                                                       // 3031
	// if defined, holds the unit identified (ex: "year" or "month") that determines the level of granularity             // 3032
	// of the date areas. if not defined, assumes to be day and time granularity.                                         // 3033
	// TODO: port isTimeScale into same system?                                                                           // 3034
	largeUnit: null,                                                                                                      // 3035
                                                                                                                       // 3036
                                                                                                                       // 3037
	constructor: function(view) {                                                                                         // 3038
		this.view = view;                                                                                                    // 3039
		this.isRTL = view.opt('isRTL');                                                                                      // 3040
                                                                                                                       // 3041
		this.elsByFill = {};                                                                                                 // 3042
		this.externalDragStartProxy = proxy(this, 'externalDragStart');                                                      // 3043
	},                                                                                                                    // 3044
                                                                                                                       // 3045
                                                                                                                       // 3046
	/* Options                                                                                                            // 3047
	------------------------------------------------------------------------------------------------------------------*/  // 3048
                                                                                                                       // 3049
                                                                                                                       // 3050
	// Generates the format string used for event time text, if not explicitly defined by 'timeFormat'                    // 3051
	computeEventTimeFormat: function() {                                                                                  // 3052
		return this.view.opt('smallTimeFormat');                                                                             // 3053
	},                                                                                                                    // 3054
                                                                                                                       // 3055
                                                                                                                       // 3056
	// Determines whether events should have their end times displayed, if not explicitly defined by 'displayEventTime'.  // 3057
	// Only applies to non-all-day events.                                                                                // 3058
	computeDisplayEventTime: function() {                                                                                 // 3059
		return true;                                                                                                         // 3060
	},                                                                                                                    // 3061
                                                                                                                       // 3062
                                                                                                                       // 3063
	// Determines whether events should have their end times displayed, if not explicitly defined by 'displayEventEnd'    // 3064
	computeDisplayEventEnd: function() {                                                                                  // 3065
		return true;                                                                                                         // 3066
	},                                                                                                                    // 3067
                                                                                                                       // 3068
                                                                                                                       // 3069
	/* Dates                                                                                                              // 3070
	------------------------------------------------------------------------------------------------------------------*/  // 3071
                                                                                                                       // 3072
                                                                                                                       // 3073
	// Tells the grid about what period of time to display.                                                               // 3074
	// Any date-related internal data should be generated.                                                                // 3075
	setRange: function(range) {                                                                                           // 3076
		this.start = range.start.clone();                                                                                    // 3077
		this.end = range.end.clone();                                                                                        // 3078
                                                                                                                       // 3079
		this.rangeUpdated();                                                                                                 // 3080
		this.processRangeOptions();                                                                                          // 3081
	},                                                                                                                    // 3082
                                                                                                                       // 3083
                                                                                                                       // 3084
	// Called when internal variables that rely on the range should be updated                                            // 3085
	rangeUpdated: function() {                                                                                            // 3086
	},                                                                                                                    // 3087
                                                                                                                       // 3088
                                                                                                                       // 3089
	// Updates values that rely on options and also relate to range                                                       // 3090
	processRangeOptions: function() {                                                                                     // 3091
		var view = this.view;                                                                                                // 3092
		var displayEventTime;                                                                                                // 3093
		var displayEventEnd;                                                                                                 // 3094
                                                                                                                       // 3095
		this.eventTimeFormat =                                                                                               // 3096
			view.opt('eventTimeFormat') ||                                                                                      // 3097
			view.opt('timeFormat') || // deprecated                                                                             // 3098
			this.computeEventTimeFormat();                                                                                      // 3099
                                                                                                                       // 3100
		displayEventTime = view.opt('displayEventTime');                                                                     // 3101
		if (displayEventTime == null) {                                                                                      // 3102
			displayEventTime = this.computeDisplayEventTime(); // might be based off of range                                   // 3103
		}                                                                                                                    // 3104
                                                                                                                       // 3105
		displayEventEnd = view.opt('displayEventEnd');                                                                       // 3106
		if (displayEventEnd == null) {                                                                                       // 3107
			displayEventEnd = this.computeDisplayEventEnd(); // might be based off of range                                     // 3108
		}                                                                                                                    // 3109
                                                                                                                       // 3110
		this.displayEventTime = displayEventTime;                                                                            // 3111
		this.displayEventEnd = displayEventEnd;                                                                              // 3112
	},                                                                                                                    // 3113
                                                                                                                       // 3114
                                                                                                                       // 3115
	// Converts a span (has unzoned start/end and any other grid-specific location information)                           // 3116
	// into an array of segments (pieces of events whose format is decided by the grid).                                  // 3117
	spanToSegs: function(span) {                                                                                          // 3118
		// subclasses must implement                                                                                         // 3119
	},                                                                                                                    // 3120
                                                                                                                       // 3121
                                                                                                                       // 3122
	// Diffs the two dates, returning a duration, based on granularity of the grid                                        // 3123
	// TODO: port isTimeScale into this system?                                                                           // 3124
	diffDates: function(a, b) {                                                                                           // 3125
		if (this.largeUnit) {                                                                                                // 3126
			return diffByUnit(a, b, this.largeUnit);                                                                            // 3127
		}                                                                                                                    // 3128
		else {                                                                                                               // 3129
			return diffDayTime(a, b);                                                                                           // 3130
		}                                                                                                                    // 3131
	},                                                                                                                    // 3132
                                                                                                                       // 3133
                                                                                                                       // 3134
	/* Hit Area                                                                                                           // 3135
	------------------------------------------------------------------------------------------------------------------*/  // 3136
                                                                                                                       // 3137
                                                                                                                       // 3138
	// Called before one or more queryHit calls might happen. Should prepare any cached coordinates for queryHit          // 3139
	prepareHits: function() {                                                                                             // 3140
	},                                                                                                                    // 3141
                                                                                                                       // 3142
                                                                                                                       // 3143
	// Called when queryHit calls have subsided. Good place to clear any coordinate caches.                               // 3144
	releaseHits: function() {                                                                                             // 3145
	},                                                                                                                    // 3146
                                                                                                                       // 3147
                                                                                                                       // 3148
	// Given coordinates from the topleft of the document, return data about the date-related area underneath.            // 3149
	// Can return an object with arbitrary properties (although top/right/left/bottom are encouraged).                    // 3150
	// Must have a `grid` property, a reference to this current grid. TODO: avoid this                                    // 3151
	// The returned object will be processed by getHitSpan and getHitEl.                                                  // 3152
	queryHit: function(leftOffset, topOffset) {                                                                           // 3153
	},                                                                                                                    // 3154
                                                                                                                       // 3155
                                                                                                                       // 3156
	// Given position-level information about a date-related area within the grid,                                        // 3157
	// should return an object with at least a start/end date. Can provide other information as well.                     // 3158
	getHitSpan: function(hit) {                                                                                           // 3159
	},                                                                                                                    // 3160
                                                                                                                       // 3161
                                                                                                                       // 3162
	// Given position-level information about a date-related area within the grid,                                        // 3163
	// should return a jQuery element that best represents it. passed to dayClick callback.                               // 3164
	getHitEl: function(hit) {                                                                                             // 3165
	},                                                                                                                    // 3166
                                                                                                                       // 3167
                                                                                                                       // 3168
	/* Rendering                                                                                                          // 3169
	------------------------------------------------------------------------------------------------------------------*/  // 3170
                                                                                                                       // 3171
                                                                                                                       // 3172
	// Sets the container element that the grid should render inside of.                                                  // 3173
	// Does other DOM-related initializations.                                                                            // 3174
	setElement: function(el) {                                                                                            // 3175
		var _this = this;                                                                                                    // 3176
                                                                                                                       // 3177
		this.el = el;                                                                                                        // 3178
                                                                                                                       // 3179
		// attach a handler to the grid's root element.                                                                      // 3180
		// jQuery will take care of unregistering them when removeElement gets called.                                       // 3181
		el.on('mousedown', function(ev) {                                                                                    // 3182
			if (                                                                                                                // 3183
				!$(ev.target).is('.fc-event-container *, .fc-more') && // not an an event element, or "more.." link                // 3184
				!$(ev.target).closest('.fc-popover').length // not on a popover (like the "more.." events one)                     // 3185
			) {                                                                                                                 // 3186
				_this.dayMousedown(ev);                                                                                            // 3187
			}                                                                                                                   // 3188
		});                                                                                                                  // 3189
                                                                                                                       // 3190
		// attach event-element-related handlers. in Grid.events                                                             // 3191
		// same garbage collection note as above.                                                                            // 3192
		this.bindSegHandlers();                                                                                              // 3193
                                                                                                                       // 3194
		this.bindGlobalHandlers();                                                                                           // 3195
	},                                                                                                                    // 3196
                                                                                                                       // 3197
                                                                                                                       // 3198
	// Removes the grid's container element from the DOM. Undoes any other DOM-related attachments.                       // 3199
	// DOES NOT remove any content beforehand (doesn't clear events or call unrenderDates), unlike View                   // 3200
	removeElement: function() {                                                                                           // 3201
		this.unbindGlobalHandlers();                                                                                         // 3202
                                                                                                                       // 3203
		this.el.remove();                                                                                                    // 3204
                                                                                                                       // 3205
		// NOTE: we don't null-out this.el for the same reasons we don't do it within View::removeElement                    // 3206
	},                                                                                                                    // 3207
                                                                                                                       // 3208
                                                                                                                       // 3209
	// Renders the basic structure of grid view before any content is rendered                                            // 3210
	renderSkeleton: function() {                                                                                          // 3211
		// subclasses should implement                                                                                       // 3212
	},                                                                                                                    // 3213
                                                                                                                       // 3214
                                                                                                                       // 3215
	// Renders the grid's date-related content (like areas that represent days/times).                                    // 3216
	// Assumes setRange has already been called and the skeleton has already been rendered.                               // 3217
	renderDates: function() {                                                                                             // 3218
		// subclasses should implement                                                                                       // 3219
	},                                                                                                                    // 3220
                                                                                                                       // 3221
                                                                                                                       // 3222
	// Unrenders the grid's date-related content                                                                          // 3223
	unrenderDates: function() {                                                                                           // 3224
		// subclasses should implement                                                                                       // 3225
	},                                                                                                                    // 3226
                                                                                                                       // 3227
                                                                                                                       // 3228
	/* Handlers                                                                                                           // 3229
	------------------------------------------------------------------------------------------------------------------*/  // 3230
                                                                                                                       // 3231
                                                                                                                       // 3232
	// Binds DOM handlers to elements that reside outside the grid, such as the document                                  // 3233
	bindGlobalHandlers: function() {                                                                                      // 3234
		$(document).on('dragstart sortstart', this.externalDragStartProxy); // jqui                                          // 3235
	},                                                                                                                    // 3236
                                                                                                                       // 3237
                                                                                                                       // 3238
	// Unbinds DOM handlers from elements that reside outside the grid                                                    // 3239
	unbindGlobalHandlers: function() {                                                                                    // 3240
		$(document).off('dragstart sortstart', this.externalDragStartProxy); // jqui                                         // 3241
	},                                                                                                                    // 3242
                                                                                                                       // 3243
                                                                                                                       // 3244
	// Process a mousedown on an element that represents a day. For day clicking and selecting.                           // 3245
	dayMousedown: function(ev) {                                                                                          // 3246
		var _this = this;                                                                                                    // 3247
		var view = this.view;                                                                                                // 3248
		var isSelectable = view.opt('selectable');                                                                           // 3249
		var dayClickHit; // null if invalid dayClick                                                                         // 3250
		var selectionSpan; // null if invalid selection                                                                      // 3251
                                                                                                                       // 3252
		// this listener tracks a mousedown on a day element, and a subsequent drag.                                         // 3253
		// if the drag ends on the same day, it is a 'dayClick'.                                                             // 3254
		// if 'selectable' is enabled, this listener also detects selections.                                                // 3255
		var dragListener = new HitDragListener(this, {                                                                       // 3256
			//distance: 5, // needs more work if we want dayClick to fire correctly                                             // 3257
			scroll: view.opt('dragScroll'),                                                                                     // 3258
			dragStart: function() {                                                                                             // 3259
				view.unselect(); // since we could be rendering a new selection, we want to clear any old one                      // 3260
			},                                                                                                                  // 3261
			hitOver: function(hit, isOrig, origHit) {                                                                           // 3262
				if (origHit) { // click needs to have started on a hit                                                             // 3263
					dayClickHit = isOrig ? hit : null; // single-hit selection is a day click                                         // 3264
					if (isSelectable) {                                                                                               // 3265
						selectionSpan = _this.computeSelection(                                                                          // 3266
							_this.getHitSpan(origHit),                                                                                      // 3267
							_this.getHitSpan(hit)                                                                                           // 3268
						);                                                                                                               // 3269
						if (selectionSpan) {                                                                                             // 3270
							_this.renderSelection(selectionSpan);                                                                           // 3271
						}                                                                                                                // 3272
						else if (selectionSpan === false) {                                                                              // 3273
							disableCursor();                                                                                                // 3274
						}                                                                                                                // 3275
					}                                                                                                                 // 3276
				}                                                                                                                  // 3277
			},                                                                                                                  // 3278
			hitOut: function() {                                                                                                // 3279
				dayClickHit = null;                                                                                                // 3280
				selectionSpan = null;                                                                                              // 3281
				_this.unrenderSelection();                                                                                         // 3282
				enableCursor();                                                                                                    // 3283
			},                                                                                                                  // 3284
			listenStop: function(ev) {                                                                                          // 3285
				if (dayClickHit) {                                                                                                 // 3286
					view.triggerDayClick(                                                                                             // 3287
						_this.getHitSpan(dayClickHit),                                                                                   // 3288
						_this.getHitEl(dayClickHit),                                                                                     // 3289
						ev                                                                                                               // 3290
					);                                                                                                                // 3291
				}                                                                                                                  // 3292
				if (selectionSpan) {                                                                                               // 3293
					// the selection will already have been rendered. just report it                                                  // 3294
					view.reportSelection(selectionSpan, ev);                                                                          // 3295
				}                                                                                                                  // 3296
				enableCursor();                                                                                                    // 3297
			}                                                                                                                   // 3298
		});                                                                                                                  // 3299
                                                                                                                       // 3300
		dragListener.mousedown(ev); // start listening, which will eventually initiate a dragStart                           // 3301
	},                                                                                                                    // 3302
                                                                                                                       // 3303
                                                                                                                       // 3304
	/* Event Helper                                                                                                       // 3305
	------------------------------------------------------------------------------------------------------------------*/  // 3306
	// TODO: should probably move this to Grid.events, like we did event dragging / resizing                              // 3307
                                                                                                                       // 3308
                                                                                                                       // 3309
	// Renders a mock event at the given event location, which contains zoned start/end properties.                       // 3310
	renderEventLocationHelper: function(eventLocation, sourceSeg) {                                                       // 3311
		var fakeEvent = this.fabricateHelperEvent(eventLocation, sourceSeg);                                                 // 3312
                                                                                                                       // 3313
		this.renderHelper(fakeEvent, sourceSeg); // do the actual rendering                                                  // 3314
	},                                                                                                                    // 3315
                                                                                                                       // 3316
                                                                                                                       // 3317
	// Builds a fake event given zoned event date properties and a segment is should be inspired from.                    // 3318
	// The range's end can be null, in which case the mock event that is rendered will have a null end time.              // 3319
	// `sourceSeg` is the internal segment object involved in the drag. If null, something external is dragging.          // 3320
	fabricateHelperEvent: function(eventLocation, sourceSeg) {                                                            // 3321
		var fakeEvent = sourceSeg ? createObject(sourceSeg.event) : {}; // mask the original event object if possible        // 3322
                                                                                                                       // 3323
		fakeEvent.start = eventLocation.start.clone();                                                                       // 3324
		fakeEvent.end = eventLocation.end ? eventLocation.end.clone() : null;                                                // 3325
		fakeEvent.allDay = null; // force it to be freshly computed by normalizeEventDates                                   // 3326
		this.view.calendar.normalizeEventDates(fakeEvent);                                                                   // 3327
                                                                                                                       // 3328
		// this extra className will be useful for differentiating real events from mock events in CSS                       // 3329
		fakeEvent.className = (fakeEvent.className || []).concat('fc-helper');                                               // 3330
                                                                                                                       // 3331
		// if something external is being dragged in, don't render a resizer                                                 // 3332
		if (!sourceSeg) {                                                                                                    // 3333
			fakeEvent.editable = false;                                                                                         // 3334
		}                                                                                                                    // 3335
                                                                                                                       // 3336
		return fakeEvent;                                                                                                    // 3337
	},                                                                                                                    // 3338
                                                                                                                       // 3339
                                                                                                                       // 3340
	// Renders a mock event. Given zoned event date properties.                                                           // 3341
	renderHelper: function(eventLocation, sourceSeg) {                                                                    // 3342
		// subclasses must implement                                                                                         // 3343
	},                                                                                                                    // 3344
                                                                                                                       // 3345
                                                                                                                       // 3346
	// Unrenders a mock event                                                                                             // 3347
	unrenderHelper: function() {                                                                                          // 3348
		// subclasses must implement                                                                                         // 3349
	},                                                                                                                    // 3350
                                                                                                                       // 3351
                                                                                                                       // 3352
	/* Selection                                                                                                          // 3353
	------------------------------------------------------------------------------------------------------------------*/  // 3354
                                                                                                                       // 3355
                                                                                                                       // 3356
	// Renders a visual indication of a selection. Will highlight by default but can be overridden by subclasses.         // 3357
	// Given a span (unzoned start/end and other misc data)                                                               // 3358
	renderSelection: function(span) {                                                                                     // 3359
		this.renderHighlight(span);                                                                                          // 3360
	},                                                                                                                    // 3361
                                                                                                                       // 3362
                                                                                                                       // 3363
	// Unrenders any visual indications of a selection. Will unrender a highlight by default.                             // 3364
	unrenderSelection: function() {                                                                                       // 3365
		this.unrenderHighlight();                                                                                            // 3366
	},                                                                                                                    // 3367
                                                                                                                       // 3368
                                                                                                                       // 3369
	// Given the first and last date-spans of a selection, returns another date-span object.                              // 3370
	// Subclasses can override and provide additional data in the span object. Will be passed to renderSelection().       // 3371
	// Will return false if the selection is invalid and this should be indicated to the user.                            // 3372
	// Will return null/undefined if a selection invalid but no error should be reported.                                 // 3373
	computeSelection: function(span0, span1) {                                                                            // 3374
		var span = this.computeSelectionSpan(span0, span1);                                                                  // 3375
                                                                                                                       // 3376
		if (span && !this.view.calendar.isSelectionSpanAllowed(span)) {                                                      // 3377
			return false;                                                                                                       // 3378
		}                                                                                                                    // 3379
                                                                                                                       // 3380
		return span;                                                                                                         // 3381
	},                                                                                                                    // 3382
                                                                                                                       // 3383
                                                                                                                       // 3384
	// Given two spans, must return the combination of the two.                                                           // 3385
	// TODO: do this separation of concerns (combining VS validation) for event dnd/resize too.                           // 3386
	computeSelectionSpan: function(span0, span1) {                                                                        // 3387
		var dates = [ span0.start, span0.end, span1.start, span1.end ];                                                      // 3388
                                                                                                                       // 3389
		dates.sort(compareNumbers); // sorts chronologically. works with Moments                                             // 3390
                                                                                                                       // 3391
		return { start: dates[0].clone(), end: dates[3].clone() };                                                           // 3392
	},                                                                                                                    // 3393
                                                                                                                       // 3394
                                                                                                                       // 3395
	/* Highlight                                                                                                          // 3396
	------------------------------------------------------------------------------------------------------------------*/  // 3397
                                                                                                                       // 3398
                                                                                                                       // 3399
	// Renders an emphasis on the given date range. Given a span (unzoned start/end and other misc data)                  // 3400
	renderHighlight: function(span) {                                                                                     // 3401
		this.renderFill('highlight', this.spanToSegs(span));                                                                 // 3402
	},                                                                                                                    // 3403
                                                                                                                       // 3404
                                                                                                                       // 3405
	// Unrenders the emphasis on a date range                                                                             // 3406
	unrenderHighlight: function() {                                                                                       // 3407
		this.unrenderFill('highlight');                                                                                      // 3408
	},                                                                                                                    // 3409
                                                                                                                       // 3410
                                                                                                                       // 3411
	// Generates an array of classNames for rendering the highlight. Used by the fill system.                             // 3412
	highlightSegClasses: function() {                                                                                     // 3413
		return [ 'fc-highlight' ];                                                                                           // 3414
	},                                                                                                                    // 3415
                                                                                                                       // 3416
                                                                                                                       // 3417
	/* Fill System (highlight, background events, business hours)                                                         // 3418
	------------------------------------------------------------------------------------------------------------------*/  // 3419
                                                                                                                       // 3420
                                                                                                                       // 3421
	// Renders a set of rectangles over the given segments of time.                                                       // 3422
	// MUST RETURN a subset of segs, the segs that were actually rendered.                                                // 3423
	// Responsible for populating this.elsByFill. TODO: better API for expressing this requirement                        // 3424
	renderFill: function(type, segs) {                                                                                    // 3425
		// subclasses must implement                                                                                         // 3426
	},                                                                                                                    // 3427
                                                                                                                       // 3428
                                                                                                                       // 3429
	// Unrenders a specific type of fill that is currently rendered on the grid                                           // 3430
	unrenderFill: function(type) {                                                                                        // 3431
		var el = this.elsByFill[type];                                                                                       // 3432
                                                                                                                       // 3433
		if (el) {                                                                                                            // 3434
			el.remove();                                                                                                        // 3435
			delete this.elsByFill[type];                                                                                        // 3436
		}                                                                                                                    // 3437
	},                                                                                                                    // 3438
                                                                                                                       // 3439
                                                                                                                       // 3440
	// Renders and assigns an `el` property for each fill segment. Generic enough to work with different types.           // 3441
	// Only returns segments that successfully rendered.                                                                  // 3442
	// To be harnessed by renderFill (implemented by subclasses).                                                         // 3443
	// Analagous to renderFgSegEls.                                                                                       // 3444
	renderFillSegEls: function(type, segs) {                                                                              // 3445
		var _this = this;                                                                                                    // 3446
		var segElMethod = this[type + 'SegEl'];                                                                              // 3447
		var html = '';                                                                                                       // 3448
		var renderedSegs = [];                                                                                               // 3449
		var i;                                                                                                               // 3450
                                                                                                                       // 3451
		if (segs.length) {                                                                                                   // 3452
                                                                                                                       // 3453
			// build a large concatenation of segment HTML                                                                      // 3454
			for (i = 0; i < segs.length; i++) {                                                                                 // 3455
				html += this.fillSegHtml(type, segs[i]);                                                                           // 3456
			}                                                                                                                   // 3457
                                                                                                                       // 3458
			// Grab individual elements from the combined HTML string. Use each as the default rendering.                       // 3459
			// Then, compute the 'el' for each segment.                                                                         // 3460
			$(html).each(function(i, node) {                                                                                    // 3461
				var seg = segs[i];                                                                                                 // 3462
				var el = $(node);                                                                                                  // 3463
                                                                                                                       // 3464
				// allow custom filter methods per-type                                                                            // 3465
				if (segElMethod) {                                                                                                 // 3466
					el = segElMethod.call(_this, seg, el);                                                                            // 3467
				}                                                                                                                  // 3468
                                                                                                                       // 3469
				if (el) { // custom filters did not cancel the render                                                              // 3470
					el = $(el); // allow custom filter to return raw DOM node                                                         // 3471
                                                                                                                       // 3472
					// correct element type? (would be bad if a non-TD were inserted into a table for example)                        // 3473
					if (el.is(_this.fillSegTag)) {                                                                                    // 3474
						seg.el = el;                                                                                                     // 3475
						renderedSegs.push(seg);                                                                                          // 3476
					}                                                                                                                 // 3477
				}                                                                                                                  // 3478
			});                                                                                                                 // 3479
		}                                                                                                                    // 3480
                                                                                                                       // 3481
		return renderedSegs;                                                                                                 // 3482
	},                                                                                                                    // 3483
                                                                                                                       // 3484
                                                                                                                       // 3485
	fillSegTag: 'div', // subclasses can override                                                                         // 3486
                                                                                                                       // 3487
                                                                                                                       // 3488
	// Builds the HTML needed for one fill segment. Generic enought o work with different types.                          // 3489
	fillSegHtml: function(type, seg) {                                                                                    // 3490
                                                                                                                       // 3491
		// custom hooks per-type                                                                                             // 3492
		var classesMethod = this[type + 'SegClasses'];                                                                       // 3493
		var cssMethod = this[type + 'SegCss'];                                                                               // 3494
                                                                                                                       // 3495
		var classes = classesMethod ? classesMethod.call(this, seg) : [];                                                    // 3496
		var css = cssToStr(cssMethod ? cssMethod.call(this, seg) : {});                                                      // 3497
                                                                                                                       // 3498
		return '<' + this.fillSegTag +                                                                                       // 3499
			(classes.length ? ' class="' + classes.join(' ') + '"' : '') +                                                      // 3500
			(css ? ' style="' + css + '"' : '') +                                                                               // 3501
			' />';                                                                                                              // 3502
	},                                                                                                                    // 3503
                                                                                                                       // 3504
                                                                                                                       // 3505
                                                                                                                       // 3506
	/* Generic rendering utilities for subclasses                                                                         // 3507
	------------------------------------------------------------------------------------------------------------------*/  // 3508
                                                                                                                       // 3509
                                                                                                                       // 3510
	// Computes HTML classNames for a single-day element                                                                  // 3511
	getDayClasses: function(date) {                                                                                       // 3512
		var view = this.view;                                                                                                // 3513
		var today = view.calendar.getNow().stripTime();                                                                      // 3514
		var classes = [ 'fc-' + dayIDs[date.day()] ];                                                                        // 3515
                                                                                                                       // 3516
		if (                                                                                                                 // 3517
			view.intervalDuration.as('months') == 1 &&                                                                          // 3518
			date.month() != view.intervalStart.month()                                                                          // 3519
		) {                                                                                                                  // 3520
			classes.push('fc-other-month');                                                                                     // 3521
		}                                                                                                                    // 3522
                                                                                                                       // 3523
		if (date.isSame(today, 'day')) {                                                                                     // 3524
			classes.push(                                                                                                       // 3525
				'fc-today',                                                                                                        // 3526
				view.highlightStateClass                                                                                           // 3527
			);                                                                                                                  // 3528
		}                                                                                                                    // 3529
		else if (date < today) {                                                                                             // 3530
			classes.push('fc-past');                                                                                            // 3531
		}                                                                                                                    // 3532
		else {                                                                                                               // 3533
			classes.push('fc-future');                                                                                          // 3534
		}                                                                                                                    // 3535
                                                                                                                       // 3536
		return classes;                                                                                                      // 3537
	}                                                                                                                     // 3538
                                                                                                                       // 3539
});                                                                                                                    // 3540
                                                                                                                       // 3541
;;                                                                                                                     // 3542
                                                                                                                       // 3543
/* Event-rendering and event-interaction methods for the abstract Grid class                                           // 3544
----------------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 3546
Grid.mixin({                                                                                                           // 3547
                                                                                                                       // 3548
	mousedOverSeg: null, // the segment object the user's mouse is over. null if over nothing                             // 3549
	isDraggingSeg: false, // is a segment being dragged? boolean                                                          // 3550
	isResizingSeg: false, // is a segment being resized? boolean                                                          // 3551
	isDraggingExternal: false, // jqui-dragging an external element? boolean                                              // 3552
	segs: null, // the event segments currently rendered in the grid                                                      // 3553
                                                                                                                       // 3554
                                                                                                                       // 3555
	// Renders the given events onto the grid                                                                             // 3556
	renderEvents: function(events) {                                                                                      // 3557
		var bgEvents = [];                                                                                                   // 3558
		var fgEvents = [];                                                                                                   // 3559
		var i;                                                                                                               // 3560
                                                                                                                       // 3561
		for (i = 0; i < events.length; i++) {                                                                                // 3562
			(isBgEvent(events[i]) ? bgEvents : fgEvents).push(events[i]);                                                       // 3563
		}                                                                                                                    // 3564
                                                                                                                       // 3565
		this.segs = [].concat( // record all segs                                                                            // 3566
			this.renderBgEvents(bgEvents),                                                                                      // 3567
			this.renderFgEvents(fgEvents)                                                                                       // 3568
		);                                                                                                                   // 3569
	},                                                                                                                    // 3570
                                                                                                                       // 3571
                                                                                                                       // 3572
	renderBgEvents: function(events) {                                                                                    // 3573
		var segs = this.eventsToSegs(events);                                                                                // 3574
                                                                                                                       // 3575
		// renderBgSegs might return a subset of segs, segs that were actually rendered                                      // 3576
		return this.renderBgSegs(segs) || segs;                                                                              // 3577
	},                                                                                                                    // 3578
                                                                                                                       // 3579
                                                                                                                       // 3580
	renderFgEvents: function(events) {                                                                                    // 3581
		var segs = this.eventsToSegs(events);                                                                                // 3582
                                                                                                                       // 3583
		// renderFgSegs might return a subset of segs, segs that were actually rendered                                      // 3584
		return this.renderFgSegs(segs) || segs;                                                                              // 3585
	},                                                                                                                    // 3586
                                                                                                                       // 3587
                                                                                                                       // 3588
	// Unrenders all events currently rendered on the grid                                                                // 3589
	unrenderEvents: function() {                                                                                          // 3590
		this.triggerSegMouseout(); // trigger an eventMouseout if user's mouse is over an event                              // 3591
                                                                                                                       // 3592
		this.unrenderFgSegs();                                                                                               // 3593
		this.unrenderBgSegs();                                                                                               // 3594
                                                                                                                       // 3595
		this.segs = null;                                                                                                    // 3596
	},                                                                                                                    // 3597
                                                                                                                       // 3598
                                                                                                                       // 3599
	// Retrieves all rendered segment objects currently rendered on the grid                                              // 3600
	getEventSegs: function() {                                                                                            // 3601
		return this.segs || [];                                                                                              // 3602
	},                                                                                                                    // 3603
                                                                                                                       // 3604
                                                                                                                       // 3605
	/* Foreground Segment Rendering                                                                                       // 3606
	------------------------------------------------------------------------------------------------------------------*/  // 3607
                                                                                                                       // 3608
                                                                                                                       // 3609
	// Renders foreground event segments onto the grid. May return a subset of segs that were rendered.                   // 3610
	renderFgSegs: function(segs) {                                                                                        // 3611
		// subclasses must implement                                                                                         // 3612
	},                                                                                                                    // 3613
                                                                                                                       // 3614
                                                                                                                       // 3615
	// Unrenders all currently rendered foreground segments                                                               // 3616
	unrenderFgSegs: function() {                                                                                          // 3617
		// subclasses must implement                                                                                         // 3618
	},                                                                                                                    // 3619
                                                                                                                       // 3620
                                                                                                                       // 3621
	// Renders and assigns an `el` property for each foreground event segment.                                            // 3622
	// Only returns segments that successfully rendered.                                                                  // 3623
	// A utility that subclasses may use.                                                                                 // 3624
	renderFgSegEls: function(segs, disableResizing) {                                                                     // 3625
		var view = this.view;                                                                                                // 3626
		var html = '';                                                                                                       // 3627
		var renderedSegs = [];                                                                                               // 3628
		var i;                                                                                                               // 3629
                                                                                                                       // 3630
		if (segs.length) { // don't build an empty html string                                                               // 3631
                                                                                                                       // 3632
			// build a large concatenation of event segment HTML                                                                // 3633
			for (i = 0; i < segs.length; i++) {                                                                                 // 3634
				html += this.fgSegHtml(segs[i], disableResizing);                                                                  // 3635
			}                                                                                                                   // 3636
                                                                                                                       // 3637
			// Grab individual elements from the combined HTML string. Use each as the default rendering.                       // 3638
			// Then, compute the 'el' for each segment. An el might be null if the eventRender callback returned false.         // 3639
			$(html).each(function(i, node) {                                                                                    // 3640
				var seg = segs[i];                                                                                                 // 3641
				var el = view.resolveEventEl(seg.event, $(node));                                                                  // 3642
                                                                                                                       // 3643
				if (el) {                                                                                                          // 3644
					el.data('fc-seg', seg); // used by handlers                                                                       // 3645
					seg.el = el;                                                                                                      // 3646
					renderedSegs.push(seg);                                                                                           // 3647
				}                                                                                                                  // 3648
			});                                                                                                                 // 3649
		}                                                                                                                    // 3650
                                                                                                                       // 3651
		return renderedSegs;                                                                                                 // 3652
	},                                                                                                                    // 3653
                                                                                                                       // 3654
                                                                                                                       // 3655
	// Generates the HTML for the default rendering of a foreground event segment. Used by renderFgSegEls()               // 3656
	fgSegHtml: function(seg, disableResizing) {                                                                           // 3657
		// subclasses should implement                                                                                       // 3658
	},                                                                                                                    // 3659
                                                                                                                       // 3660
                                                                                                                       // 3661
	/* Background Segment Rendering                                                                                       // 3662
	------------------------------------------------------------------------------------------------------------------*/  // 3663
                                                                                                                       // 3664
                                                                                                                       // 3665
	// Renders the given background event segments onto the grid.                                                         // 3666
	// Returns a subset of the segs that were actually rendered.                                                          // 3667
	renderBgSegs: function(segs) {                                                                                        // 3668
		return this.renderFill('bgEvent', segs);                                                                             // 3669
	},                                                                                                                    // 3670
                                                                                                                       // 3671
                                                                                                                       // 3672
	// Unrenders all the currently rendered background event segments                                                     // 3673
	unrenderBgSegs: function() {                                                                                          // 3674
		this.unrenderFill('bgEvent');                                                                                        // 3675
	},                                                                                                                    // 3676
                                                                                                                       // 3677
                                                                                                                       // 3678
	// Renders a background event element, given the default rendering. Called by the fill system.                        // 3679
	bgEventSegEl: function(seg, el) {                                                                                     // 3680
		return this.view.resolveEventEl(seg.event, el); // will filter through eventRender                                   // 3681
	},                                                                                                                    // 3682
                                                                                                                       // 3683
                                                                                                                       // 3684
	// Generates an array of classNames to be used for the default rendering of a background event.                       // 3685
	// Called by the fill system.                                                                                         // 3686
	bgEventSegClasses: function(seg) {                                                                                    // 3687
		var event = seg.event;                                                                                               // 3688
		var source = event.source || {};                                                                                     // 3689
                                                                                                                       // 3690
		return [ 'fc-bgevent' ].concat(                                                                                      // 3691
			event.className,                                                                                                    // 3692
			source.className || []                                                                                              // 3693
		);                                                                                                                   // 3694
	},                                                                                                                    // 3695
                                                                                                                       // 3696
                                                                                                                       // 3697
	// Generates a semicolon-separated CSS string to be used for the default rendering of a background event.             // 3698
	// Called by the fill system.                                                                                         // 3699
	// TODO: consolidate with getEventSkinCss?                                                                            // 3700
	bgEventSegCss: function(seg) {                                                                                        // 3701
		var view = this.view;                                                                                                // 3702
		var event = seg.event;                                                                                               // 3703
		var source = event.source || {};                                                                                     // 3704
                                                                                                                       // 3705
		return {                                                                                                             // 3706
			'background-color':                                                                                                 // 3707
				event.backgroundColor ||                                                                                           // 3708
				event.color ||                                                                                                     // 3709
				source.backgroundColor ||                                                                                          // 3710
				source.color ||                                                                                                    // 3711
				view.opt('eventBackgroundColor') ||                                                                                // 3712
				view.opt('eventColor')                                                                                             // 3713
		};                                                                                                                   // 3714
	},                                                                                                                    // 3715
                                                                                                                       // 3716
                                                                                                                       // 3717
	// Generates an array of classNames to be used for the rendering business hours overlay. Called by the fill system.   // 3718
	businessHoursSegClasses: function(seg) {                                                                              // 3719
		return [ 'fc-nonbusiness', 'fc-bgevent' ];                                                                           // 3720
	},                                                                                                                    // 3721
                                                                                                                       // 3722
                                                                                                                       // 3723
	/* Handlers                                                                                                           // 3724
	------------------------------------------------------------------------------------------------------------------*/  // 3725
                                                                                                                       // 3726
                                                                                                                       // 3727
	// Attaches event-element-related handlers to the container element and leverage bubbling                             // 3728
	bindSegHandlers: function() {                                                                                         // 3729
		var _this = this;                                                                                                    // 3730
		var view = this.view;                                                                                                // 3731
                                                                                                                       // 3732
		$.each(                                                                                                              // 3733
			{                                                                                                                   // 3734
				mouseenter: function(seg, ev) {                                                                                    // 3735
					_this.triggerSegMouseover(seg, ev);                                                                               // 3736
				},                                                                                                                 // 3737
				mouseleave: function(seg, ev) {                                                                                    // 3738
					_this.triggerSegMouseout(seg, ev);                                                                                // 3739
				},                                                                                                                 // 3740
				click: function(seg, ev) {                                                                                         // 3741
					return view.trigger('eventClick', this, seg.event, ev); // can return `false` to cancel                           // 3742
				},                                                                                                                 // 3743
				mousedown: function(seg, ev) {                                                                                     // 3744
					if ($(ev.target).is('.fc-resizer') && view.isEventResizable(seg.event)) {                                         // 3745
						_this.segResizeMousedown(seg, ev, $(ev.target).is('.fc-start-resizer'));                                         // 3746
					}                                                                                                                 // 3747
					else if (view.isEventDraggable(seg.event)) {                                                                      // 3748
						_this.segDragMousedown(seg, ev);                                                                                 // 3749
					}                                                                                                                 // 3750
				}                                                                                                                  // 3751
			},                                                                                                                  // 3752
			function(name, func) {                                                                                              // 3753
				// attach the handler to the container element and only listen for real event elements via bubbling                // 3754
				_this.el.on(name, '.fc-event-container > *', function(ev) {                                                        // 3755
					var seg = $(this).data('fc-seg'); // grab segment data. put there by View::renderEvents                           // 3756
                                                                                                                       // 3757
					// only call the handlers if there is not a drag/resize in progress                                               // 3758
					if (seg && !_this.isDraggingSeg && !_this.isResizingSeg) {                                                        // 3759
						return func.call(this, seg, ev); // `this` will be the event element                                             // 3760
					}                                                                                                                 // 3761
				});                                                                                                                // 3762
			}                                                                                                                   // 3763
		);                                                                                                                   // 3764
	},                                                                                                                    // 3765
                                                                                                                       // 3766
                                                                                                                       // 3767
	// Updates internal state and triggers handlers for when an event element is moused over                              // 3768
	triggerSegMouseover: function(seg, ev) {                                                                              // 3769
		if (!this.mousedOverSeg) {                                                                                           // 3770
			this.mousedOverSeg = seg;                                                                                           // 3771
			this.view.trigger('eventMouseover', seg.el[0], seg.event, ev);                                                      // 3772
		}                                                                                                                    // 3773
	},                                                                                                                    // 3774
                                                                                                                       // 3775
                                                                                                                       // 3776
	// Updates internal state and triggers handlers for when an event element is moused out.                              // 3777
	// Can be given no arguments, in which case it will mouseout the segment that was previously moused over.             // 3778
	triggerSegMouseout: function(seg, ev) {                                                                               // 3779
		ev = ev || {}; // if given no args, make a mock mouse event                                                          // 3780
                                                                                                                       // 3781
		if (this.mousedOverSeg) {                                                                                            // 3782
			seg = seg || this.mousedOverSeg; // if given no args, use the currently moused-over segment                         // 3783
			this.mousedOverSeg = null;                                                                                          // 3784
			this.view.trigger('eventMouseout', seg.el[0], seg.event, ev);                                                       // 3785
		}                                                                                                                    // 3786
	},                                                                                                                    // 3787
                                                                                                                       // 3788
                                                                                                                       // 3789
	/* Event Dragging                                                                                                     // 3790
	------------------------------------------------------------------------------------------------------------------*/  // 3791
                                                                                                                       // 3792
                                                                                                                       // 3793
	// Called when the user does a mousedown on an event, which might lead to dragging.                                   // 3794
	// Generic enough to work with any type of Grid.                                                                      // 3795
	segDragMousedown: function(seg, ev) {                                                                                 // 3796
		var _this = this;                                                                                                    // 3797
		var view = this.view;                                                                                                // 3798
		var calendar = view.calendar;                                                                                        // 3799
		var el = seg.el;                                                                                                     // 3800
		var event = seg.event;                                                                                               // 3801
		var dropLocation; // zoned event date properties                                                                     // 3802
                                                                                                                       // 3803
		// A clone of the original element that will move with the mouse                                                     // 3804
		var mouseFollower = new MouseFollower(seg.el, {                                                                      // 3805
			parentEl: view.el,                                                                                                  // 3806
			opacity: view.opt('dragOpacity'),                                                                                   // 3807
			revertDuration: view.opt('dragRevertDuration'),                                                                     // 3808
			zIndex: 2 // one above the .fc-view                                                                                 // 3809
		});                                                                                                                  // 3810
                                                                                                                       // 3811
		// Tracks mouse movement over the *view's* coordinate map. Allows dragging and dropping between subcomponents        // 3812
		// of the view.                                                                                                      // 3813
		var dragListener = new HitDragListener(view, {                                                                       // 3814
			distance: 5,                                                                                                        // 3815
			scroll: view.opt('dragScroll'),                                                                                     // 3816
			subjectEl: el,                                                                                                      // 3817
			subjectCenter: true,                                                                                                // 3818
			listenStart: function(ev) {                                                                                         // 3819
				mouseFollower.hide(); // don't show until we know this is a real drag                                              // 3820
				mouseFollower.start(ev);                                                                                           // 3821
			},                                                                                                                  // 3822
			dragStart: function(ev) {                                                                                           // 3823
				_this.triggerSegMouseout(seg, ev); // ensure a mouseout on the manipulated event has been reported                 // 3824
				_this.segDragStart(seg, ev);                                                                                       // 3825
				view.hideEvent(event); // hide all event segments. our mouseFollower will take over                                // 3826
			},                                                                                                                  // 3827
			hitOver: function(hit, isOrig, origHit) {                                                                           // 3828
                                                                                                                       // 3829
				// starting hit could be forced (DayGrid.limit)                                                                    // 3830
				if (seg.hit) {                                                                                                     // 3831
					origHit = seg.hit;                                                                                                // 3832
				}                                                                                                                  // 3833
                                                                                                                       // 3834
				// since we are querying the parent view, might not belong to this grid                                            // 3835
				dropLocation = _this.computeEventDrop(                                                                             // 3836
					origHit.component.getHitSpan(origHit),                                                                            // 3837
					hit.component.getHitSpan(hit),                                                                                    // 3838
					event                                                                                                             // 3839
				);                                                                                                                 // 3840
                                                                                                                       // 3841
				if (dropLocation &&!calendar.isEventSpanAllowed(_this.eventToSpan(dropLocation), event)) {                         // 3842
					disableCursor();                                                                                                  // 3843
					dropLocation = null;                                                                                              // 3844
				}                                                                                                                  // 3845
                                                                                                                       // 3846
				// if a valid drop location, have the subclass render a visual indication                                          // 3847
				if (dropLocation && view.renderDrag(dropLocation, seg)) {                                                          // 3848
					mouseFollower.hide(); // if the subclass is already using a mock event "helper", hide our own                     // 3849
				}                                                                                                                  // 3850
				else {                                                                                                             // 3851
					mouseFollower.show(); // otherwise, have the helper follow the mouse (no snapping)                                // 3852
				}                                                                                                                  // 3853
                                                                                                                       // 3854
				if (isOrig) {                                                                                                      // 3855
					dropLocation = null; // needs to have moved hits to be a valid drop                                               // 3856
				}                                                                                                                  // 3857
			},                                                                                                                  // 3858
			hitOut: function() { // called before mouse moves to a different hit OR moved out of all hits                       // 3859
				view.unrenderDrag(); // unrender whatever was done in renderDrag                                                   // 3860
				mouseFollower.show(); // show in case we are moving out of all hits                                                // 3861
				dropLocation = null;                                                                                               // 3862
			},                                                                                                                  // 3863
			hitDone: function() { // Called after a hitOut OR before a dragStop                                                 // 3864
				enableCursor();                                                                                                    // 3865
			},                                                                                                                  // 3866
			dragStop: function(ev) {                                                                                            // 3867
				// do revert animation if hasn't changed. calls a callback when finished (whether animation or not)                // 3868
				mouseFollower.stop(!dropLocation, function() {                                                                     // 3869
					view.unrenderDrag();                                                                                              // 3870
					view.showEvent(event);                                                                                            // 3871
					_this.segDragStop(seg, ev);                                                                                       // 3872
                                                                                                                       // 3873
					if (dropLocation) {                                                                                               // 3874
						view.reportEventDrop(event, dropLocation, this.largeUnit, el, ev);                                               // 3875
					}                                                                                                                 // 3876
				});                                                                                                                // 3877
			},                                                                                                                  // 3878
			listenStop: function() {                                                                                            // 3879
				mouseFollower.stop(); // put in listenStop in case there was a mousedown but the drag never started                // 3880
			}                                                                                                                   // 3881
		});                                                                                                                  // 3882
                                                                                                                       // 3883
		dragListener.mousedown(ev); // start listening, which will eventually lead to a dragStart                            // 3884
	},                                                                                                                    // 3885
                                                                                                                       // 3886
                                                                                                                       // 3887
	// Called before event segment dragging starts                                                                        // 3888
	segDragStart: function(seg, ev) {                                                                                     // 3889
		this.isDraggingSeg = true;                                                                                           // 3890
		this.view.trigger('eventDragStart', seg.el[0], seg.event, ev, {}); // last argument is jqui dummy                    // 3891
	},                                                                                                                    // 3892
                                                                                                                       // 3893
                                                                                                                       // 3894
	// Called after event segment dragging stops                                                                          // 3895
	segDragStop: function(seg, ev) {                                                                                      // 3896
		this.isDraggingSeg = false;                                                                                          // 3897
		this.view.trigger('eventDragStop', seg.el[0], seg.event, ev, {}); // last argument is jqui dummy                     // 3898
	},                                                                                                                    // 3899
                                                                                                                       // 3900
                                                                                                                       // 3901
	// Given the spans an event drag began, and the span event was dropped, calculates the new zoned start/end/allDay     // 3902
	// values for the event. Subclasses may override and set additional properties to be used by renderDrag.              // 3903
	// A falsy returned value indicates an invalid drop.                                                                  // 3904
	computeEventDrop: function(startSpan, endSpan, event) {                                                               // 3905
		var calendar = this.view.calendar;                                                                                   // 3906
		var dragStart = startSpan.start;                                                                                     // 3907
		var dragEnd = endSpan.start;                                                                                         // 3908
		var delta;                                                                                                           // 3909
		var dropLocation; // zoned event date properties                                                                     // 3910
                                                                                                                       // 3911
		if (dragStart.hasTime() === dragEnd.hasTime()) {                                                                     // 3912
			delta = this.diffDates(dragEnd, dragStart);                                                                         // 3913
                                                                                                                       // 3914
			// if an all-day event was in a timed area and it was dragged to a different time,                                  // 3915
			// guarantee an end and adjust start/end to have times                                                              // 3916
			if (event.allDay && durationHasTime(delta)) {                                                                       // 3917
				dropLocation = {                                                                                                   // 3918
					start: event.start.clone(),                                                                                       // 3919
					end: calendar.getEventEnd(event), // will be an ambig day                                                         // 3920
					allDay: false // for normalizeEventTimes                                                                          // 3921
				};                                                                                                                 // 3922
				calendar.normalizeEventTimes(dropLocation);                                                                        // 3923
			}                                                                                                                   // 3924
			// othewise, work off existing values                                                                               // 3925
			else {                                                                                                              // 3926
				dropLocation = {                                                                                                   // 3927
					start: event.start.clone(),                                                                                       // 3928
					end: event.end ? event.end.clone() : null,                                                                        // 3929
					allDay: event.allDay // keep it the same                                                                          // 3930
				};                                                                                                                 // 3931
			}                                                                                                                   // 3932
                                                                                                                       // 3933
			dropLocation.start.add(delta);                                                                                      // 3934
			if (dropLocation.end) {                                                                                             // 3935
				dropLocation.end.add(delta);                                                                                       // 3936
			}                                                                                                                   // 3937
		}                                                                                                                    // 3938
		else {                                                                                                               // 3939
			// if switching from day <-> timed, start should be reset to the dropped date, and the end cleared                  // 3940
			dropLocation = {                                                                                                    // 3941
				start: dragEnd.clone(),                                                                                            // 3942
				end: null, // end should be cleared                                                                                // 3943
				allDay: !dragEnd.hasTime()                                                                                         // 3944
			};                                                                                                                  // 3945
		}                                                                                                                    // 3946
                                                                                                                       // 3947
		return dropLocation;                                                                                                 // 3948
	},                                                                                                                    // 3949
                                                                                                                       // 3950
                                                                                                                       // 3951
	// Utility for apply dragOpacity to a jQuery set                                                                      // 3952
	applyDragOpacity: function(els) {                                                                                     // 3953
		var opacity = this.view.opt('dragOpacity');                                                                          // 3954
                                                                                                                       // 3955
		if (opacity != null) {                                                                                               // 3956
			els.each(function(i, node) {                                                                                        // 3957
				// Don't use jQuery (will set an IE filter), do it the old fashioned way.                                          // 3958
				// In IE8, a helper element will disappears if there's a filter.                                                   // 3959
				node.style.opacity = opacity;                                                                                      // 3960
			});                                                                                                                 // 3961
		}                                                                                                                    // 3962
	},                                                                                                                    // 3963
                                                                                                                       // 3964
                                                                                                                       // 3965
	/* External Element Dragging                                                                                          // 3966
	------------------------------------------------------------------------------------------------------------------*/  // 3967
                                                                                                                       // 3968
                                                                                                                       // 3969
	// Called when a jQuery UI drag is initiated anywhere in the DOM                                                      // 3970
	externalDragStart: function(ev, ui) {                                                                                 // 3971
		var view = this.view;                                                                                                // 3972
		var el;                                                                                                              // 3973
		var accept;                                                                                                          // 3974
                                                                                                                       // 3975
		if (view.opt('droppable')) { // only listen if this setting is on                                                    // 3976
			el = $((ui ? ui.item : null) || ev.target);                                                                         // 3977
                                                                                                                       // 3978
			// Test that the dragged element passes the dropAccept selector or filter function.                                 // 3979
			// FYI, the default is "*" (matches all)                                                                            // 3980
			accept = view.opt('dropAccept');                                                                                    // 3981
			if ($.isFunction(accept) ? accept.call(el[0], el) : el.is(accept)) {                                                // 3982
				if (!this.isDraggingExternal) { // prevent double-listening if fired twice                                         // 3983
					this.listenToExternalDrag(el, ev, ui);                                                                            // 3984
				}                                                                                                                  // 3985
			}                                                                                                                   // 3986
		}                                                                                                                    // 3987
	},                                                                                                                    // 3988
                                                                                                                       // 3989
                                                                                                                       // 3990
	// Called when a jQuery UI drag starts and it needs to be monitored for dropping                                      // 3991
	listenToExternalDrag: function(el, ev, ui) {                                                                          // 3992
		var _this = this;                                                                                                    // 3993
		var meta = getDraggedElMeta(el); // extra data about event drop, including possible event to create                  // 3994
		var dropLocation; // a null value signals an unsuccessful drag                                                       // 3995
                                                                                                                       // 3996
		// listener that tracks mouse movement over date-associated pixel regions                                            // 3997
		var dragListener = new HitDragListener(this, {                                                                       // 3998
			listenStart: function() {                                                                                           // 3999
				_this.isDraggingExternal = true;                                                                                   // 4000
			},                                                                                                                  // 4001
			hitOver: function(hit) {                                                                                            // 4002
				dropLocation = _this.computeExternalDrop(                                                                          // 4003
					hit.component.getHitSpan(hit), // since we are querying the parent view, might not belong to this grid            // 4004
					meta                                                                                                              // 4005
				);                                                                                                                 // 4006
				if (dropLocation) {                                                                                                // 4007
					_this.renderDrag(dropLocation); // called without a seg parameter                                                 // 4008
				}                                                                                                                  // 4009
				else { // invalid hit                                                                                              // 4010
					disableCursor();                                                                                                  // 4011
				}                                                                                                                  // 4012
			},                                                                                                                  // 4013
			hitOut: function() {                                                                                                // 4014
				dropLocation = null; // signal unsuccessful                                                                        // 4015
				_this.unrenderDrag();                                                                                              // 4016
				enableCursor();                                                                                                    // 4017
			},                                                                                                                  // 4018
			dragStop: function() {                                                                                              // 4019
				_this.unrenderDrag();                                                                                              // 4020
				enableCursor();                                                                                                    // 4021
                                                                                                                       // 4022
				if (dropLocation) { // element was dropped on a valid hit                                                          // 4023
					_this.view.reportExternalDrop(meta, dropLocation, el, ev, ui);                                                    // 4024
				}                                                                                                                  // 4025
			},                                                                                                                  // 4026
			listenStop: function() {                                                                                            // 4027
				_this.isDraggingExternal = false;                                                                                  // 4028
			}                                                                                                                   // 4029
		});                                                                                                                  // 4030
                                                                                                                       // 4031
		dragListener.startDrag(ev); // start listening immediately                                                           // 4032
	},                                                                                                                    // 4033
                                                                                                                       // 4034
                                                                                                                       // 4035
	// Given a hit to be dropped upon, and misc data associated with the jqui drag (guaranteed to be a plain object),     // 4036
	// returns the zoned start/end dates for the event that would result from the hypothetical drop. end might be null.   // 4037
	// Returning a null value signals an invalid drop hit.                                                                // 4038
	computeExternalDrop: function(span, meta) {                                                                           // 4039
		var calendar = this.view.calendar;                                                                                   // 4040
		var dropLocation = {                                                                                                 // 4041
			start: calendar.applyTimezone(span.start), // simulate a zoned event start date                                     // 4042
			end: null                                                                                                           // 4043
		};                                                                                                                   // 4044
                                                                                                                       // 4045
		// if dropped on an all-day span, and element's metadata specified a time, set it                                    // 4046
		if (meta.startTime && !dropLocation.start.hasTime()) {                                                               // 4047
			dropLocation.start.time(meta.startTime);                                                                            // 4048
		}                                                                                                                    // 4049
                                                                                                                       // 4050
		if (meta.duration) {                                                                                                 // 4051
			dropLocation.end = dropLocation.start.clone().add(meta.duration);                                                   // 4052
		}                                                                                                                    // 4053
                                                                                                                       // 4054
		if (!calendar.isExternalSpanAllowed(this.eventToSpan(dropLocation), dropLocation, meta.eventProps)) {                // 4055
			return null;                                                                                                        // 4056
		}                                                                                                                    // 4057
                                                                                                                       // 4058
		return dropLocation;                                                                                                 // 4059
	},                                                                                                                    // 4060
                                                                                                                       // 4061
                                                                                                                       // 4062
                                                                                                                       // 4063
	/* Drag Rendering (for both events and an external elements)                                                          // 4064
	------------------------------------------------------------------------------------------------------------------*/  // 4065
                                                                                                                       // 4066
                                                                                                                       // 4067
	// Renders a visual indication of an event or external element being dragged.                                         // 4068
	// `dropLocation` contains hypothetical start/end/allDay values the event would have if dropped. end can be null.     // 4069
	// `seg` is the internal segment object that is being dragged. If dragging an external element, `seg` is null.        // 4070
	// A truthy returned value indicates this method has rendered a helper element.                                       // 4071
	renderDrag: function(dropLocation, seg) {                                                                             // 4072
		// subclasses must implement                                                                                         // 4073
	},                                                                                                                    // 4074
                                                                                                                       // 4075
                                                                                                                       // 4076
	// Unrenders a visual indication of an event or external element being dragged                                        // 4077
	unrenderDrag: function() {                                                                                            // 4078
		// subclasses must implement                                                                                         // 4079
	},                                                                                                                    // 4080
                                                                                                                       // 4081
                                                                                                                       // 4082
	/* Resizing                                                                                                           // 4083
	------------------------------------------------------------------------------------------------------------------*/  // 4084
                                                                                                                       // 4085
                                                                                                                       // 4086
	// Called when the user does a mousedown on an event's resizer, which might lead to resizing.                         // 4087
	// Generic enough to work with any type of Grid.                                                                      // 4088
	segResizeMousedown: function(seg, ev, isStart) {                                                                      // 4089
		var _this = this;                                                                                                    // 4090
		var view = this.view;                                                                                                // 4091
		var calendar = view.calendar;                                                                                        // 4092
		var el = seg.el;                                                                                                     // 4093
		var event = seg.event;                                                                                               // 4094
		var eventEnd = calendar.getEventEnd(event);                                                                          // 4095
		var resizeLocation; // zoned event date properties. falsy if invalid resize                                          // 4096
                                                                                                                       // 4097
		// Tracks mouse movement over the *grid's* coordinate map                                                            // 4098
		var dragListener = new HitDragListener(this, {                                                                       // 4099
			distance: 5,                                                                                                        // 4100
			scroll: view.opt('dragScroll'),                                                                                     // 4101
			subjectEl: el,                                                                                                      // 4102
			dragStart: function(ev) {                                                                                           // 4103
				_this.triggerSegMouseout(seg, ev); // ensure a mouseout on the manipulated event has been reported                 // 4104
				_this.segResizeStart(seg, ev);                                                                                     // 4105
			},                                                                                                                  // 4106
			hitOver: function(hit, isOrig, origHit) {                                                                           // 4107
				var origHitSpan = _this.getHitSpan(origHit);                                                                       // 4108
				var hitSpan = _this.getHitSpan(hit);                                                                               // 4109
                                                                                                                       // 4110
				resizeLocation = isStart ?                                                                                         // 4111
					_this.computeEventStartResize(origHitSpan, hitSpan, event) :                                                      // 4112
					_this.computeEventEndResize(origHitSpan, hitSpan, event);                                                         // 4113
                                                                                                                       // 4114
				if (resizeLocation) {                                                                                              // 4115
					if (!calendar.isEventSpanAllowed(_this.eventToSpan(resizeLocation), event)) {                                     // 4116
						disableCursor();                                                                                                 // 4117
						resizeLocation = null;                                                                                           // 4118
					}                                                                                                                 // 4119
					// no change? (TODO: how does this work with timezones?)                                                          // 4120
					else if (resizeLocation.start.isSame(event.start) && resizeLocation.end.isSame(eventEnd)) {                       // 4121
						resizeLocation = null;                                                                                           // 4122
					}                                                                                                                 // 4123
				}                                                                                                                  // 4124
                                                                                                                       // 4125
				if (resizeLocation) {                                                                                              // 4126
					view.hideEvent(event);                                                                                            // 4127
					_this.renderEventResize(resizeLocation, seg);                                                                     // 4128
				}                                                                                                                  // 4129
			},                                                                                                                  // 4130
			hitOut: function() { // called before mouse moves to a different hit OR moved out of all hits                       // 4131
				resizeLocation = null;                                                                                             // 4132
			},                                                                                                                  // 4133
			hitDone: function() { // resets the rendering to show the original event                                            // 4134
				_this.unrenderEventResize();                                                                                       // 4135
				view.showEvent(event);                                                                                             // 4136
				enableCursor();                                                                                                    // 4137
			},                                                                                                                  // 4138
			dragStop: function(ev) {                                                                                            // 4139
				_this.segResizeStop(seg, ev);                                                                                      // 4140
                                                                                                                       // 4141
				if (resizeLocation) { // valid date to resize to?                                                                  // 4142
					view.reportEventResize(event, resizeLocation, this.largeUnit, el, ev);                                            // 4143
				}                                                                                                                  // 4144
			}                                                                                                                   // 4145
		});                                                                                                                  // 4146
                                                                                                                       // 4147
		dragListener.mousedown(ev); // start listening, which will eventually lead to a dragStart                            // 4148
	},                                                                                                                    // 4149
                                                                                                                       // 4150
                                                                                                                       // 4151
	// Called before event segment resizing starts                                                                        // 4152
	segResizeStart: function(seg, ev) {                                                                                   // 4153
		this.isResizingSeg = true;                                                                                           // 4154
		this.view.trigger('eventResizeStart', seg.el[0], seg.event, ev, {}); // last argument is jqui dummy                  // 4155
	},                                                                                                                    // 4156
                                                                                                                       // 4157
                                                                                                                       // 4158
	// Called after event segment resizing stops                                                                          // 4159
	segResizeStop: function(seg, ev) {                                                                                    // 4160
		this.isResizingSeg = false;                                                                                          // 4161
		this.view.trigger('eventResizeStop', seg.el[0], seg.event, ev, {}); // last argument is jqui dummy                   // 4162
	},                                                                                                                    // 4163
                                                                                                                       // 4164
                                                                                                                       // 4165
	// Returns new date-information for an event segment being resized from its start                                     // 4166
	computeEventStartResize: function(startSpan, endSpan, event) {                                                        // 4167
		return this.computeEventResize('start', startSpan, endSpan, event);                                                  // 4168
	},                                                                                                                    // 4169
                                                                                                                       // 4170
                                                                                                                       // 4171
	// Returns new date-information for an event segment being resized from its end                                       // 4172
	computeEventEndResize: function(startSpan, endSpan, event) {                                                          // 4173
		return this.computeEventResize('end', startSpan, endSpan, event);                                                    // 4174
	},                                                                                                                    // 4175
                                                                                                                       // 4176
                                                                                                                       // 4177
	// Returns new zoned date information for an event segment being resized from its start OR end                        // 4178
	// `type` is either 'start' or 'end'                                                                                  // 4179
	computeEventResize: function(type, startSpan, endSpan, event) {                                                       // 4180
		var calendar = this.view.calendar;                                                                                   // 4181
		var delta = this.diffDates(endSpan[type], startSpan[type]);                                                          // 4182
		var resizeLocation; // zoned event date properties                                                                   // 4183
		var defaultDuration;                                                                                                 // 4184
                                                                                                                       // 4185
		// build original values to work from, guaranteeing a start and end                                                  // 4186
		resizeLocation = {                                                                                                   // 4187
			start: event.start.clone(),                                                                                         // 4188
			end: calendar.getEventEnd(event),                                                                                   // 4189
			allDay: event.allDay                                                                                                // 4190
		};                                                                                                                   // 4191
                                                                                                                       // 4192
		// if an all-day event was in a timed area and was resized to a time, adjust start/end to have times                 // 4193
		if (resizeLocation.allDay && durationHasTime(delta)) {                                                               // 4194
			resizeLocation.allDay = false;                                                                                      // 4195
			calendar.normalizeEventTimes(resizeLocation);                                                                       // 4196
		}                                                                                                                    // 4197
                                                                                                                       // 4198
		resizeLocation[type].add(delta); // apply delta to start or end                                                      // 4199
                                                                                                                       // 4200
		// if the event was compressed too small, find a new reasonable duration for it                                      // 4201
		if (!resizeLocation.start.isBefore(resizeLocation.end)) {                                                            // 4202
                                                                                                                       // 4203
			defaultDuration =                                                                                                   // 4204
				this.minResizeDuration || // TODO: hack                                                                            // 4205
				(event.allDay ?                                                                                                    // 4206
					calendar.defaultAllDayEventDuration :                                                                             // 4207
					calendar.defaultTimedEventDuration);                                                                              // 4208
                                                                                                                       // 4209
			if (type == 'start') { // resizing the start?                                                                       // 4210
				resizeLocation.start = resizeLocation.end.clone().subtract(defaultDuration);                                       // 4211
			}                                                                                                                   // 4212
			else { // resizing the end?                                                                                         // 4213
				resizeLocation.end = resizeLocation.start.clone().add(defaultDuration);                                            // 4214
			}                                                                                                                   // 4215
		}                                                                                                                    // 4216
                                                                                                                       // 4217
		return resizeLocation;                                                                                               // 4218
	},                                                                                                                    // 4219
                                                                                                                       // 4220
                                                                                                                       // 4221
	// Renders a visual indication of an event being resized.                                                             // 4222
	// `range` has the updated dates of the event. `seg` is the original segment object involved in the drag.             // 4223
	renderEventResize: function(range, seg) {                                                                             // 4224
		// subclasses must implement                                                                                         // 4225
	},                                                                                                                    // 4226
                                                                                                                       // 4227
                                                                                                                       // 4228
	// Unrenders a visual indication of an event being resized.                                                           // 4229
	unrenderEventResize: function() {                                                                                     // 4230
		// subclasses must implement                                                                                         // 4231
	},                                                                                                                    // 4232
                                                                                                                       // 4233
                                                                                                                       // 4234
	/* Rendering Utils                                                                                                    // 4235
	------------------------------------------------------------------------------------------------------------------*/  // 4236
                                                                                                                       // 4237
                                                                                                                       // 4238
	// Compute the text that should be displayed on an event's element.                                                   // 4239
	// `range` can be the Event object itself, or something range-like, with at least a `start`.                          // 4240
	// If event times are disabled, or the event has no time, will return a blank string.                                 // 4241
	// If not specified, formatStr will default to the eventTimeFormat setting,                                           // 4242
	// and displayEnd will default to the displayEventEnd setting.                                                        // 4243
	getEventTimeText: function(range, formatStr, displayEnd) {                                                            // 4244
                                                                                                                       // 4245
		if (formatStr == null) {                                                                                             // 4246
			formatStr = this.eventTimeFormat;                                                                                   // 4247
		}                                                                                                                    // 4248
                                                                                                                       // 4249
		if (displayEnd == null) {                                                                                            // 4250
			displayEnd = this.displayEventEnd;                                                                                  // 4251
		}                                                                                                                    // 4252
                                                                                                                       // 4253
		if (this.displayEventTime && range.start.hasTime()) {                                                                // 4254
			if (displayEnd && range.end) {                                                                                      // 4255
				return this.view.formatRange(range, formatStr);                                                                    // 4256
			}                                                                                                                   // 4257
			else {                                                                                                              // 4258
				return range.start.format(formatStr);                                                                              // 4259
			}                                                                                                                   // 4260
		}                                                                                                                    // 4261
                                                                                                                       // 4262
		return '';                                                                                                           // 4263
	},                                                                                                                    // 4264
                                                                                                                       // 4265
                                                                                                                       // 4266
	// Generic utility for generating the HTML classNames for an event segment's element                                  // 4267
	getSegClasses: function(seg, isDraggable, isResizable) {                                                              // 4268
		var event = seg.event;                                                                                               // 4269
		var classes = [                                                                                                      // 4270
			'fc-event',                                                                                                         // 4271
			seg.isStart ? 'fc-start' : 'fc-not-start',                                                                          // 4272
			seg.isEnd ? 'fc-end' : 'fc-not-end'                                                                                 // 4273
		].concat(                                                                                                            // 4274
			event.className,                                                                                                    // 4275
			event.source ? event.source.className : []                                                                          // 4276
		);                                                                                                                   // 4277
                                                                                                                       // 4278
		if (isDraggable) {                                                                                                   // 4279
			classes.push('fc-draggable');                                                                                       // 4280
		}                                                                                                                    // 4281
		if (isResizable) {                                                                                                   // 4282
			classes.push('fc-resizable');                                                                                       // 4283
		}                                                                                                                    // 4284
                                                                                                                       // 4285
		return classes;                                                                                                      // 4286
	},                                                                                                                    // 4287
                                                                                                                       // 4288
                                                                                                                       // 4289
	// Utility for generating event skin-related CSS properties                                                           // 4290
	getEventSkinCss: function(event) {                                                                                    // 4291
		var view = this.view;                                                                                                // 4292
		var source = event.source || {};                                                                                     // 4293
		var eventColor = event.color;                                                                                        // 4294
		var sourceColor = source.color;                                                                                      // 4295
		var optionColor = view.opt('eventColor');                                                                            // 4296
                                                                                                                       // 4297
		return {                                                                                                             // 4298
			'background-color':                                                                                                 // 4299
				event.backgroundColor ||                                                                                           // 4300
				eventColor ||                                                                                                      // 4301
				source.backgroundColor ||                                                                                          // 4302
				sourceColor ||                                                                                                     // 4303
				view.opt('eventBackgroundColor') ||                                                                                // 4304
				optionColor,                                                                                                       // 4305
			'border-color':                                                                                                     // 4306
				event.borderColor ||                                                                                               // 4307
				eventColor ||                                                                                                      // 4308
				source.borderColor ||                                                                                              // 4309
				sourceColor ||                                                                                                     // 4310
				view.opt('eventBorderColor') ||                                                                                    // 4311
				optionColor,                                                                                                       // 4312
			color:                                                                                                              // 4313
				event.textColor ||                                                                                                 // 4314
				source.textColor ||                                                                                                // 4315
				view.opt('eventTextColor')                                                                                         // 4316
		};                                                                                                                   // 4317
	},                                                                                                                    // 4318
                                                                                                                       // 4319
                                                                                                                       // 4320
	/* Converting events -> eventRange -> eventSpan -> eventSegs                                                          // 4321
	------------------------------------------------------------------------------------------------------------------*/  // 4322
                                                                                                                       // 4323
                                                                                                                       // 4324
	// Generates an array of segments for the given single event                                                          // 4325
	eventToSegs: function(event) {                                                                                        // 4326
		return this.eventsToSegs([ event ]);                                                                                 // 4327
	},                                                                                                                    // 4328
                                                                                                                       // 4329
                                                                                                                       // 4330
	// Generates a single span (always unzoned) by using the given event's dates.                                         // 4331
	// Does not do any inverting for inverse-background events.                                                           // 4332
	eventToSpan: function(event) {                                                                                        // 4333
		var range = this.eventToRange(event);                                                                                // 4334
		this.transformEventSpan(range, event); // convert it to a span, in-place                                             // 4335
		return range;                                                                                                        // 4336
	},                                                                                                                    // 4337
                                                                                                                       // 4338
                                                                                                                       // 4339
	// Converts an array of event objects into an array of event segment objects.                                         // 4340
	// A custom `segSliceFunc` may be given for arbitrarily slicing up events.                                            // 4341
	// Doesn't guarantee an order for the resulting array.                                                                // 4342
	eventsToSegs: function(allEvents, segSliceFunc) {                                                                     // 4343
		var _this = this;                                                                                                    // 4344
		var eventsById = groupEventsById(allEvents);                                                                         // 4345
		var segs = [];                                                                                                       // 4346
                                                                                                                       // 4347
		$.each(eventsById, function(id, events) {                                                                            // 4348
			var ranges = [];                                                                                                    // 4349
			var i;                                                                                                              // 4350
                                                                                                                       // 4351
			for (i = 0; i < events.length; i++) {                                                                               // 4352
				ranges.push(_this.eventToRange(events[i]));                                                                        // 4353
			}                                                                                                                   // 4354
                                                                                                                       // 4355
			// inverse-background events (utilize only the first event in calculations)                                         // 4356
			if (isInverseBgEvent(events[0])) {                                                                                  // 4357
				ranges = _this.invertRanges(ranges);                                                                               // 4358
                                                                                                                       // 4359
				for (i = 0; i < ranges.length; i++) {                                                                              // 4360
					_this.generateEventSegs(ranges[i], events[0], segSliceFunc, segs);                                                // 4361
				}                                                                                                                  // 4362
			}                                                                                                                   // 4363
			// normal event ranges                                                                                              // 4364
			else {                                                                                                              // 4365
				for (i = 0; i < ranges.length; i++) {                                                                              // 4366
					_this.generateEventSegs(ranges[i], events[i], segSliceFunc, segs);                                                // 4367
				}                                                                                                                  // 4368
			}                                                                                                                   // 4369
		});                                                                                                                  // 4370
                                                                                                                       // 4371
		return segs;                                                                                                         // 4372
	},                                                                                                                    // 4373
                                                                                                                       // 4374
                                                                                                                       // 4375
	// Generates the unzoned start/end dates an event appears to occupy                                                   // 4376
	eventToRange: function(event) {                                                                                       // 4377
		return {                                                                                                             // 4378
			start: event.start.clone().stripZone(),                                                                             // 4379
			end: this.view.calendar.getEventEnd(event).stripZone()                                                              // 4380
		};                                                                                                                   // 4381
	},                                                                                                                    // 4382
                                                                                                                       // 4383
                                                                                                                       // 4384
	// Given an event's span (unzoned start/end and other misc data), and the event itself,                               // 4385
	// slice into segments (using the segSliceFunc function if specified) and append to the `out` array.                  // 4386
	// SIDE EFFECT: will mutate the given `range`.                                                                        // 4387
	generateEventSegs: function(range, event, segSliceFunc, out) {                                                        // 4388
		var segs;                                                                                                            // 4389
		var i;                                                                                                               // 4390
                                                                                                                       // 4391
		this.transformEventSpan(range, event); // converts the range to a span                                               // 4392
                                                                                                                       // 4393
		segs = segSliceFunc ? segSliceFunc(range) : this.spanToSegs(range);                                                  // 4394
                                                                                                                       // 4395
		for (i = 0; i < segs.length; i++) {                                                                                  // 4396
			this.transformEventSeg(segs[i], range, event);                                                                      // 4397
			out.push(segs[i]);                                                                                                  // 4398
		}                                                                                                                    // 4399
	},                                                                                                                    // 4400
                                                                                                                       // 4401
                                                                                                                       // 4402
	// Given a range (unzoned start/end) that is about to become a span,                                                  // 4403
	// attach any event-derived properties to it.                                                                         // 4404
	transformEventSpan: function(range, event) {                                                                          // 4405
		// subclasses can implement                                                                                          // 4406
	},                                                                                                                    // 4407
                                                                                                                       // 4408
                                                                                                                       // 4409
	// Given a segment object, attach any extra properties, based off of its source span and event.                       // 4410
	transformEventSeg: function(seg, span, event) {                                                                       // 4411
		seg.event = event;                                                                                                   // 4412
		seg.eventStartMS = +span.start; // TODO: not the best name after making spans unzoned                                // 4413
		seg.eventDurationMS = span.end - span.start;                                                                         // 4414
	},                                                                                                                    // 4415
                                                                                                                       // 4416
                                                                                                                       // 4417
	// Produces a new array of range objects that will cover all the time NOT covered by the given ranges.                // 4418
	// SIDE EFFECT: will mutate the given array and will use its date references.                                         // 4419
	invertRanges: function(ranges) {                                                                                      // 4420
		var view = this.view;                                                                                                // 4421
		var viewStart = view.start.clone(); // need a copy                                                                   // 4422
		var viewEnd = view.end.clone(); // need a copy                                                                       // 4423
		var inverseRanges = [];                                                                                              // 4424
		var start = viewStart; // the end of the previous range. the start of the new range                                  // 4425
		var i, range;                                                                                                        // 4426
                                                                                                                       // 4427
		// ranges need to be in order. required for our date-walking algorithm                                               // 4428
		ranges.sort(compareRanges);                                                                                          // 4429
                                                                                                                       // 4430
		for (i = 0; i < ranges.length; i++) {                                                                                // 4431
			range = ranges[i];                                                                                                  // 4432
                                                                                                                       // 4433
			// add the span of time before the event (if there is any)                                                          // 4434
			if (range.start > start) { // compare millisecond time (skip any ambig logic)                                       // 4435
				inverseRanges.push({                                                                                               // 4436
					start: start,                                                                                                     // 4437
					end: range.start                                                                                                  // 4438
				});                                                                                                                // 4439
			}                                                                                                                   // 4440
                                                                                                                       // 4441
			start = range.end;                                                                                                  // 4442
		}                                                                                                                    // 4443
                                                                                                                       // 4444
		// add the span of time after the last event (if there is any)                                                       // 4445
		if (start < viewEnd) { // compare millisecond time (skip any ambig logic)                                            // 4446
			inverseRanges.push({                                                                                                // 4447
				start: start,                                                                                                      // 4448
				end: viewEnd                                                                                                       // 4449
			});                                                                                                                 // 4450
		}                                                                                                                    // 4451
                                                                                                                       // 4452
		return inverseRanges;                                                                                                // 4453
	},                                                                                                                    // 4454
                                                                                                                       // 4455
                                                                                                                       // 4456
	sortEventSegs: function(segs) {                                                                                       // 4457
		segs.sort(proxy(this, 'compareEventSegs'));                                                                          // 4458
	},                                                                                                                    // 4459
                                                                                                                       // 4460
                                                                                                                       // 4461
	// A cmp function for determining which segments should take visual priority                                          // 4462
	compareEventSegs: function(seg1, seg2) {                                                                              // 4463
		return seg1.eventStartMS - seg2.eventStartMS || // earlier events go first                                           // 4464
			seg2.eventDurationMS - seg1.eventDurationMS || // tie? longer events go first                                       // 4465
			seg2.event.allDay - seg1.event.allDay || // tie? put all-day events first (booleans cast to 0/1)                    // 4466
			compareByFieldSpecs(seg1.event, seg2.event, this.view.eventOrderSpecs);                                             // 4467
	}                                                                                                                     // 4468
                                                                                                                       // 4469
});                                                                                                                    // 4470
                                                                                                                       // 4471
                                                                                                                       // 4472
/* Utilities                                                                                                           // 4473
----------------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 4475
                                                                                                                       // 4476
function isBgEvent(event) { // returns true if background OR inverse-background                                        // 4477
	var rendering = getEventRendering(event);                                                                             // 4478
	return rendering === 'background' || rendering === 'inverse-background';                                              // 4479
}                                                                                                                      // 4480
                                                                                                                       // 4481
                                                                                                                       // 4482
function isInverseBgEvent(event) {                                                                                     // 4483
	return getEventRendering(event) === 'inverse-background';                                                             // 4484
}                                                                                                                      // 4485
                                                                                                                       // 4486
                                                                                                                       // 4487
function getEventRendering(event) {                                                                                    // 4488
	return firstDefined((event.source || {}).rendering, event.rendering);                                                 // 4489
}                                                                                                                      // 4490
                                                                                                                       // 4491
                                                                                                                       // 4492
function groupEventsById(events) {                                                                                     // 4493
	var eventsById = {};                                                                                                  // 4494
	var i, event;                                                                                                         // 4495
                                                                                                                       // 4496
	for (i = 0; i < events.length; i++) {                                                                                 // 4497
		event = events[i];                                                                                                   // 4498
		(eventsById[event._id] || (eventsById[event._id] = [])).push(event);                                                 // 4499
	}                                                                                                                     // 4500
                                                                                                                       // 4501
	return eventsById;                                                                                                    // 4502
}                                                                                                                      // 4503
                                                                                                                       // 4504
                                                                                                                       // 4505
// A cmp function for determining which non-inverted "ranges" (see above) happen earlier                               // 4506
function compareRanges(range1, range2) {                                                                               // 4507
	return range1.start - range2.start; // earlier ranges go first                                                        // 4508
}                                                                                                                      // 4509
                                                                                                                       // 4510
                                                                                                                       // 4511
/* External-Dragging-Element Data                                                                                      // 4512
----------------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 4514
// Require all HTML5 data-* attributes used by FullCalendar to have this prefix.                                       // 4515
// A value of '' will query attributes like data-event. A value of 'fc' will query attributes like data-fc-event.      // 4516
FC.dataAttrPrefix = '';                                                                                                // 4517
                                                                                                                       // 4518
// Given a jQuery element that might represent a dragged FullCalendar event, returns an intermediate data structure    // 4519
// to be used for Event Object creation.                                                                               // 4520
// A defined `.eventProps`, even when empty, indicates that an event should be created.                                // 4521
function getDraggedElMeta(el) {                                                                                        // 4522
	var prefix = FC.dataAttrPrefix;                                                                                       // 4523
	var eventProps; // properties for creating the event, not related to date/time                                        // 4524
	var startTime; // a Duration                                                                                          // 4525
	var duration;                                                                                                         // 4526
	var stick;                                                                                                            // 4527
                                                                                                                       // 4528
	if (prefix) { prefix += '-'; }                                                                                        // 4529
	eventProps = el.data(prefix + 'event') || null;                                                                       // 4530
                                                                                                                       // 4531
	if (eventProps) {                                                                                                     // 4532
		if (typeof eventProps === 'object') {                                                                                // 4533
			eventProps = $.extend({}, eventProps); // make a copy                                                               // 4534
		}                                                                                                                    // 4535
		else { // something like 1 or true. still signal event creation                                                      // 4536
			eventProps = {};                                                                                                    // 4537
		}                                                                                                                    // 4538
                                                                                                                       // 4539
		// pluck special-cased date/time properties                                                                          // 4540
		startTime = eventProps.start;                                                                                        // 4541
		if (startTime == null) { startTime = eventProps.time; } // accept 'time' as well                                     // 4542
		duration = eventProps.duration;                                                                                      // 4543
		stick = eventProps.stick;                                                                                            // 4544
		delete eventProps.start;                                                                                             // 4545
		delete eventProps.time;                                                                                              // 4546
		delete eventProps.duration;                                                                                          // 4547
		delete eventProps.stick;                                                                                             // 4548
	}                                                                                                                     // 4549
                                                                                                                       // 4550
	// fallback to standalone attribute values for each of the date/time properties                                       // 4551
	if (startTime == null) { startTime = el.data(prefix + 'start'); }                                                     // 4552
	if (startTime == null) { startTime = el.data(prefix + 'time'); } // accept 'time' as well                             // 4553
	if (duration == null) { duration = el.data(prefix + 'duration'); }                                                    // 4554
	if (stick == null) { stick = el.data(prefix + 'stick'); }                                                             // 4555
                                                                                                                       // 4556
	// massage into correct data types                                                                                    // 4557
	startTime = startTime != null ? moment.duration(startTime) : null;                                                    // 4558
	duration = duration != null ? moment.duration(duration) : null;                                                       // 4559
	stick = Boolean(stick);                                                                                               // 4560
                                                                                                                       // 4561
	return { eventProps: eventProps, startTime: startTime, duration: duration, stick: stick };                            // 4562
}                                                                                                                      // 4563
                                                                                                                       // 4564
                                                                                                                       // 4565
;;                                                                                                                     // 4566
                                                                                                                       // 4567
/*                                                                                                                     // 4568
A set of rendering and date-related methods for a visual component comprised of one or more rows of day columns.       // 4569
Prerequisite: the object being mixed into needs to be a *Grid*                                                         // 4570
*/                                                                                                                     // 4571
var DayTableMixin = FC.DayTableMixin = {                                                                               // 4572
                                                                                                                       // 4573
	breakOnWeeks: false, // should create a new row for each week?                                                        // 4574
	dayDates: null, // whole-day dates for each column. left to right                                                     // 4575
	dayIndices: null, // for each day from start, the offset                                                              // 4576
	daysPerRow: null,                                                                                                     // 4577
	rowCnt: null,                                                                                                         // 4578
	colCnt: null,                                                                                                         // 4579
	colHeadFormat: null,                                                                                                  // 4580
                                                                                                                       // 4581
                                                                                                                       // 4582
	// Populates internal variables used for date calculation and rendering                                               // 4583
	updateDayTable: function() {                                                                                          // 4584
		var view = this.view;                                                                                                // 4585
		var date = this.start.clone();                                                                                       // 4586
		var dayIndex = -1;                                                                                                   // 4587
		var dayIndices = [];                                                                                                 // 4588
		var dayDates = [];                                                                                                   // 4589
		var daysPerRow;                                                                                                      // 4590
		var firstDay;                                                                                                        // 4591
		var rowCnt;                                                                                                          // 4592
                                                                                                                       // 4593
		while (date.isBefore(this.end)) { // loop each day from start to end                                                 // 4594
			if (view.isHiddenDay(date)) {                                                                                       // 4595
				dayIndices.push(dayIndex + 0.5); // mark that it's between indices                                                 // 4596
			}                                                                                                                   // 4597
			else {                                                                                                              // 4598
				dayIndex++;                                                                                                        // 4599
				dayIndices.push(dayIndex);                                                                                         // 4600
				dayDates.push(date.clone());                                                                                       // 4601
			}                                                                                                                   // 4602
			date.add(1, 'days');                                                                                                // 4603
		}                                                                                                                    // 4604
                                                                                                                       // 4605
		if (this.breakOnWeeks) {                                                                                             // 4606
			// count columns until the day-of-week repeats                                                                      // 4607
			firstDay = dayDates[0].day();                                                                                       // 4608
			for (daysPerRow = 1; daysPerRow < dayDates.length; daysPerRow++) {                                                  // 4609
				if (dayDates[daysPerRow].day() == firstDay) {                                                                      // 4610
					break;                                                                                                            // 4611
				}                                                                                                                  // 4612
			}                                                                                                                   // 4613
			rowCnt = Math.ceil(dayDates.length / daysPerRow);                                                                   // 4614
		}                                                                                                                    // 4615
		else {                                                                                                               // 4616
			rowCnt = 1;                                                                                                         // 4617
			daysPerRow = dayDates.length;                                                                                       // 4618
		}                                                                                                                    // 4619
                                                                                                                       // 4620
		this.dayDates = dayDates;                                                                                            // 4621
		this.dayIndices = dayIndices;                                                                                        // 4622
		this.daysPerRow = daysPerRow;                                                                                        // 4623
		this.rowCnt = rowCnt;                                                                                                // 4624
		                                                                                                                     // 4625
		this.updateDayTableCols();                                                                                           // 4626
	},                                                                                                                    // 4627
                                                                                                                       // 4628
                                                                                                                       // 4629
	// Computes and assigned the colCnt property and updates any options that may be computed from it                     // 4630
	updateDayTableCols: function() {                                                                                      // 4631
		this.colCnt = this.computeColCnt();                                                                                  // 4632
		this.colHeadFormat = this.view.opt('columnFormat') || this.computeColHeadFormat();                                   // 4633
	},                                                                                                                    // 4634
                                                                                                                       // 4635
                                                                                                                       // 4636
	// Determines how many columns there should be in the table                                                           // 4637
	computeColCnt: function() {                                                                                           // 4638
		return this.daysPerRow;                                                                                              // 4639
	},                                                                                                                    // 4640
                                                                                                                       // 4641
                                                                                                                       // 4642
	// Computes the ambiguously-timed moment for the given cell                                                           // 4643
	getCellDate: function(row, col) {                                                                                     // 4644
		return this.dayDates[                                                                                                // 4645
				this.getCellDayIndex(row, col)                                                                                     // 4646
			].clone();                                                                                                          // 4647
	},                                                                                                                    // 4648
                                                                                                                       // 4649
                                                                                                                       // 4650
	// Computes the ambiguously-timed date range for the given cell                                                       // 4651
	getCellRange: function(row, col) {                                                                                    // 4652
		var start = this.getCellDate(row, col);                                                                              // 4653
		var end = start.clone().add(1, 'days');                                                                              // 4654
                                                                                                                       // 4655
		return { start: start, end: end };                                                                                   // 4656
	},                                                                                                                    // 4657
                                                                                                                       // 4658
                                                                                                                       // 4659
	// Returns the number of day cells, chronologically, from the first of the grid (0-based)                             // 4660
	getCellDayIndex: function(row, col) {                                                                                 // 4661
		return row * this.daysPerRow + this.getColDayIndex(col);                                                             // 4662
	},                                                                                                                    // 4663
                                                                                                                       // 4664
                                                                                                                       // 4665
	// Returns the numner of day cells, chronologically, from the first cell in *any given row*                           // 4666
	getColDayIndex: function(col) {                                                                                       // 4667
		if (this.isRTL) {                                                                                                    // 4668
			return this.colCnt - 1 - col;                                                                                       // 4669
		}                                                                                                                    // 4670
		else {                                                                                                               // 4671
			return col;                                                                                                         // 4672
		}                                                                                                                    // 4673
	},                                                                                                                    // 4674
                                                                                                                       // 4675
                                                                                                                       // 4676
	// Given a date, returns its chronolocial cell-index from the first cell of the grid.                                 // 4677
	// If the date lies between cells (because of hiddenDays), returns a floating-point value between offsets.            // 4678
	// If before the first offset, returns a negative number.                                                             // 4679
	// If after the last offset, returns an offset past the last cell offset.                                             // 4680
	// Only works for *start* dates of cells. Will not work for exclusive end dates for cells.                            // 4681
	getDateDayIndex: function(date) {                                                                                     // 4682
		var dayIndices = this.dayIndices;                                                                                    // 4683
		var dayOffset = date.diff(this.start, 'days');                                                                       // 4684
                                                                                                                       // 4685
		if (dayOffset < 0) {                                                                                                 // 4686
			return dayIndices[0] - 1;                                                                                           // 4687
		}                                                                                                                    // 4688
		else if (dayOffset >= dayIndices.length) {                                                                           // 4689
			return dayIndices[dayIndices.length - 1] + 1;                                                                       // 4690
		}                                                                                                                    // 4691
		else {                                                                                                               // 4692
			return dayIndices[dayOffset];                                                                                       // 4693
		}                                                                                                                    // 4694
	},                                                                                                                    // 4695
                                                                                                                       // 4696
                                                                                                                       // 4697
	/* Options                                                                                                            // 4698
	------------------------------------------------------------------------------------------------------------------*/  // 4699
                                                                                                                       // 4700
                                                                                                                       // 4701
	// Computes a default column header formatting string if `colFormat` is not explicitly defined                        // 4702
	computeColHeadFormat: function() {                                                                                    // 4703
		// if more than one week row, or if there are a lot of columns with not much space,                                  // 4704
		// put just the day numbers will be in each cell                                                                     // 4705
		if (this.rowCnt > 1 || this.colCnt > 10) {                                                                           // 4706
			return 'ddd'; // "Sat"                                                                                              // 4707
		}                                                                                                                    // 4708
		// multiple days, so full single date string WON'T be in title text                                                  // 4709
		else if (this.colCnt > 1) {                                                                                          // 4710
			return this.view.opt('dayOfMonthFormat'); // "Sat 12/10"                                                            // 4711
		}                                                                                                                    // 4712
		// single day, so full single date string will probably be in title text                                             // 4713
		else {                                                                                                               // 4714
			return 'dddd'; // "Saturday"                                                                                        // 4715
		}                                                                                                                    // 4716
	},                                                                                                                    // 4717
                                                                                                                       // 4718
                                                                                                                       // 4719
	/* Slicing                                                                                                            // 4720
	------------------------------------------------------------------------------------------------------------------*/  // 4721
                                                                                                                       // 4722
                                                                                                                       // 4723
	// Slices up a date range into a segment for every week-row it intersects with                                        // 4724
	sliceRangeByRow: function(range) {                                                                                    // 4725
		var daysPerRow = this.daysPerRow;                                                                                    // 4726
		var normalRange = this.view.computeDayRange(range); // make whole-day range, considering nextDayThreshold            // 4727
		var rangeFirst = this.getDateDayIndex(normalRange.start); // inclusive first index                                   // 4728
		var rangeLast = this.getDateDayIndex(normalRange.end.clone().subtract(1, 'days')); // inclusive last index           // 4729
		var segs = [];                                                                                                       // 4730
		var row;                                                                                                             // 4731
		var rowFirst, rowLast; // inclusive day-index range for current row                                                  // 4732
		var segFirst, segLast; // inclusive day-index range for segment                                                      // 4733
                                                                                                                       // 4734
		for (row = 0; row < this.rowCnt; row++) {                                                                            // 4735
			rowFirst = row * daysPerRow;                                                                                        // 4736
			rowLast = rowFirst + daysPerRow - 1;                                                                                // 4737
                                                                                                                       // 4738
			// intersect segment's offset range with the row's                                                                  // 4739
			segFirst = Math.max(rangeFirst, rowFirst);                                                                          // 4740
			segLast = Math.min(rangeLast, rowLast);                                                                             // 4741
                                                                                                                       // 4742
			// deal with in-between indices                                                                                     // 4743
			segFirst = Math.ceil(segFirst); // in-between starts round to next cell                                             // 4744
			segLast = Math.floor(segLast); // in-between ends round to prev cell                                                // 4745
                                                                                                                       // 4746
			if (segFirst <= segLast) { // was there any intersection with the current row?                                      // 4747
				segs.push({                                                                                                        // 4748
					row: row,                                                                                                         // 4749
                                                                                                                       // 4750
					// normalize to start of row                                                                                      // 4751
					firstRowDayIndex: segFirst - rowFirst,                                                                            // 4752
					lastRowDayIndex: segLast - rowFirst,                                                                              // 4753
                                                                                                                       // 4754
					// must be matching integers to be the segment's start/end                                                        // 4755
					isStart: segFirst === rangeFirst,                                                                                 // 4756
					isEnd: segLast === rangeLast                                                                                      // 4757
				});                                                                                                                // 4758
			}                                                                                                                   // 4759
		}                                                                                                                    // 4760
                                                                                                                       // 4761
		return segs;                                                                                                         // 4762
	},                                                                                                                    // 4763
                                                                                                                       // 4764
                                                                                                                       // 4765
	// Slices up a date range into a segment for every day-cell it intersects with.                                       // 4766
	// TODO: make more DRY with sliceRangeByRow somehow.                                                                  // 4767
	sliceRangeByDay: function(range) {                                                                                    // 4768
		var daysPerRow = this.daysPerRow;                                                                                    // 4769
		var normalRange = this.view.computeDayRange(range); // make whole-day range, considering nextDayThreshold            // 4770
		var rangeFirst = this.getDateDayIndex(normalRange.start); // inclusive first index                                   // 4771
		var rangeLast = this.getDateDayIndex(normalRange.end.clone().subtract(1, 'days')); // inclusive last index           // 4772
		var segs = [];                                                                                                       // 4773
		var row;                                                                                                             // 4774
		var rowFirst, rowLast; // inclusive day-index range for current row                                                  // 4775
		var i;                                                                                                               // 4776
		var segFirst, segLast; // inclusive day-index range for segment                                                      // 4777
                                                                                                                       // 4778
		for (row = 0; row < this.rowCnt; row++) {                                                                            // 4779
			rowFirst = row * daysPerRow;                                                                                        // 4780
			rowLast = rowFirst + daysPerRow - 1;                                                                                // 4781
                                                                                                                       // 4782
			for (i = rowFirst; i <= rowLast; i++) {                                                                             // 4783
                                                                                                                       // 4784
				// intersect segment's offset range with the row's                                                                 // 4785
				segFirst = Math.max(rangeFirst, i);                                                                                // 4786
				segLast = Math.min(rangeLast, i);                                                                                  // 4787
                                                                                                                       // 4788
				// deal with in-between indices                                                                                    // 4789
				segFirst = Math.ceil(segFirst); // in-between starts round to next cell                                            // 4790
				segLast = Math.floor(segLast); // in-between ends round to prev cell                                               // 4791
                                                                                                                       // 4792
				if (segFirst <= segLast) { // was there any intersection with the current row?                                     // 4793
					segs.push({                                                                                                       // 4794
						row: row,                                                                                                        // 4795
                                                                                                                       // 4796
						// normalize to start of row                                                                                     // 4797
						firstRowDayIndex: segFirst - rowFirst,                                                                           // 4798
						lastRowDayIndex: segLast - rowFirst,                                                                             // 4799
                                                                                                                       // 4800
						// must be matching integers to be the segment's start/end                                                       // 4801
						isStart: segFirst === rangeFirst,                                                                                // 4802
						isEnd: segLast === rangeLast                                                                                     // 4803
					});                                                                                                               // 4804
				}                                                                                                                  // 4805
			}                                                                                                                   // 4806
		}                                                                                                                    // 4807
                                                                                                                       // 4808
		return segs;                                                                                                         // 4809
	},                                                                                                                    // 4810
                                                                                                                       // 4811
                                                                                                                       // 4812
	/* Header Rendering                                                                                                   // 4813
	------------------------------------------------------------------------------------------------------------------*/  // 4814
                                                                                                                       // 4815
                                                                                                                       // 4816
	renderHeadHtml: function() {                                                                                          // 4817
		var view = this.view;                                                                                                // 4818
                                                                                                                       // 4819
		return '' +                                                                                                          // 4820
			'<div class="fc-row ' + view.widgetHeaderClass + '">' +                                                             // 4821
				'<table>' +                                                                                                        // 4822
					'<thead>' +                                                                                                       // 4823
						this.renderHeadTrHtml() +                                                                                        // 4824
					'</thead>' +                                                                                                      // 4825
				'</table>' +                                                                                                       // 4826
			'</div>';                                                                                                           // 4827
	},                                                                                                                    // 4828
                                                                                                                       // 4829
                                                                                                                       // 4830
	renderHeadIntroHtml: function() {                                                                                     // 4831
		return this.renderIntroHtml(); // fall back to generic                                                               // 4832
	},                                                                                                                    // 4833
                                                                                                                       // 4834
                                                                                                                       // 4835
	renderHeadTrHtml: function() {                                                                                        // 4836
		return '' +                                                                                                          // 4837
			'<tr>' +                                                                                                            // 4838
				(this.isRTL ? '' : this.renderHeadIntroHtml()) +                                                                   // 4839
				this.renderHeadDateCellsHtml() +                                                                                   // 4840
				(this.isRTL ? this.renderHeadIntroHtml() : '') +                                                                   // 4841
			'</tr>';                                                                                                            // 4842
	},                                                                                                                    // 4843
                                                                                                                       // 4844
                                                                                                                       // 4845
	renderHeadDateCellsHtml: function() {                                                                                 // 4846
		var htmls = [];                                                                                                      // 4847
		var col, date;                                                                                                       // 4848
                                                                                                                       // 4849
		for (col = 0; col < this.colCnt; col++) {                                                                            // 4850
			date = this.getCellDate(0, col);                                                                                    // 4851
			htmls.push(this.renderHeadDateCellHtml(date));                                                                      // 4852
		}                                                                                                                    // 4853
                                                                                                                       // 4854
		return htmls.join('');                                                                                               // 4855
	},                                                                                                                    // 4856
                                                                                                                       // 4857
                                                                                                                       // 4858
	renderHeadDateCellHtml: function(date, colspan) {                                                                     // 4859
		var view = this.view;                                                                                                // 4860
                                                                                                                       // 4861
		return '' +                                                                                                          // 4862
			'<th class="fc-day-header ' + view.widgetHeaderClass + ' fc-' + dayIDs[date.day()] + '"' +                          // 4863
				(colspan > 1 ? ' colspan="' + colspan + '"' : '') +                                                                // 4864
				'>' +                                                                                                              // 4865
				htmlEscape(date.format(this.colHeadFormat)) +                                                                      // 4866
			'</th>';                                                                                                            // 4867
	},                                                                                                                    // 4868
                                                                                                                       // 4869
                                                                                                                       // 4870
	/* Background Rendering                                                                                               // 4871
	------------------------------------------------------------------------------------------------------------------*/  // 4872
                                                                                                                       // 4873
                                                                                                                       // 4874
	renderBgTrHtml: function(row) {                                                                                       // 4875
		return '' +                                                                                                          // 4876
			'<tr>' +                                                                                                            // 4877
				(this.isRTL ? '' : this.renderBgIntroHtml(row)) +                                                                  // 4878
				this.renderBgCellsHtml(row) +                                                                                      // 4879
				(this.isRTL ? this.renderBgIntroHtml(row) : '') +                                                                  // 4880
			'</tr>';                                                                                                            // 4881
	},                                                                                                                    // 4882
                                                                                                                       // 4883
                                                                                                                       // 4884
	renderBgIntroHtml: function(row) {                                                                                    // 4885
		return this.renderIntroHtml(); // fall back to generic                                                               // 4886
	},                                                                                                                    // 4887
                                                                                                                       // 4888
                                                                                                                       // 4889
	renderBgCellsHtml: function(row) {                                                                                    // 4890
		var htmls = [];                                                                                                      // 4891
		var col, date;                                                                                                       // 4892
                                                                                                                       // 4893
		for (col = 0; col < this.colCnt; col++) {                                                                            // 4894
			date = this.getCellDate(row, col);                                                                                  // 4895
			htmls.push(this.renderBgCellHtml(date));                                                                            // 4896
		}                                                                                                                    // 4897
                                                                                                                       // 4898
		return htmls.join('');                                                                                               // 4899
	},                                                                                                                    // 4900
                                                                                                                       // 4901
                                                                                                                       // 4902
	renderBgCellHtml: function(date) {                                                                                    // 4903
		var view = this.view;                                                                                                // 4904
		var classes = this.getDayClasses(date);                                                                              // 4905
                                                                                                                       // 4906
		classes.unshift('fc-day', view.widgetContentClass);                                                                  // 4907
                                                                                                                       // 4908
		return '<td class="' + classes.join(' ') + '"' +                                                                     // 4909
			' data-date="' + date.format('YYYY-MM-DD') + '"' + // if date has a time, won't format it                           // 4910
			'></td>';                                                                                                           // 4911
	},                                                                                                                    // 4912
                                                                                                                       // 4913
                                                                                                                       // 4914
	/* Generic                                                                                                            // 4915
	------------------------------------------------------------------------------------------------------------------*/  // 4916
                                                                                                                       // 4917
                                                                                                                       // 4918
	// Generates the default HTML intro for any row. User classes should override                                         // 4919
	renderIntroHtml: function() {                                                                                         // 4920
	},                                                                                                                    // 4921
                                                                                                                       // 4922
                                                                                                                       // 4923
	/* Utils                                                                                                              // 4924
	------------------------------------------------------------------------------------------------------------------*/  // 4925
                                                                                                                       // 4926
                                                                                                                       // 4927
	// Applies the generic "intro" and "outro" HTML to the given cells.                                                   // 4928
	// Intro means the leftmost cell when the calendar is LTR and the rightmost cell when RTL. Vice-versa for outro.      // 4929
	bookendCells: function(trEl) {                                                                                        // 4930
		var introHtml = this.renderIntroHtml();                                                                              // 4931
                                                                                                                       // 4932
		if (introHtml) {                                                                                                     // 4933
			if (this.isRTL) {                                                                                                   // 4934
				trEl.append(introHtml);                                                                                            // 4935
			}                                                                                                                   // 4936
			else {                                                                                                              // 4937
				trEl.prepend(introHtml);                                                                                           // 4938
			}                                                                                                                   // 4939
		}                                                                                                                    // 4940
	}                                                                                                                     // 4941
                                                                                                                       // 4942
};                                                                                                                     // 4943
                                                                                                                       // 4944
;;                                                                                                                     // 4945
                                                                                                                       // 4946
/* A component that renders a grid of whole-days that runs horizontally. There can be multiple rows, one per week.     // 4947
----------------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 4949
var DayGrid = FC.DayGrid = Grid.extend(DayTableMixin, {                                                                // 4950
                                                                                                                       // 4951
	numbersVisible: false, // should render a row for day/week numbers? set by outside view. TODO: make internal          // 4952
	bottomCoordPadding: 0, // hack for extending the hit area for the last row of the coordinate grid                     // 4953
                                                                                                                       // 4954
	rowEls: null, // set of fake row elements                                                                             // 4955
	cellEls: null, // set of whole-day elements comprising the row's background                                           // 4956
	helperEls: null, // set of cell skeleton elements for rendering the mock event "helper"                               // 4957
                                                                                                                       // 4958
	rowCoordCache: null,                                                                                                  // 4959
	colCoordCache: null,                                                                                                  // 4960
                                                                                                                       // 4961
                                                                                                                       // 4962
	// Renders the rows and columns into the component's `this.el`, which should already be assigned.                     // 4963
	// isRigid determins whether the individual rows should ignore the contents and be a constant height.                 // 4964
	// Relies on the view's colCnt and rowCnt. In the future, this component should probably be self-sufficient.          // 4965
	renderDates: function(isRigid) {                                                                                      // 4966
		var view = this.view;                                                                                                // 4967
		var rowCnt = this.rowCnt;                                                                                            // 4968
		var colCnt = this.colCnt;                                                                                            // 4969
		var html = '';                                                                                                       // 4970
		var row;                                                                                                             // 4971
		var col;                                                                                                             // 4972
                                                                                                                       // 4973
		for (row = 0; row < rowCnt; row++) {                                                                                 // 4974
			html += this.renderDayRowHtml(row, isRigid);                                                                        // 4975
		}                                                                                                                    // 4976
		this.el.html(html);                                                                                                  // 4977
                                                                                                                       // 4978
		this.rowEls = this.el.find('.fc-row');                                                                               // 4979
		this.cellEls = this.el.find('.fc-day');                                                                              // 4980
                                                                                                                       // 4981
		this.rowCoordCache = new CoordCache({                                                                                // 4982
			els: this.rowEls,                                                                                                   // 4983
			isVertical: true                                                                                                    // 4984
		});                                                                                                                  // 4985
		this.colCoordCache = new CoordCache({                                                                                // 4986
			els: this.cellEls.slice(0, this.colCnt), // only the first row                                                      // 4987
			isHorizontal: true                                                                                                  // 4988
		});                                                                                                                  // 4989
                                                                                                                       // 4990
		// trigger dayRender with each cell's element                                                                        // 4991
		for (row = 0; row < rowCnt; row++) {                                                                                 // 4992
			for (col = 0; col < colCnt; col++) {                                                                                // 4993
				view.trigger(                                                                                                      // 4994
					'dayRender',                                                                                                      // 4995
					null,                                                                                                             // 4996
					this.getCellDate(row, col),                                                                                       // 4997
					this.getCellEl(row, col)                                                                                          // 4998
				);                                                                                                                 // 4999
			}                                                                                                                   // 5000
		}                                                                                                                    // 5001
	},                                                                                                                    // 5002
                                                                                                                       // 5003
                                                                                                                       // 5004
	unrenderDates: function() {                                                                                           // 5005
		this.removeSegPopover();                                                                                             // 5006
	},                                                                                                                    // 5007
                                                                                                                       // 5008
                                                                                                                       // 5009
	renderBusinessHours: function() {                                                                                     // 5010
		var events = this.view.calendar.getBusinessHoursEvents(true); // wholeDay=true                                       // 5011
		var segs = this.eventsToSegs(events);                                                                                // 5012
                                                                                                                       // 5013
		this.renderFill('businessHours', segs, 'bgevent');                                                                   // 5014
	},                                                                                                                    // 5015
                                                                                                                       // 5016
                                                                                                                       // 5017
	// Generates the HTML for a single row, which is a div that wraps a table.                                            // 5018
	// `row` is the row number.                                                                                           // 5019
	renderDayRowHtml: function(row, isRigid) {                                                                            // 5020
		var view = this.view;                                                                                                // 5021
		var classes = [ 'fc-row', 'fc-week', view.widgetContentClass ];                                                      // 5022
                                                                                                                       // 5023
		if (isRigid) {                                                                                                       // 5024
			classes.push('fc-rigid');                                                                                           // 5025
		}                                                                                                                    // 5026
                                                                                                                       // 5027
		return '' +                                                                                                          // 5028
			'<div class="' + classes.join(' ') + '">' +                                                                         // 5029
				'<div class="fc-bg">' +                                                                                            // 5030
					'<table>' +                                                                                                       // 5031
						this.renderBgTrHtml(row) +                                                                                       // 5032
					'</table>' +                                                                                                      // 5033
				'</div>' +                                                                                                         // 5034
				'<div class="fc-content-skeleton">' +                                                                              // 5035
					'<table>' +                                                                                                       // 5036
						(this.numbersVisible ?                                                                                           // 5037
							'<thead>' +                                                                                                     // 5038
								this.renderNumberTrHtml(row) +                                                                                 // 5039
							'</thead>' :                                                                                                    // 5040
							''                                                                                                              // 5041
							) +                                                                                                             // 5042
					'</table>' +                                                                                                      // 5043
				'</div>' +                                                                                                         // 5044
			'</div>';                                                                                                           // 5045
	},                                                                                                                    // 5046
                                                                                                                       // 5047
                                                                                                                       // 5048
	/* Grid Number Rendering                                                                                              // 5049
	------------------------------------------------------------------------------------------------------------------*/  // 5050
                                                                                                                       // 5051
                                                                                                                       // 5052
	renderNumberTrHtml: function(row) {                                                                                   // 5053
		return '' +                                                                                                          // 5054
			'<tr>' +                                                                                                            // 5055
				(this.isRTL ? '' : this.renderNumberIntroHtml(row)) +                                                              // 5056
				this.renderNumberCellsHtml(row) +                                                                                  // 5057
				(this.isRTL ? this.renderNumberIntroHtml(row) : '') +                                                              // 5058
			'</tr>';                                                                                                            // 5059
	},                                                                                                                    // 5060
                                                                                                                       // 5061
                                                                                                                       // 5062
	renderNumberIntroHtml: function(row) {                                                                                // 5063
		return this.renderIntroHtml();                                                                                       // 5064
	},                                                                                                                    // 5065
                                                                                                                       // 5066
                                                                                                                       // 5067
	renderNumberCellsHtml: function(row) {                                                                                // 5068
		var htmls = [];                                                                                                      // 5069
		var col, date;                                                                                                       // 5070
                                                                                                                       // 5071
		for (col = 0; col < this.colCnt; col++) {                                                                            // 5072
			date = this.getCellDate(row, col);                                                                                  // 5073
			htmls.push(this.renderNumberCellHtml(date));                                                                        // 5074
		}                                                                                                                    // 5075
                                                                                                                       // 5076
		return htmls.join('');                                                                                               // 5077
	},                                                                                                                    // 5078
                                                                                                                       // 5079
                                                                                                                       // 5080
	// Generates the HTML for the <td>s of the "number" row in the DayGrid's content skeleton.                            // 5081
	// The number row will only exist if either day numbers or week numbers are turned on.                                // 5082
	renderNumberCellHtml: function(date) {                                                                                // 5083
		var classes;                                                                                                         // 5084
                                                                                                                       // 5085
		if (!this.view.dayNumbersVisible) { // if there are week numbers but not day numbers                                 // 5086
			return '<td/>'; //  will create an empty space above events :(                                                      // 5087
		}                                                                                                                    // 5088
                                                                                                                       // 5089
		classes = this.getDayClasses(date);                                                                                  // 5090
		classes.unshift('fc-day-number');                                                                                    // 5091
                                                                                                                       // 5092
		return '' +                                                                                                          // 5093
			'<td class="' + classes.join(' ') + '" data-date="' + date.format() + '">' +                                        // 5094
				date.date() +                                                                                                      // 5095
			'</td>';                                                                                                            // 5096
	},                                                                                                                    // 5097
                                                                                                                       // 5098
                                                                                                                       // 5099
	/* Options                                                                                                            // 5100
	------------------------------------------------------------------------------------------------------------------*/  // 5101
                                                                                                                       // 5102
                                                                                                                       // 5103
	// Computes a default event time formatting string if `timeFormat` is not explicitly defined                          // 5104
	computeEventTimeFormat: function() {                                                                                  // 5105
		return this.view.opt('extraSmallTimeFormat'); // like "6p" or "6:30p"                                                // 5106
	},                                                                                                                    // 5107
                                                                                                                       // 5108
                                                                                                                       // 5109
	// Computes a default `displayEventEnd` value if one is not expliclty defined                                         // 5110
	computeDisplayEventEnd: function() {                                                                                  // 5111
		return this.colCnt == 1; // we'll likely have space if there's only one day                                          // 5112
	},                                                                                                                    // 5113
                                                                                                                       // 5114
                                                                                                                       // 5115
	/* Dates                                                                                                              // 5116
	------------------------------------------------------------------------------------------------------------------*/  // 5117
                                                                                                                       // 5118
                                                                                                                       // 5119
	rangeUpdated: function() {                                                                                            // 5120
		this.updateDayTable();                                                                                               // 5121
	},                                                                                                                    // 5122
                                                                                                                       // 5123
                                                                                                                       // 5124
	// Slices up the given span (unzoned start/end with other misc data) into an array of segments                        // 5125
	spanToSegs: function(span) {                                                                                          // 5126
		var segs = this.sliceRangeByRow(span);                                                                               // 5127
		var i, seg;                                                                                                          // 5128
                                                                                                                       // 5129
		for (i = 0; i < segs.length; i++) {                                                                                  // 5130
			seg = segs[i];                                                                                                      // 5131
			if (this.isRTL) {                                                                                                   // 5132
				seg.leftCol = this.daysPerRow - 1 - seg.lastRowDayIndex;                                                           // 5133
				seg.rightCol = this.daysPerRow - 1 - seg.firstRowDayIndex;                                                         // 5134
			}                                                                                                                   // 5135
			else {                                                                                                              // 5136
				seg.leftCol = seg.firstRowDayIndex;                                                                                // 5137
				seg.rightCol = seg.lastRowDayIndex;                                                                                // 5138
			}                                                                                                                   // 5139
		}                                                                                                                    // 5140
                                                                                                                       // 5141
		return segs;                                                                                                         // 5142
	},                                                                                                                    // 5143
                                                                                                                       // 5144
                                                                                                                       // 5145
	/* Hit System                                                                                                         // 5146
	------------------------------------------------------------------------------------------------------------------*/  // 5147
                                                                                                                       // 5148
                                                                                                                       // 5149
	prepareHits: function() {                                                                                             // 5150
		this.colCoordCache.build();                                                                                          // 5151
		this.rowCoordCache.build();                                                                                          // 5152
		this.rowCoordCache.bottoms[this.rowCnt - 1] += this.bottomCoordPadding; // hack                                      // 5153
	},                                                                                                                    // 5154
                                                                                                                       // 5155
                                                                                                                       // 5156
	releaseHits: function() {                                                                                             // 5157
		this.colCoordCache.clear();                                                                                          // 5158
		this.rowCoordCache.clear();                                                                                          // 5159
	},                                                                                                                    // 5160
                                                                                                                       // 5161
                                                                                                                       // 5162
	queryHit: function(leftOffset, topOffset) {                                                                           // 5163
		var col = this.colCoordCache.getHorizontalIndex(leftOffset);                                                         // 5164
		var row = this.rowCoordCache.getVerticalIndex(topOffset);                                                            // 5165
                                                                                                                       // 5166
		if (row != null && col != null) {                                                                                    // 5167
			return this.getCellHit(row, col);                                                                                   // 5168
		}                                                                                                                    // 5169
	},                                                                                                                    // 5170
                                                                                                                       // 5171
                                                                                                                       // 5172
	getHitSpan: function(hit) {                                                                                           // 5173
		return this.getCellRange(hit.row, hit.col);                                                                          // 5174
	},                                                                                                                    // 5175
                                                                                                                       // 5176
                                                                                                                       // 5177
	getHitEl: function(hit) {                                                                                             // 5178
		return this.getCellEl(hit.row, hit.col);                                                                             // 5179
	},                                                                                                                    // 5180
                                                                                                                       // 5181
                                                                                                                       // 5182
	/* Cell System                                                                                                        // 5183
	------------------------------------------------------------------------------------------------------------------*/  // 5184
	// FYI: the first column is the leftmost column, regardless of date                                                   // 5185
                                                                                                                       // 5186
                                                                                                                       // 5187
	getCellHit: function(row, col) {                                                                                      // 5188
		return {                                                                                                             // 5189
			row: row,                                                                                                           // 5190
			col: col,                                                                                                           // 5191
			component: this, // needed unfortunately :(                                                                         // 5192
			left: this.colCoordCache.getLeftOffset(col),                                                                        // 5193
			right: this.colCoordCache.getRightOffset(col),                                                                      // 5194
			top: this.rowCoordCache.getTopOffset(row),                                                                          // 5195
			bottom: this.rowCoordCache.getBottomOffset(row)                                                                     // 5196
		};                                                                                                                   // 5197
	},                                                                                                                    // 5198
                                                                                                                       // 5199
                                                                                                                       // 5200
	getCellEl: function(row, col) {                                                                                       // 5201
		return this.cellEls.eq(row * this.colCnt + col);                                                                     // 5202
	},                                                                                                                    // 5203
                                                                                                                       // 5204
                                                                                                                       // 5205
	/* Event Drag Visualization                                                                                           // 5206
	------------------------------------------------------------------------------------------------------------------*/  // 5207
	// TODO: move to DayGrid.event, similar to what we did with Grid's drag methods                                       // 5208
                                                                                                                       // 5209
                                                                                                                       // 5210
	// Renders a visual indication of an event or external element being dragged.                                         // 5211
	// `eventLocation` has zoned start and end (optional)                                                                 // 5212
	renderDrag: function(eventLocation, seg) {                                                                            // 5213
                                                                                                                       // 5214
		// always render a highlight underneath                                                                              // 5215
		this.renderHighlight(this.eventToSpan(eventLocation));                                                               // 5216
                                                                                                                       // 5217
		// if a segment from the same calendar but another component is being dragged, render a helper event                 // 5218
		if (seg && !seg.el.closest(this.el).length) {                                                                        // 5219
                                                                                                                       // 5220
			this.renderEventLocationHelper(eventLocation, seg);                                                                 // 5221
			this.applyDragOpacity(this.helperEls);                                                                              // 5222
                                                                                                                       // 5223
			return true; // a helper has been rendered                                                                          // 5224
		}                                                                                                                    // 5225
	},                                                                                                                    // 5226
                                                                                                                       // 5227
                                                                                                                       // 5228
	// Unrenders any visual indication of a hovering event                                                                // 5229
	unrenderDrag: function() {                                                                                            // 5230
		this.unrenderHighlight();                                                                                            // 5231
		this.unrenderHelper();                                                                                               // 5232
	},                                                                                                                    // 5233
                                                                                                                       // 5234
                                                                                                                       // 5235
	/* Event Resize Visualization                                                                                         // 5236
	------------------------------------------------------------------------------------------------------------------*/  // 5237
                                                                                                                       // 5238
                                                                                                                       // 5239
	// Renders a visual indication of an event being resized                                                              // 5240
	renderEventResize: function(eventLocation, seg) {                                                                     // 5241
		this.renderHighlight(this.eventToSpan(eventLocation));                                                               // 5242
		this.renderEventLocationHelper(eventLocation, seg);                                                                  // 5243
	},                                                                                                                    // 5244
                                                                                                                       // 5245
                                                                                                                       // 5246
	// Unrenders a visual indication of an event being resized                                                            // 5247
	unrenderEventResize: function() {                                                                                     // 5248
		this.unrenderHighlight();                                                                                            // 5249
		this.unrenderHelper();                                                                                               // 5250
	},                                                                                                                    // 5251
                                                                                                                       // 5252
                                                                                                                       // 5253
	/* Event Helper                                                                                                       // 5254
	------------------------------------------------------------------------------------------------------------------*/  // 5255
                                                                                                                       // 5256
                                                                                                                       // 5257
	// Renders a mock "helper" event. `sourceSeg` is the associated internal segment object. It can be null.              // 5258
	renderHelper: function(event, sourceSeg) {                                                                            // 5259
		var helperNodes = [];                                                                                                // 5260
		var segs = this.eventToSegs(event);                                                                                  // 5261
		var rowStructs;                                                                                                      // 5262
                                                                                                                       // 5263
		segs = this.renderFgSegEls(segs); // assigns each seg's el and returns a subset of segs that were rendered           // 5264
		rowStructs = this.renderSegRows(segs);                                                                               // 5265
                                                                                                                       // 5266
		// inject each new event skeleton into each associated row                                                           // 5267
		this.rowEls.each(function(row, rowNode) {                                                                            // 5268
			var rowEl = $(rowNode); // the .fc-row                                                                              // 5269
			var skeletonEl = $('<div class="fc-helper-skeleton"><table/></div>'); // will be absolutely positioned              // 5270
			var skeletonTop;                                                                                                    // 5271
                                                                                                                       // 5272
			// If there is an original segment, match the top position. Otherwise, put it at the row's top level                // 5273
			if (sourceSeg && sourceSeg.row === row) {                                                                           // 5274
				skeletonTop = sourceSeg.el.position().top;                                                                         // 5275
			}                                                                                                                   // 5276
			else {                                                                                                              // 5277
				skeletonTop = rowEl.find('.fc-content-skeleton tbody').position().top;                                             // 5278
			}                                                                                                                   // 5279
                                                                                                                       // 5280
			skeletonEl.css('top', skeletonTop)                                                                                  // 5281
				.find('table')                                                                                                     // 5282
					.append(rowStructs[row].tbodyEl);                                                                                 // 5283
                                                                                                                       // 5284
			rowEl.append(skeletonEl);                                                                                           // 5285
			helperNodes.push(skeletonEl[0]);                                                                                    // 5286
		});                                                                                                                  // 5287
                                                                                                                       // 5288
		this.helperEls = $(helperNodes); // array -> jQuery set                                                              // 5289
	},                                                                                                                    // 5290
                                                                                                                       // 5291
                                                                                                                       // 5292
	// Unrenders any visual indication of a mock helper event                                                             // 5293
	unrenderHelper: function() {                                                                                          // 5294
		if (this.helperEls) {                                                                                                // 5295
			this.helperEls.remove();                                                                                            // 5296
			this.helperEls = null;                                                                                              // 5297
		}                                                                                                                    // 5298
	},                                                                                                                    // 5299
                                                                                                                       // 5300
                                                                                                                       // 5301
	/* Fill System (highlight, background events, business hours)                                                         // 5302
	------------------------------------------------------------------------------------------------------------------*/  // 5303
                                                                                                                       // 5304
                                                                                                                       // 5305
	fillSegTag: 'td', // override the default tag name                                                                    // 5306
                                                                                                                       // 5307
                                                                                                                       // 5308
	// Renders a set of rectangles over the given segments of days.                                                       // 5309
	// Only returns segments that successfully rendered.                                                                  // 5310
	renderFill: function(type, segs, className) {                                                                         // 5311
		var nodes = [];                                                                                                      // 5312
		var i, seg;                                                                                                          // 5313
		var skeletonEl;                                                                                                      // 5314
                                                                                                                       // 5315
		segs = this.renderFillSegEls(type, segs); // assignes `.el` to each seg. returns successfully rendered segs          // 5316
                                                                                                                       // 5317
		for (i = 0; i < segs.length; i++) {                                                                                  // 5318
			seg = segs[i];                                                                                                      // 5319
			skeletonEl = this.renderFillRow(type, seg, className);                                                              // 5320
			this.rowEls.eq(seg.row).append(skeletonEl);                                                                         // 5321
			nodes.push(skeletonEl[0]);                                                                                          // 5322
		}                                                                                                                    // 5323
                                                                                                                       // 5324
		this.elsByFill[type] = $(nodes);                                                                                     // 5325
                                                                                                                       // 5326
		return segs;                                                                                                         // 5327
	},                                                                                                                    // 5328
                                                                                                                       // 5329
                                                                                                                       // 5330
	// Generates the HTML needed for one row of a fill. Requires the seg's el to be rendered.                             // 5331
	renderFillRow: function(type, seg, className) {                                                                       // 5332
		var colCnt = this.colCnt;                                                                                            // 5333
		var startCol = seg.leftCol;                                                                                          // 5334
		var endCol = seg.rightCol + 1;                                                                                       // 5335
		var skeletonEl;                                                                                                      // 5336
		var trEl;                                                                                                            // 5337
                                                                                                                       // 5338
		className = className || type.toLowerCase();                                                                         // 5339
                                                                                                                       // 5340
		skeletonEl = $(                                                                                                      // 5341
			'<div class="fc-' + className + '-skeleton">' +                                                                     // 5342
				'<table><tr/></table>' +                                                                                           // 5343
			'</div>'                                                                                                            // 5344
		);                                                                                                                   // 5345
		trEl = skeletonEl.find('tr');                                                                                        // 5346
                                                                                                                       // 5347
		if (startCol > 0) {                                                                                                  // 5348
			trEl.append('<td colspan="' + startCol + '"/>');                                                                    // 5349
		}                                                                                                                    // 5350
                                                                                                                       // 5351
		trEl.append(                                                                                                         // 5352
			seg.el.attr('colspan', endCol - startCol)                                                                           // 5353
		);                                                                                                                   // 5354
                                                                                                                       // 5355
		if (endCol < colCnt) {                                                                                               // 5356
			trEl.append('<td colspan="' + (colCnt - endCol) + '"/>');                                                           // 5357
		}                                                                                                                    // 5358
                                                                                                                       // 5359
		this.bookendCells(trEl);                                                                                             // 5360
                                                                                                                       // 5361
		return skeletonEl;                                                                                                   // 5362
	}                                                                                                                     // 5363
                                                                                                                       // 5364
});                                                                                                                    // 5365
                                                                                                                       // 5366
;;                                                                                                                     // 5367
                                                                                                                       // 5368
/* Event-rendering methods for the DayGrid class                                                                       // 5369
----------------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 5371
DayGrid.mixin({                                                                                                        // 5372
                                                                                                                       // 5373
	rowStructs: null, // an array of objects, each holding information about a row's foreground event-rendering           // 5374
                                                                                                                       // 5375
                                                                                                                       // 5376
	// Unrenders all events currently rendered on the grid                                                                // 5377
	unrenderEvents: function() {                                                                                          // 5378
		this.removeSegPopover(); // removes the "more.." events popover                                                      // 5379
		Grid.prototype.unrenderEvents.apply(this, arguments); // calls the super-method                                      // 5380
	},                                                                                                                    // 5381
                                                                                                                       // 5382
                                                                                                                       // 5383
	// Retrieves all rendered segment objects currently rendered on the grid                                              // 5384
	getEventSegs: function() {                                                                                            // 5385
		return Grid.prototype.getEventSegs.call(this) // get the segments from the super-method                              // 5386
			.concat(this.popoverSegs || []); // append the segments from the "more..." popover                                  // 5387
	},                                                                                                                    // 5388
                                                                                                                       // 5389
                                                                                                                       // 5390
	// Renders the given background event segments onto the grid                                                          // 5391
	renderBgSegs: function(segs) {                                                                                        // 5392
                                                                                                                       // 5393
		// don't render timed background events                                                                              // 5394
		var allDaySegs = $.grep(segs, function(seg) {                                                                        // 5395
			return seg.event.allDay;                                                                                            // 5396
		});                                                                                                                  // 5397
                                                                                                                       // 5398
		return Grid.prototype.renderBgSegs.call(this, allDaySegs); // call the super-method                                  // 5399
	},                                                                                                                    // 5400
                                                                                                                       // 5401
                                                                                                                       // 5402
	// Renders the given foreground event segments onto the grid                                                          // 5403
	renderFgSegs: function(segs) {                                                                                        // 5404
		var rowStructs;                                                                                                      // 5405
                                                                                                                       // 5406
		// render an `.el` on each seg                                                                                       // 5407
		// returns a subset of the segs. segs that were actually rendered                                                    // 5408
		segs = this.renderFgSegEls(segs);                                                                                    // 5409
                                                                                                                       // 5410
		rowStructs = this.rowStructs = this.renderSegRows(segs);                                                             // 5411
                                                                                                                       // 5412
		// append to each row's content skeleton                                                                             // 5413
		this.rowEls.each(function(i, rowNode) {                                                                              // 5414
			$(rowNode).find('.fc-content-skeleton > table').append(                                                             // 5415
				rowStructs[i].tbodyEl                                                                                              // 5416
			);                                                                                                                  // 5417
		});                                                                                                                  // 5418
                                                                                                                       // 5419
		return segs; // return only the segs that were actually rendered                                                     // 5420
	},                                                                                                                    // 5421
                                                                                                                       // 5422
                                                                                                                       // 5423
	// Unrenders all currently rendered foreground event segments                                                         // 5424
	unrenderFgSegs: function() {                                                                                          // 5425
		var rowStructs = this.rowStructs || [];                                                                              // 5426
		var rowStruct;                                                                                                       // 5427
                                                                                                                       // 5428
		while ((rowStruct = rowStructs.pop())) {                                                                             // 5429
			rowStruct.tbodyEl.remove();                                                                                         // 5430
		}                                                                                                                    // 5431
                                                                                                                       // 5432
		this.rowStructs = null;                                                                                              // 5433
	},                                                                                                                    // 5434
                                                                                                                       // 5435
                                                                                                                       // 5436
	// Uses the given events array to generate <tbody> elements that should be appended to each row's content skeleton.   // 5437
	// Returns an array of rowStruct objects (see the bottom of `renderSegRow`).                                          // 5438
	// PRECONDITION: each segment shoud already have a rendered and assigned `.el`                                        // 5439
	renderSegRows: function(segs) {                                                                                       // 5440
		var rowStructs = [];                                                                                                 // 5441
		var segRows;                                                                                                         // 5442
		var row;                                                                                                             // 5443
                                                                                                                       // 5444
		segRows = this.groupSegRows(segs); // group into nested arrays                                                       // 5445
                                                                                                                       // 5446
		// iterate each row of segment groupings                                                                             // 5447
		for (row = 0; row < segRows.length; row++) {                                                                         // 5448
			rowStructs.push(                                                                                                    // 5449
				this.renderSegRow(row, segRows[row])                                                                               // 5450
			);                                                                                                                  // 5451
		}                                                                                                                    // 5452
                                                                                                                       // 5453
		return rowStructs;                                                                                                   // 5454
	},                                                                                                                    // 5455
                                                                                                                       // 5456
                                                                                                                       // 5457
	// Builds the HTML to be used for the default element for an individual segment                                       // 5458
	fgSegHtml: function(seg, disableResizing) {                                                                           // 5459
		var view = this.view;                                                                                                // 5460
		var event = seg.event;                                                                                               // 5461
		var isDraggable = view.isEventDraggable(event);                                                                      // 5462
		var isResizableFromStart = !disableResizing && event.allDay &&                                                       // 5463
			seg.isStart && view.isEventResizableFromStart(event);                                                               // 5464
		var isResizableFromEnd = !disableResizing && event.allDay &&                                                         // 5465
			seg.isEnd && view.isEventResizableFromEnd(event);                                                                   // 5466
		var classes = this.getSegClasses(seg, isDraggable, isResizableFromStart || isResizableFromEnd);                      // 5467
		var skinCss = cssToStr(this.getEventSkinCss(event));                                                                 // 5468
		var timeHtml = '';                                                                                                   // 5469
		var timeText;                                                                                                        // 5470
		var titleHtml;                                                                                                       // 5471
                                                                                                                       // 5472
		classes.unshift('fc-day-grid-event', 'fc-h-event');                                                                  // 5473
                                                                                                                       // 5474
		// Only display a timed events time if it is the starting segment                                                    // 5475
		if (seg.isStart) {                                                                                                   // 5476
			timeText = this.getEventTimeText(event);                                                                            // 5477
			if (timeText) {                                                                                                     // 5478
				timeHtml = '<span class="fc-time">' + htmlEscape(timeText) + '</span>';                                            // 5479
			}                                                                                                                   // 5480
		}                                                                                                                    // 5481
                                                                                                                       // 5482
		titleHtml =                                                                                                          // 5483
			'<span class="fc-title">' +                                                                                         // 5484
				(htmlEscape(event.title || '') || '&nbsp;') + // we always want one line of height                                 // 5485
			'</span>';                                                                                                          // 5486
		                                                                                                                     // 5487
		return '<a class="' + classes.join(' ') + '"' +                                                                      // 5488
				(event.url ?                                                                                                       // 5489
					' href="' + htmlEscape(event.url) + '"' :                                                                         // 5490
					''                                                                                                                // 5491
					) +                                                                                                               // 5492
				(skinCss ?                                                                                                         // 5493
					' style="' + skinCss + '"' :                                                                                      // 5494
					''                                                                                                                // 5495
					) +                                                                                                               // 5496
			'>' +                                                                                                               // 5497
				'<div class="fc-content">' +                                                                                       // 5498
					(this.isRTL ?                                                                                                     // 5499
						titleHtml + ' ' + timeHtml : // put a natural space in between                                                   // 5500
						timeHtml + ' ' + titleHtml   //                                                                                  // 5501
						) +                                                                                                              // 5502
				'</div>' +                                                                                                         // 5503
				(isResizableFromStart ?                                                                                            // 5504
					'<div class="fc-resizer fc-start-resizer" />' :                                                                   // 5505
					''                                                                                                                // 5506
					) +                                                                                                               // 5507
				(isResizableFromEnd ?                                                                                              // 5508
					'<div class="fc-resizer fc-end-resizer" />' :                                                                     // 5509
					''                                                                                                                // 5510
					) +                                                                                                               // 5511
			'</a>';                                                                                                             // 5512
	},                                                                                                                    // 5513
                                                                                                                       // 5514
                                                                                                                       // 5515
	// Given a row # and an array of segments all in the same row, render a <tbody> element, a skeleton that contains     // 5516
	// the segments. Returns object with a bunch of internal data about how the render was calculated.                    // 5517
	// NOTE: modifies rowSegs                                                                                             // 5518
	renderSegRow: function(row, rowSegs) {                                                                                // 5519
		var colCnt = this.colCnt;                                                                                            // 5520
		var segLevels = this.buildSegLevels(rowSegs); // group into sub-arrays of levels                                     // 5521
		var levelCnt = Math.max(1, segLevels.length); // ensure at least one level                                           // 5522
		var tbody = $('<tbody/>');                                                                                           // 5523
		var segMatrix = []; // lookup for which segments are rendered into which level+col cells                             // 5524
		var cellMatrix = []; // lookup for all <td> elements of the level+col matrix                                         // 5525
		var loneCellMatrix = []; // lookup for <td> elements that only take up a single column                               // 5526
		var i, levelSegs;                                                                                                    // 5527
		var col;                                                                                                             // 5528
		var tr;                                                                                                              // 5529
		var j, seg;                                                                                                          // 5530
		var td;                                                                                                              // 5531
                                                                                                                       // 5532
		// populates empty cells from the current column (`col`) to `endCol`                                                 // 5533
		function emptyCellsUntil(endCol) {                                                                                   // 5534
			while (col < endCol) {                                                                                              // 5535
				// try to grab a cell from the level above and extend its rowspan. otherwise, create a fresh cell                  // 5536
				td = (loneCellMatrix[i - 1] || [])[col];                                                                           // 5537
				if (td) {                                                                                                          // 5538
					td.attr(                                                                                                          // 5539
						'rowspan',                                                                                                       // 5540
						parseInt(td.attr('rowspan') || 1, 10) + 1                                                                        // 5541
					);                                                                                                                // 5542
				}                                                                                                                  // 5543
				else {                                                                                                             // 5544
					td = $('<td/>');                                                                                                  // 5545
					tr.append(td);                                                                                                    // 5546
				}                                                                                                                  // 5547
				cellMatrix[i][col] = td;                                                                                           // 5548
				loneCellMatrix[i][col] = td;                                                                                       // 5549
				col++;                                                                                                             // 5550
			}                                                                                                                   // 5551
		}                                                                                                                    // 5552
                                                                                                                       // 5553
		for (i = 0; i < levelCnt; i++) { // iterate through all levels                                                       // 5554
			levelSegs = segLevels[i];                                                                                           // 5555
			col = 0;                                                                                                            // 5556
			tr = $('<tr/>');                                                                                                    // 5557
                                                                                                                       // 5558
			segMatrix.push([]);                                                                                                 // 5559
			cellMatrix.push([]);                                                                                                // 5560
			loneCellMatrix.push([]);                                                                                            // 5561
                                                                                                                       // 5562
			// levelCnt might be 1 even though there are no actual levels. protect against this.                                // 5563
			// this single empty row is useful for styling.                                                                     // 5564
			if (levelSegs) {                                                                                                    // 5565
				for (j = 0; j < levelSegs.length; j++) { // iterate through segments in level                                      // 5566
					seg = levelSegs[j];                                                                                               // 5567
                                                                                                                       // 5568
					emptyCellsUntil(seg.leftCol);                                                                                     // 5569
                                                                                                                       // 5570
					// create a container that occupies or more columns. append the event element.                                    // 5571
					td = $('<td class="fc-event-container"/>').append(seg.el);                                                        // 5572
					if (seg.leftCol != seg.rightCol) {                                                                                // 5573
						td.attr('colspan', seg.rightCol - seg.leftCol + 1);                                                              // 5574
					}                                                                                                                 // 5575
					else { // a single-column segment                                                                                 // 5576
						loneCellMatrix[i][col] = td;                                                                                     // 5577
					}                                                                                                                 // 5578
                                                                                                                       // 5579
					while (col <= seg.rightCol) {                                                                                     // 5580
						cellMatrix[i][col] = td;                                                                                         // 5581
						segMatrix[i][col] = seg;                                                                                         // 5582
						col++;                                                                                                           // 5583
					}                                                                                                                 // 5584
                                                                                                                       // 5585
					tr.append(td);                                                                                                    // 5586
				}                                                                                                                  // 5587
			}                                                                                                                   // 5588
                                                                                                                       // 5589
			emptyCellsUntil(colCnt); // finish off the row                                                                      // 5590
			this.bookendCells(tr);                                                                                              // 5591
			tbody.append(tr);                                                                                                   // 5592
		}                                                                                                                    // 5593
                                                                                                                       // 5594
		return { // a "rowStruct"                                                                                            // 5595
			row: row, // the row number                                                                                         // 5596
			tbodyEl: tbody,                                                                                                     // 5597
			cellMatrix: cellMatrix,                                                                                             // 5598
			segMatrix: segMatrix,                                                                                               // 5599
			segLevels: segLevels,                                                                                               // 5600
			segs: rowSegs                                                                                                       // 5601
		};                                                                                                                   // 5602
	},                                                                                                                    // 5603
                                                                                                                       // 5604
                                                                                                                       // 5605
	// Stacks a flat array of segments, which are all assumed to be in the same row, into subarrays of vertical levels.   // 5606
	// NOTE: modifies segs                                                                                                // 5607
	buildSegLevels: function(segs) {                                                                                      // 5608
		var levels = [];                                                                                                     // 5609
		var i, seg;                                                                                                          // 5610
		var j;                                                                                                               // 5611
                                                                                                                       // 5612
		// Give preference to elements with certain criteria, so they have                                                   // 5613
		// a chance to be closer to the top.                                                                                 // 5614
		this.sortEventSegs(segs);                                                                                            // 5615
		                                                                                                                     // 5616
		for (i = 0; i < segs.length; i++) {                                                                                  // 5617
			seg = segs[i];                                                                                                      // 5618
                                                                                                                       // 5619
			// loop through levels, starting with the topmost, until the segment doesn't collide with other segments            // 5620
			for (j = 0; j < levels.length; j++) {                                                                               // 5621
				if (!isDaySegCollision(seg, levels[j])) {                                                                          // 5622
					break;                                                                                                            // 5623
				}                                                                                                                  // 5624
			}                                                                                                                   // 5625
			// `j` now holds the desired subrow index                                                                           // 5626
			seg.level = j;                                                                                                      // 5627
                                                                                                                       // 5628
			// create new level array if needed and append segment                                                              // 5629
			(levels[j] || (levels[j] = [])).push(seg);                                                                          // 5630
		}                                                                                                                    // 5631
                                                                                                                       // 5632
		// order segments left-to-right. very important if calendar is RTL                                                   // 5633
		for (j = 0; j < levels.length; j++) {                                                                                // 5634
			levels[j].sort(compareDaySegCols);                                                                                  // 5635
		}                                                                                                                    // 5636
                                                                                                                       // 5637
		return levels;                                                                                                       // 5638
	},                                                                                                                    // 5639
                                                                                                                       // 5640
                                                                                                                       // 5641
	// Given a flat array of segments, return an array of sub-arrays, grouped by each segment's row                       // 5642
	groupSegRows: function(segs) {                                                                                        // 5643
		var segRows = [];                                                                                                    // 5644
		var i;                                                                                                               // 5645
                                                                                                                       // 5646
		for (i = 0; i < this.rowCnt; i++) {                                                                                  // 5647
			segRows.push([]);                                                                                                   // 5648
		}                                                                                                                    // 5649
                                                                                                                       // 5650
		for (i = 0; i < segs.length; i++) {                                                                                  // 5651
			segRows[segs[i].row].push(segs[i]);                                                                                 // 5652
		}                                                                                                                    // 5653
                                                                                                                       // 5654
		return segRows;                                                                                                      // 5655
	}                                                                                                                     // 5656
                                                                                                                       // 5657
});                                                                                                                    // 5658
                                                                                                                       // 5659
                                                                                                                       // 5660
// Computes whether two segments' columns collide. They are assumed to be in the same row.                             // 5661
function isDaySegCollision(seg, otherSegs) {                                                                           // 5662
	var i, otherSeg;                                                                                                      // 5663
                                                                                                                       // 5664
	for (i = 0; i < otherSegs.length; i++) {                                                                              // 5665
		otherSeg = otherSegs[i];                                                                                             // 5666
                                                                                                                       // 5667
		if (                                                                                                                 // 5668
			otherSeg.leftCol <= seg.rightCol &&                                                                                 // 5669
			otherSeg.rightCol >= seg.leftCol                                                                                    // 5670
		) {                                                                                                                  // 5671
			return true;                                                                                                        // 5672
		}                                                                                                                    // 5673
	}                                                                                                                     // 5674
                                                                                                                       // 5675
	return false;                                                                                                         // 5676
}                                                                                                                      // 5677
                                                                                                                       // 5678
                                                                                                                       // 5679
// A cmp function for determining the leftmost event                                                                   // 5680
function compareDaySegCols(a, b) {                                                                                     // 5681
	return a.leftCol - b.leftCol;                                                                                         // 5682
}                                                                                                                      // 5683
                                                                                                                       // 5684
;;                                                                                                                     // 5685
                                                                                                                       // 5686
/* Methods relate to limiting the number events for a given day on a DayGrid                                           // 5687
----------------------------------------------------------------------------------------------------------------------*/
// NOTE: all the segs being passed around in here are foreground segs                                                  // 5689
                                                                                                                       // 5690
DayGrid.mixin({                                                                                                        // 5691
                                                                                                                       // 5692
	segPopover: null, // the Popover that holds events that can't fit in a cell. null when not visible                    // 5693
	popoverSegs: null, // an array of segment objects that the segPopover holds. null when not visible                    // 5694
                                                                                                                       // 5695
                                                                                                                       // 5696
	removeSegPopover: function() {                                                                                        // 5697
		if (this.segPopover) {                                                                                               // 5698
			this.segPopover.hide(); // in handler, will call segPopover's removeElement                                         // 5699
		}                                                                                                                    // 5700
	},                                                                                                                    // 5701
                                                                                                                       // 5702
                                                                                                                       // 5703
	// Limits the number of "levels" (vertically stacking layers of events) for each row of the grid.                     // 5704
	// `levelLimit` can be false (don't limit), a number, or true (should be computed).                                   // 5705
	limitRows: function(levelLimit) {                                                                                     // 5706
		var rowStructs = this.rowStructs || [];                                                                              // 5707
		var row; // row #                                                                                                    // 5708
		var rowLevelLimit;                                                                                                   // 5709
                                                                                                                       // 5710
		for (row = 0; row < rowStructs.length; row++) {                                                                      // 5711
			this.unlimitRow(row);                                                                                               // 5712
                                                                                                                       // 5713
			if (!levelLimit) {                                                                                                  // 5714
				rowLevelLimit = false;                                                                                             // 5715
			}                                                                                                                   // 5716
			else if (typeof levelLimit === 'number') {                                                                          // 5717
				rowLevelLimit = levelLimit;                                                                                        // 5718
			}                                                                                                                   // 5719
			else {                                                                                                              // 5720
				rowLevelLimit = this.computeRowLevelLimit(row);                                                                    // 5721
			}                                                                                                                   // 5722
                                                                                                                       // 5723
			if (rowLevelLimit !== false) {                                                                                      // 5724
				this.limitRow(row, rowLevelLimit);                                                                                 // 5725
			}                                                                                                                   // 5726
		}                                                                                                                    // 5727
	},                                                                                                                    // 5728
                                                                                                                       // 5729
                                                                                                                       // 5730
	// Computes the number of levels a row will accomodate without going outside its bounds.                              // 5731
	// Assumes the row is "rigid" (maintains a constant height regardless of what is inside).                             // 5732
	// `row` is the row number.                                                                                           // 5733
	computeRowLevelLimit: function(row) {                                                                                 // 5734
		var rowEl = this.rowEls.eq(row); // the containing "fake" row div                                                    // 5735
		var rowHeight = rowEl.height(); // TODO: cache somehow?                                                              // 5736
		var trEls = this.rowStructs[row].tbodyEl.children();                                                                 // 5737
		var i, trEl;                                                                                                         // 5738
		var trHeight;                                                                                                        // 5739
                                                                                                                       // 5740
		function iterInnerHeights(i, childNode) {                                                                            // 5741
			trHeight = Math.max(trHeight, $(childNode).outerHeight());                                                          // 5742
		}                                                                                                                    // 5743
                                                                                                                       // 5744
		// Reveal one level <tr> at a time and stop when we find one out of bounds                                           // 5745
		for (i = 0; i < trEls.length; i++) {                                                                                 // 5746
			trEl = trEls.eq(i).removeClass('fc-limited'); // reset to original state (reveal)                                   // 5747
                                                                                                                       // 5748
			// with rowspans>1 and IE8, trEl.outerHeight() would return the height of the largest cell,                         // 5749
			// so instead, find the tallest inner content element.                                                              // 5750
			trHeight = 0;                                                                                                       // 5751
			trEl.find('> td > :first-child').each(iterInnerHeights);                                                            // 5752
                                                                                                                       // 5753
			if (trEl.position().top + trHeight > rowHeight) {                                                                   // 5754
				return i;                                                                                                          // 5755
			}                                                                                                                   // 5756
		}                                                                                                                    // 5757
                                                                                                                       // 5758
		return false; // should not limit at all                                                                             // 5759
	},                                                                                                                    // 5760
                                                                                                                       // 5761
                                                                                                                       // 5762
	// Limits the given grid row to the maximum number of levels and injects "more" links if necessary.                   // 5763
	// `row` is the row number.                                                                                           // 5764
	// `levelLimit` is a number for the maximum (inclusive) number of levels allowed.                                     // 5765
	limitRow: function(row, levelLimit) {                                                                                 // 5766
		var _this = this;                                                                                                    // 5767
		var rowStruct = this.rowStructs[row];                                                                                // 5768
		var moreNodes = []; // array of "more" <a> links and <td> DOM nodes                                                  // 5769
		var col = 0; // col #, left-to-right (not chronologically)                                                           // 5770
		var levelSegs; // array of segment objects in the last allowable level, ordered left-to-right                        // 5771
		var cellMatrix; // a matrix (by level, then column) of all <td> jQuery elements in the row                           // 5772
		var limitedNodes; // array of temporarily hidden level <tr> and segment <td> DOM nodes                               // 5773
		var i, seg;                                                                                                          // 5774
		var segsBelow; // array of segment objects below `seg` in the current `col`                                          // 5775
		var totalSegsBelow; // total number of segments below `seg` in any of the columns `seg` occupies                     // 5776
		var colSegsBelow; // array of segment arrays, below seg, one for each column (offset from segs's first column)       // 5777
		var td, rowspan;                                                                                                     // 5778
		var segMoreNodes; // array of "more" <td> cells that will stand-in for the current seg's cell                        // 5779
		var j;                                                                                                               // 5780
		var moreTd, moreWrap, moreLink;                                                                                      // 5781
                                                                                                                       // 5782
		// Iterates through empty level cells and places "more" links inside if need be                                      // 5783
		function emptyCellsUntil(endCol) { // goes from current `col` to `endCol`                                            // 5784
			while (col < endCol) {                                                                                              // 5785
				segsBelow = _this.getCellSegs(row, col, levelLimit);                                                               // 5786
				if (segsBelow.length) {                                                                                            // 5787
					td = cellMatrix[levelLimit - 1][col];                                                                             // 5788
					moreLink = _this.renderMoreLink(row, col, segsBelow);                                                             // 5789
					moreWrap = $('<div/>').append(moreLink);                                                                          // 5790
					td.append(moreWrap);                                                                                              // 5791
					moreNodes.push(moreWrap[0]);                                                                                      // 5792
				}                                                                                                                  // 5793
				col++;                                                                                                             // 5794
			}                                                                                                                   // 5795
		}                                                                                                                    // 5796
                                                                                                                       // 5797
		if (levelLimit && levelLimit < rowStruct.segLevels.length) { // is it actually over the limit?                       // 5798
			levelSegs = rowStruct.segLevels[levelLimit - 1];                                                                    // 5799
			cellMatrix = rowStruct.cellMatrix;                                                                                  // 5800
                                                                                                                       // 5801
			limitedNodes = rowStruct.tbodyEl.children().slice(levelLimit) // get level <tr> elements past the limit             // 5802
				.addClass('fc-limited').get(); // hide elements and get a simple DOM-nodes array                                   // 5803
                                                                                                                       // 5804
			// iterate though segments in the last allowable level                                                              // 5805
			for (i = 0; i < levelSegs.length; i++) {                                                                            // 5806
				seg = levelSegs[i];                                                                                                // 5807
				emptyCellsUntil(seg.leftCol); // process empty cells before the segment                                            // 5808
                                                                                                                       // 5809
				// determine *all* segments below `seg` that occupy the same columns                                               // 5810
				colSegsBelow = [];                                                                                                 // 5811
				totalSegsBelow = 0;                                                                                                // 5812
				while (col <= seg.rightCol) {                                                                                      // 5813
					segsBelow = this.getCellSegs(row, col, levelLimit);                                                               // 5814
					colSegsBelow.push(segsBelow);                                                                                     // 5815
					totalSegsBelow += segsBelow.length;                                                                               // 5816
					col++;                                                                                                            // 5817
				}                                                                                                                  // 5818
                                                                                                                       // 5819
				if (totalSegsBelow) { // do we need to replace this segment with one or many "more" links?                         // 5820
					td = cellMatrix[levelLimit - 1][seg.leftCol]; // the segment's parent cell                                        // 5821
					rowspan = td.attr('rowspan') || 1;                                                                                // 5822
					segMoreNodes = [];                                                                                                // 5823
                                                                                                                       // 5824
					// make a replacement <td> for each column the segment occupies. will be one for each colspan                     // 5825
					for (j = 0; j < colSegsBelow.length; j++) {                                                                       // 5826
						moreTd = $('<td class="fc-more-cell"/>').attr('rowspan', rowspan);                                               // 5827
						segsBelow = colSegsBelow[j];                                                                                     // 5828
						moreLink = this.renderMoreLink(                                                                                  // 5829
							row,                                                                                                            // 5830
							seg.leftCol + j,                                                                                                // 5831
							[ seg ].concat(segsBelow) // count seg as hidden too                                                            // 5832
						);                                                                                                               // 5833
						moreWrap = $('<div/>').append(moreLink);                                                                         // 5834
						moreTd.append(moreWrap);                                                                                         // 5835
						segMoreNodes.push(moreTd[0]);                                                                                    // 5836
						moreNodes.push(moreTd[0]);                                                                                       // 5837
					}                                                                                                                 // 5838
                                                                                                                       // 5839
					td.addClass('fc-limited').after($(segMoreNodes)); // hide original <td> and inject replacements                   // 5840
					limitedNodes.push(td[0]);                                                                                         // 5841
				}                                                                                                                  // 5842
			}                                                                                                                   // 5843
                                                                                                                       // 5844
			emptyCellsUntil(this.colCnt); // finish off the level                                                               // 5845
			rowStruct.moreEls = $(moreNodes); // for easy undoing later                                                         // 5846
			rowStruct.limitedEls = $(limitedNodes); // for easy undoing later                                                   // 5847
		}                                                                                                                    // 5848
	},                                                                                                                    // 5849
                                                                                                                       // 5850
                                                                                                                       // 5851
	// Reveals all levels and removes all "more"-related elements for a grid's row.                                       // 5852
	// `row` is a row number.                                                                                             // 5853
	unlimitRow: function(row) {                                                                                           // 5854
		var rowStruct = this.rowStructs[row];                                                                                // 5855
                                                                                                                       // 5856
		if (rowStruct.moreEls) {                                                                                             // 5857
			rowStruct.moreEls.remove();                                                                                         // 5858
			rowStruct.moreEls = null;                                                                                           // 5859
		}                                                                                                                    // 5860
                                                                                                                       // 5861
		if (rowStruct.limitedEls) {                                                                                          // 5862
			rowStruct.limitedEls.removeClass('fc-limited');                                                                     // 5863
			rowStruct.limitedEls = null;                                                                                        // 5864
		}                                                                                                                    // 5865
	},                                                                                                                    // 5866
                                                                                                                       // 5867
                                                                                                                       // 5868
	// Renders an <a> element that represents hidden event element for a cell.                                            // 5869
	// Responsible for attaching click handler as well.                                                                   // 5870
	renderMoreLink: function(row, col, hiddenSegs) {                                                                      // 5871
		var _this = this;                                                                                                    // 5872
		var view = this.view;                                                                                                // 5873
                                                                                                                       // 5874
		return $('<a class="fc-more"/>')                                                                                     // 5875
			.text(                                                                                                              // 5876
				this.getMoreLinkText(hiddenSegs.length)                                                                            // 5877
			)                                                                                                                   // 5878
			.on('click', function(ev) {                                                                                         // 5879
				var clickOption = view.opt('eventLimitClick');                                                                     // 5880
				var date = _this.getCellDate(row, col);                                                                            // 5881
				var moreEl = $(this);                                                                                              // 5882
				var dayEl = _this.getCellEl(row, col);                                                                             // 5883
				var allSegs = _this.getCellSegs(row, col);                                                                         // 5884
                                                                                                                       // 5885
				// rescope the segments to be within the cell's date                                                               // 5886
				var reslicedAllSegs = _this.resliceDaySegs(allSegs, date);                                                         // 5887
				var reslicedHiddenSegs = _this.resliceDaySegs(hiddenSegs, date);                                                   // 5888
                                                                                                                       // 5889
				if (typeof clickOption === 'function') {                                                                           // 5890
					// the returned value can be an atomic option                                                                     // 5891
					clickOption = view.trigger('eventLimitClick', null, {                                                             // 5892
						date: date,                                                                                                      // 5893
						dayEl: dayEl,                                                                                                    // 5894
						moreEl: moreEl,                                                                                                  // 5895
						segs: reslicedAllSegs,                                                                                           // 5896
						hiddenSegs: reslicedHiddenSegs                                                                                   // 5897
					}, ev);                                                                                                           // 5898
				}                                                                                                                  // 5899
                                                                                                                       // 5900
				if (clickOption === 'popover') {                                                                                   // 5901
					_this.showSegPopover(row, col, moreEl, reslicedAllSegs);                                                          // 5902
				}                                                                                                                  // 5903
				else if (typeof clickOption === 'string') { // a view name                                                         // 5904
					view.calendar.zoomTo(date, clickOption);                                                                          // 5905
				}                                                                                                                  // 5906
			});                                                                                                                 // 5907
	},                                                                                                                    // 5908
                                                                                                                       // 5909
                                                                                                                       // 5910
	// Reveals the popover that displays all events within a cell                                                         // 5911
	showSegPopover: function(row, col, moreLink, segs) {                                                                  // 5912
		var _this = this;                                                                                                    // 5913
		var view = this.view;                                                                                                // 5914
		var moreWrap = moreLink.parent(); // the <div> wrapper around the <a>                                                // 5915
		var topEl; // the element we want to match the top coordinate of                                                     // 5916
		var options;                                                                                                         // 5917
                                                                                                                       // 5918
		if (this.rowCnt == 1) {                                                                                              // 5919
			topEl = view.el; // will cause the popover to cover any sort of header                                              // 5920
		}                                                                                                                    // 5921
		else {                                                                                                               // 5922
			topEl = this.rowEls.eq(row); // will align with top of row                                                          // 5923
		}                                                                                                                    // 5924
                                                                                                                       // 5925
		options = {                                                                                                          // 5926
			className: 'fc-more-popover',                                                                                       // 5927
			content: this.renderSegPopoverContent(row, col, segs),                                                              // 5928
			parentEl: this.el,                                                                                                  // 5929
			top: topEl.offset().top,                                                                                            // 5930
			autoHide: true, // when the user clicks elsewhere, hide the popover                                                 // 5931
			viewportConstrain: view.opt('popoverViewportConstrain'),                                                            // 5932
			hide: function() {                                                                                                  // 5933
				// kill everything when the popover is hidden                                                                      // 5934
				_this.segPopover.removeElement();                                                                                  // 5935
				_this.segPopover = null;                                                                                           // 5936
				_this.popoverSegs = null;                                                                                          // 5937
			}                                                                                                                   // 5938
		};                                                                                                                   // 5939
                                                                                                                       // 5940
		// Determine horizontal coordinate.                                                                                  // 5941
		// We use the moreWrap instead of the <td> to avoid border confusion.                                                // 5942
		if (this.isRTL) {                                                                                                    // 5943
			options.right = moreWrap.offset().left + moreWrap.outerWidth() + 1; // +1 to be over cell border                    // 5944
		}                                                                                                                    // 5945
		else {                                                                                                               // 5946
			options.left = moreWrap.offset().left - 1; // -1 to be over cell border                                             // 5947
		}                                                                                                                    // 5948
                                                                                                                       // 5949
		this.segPopover = new Popover(options);                                                                              // 5950
		this.segPopover.show();                                                                                              // 5951
	},                                                                                                                    // 5952
                                                                                                                       // 5953
                                                                                                                       // 5954
	// Builds the inner DOM contents of the segment popover                                                               // 5955
	renderSegPopoverContent: function(row, col, segs) {                                                                   // 5956
		var view = this.view;                                                                                                // 5957
		var isTheme = view.opt('theme');                                                                                     // 5958
		var title = this.getCellDate(row, col).format(view.opt('dayPopoverFormat'));                                         // 5959
		var content = $(                                                                                                     // 5960
			'<div class="fc-header ' + view.widgetHeaderClass + '">' +                                                          // 5961
				'<span class="fc-close ' +                                                                                         // 5962
					(isTheme ? 'ui-icon ui-icon-closethick' : 'fc-icon fc-icon-x') +                                                  // 5963
				'"></span>' +                                                                                                      // 5964
				'<span class="fc-title">' +                                                                                        // 5965
					htmlEscape(title) +                                                                                               // 5966
				'</span>' +                                                                                                        // 5967
				'<div class="fc-clear"/>' +                                                                                        // 5968
			'</div>' +                                                                                                          // 5969
			'<div class="fc-body ' + view.widgetContentClass + '">' +                                                           // 5970
				'<div class="fc-event-container"></div>' +                                                                         // 5971
			'</div>'                                                                                                            // 5972
		);                                                                                                                   // 5973
		var segContainer = content.find('.fc-event-container');                                                              // 5974
		var i;                                                                                                               // 5975
                                                                                                                       // 5976
		// render each seg's `el` and only return the visible segs                                                           // 5977
		segs = this.renderFgSegEls(segs, true); // disableResizing=true                                                      // 5978
		this.popoverSegs = segs;                                                                                             // 5979
                                                                                                                       // 5980
		for (i = 0; i < segs.length; i++) {                                                                                  // 5981
                                                                                                                       // 5982
			// because segments in the popover are not part of a grid coordinate system, provide a hint to any                  // 5983
			// grids that want to do drag-n-drop about which cell it came from                                                  // 5984
			this.prepareHits();                                                                                                 // 5985
			segs[i].hit = this.getCellHit(row, col);                                                                            // 5986
			this.releaseHits();                                                                                                 // 5987
                                                                                                                       // 5988
			segContainer.append(segs[i].el);                                                                                    // 5989
		}                                                                                                                    // 5990
                                                                                                                       // 5991
		return content;                                                                                                      // 5992
	},                                                                                                                    // 5993
                                                                                                                       // 5994
                                                                                                                       // 5995
	// Given the events within an array of segment objects, reslice them to be in a single day                            // 5996
	resliceDaySegs: function(segs, dayDate) {                                                                             // 5997
                                                                                                                       // 5998
		// build an array of the original events                                                                             // 5999
		var events = $.map(segs, function(seg) {                                                                             // 6000
			return seg.event;                                                                                                   // 6001
		});                                                                                                                  // 6002
                                                                                                                       // 6003
		var dayStart = dayDate.clone();                                                                                      // 6004
		var dayEnd = dayStart.clone().add(1, 'days');                                                                        // 6005
		var dayRange = { start: dayStart, end: dayEnd };                                                                     // 6006
                                                                                                                       // 6007
		// slice the events with a custom slicing function                                                                   // 6008
		segs = this.eventsToSegs(                                                                                            // 6009
			events,                                                                                                             // 6010
			function(range) {                                                                                                   // 6011
				var seg = intersectRanges(range, dayRange); // undefind if no intersection                                         // 6012
				return seg ? [ seg ] : []; // must return an array of segments                                                     // 6013
			}                                                                                                                   // 6014
		);                                                                                                                   // 6015
                                                                                                                       // 6016
		// force an order because eventsToSegs doesn't guarantee one                                                         // 6017
		this.sortEventSegs(segs);                                                                                            // 6018
                                                                                                                       // 6019
		return segs;                                                                                                         // 6020
	},                                                                                                                    // 6021
                                                                                                                       // 6022
                                                                                                                       // 6023
	// Generates the text that should be inside a "more" link, given the number of events it represents                   // 6024
	getMoreLinkText: function(num) {                                                                                      // 6025
		var opt = this.view.opt('eventLimitText');                                                                           // 6026
                                                                                                                       // 6027
		if (typeof opt === 'function') {                                                                                     // 6028
			return opt(num);                                                                                                    // 6029
		}                                                                                                                    // 6030
		else {                                                                                                               // 6031
			return '+' + num + ' ' + opt;                                                                                       // 6032
		}                                                                                                                    // 6033
	},                                                                                                                    // 6034
                                                                                                                       // 6035
                                                                                                                       // 6036
	// Returns segments within a given cell.                                                                              // 6037
	// If `startLevel` is specified, returns only events including and below that level. Otherwise returns all segs.      // 6038
	getCellSegs: function(row, col, startLevel) {                                                                         // 6039
		var segMatrix = this.rowStructs[row].segMatrix;                                                                      // 6040
		var level = startLevel || 0;                                                                                         // 6041
		var segs = [];                                                                                                       // 6042
		var seg;                                                                                                             // 6043
                                                                                                                       // 6044
		while (level < segMatrix.length) {                                                                                   // 6045
			seg = segMatrix[level][col];                                                                                        // 6046
			if (seg) {                                                                                                          // 6047
				segs.push(seg);                                                                                                    // 6048
			}                                                                                                                   // 6049
			level++;                                                                                                            // 6050
		}                                                                                                                    // 6051
                                                                                                                       // 6052
		return segs;                                                                                                         // 6053
	}                                                                                                                     // 6054
                                                                                                                       // 6055
});                                                                                                                    // 6056
                                                                                                                       // 6057
;;                                                                                                                     // 6058
                                                                                                                       // 6059
/* A component that renders one or more columns of vertical time slots                                                 // 6060
----------------------------------------------------------------------------------------------------------------------*/
// We mixin DayTable, even though there is only a single row of days                                                   // 6062
                                                                                                                       // 6063
var TimeGrid = FC.TimeGrid = Grid.extend(DayTableMixin, {                                                              // 6064
                                                                                                                       // 6065
	slotDuration: null, // duration of a "slot", a distinct time segment on given day, visualized by lines                // 6066
	snapDuration: null, // granularity of time for dragging and selecting                                                 // 6067
	snapsPerSlot: null,                                                                                                   // 6068
	minTime: null, // Duration object that denotes the first visible time of any given day                                // 6069
	maxTime: null, // Duration object that denotes the exclusive visible end time of any given day                        // 6070
	labelFormat: null, // formatting string for times running along vertical axis                                         // 6071
	labelInterval: null, // duration of how often a label should be displayed for a slot                                  // 6072
                                                                                                                       // 6073
	colEls: null, // cells elements in the day-row background                                                             // 6074
	slatEls: null, // elements running horizontally across all columns                                                    // 6075
	helperEl: null, // cell skeleton element for rendering the mock event "helper"                                        // 6076
                                                                                                                       // 6077
	colCoordCache: null,                                                                                                  // 6078
	slatCoordCache: null,                                                                                                 // 6079
                                                                                                                       // 6080
	businessHourSegs: null,                                                                                               // 6081
                                                                                                                       // 6082
                                                                                                                       // 6083
	constructor: function() {                                                                                             // 6084
		Grid.apply(this, arguments); // call the super-constructor                                                           // 6085
                                                                                                                       // 6086
		this.processOptions();                                                                                               // 6087
	},                                                                                                                    // 6088
                                                                                                                       // 6089
                                                                                                                       // 6090
	// Renders the time grid into `this.el`, which should already be assigned.                                            // 6091
	// Relies on the view's colCnt. In the future, this component should probably be self-sufficient.                     // 6092
	renderDates: function() {                                                                                             // 6093
		this.el.html(this.renderHtml());                                                                                     // 6094
		this.colEls = this.el.find('.fc-day');                                                                               // 6095
		this.slatEls = this.el.find('.fc-slats tr');                                                                         // 6096
                                                                                                                       // 6097
		this.colCoordCache = new CoordCache({                                                                                // 6098
			els: this.colEls,                                                                                                   // 6099
			isHorizontal: true                                                                                                  // 6100
		});                                                                                                                  // 6101
		this.slatCoordCache = new CoordCache({                                                                               // 6102
			els: this.slatEls,                                                                                                  // 6103
			isVertical: true                                                                                                    // 6104
		});                                                                                                                  // 6105
	},                                                                                                                    // 6106
                                                                                                                       // 6107
                                                                                                                       // 6108
	renderBusinessHours: function() {                                                                                     // 6109
		var events = this.view.calendar.getBusinessHoursEvents();                                                            // 6110
		this.businessHourSegs = this.renderFill('businessHours', this.eventsToSegs(events), 'bgevent');                      // 6111
	},                                                                                                                    // 6112
                                                                                                                       // 6113
                                                                                                                       // 6114
	// Renders the basic HTML skeleton for the grid                                                                       // 6115
	renderHtml: function() {                                                                                              // 6116
		return '' +                                                                                                          // 6117
			'<div class="fc-bg">' +                                                                                             // 6118
				'<table>' +                                                                                                        // 6119
					this.renderBgTrHtml(0) + // row=0                                                                                 // 6120
				'</table>' +                                                                                                       // 6121
			'</div>' +                                                                                                          // 6122
			'<div class="fc-slats">' +                                                                                          // 6123
				'<table>' +                                                                                                        // 6124
					this.renderSlatRowHtml() +                                                                                        // 6125
				'</table>' +                                                                                                       // 6126
			'</div>';                                                                                                           // 6127
	},                                                                                                                    // 6128
                                                                                                                       // 6129
                                                                                                                       // 6130
	// Generates the HTML for the horizontal "slats" that run width-wise. Has a time axis on a side. Depends on RTL.      // 6131
	renderSlatRowHtml: function() {                                                                                       // 6132
		var view = this.view;                                                                                                // 6133
		var isRTL = this.isRTL;                                                                                              // 6134
		var html = '';                                                                                                       // 6135
		var slotTime = moment.duration(+this.minTime); // wish there was .clone() for durations                              // 6136
		var slotDate; // will be on the view's first day, but we only care about its time                                    // 6137
		var isLabeled;                                                                                                       // 6138
		var axisHtml;                                                                                                        // 6139
                                                                                                                       // 6140
		// Calculate the time for each slot                                                                                  // 6141
		while (slotTime < this.maxTime) {                                                                                    // 6142
			slotDate = this.start.clone().time(slotTime);                                                                       // 6143
			isLabeled = isInt(divideDurationByDuration(slotTime, this.labelInterval));                                          // 6144
                                                                                                                       // 6145
			axisHtml =                                                                                                          // 6146
				'<td class="fc-axis fc-time ' + view.widgetContentClass + '" ' + view.axisStyleAttr() + '>' +                      // 6147
					(isLabeled ?                                                                                                      // 6148
						'<span>' + // for matchCellWidths                                                                                // 6149
							htmlEscape(slotDate.format(this.labelFormat)) +                                                                 // 6150
						'</span>' :                                                                                                      // 6151
						''                                                                                                               // 6152
						) +                                                                                                              // 6153
				'</td>';                                                                                                           // 6154
                                                                                                                       // 6155
			html +=                                                                                                             // 6156
				'<tr ' + (isLabeled ? '' : 'class="fc-minor"') + '>' +                                                             // 6157
					(!isRTL ? axisHtml : '') +                                                                                        // 6158
					'<td class="' + view.widgetContentClass + '"/>' +                                                                 // 6159
					(isRTL ? axisHtml : '') +                                                                                         // 6160
				"</tr>";                                                                                                           // 6161
                                                                                                                       // 6162
			slotTime.add(this.slotDuration);                                                                                    // 6163
		}                                                                                                                    // 6164
                                                                                                                       // 6165
		return html;                                                                                                         // 6166
	},                                                                                                                    // 6167
                                                                                                                       // 6168
                                                                                                                       // 6169
	/* Options                                                                                                            // 6170
	------------------------------------------------------------------------------------------------------------------*/  // 6171
                                                                                                                       // 6172
                                                                                                                       // 6173
	// Parses various options into properties of this object                                                              // 6174
	processOptions: function() {                                                                                          // 6175
		var view = this.view;                                                                                                // 6176
		var slotDuration = view.opt('slotDuration');                                                                         // 6177
		var snapDuration = view.opt('snapDuration');                                                                         // 6178
		var input;                                                                                                           // 6179
                                                                                                                       // 6180
		slotDuration = moment.duration(slotDuration);                                                                        // 6181
		snapDuration = snapDuration ? moment.duration(snapDuration) : slotDuration;                                          // 6182
                                                                                                                       // 6183
		this.slotDuration = slotDuration;                                                                                    // 6184
		this.snapDuration = snapDuration;                                                                                    // 6185
		this.snapsPerSlot = slotDuration / snapDuration; // TODO: ensure an integer multiple?                                // 6186
                                                                                                                       // 6187
		this.minResizeDuration = snapDuration; // hack                                                                       // 6188
                                                                                                                       // 6189
		this.minTime = moment.duration(view.opt('minTime'));                                                                 // 6190
		this.maxTime = moment.duration(view.opt('maxTime'));                                                                 // 6191
                                                                                                                       // 6192
		// might be an array value (for TimelineView).                                                                       // 6193
		// if so, getting the most granular entry (the last one probably).                                                   // 6194
		input = view.opt('slotLabelFormat');                                                                                 // 6195
		if ($.isArray(input)) {                                                                                              // 6196
			input = input[input.length - 1];                                                                                    // 6197
		}                                                                                                                    // 6198
                                                                                                                       // 6199
		this.labelFormat =                                                                                                   // 6200
			input ||                                                                                                            // 6201
			view.opt('axisFormat') || // deprecated                                                                             // 6202
			view.opt('smallTimeFormat'); // the computed default                                                                // 6203
                                                                                                                       // 6204
		input = view.opt('slotLabelInterval');                                                                               // 6205
		this.labelInterval = input ?                                                                                         // 6206
			moment.duration(input) :                                                                                            // 6207
			this.computeLabelInterval(slotDuration);                                                                            // 6208
	},                                                                                                                    // 6209
                                                                                                                       // 6210
                                                                                                                       // 6211
	// Computes an automatic value for slotLabelInterval                                                                  // 6212
	computeLabelInterval: function(slotDuration) {                                                                        // 6213
		var i;                                                                                                               // 6214
		var labelInterval;                                                                                                   // 6215
		var slotsPerLabel;                                                                                                   // 6216
                                                                                                                       // 6217
		// find the smallest stock label interval that results in more than one slots-per-label                              // 6218
		for (i = AGENDA_STOCK_SUB_DURATIONS.length - 1; i >= 0; i--) {                                                       // 6219
			labelInterval = moment.duration(AGENDA_STOCK_SUB_DURATIONS[i]);                                                     // 6220
			slotsPerLabel = divideDurationByDuration(labelInterval, slotDuration);                                              // 6221
			if (isInt(slotsPerLabel) && slotsPerLabel > 1) {                                                                    // 6222
				return labelInterval;                                                                                              // 6223
			}                                                                                                                   // 6224
		}                                                                                                                    // 6225
                                                                                                                       // 6226
		return moment.duration(slotDuration); // fall back. clone                                                            // 6227
	},                                                                                                                    // 6228
                                                                                                                       // 6229
                                                                                                                       // 6230
	// Computes a default event time formatting string if `timeFormat` is not explicitly defined                          // 6231
	computeEventTimeFormat: function() {                                                                                  // 6232
		return this.view.opt('noMeridiemTimeFormat'); // like "6:30" (no AM/PM)                                              // 6233
	},                                                                                                                    // 6234
                                                                                                                       // 6235
                                                                                                                       // 6236
	// Computes a default `displayEventEnd` value if one is not expliclty defined                                         // 6237
	computeDisplayEventEnd: function() {                                                                                  // 6238
		return true;                                                                                                         // 6239
	},                                                                                                                    // 6240
                                                                                                                       // 6241
                                                                                                                       // 6242
	/* Hit System                                                                                                         // 6243
	------------------------------------------------------------------------------------------------------------------*/  // 6244
                                                                                                                       // 6245
                                                                                                                       // 6246
	prepareHits: function() {                                                                                             // 6247
		this.colCoordCache.build();                                                                                          // 6248
		this.slatCoordCache.build();                                                                                         // 6249
	},                                                                                                                    // 6250
                                                                                                                       // 6251
                                                                                                                       // 6252
	releaseHits: function() {                                                                                             // 6253
		this.colCoordCache.clear();                                                                                          // 6254
		// NOTE: don't clear slatCoordCache because we rely on it for computeTimeTop                                         // 6255
	},                                                                                                                    // 6256
                                                                                                                       // 6257
                                                                                                                       // 6258
	queryHit: function(leftOffset, topOffset) {                                                                           // 6259
		var snapsPerSlot = this.snapsPerSlot;                                                                                // 6260
		var colCoordCache = this.colCoordCache;                                                                              // 6261
		var slatCoordCache = this.slatCoordCache;                                                                            // 6262
		var colIndex = colCoordCache.getHorizontalIndex(leftOffset);                                                         // 6263
		var slatIndex = slatCoordCache.getVerticalIndex(topOffset);                                                          // 6264
                                                                                                                       // 6265
		if (colIndex != null && slatIndex != null) {                                                                         // 6266
			var slatTop = slatCoordCache.getTopOffset(slatIndex);                                                               // 6267
			var slatHeight = slatCoordCache.getHeight(slatIndex);                                                               // 6268
			var partial = (topOffset - slatTop) / slatHeight; // floating point number between 0 and 1                          // 6269
			var localSnapIndex = Math.floor(partial * snapsPerSlot); // the snap # relative to start of slat                    // 6270
			var snapIndex = slatIndex * snapsPerSlot + localSnapIndex;                                                          // 6271
			var snapTop = slatTop + (localSnapIndex / snapsPerSlot) * slatHeight;                                               // 6272
			var snapBottom = slatTop + ((localSnapIndex + 1) / snapsPerSlot) * slatHeight;                                      // 6273
                                                                                                                       // 6274
			return {                                                                                                            // 6275
				col: colIndex,                                                                                                     // 6276
				snap: snapIndex,                                                                                                   // 6277
				component: this, // needed unfortunately :(                                                                        // 6278
				left: colCoordCache.getLeftOffset(colIndex),                                                                       // 6279
				right: colCoordCache.getRightOffset(colIndex),                                                                     // 6280
				top: snapTop,                                                                                                      // 6281
				bottom: snapBottom                                                                                                 // 6282
			};                                                                                                                  // 6283
		}                                                                                                                    // 6284
	},                                                                                                                    // 6285
                                                                                                                       // 6286
                                                                                                                       // 6287
	getHitSpan: function(hit) {                                                                                           // 6288
		var start = this.getCellDate(0, hit.col); // row=0                                                                   // 6289
		var time = this.computeSnapTime(hit.snap); // pass in the snap-index                                                 // 6290
		var end;                                                                                                             // 6291
                                                                                                                       // 6292
		start.time(time);                                                                                                    // 6293
		end = start.clone().add(this.snapDuration);                                                                          // 6294
                                                                                                                       // 6295
		return { start: start, end: end };                                                                                   // 6296
	},                                                                                                                    // 6297
                                                                                                                       // 6298
                                                                                                                       // 6299
	getHitEl: function(hit) {                                                                                             // 6300
		return this.colEls.eq(hit.col);                                                                                      // 6301
	},                                                                                                                    // 6302
                                                                                                                       // 6303
                                                                                                                       // 6304
	/* Dates                                                                                                              // 6305
	------------------------------------------------------------------------------------------------------------------*/  // 6306
                                                                                                                       // 6307
                                                                                                                       // 6308
	rangeUpdated: function() {                                                                                            // 6309
		this.updateDayTable();                                                                                               // 6310
	},                                                                                                                    // 6311
                                                                                                                       // 6312
                                                                                                                       // 6313
	// Given a row number of the grid, representing a "snap", returns a time (Duration) from its start-of-day             // 6314
	computeSnapTime: function(snapIndex) {                                                                                // 6315
		return moment.duration(this.minTime + this.snapDuration * snapIndex);                                                // 6316
	},                                                                                                                    // 6317
                                                                                                                       // 6318
                                                                                                                       // 6319
	// Slices up the given span (unzoned start/end with other misc data) into an array of segments                        // 6320
	spanToSegs: function(span) {                                                                                          // 6321
		var segs = this.sliceRangeByTimes(span);                                                                             // 6322
		var i;                                                                                                               // 6323
                                                                                                                       // 6324
		for (i = 0; i < segs.length; i++) {                                                                                  // 6325
			if (this.isRTL) {                                                                                                   // 6326
				segs[i].col = this.daysPerRow - 1 - segs[i].dayIndex;                                                              // 6327
			}                                                                                                                   // 6328
			else {                                                                                                              // 6329
				segs[i].col = segs[i].dayIndex;                                                                                    // 6330
			}                                                                                                                   // 6331
		}                                                                                                                    // 6332
                                                                                                                       // 6333
		return segs;                                                                                                         // 6334
	},                                                                                                                    // 6335
                                                                                                                       // 6336
                                                                                                                       // 6337
	sliceRangeByTimes: function(range) {                                                                                  // 6338
		var segs = [];                                                                                                       // 6339
		var seg;                                                                                                             // 6340
		var dayIndex;                                                                                                        // 6341
		var dayDate;                                                                                                         // 6342
		var dayRange;                                                                                                        // 6343
                                                                                                                       // 6344
		for (dayIndex = 0; dayIndex < this.daysPerRow; dayIndex++) {                                                         // 6345
			dayDate = this.dayDates[dayIndex].clone(); // TODO: better API for this?                                            // 6346
			dayRange = {                                                                                                        // 6347
				start: dayDate.clone().time(this.minTime),                                                                         // 6348
				end: dayDate.clone().time(this.maxTime)                                                                            // 6349
			};                                                                                                                  // 6350
			seg = intersectRanges(range, dayRange); // both will be ambig timezone                                              // 6351
			if (seg) {                                                                                                          // 6352
				seg.dayIndex = dayIndex;                                                                                           // 6353
				segs.push(seg);                                                                                                    // 6354
			}                                                                                                                   // 6355
		}                                                                                                                    // 6356
                                                                                                                       // 6357
		return segs;                                                                                                         // 6358
	},                                                                                                                    // 6359
                                                                                                                       // 6360
                                                                                                                       // 6361
	/* Coordinates                                                                                                        // 6362
	------------------------------------------------------------------------------------------------------------------*/  // 6363
                                                                                                                       // 6364
                                                                                                                       // 6365
	updateSize: function(isResize) { // NOT a standard Grid method                                                        // 6366
		this.slatCoordCache.build();                                                                                         // 6367
                                                                                                                       // 6368
		if (isResize) {                                                                                                      // 6369
			this.updateSegVerticals();                                                                                          // 6370
		}                                                                                                                    // 6371
	},                                                                                                                    // 6372
                                                                                                                       // 6373
                                                                                                                       // 6374
	// Computes the top coordinate, relative to the bounds of the grid, of the given date.                                // 6375
	// A `startOfDayDate` must be given for avoiding ambiguity over how to treat midnight.                                // 6376
	computeDateTop: function(date, startOfDayDate) {                                                                      // 6377
		return this.computeTimeTop(                                                                                          // 6378
			moment.duration(                                                                                                    // 6379
				date - startOfDayDate.clone().stripTime()                                                                          // 6380
			)                                                                                                                   // 6381
		);                                                                                                                   // 6382
	},                                                                                                                    // 6383
                                                                                                                       // 6384
                                                                                                                       // 6385
	// Computes the top coordinate, relative to the bounds of the grid, of the given time (a Duration).                   // 6386
	computeTimeTop: function(time) {                                                                                      // 6387
		var len = this.slatEls.length;                                                                                       // 6388
		var slatCoverage = (time - this.minTime) / this.slotDuration; // floating-point value of # of slots covered          // 6389
		var slatIndex;                                                                                                       // 6390
		var slatRemainder;                                                                                                   // 6391
                                                                                                                       // 6392
		// compute a floating-point number for how many slats should be progressed through.                                  // 6393
		// from 0 to number of slats (inclusive)                                                                             // 6394
		// constrained because minTime/maxTime might be customized.                                                          // 6395
		slatCoverage = Math.max(0, slatCoverage);                                                                            // 6396
		slatCoverage = Math.min(len, slatCoverage);                                                                          // 6397
                                                                                                                       // 6398
		// an integer index of the furthest whole slat                                                                       // 6399
		// from 0 to number slats (*exclusive*, so len-1)                                                                    // 6400
		slatIndex = Math.floor(slatCoverage);                                                                                // 6401
		slatIndex = Math.min(slatIndex, len - 1);                                                                            // 6402
                                                                                                                       // 6403
		// how much further through the slatIndex slat (from 0.0-1.0) must be covered in addition.                           // 6404
		// could be 1.0 if slatCoverage is covering *all* the slots                                                          // 6405
		slatRemainder = slatCoverage - slatIndex;                                                                            // 6406
                                                                                                                       // 6407
		return this.slatCoordCache.getTopPosition(slatIndex) +                                                               // 6408
			this.slatCoordCache.getHeight(slatIndex) * slatRemainder;                                                           // 6409
	},                                                                                                                    // 6410
                                                                                                                       // 6411
                                                                                                                       // 6412
                                                                                                                       // 6413
	/* Event Drag Visualization                                                                                           // 6414
	------------------------------------------------------------------------------------------------------------------*/  // 6415
                                                                                                                       // 6416
                                                                                                                       // 6417
	// Renders a visual indication of an event being dragged over the specified date(s).                                  // 6418
	// A returned value of `true` signals that a mock "helper" event has been rendered.                                   // 6419
	renderDrag: function(eventLocation, seg) {                                                                            // 6420
                                                                                                                       // 6421
		if (seg) { // if there is event information for this drag, render a helper event                                     // 6422
			this.renderEventLocationHelper(eventLocation, seg);                                                                 // 6423
			this.applyDragOpacity(this.helperEl);                                                                               // 6424
                                                                                                                       // 6425
			return true; // signal that a helper has been rendered                                                              // 6426
		}                                                                                                                    // 6427
		else {                                                                                                               // 6428
			// otherwise, just render a highlight                                                                               // 6429
			this.renderHighlight(this.eventToSpan(eventLocation));                                                              // 6430
		}                                                                                                                    // 6431
	},                                                                                                                    // 6432
                                                                                                                       // 6433
                                                                                                                       // 6434
	// Unrenders any visual indication of an event being dragged                                                          // 6435
	unrenderDrag: function() {                                                                                            // 6436
		this.unrenderHelper();                                                                                               // 6437
		this.unrenderHighlight();                                                                                            // 6438
	},                                                                                                                    // 6439
                                                                                                                       // 6440
                                                                                                                       // 6441
	/* Event Resize Visualization                                                                                         // 6442
	------------------------------------------------------------------------------------------------------------------*/  // 6443
                                                                                                                       // 6444
                                                                                                                       // 6445
	// Renders a visual indication of an event being resized                                                              // 6446
	renderEventResize: function(eventLocation, seg) {                                                                     // 6447
		this.renderEventLocationHelper(eventLocation, seg);                                                                  // 6448
	},                                                                                                                    // 6449
                                                                                                                       // 6450
                                                                                                                       // 6451
	// Unrenders any visual indication of an event being resized                                                          // 6452
	unrenderEventResize: function() {                                                                                     // 6453
		this.unrenderHelper();                                                                                               // 6454
	},                                                                                                                    // 6455
                                                                                                                       // 6456
                                                                                                                       // 6457
	/* Event Helper                                                                                                       // 6458
	------------------------------------------------------------------------------------------------------------------*/  // 6459
                                                                                                                       // 6460
                                                                                                                       // 6461
	// Renders a mock "helper" event. `sourceSeg` is the original segment object and might be null (an external drag)     // 6462
	renderHelper: function(event, sourceSeg) {                                                                            // 6463
		var segs = this.eventToSegs(event);                                                                                  // 6464
		var tableEl;                                                                                                         // 6465
		var i, seg;                                                                                                          // 6466
		var sourceEl;                                                                                                        // 6467
                                                                                                                       // 6468
		segs = this.renderFgSegEls(segs); // assigns each seg's el and returns a subset of segs that were rendered           // 6469
		tableEl = this.renderSegTable(segs);                                                                                 // 6470
                                                                                                                       // 6471
		// Try to make the segment that is in the same row as sourceSeg look the same                                        // 6472
		for (i = 0; i < segs.length; i++) {                                                                                  // 6473
			seg = segs[i];                                                                                                      // 6474
			if (sourceSeg && sourceSeg.col === seg.col) {                                                                       // 6475
				sourceEl = sourceSeg.el;                                                                                           // 6476
				seg.el.css({                                                                                                       // 6477
					left: sourceEl.css('left'),                                                                                       // 6478
					right: sourceEl.css('right'),                                                                                     // 6479
					'margin-left': sourceEl.css('margin-left'),                                                                       // 6480
					'margin-right': sourceEl.css('margin-right')                                                                      // 6481
				});                                                                                                                // 6482
			}                                                                                                                   // 6483
		}                                                                                                                    // 6484
                                                                                                                       // 6485
		this.helperEl = $('<div class="fc-helper-skeleton"/>')                                                               // 6486
			.append(tableEl)                                                                                                    // 6487
				.appendTo(this.el);                                                                                                // 6488
	},                                                                                                                    // 6489
                                                                                                                       // 6490
                                                                                                                       // 6491
	// Unrenders any mock helper event                                                                                    // 6492
	unrenderHelper: function() {                                                                                          // 6493
		if (this.helperEl) {                                                                                                 // 6494
			this.helperEl.remove();                                                                                             // 6495
			this.helperEl = null;                                                                                               // 6496
		}                                                                                                                    // 6497
	},                                                                                                                    // 6498
                                                                                                                       // 6499
                                                                                                                       // 6500
	/* Selection                                                                                                          // 6501
	------------------------------------------------------------------------------------------------------------------*/  // 6502
                                                                                                                       // 6503
                                                                                                                       // 6504
	// Renders a visual indication of a selection. Overrides the default, which was to simply render a highlight.         // 6505
	renderSelection: function(span) {                                                                                     // 6506
		if (this.view.opt('selectHelper')) { // this setting signals that a mock helper event should be rendered             // 6507
                                                                                                                       // 6508
			// normally acceps an eventLocation, span has a start/end, which is good enough                                     // 6509
			this.renderEventLocationHelper(span);                                                                               // 6510
		}                                                                                                                    // 6511
		else {                                                                                                               // 6512
			this.renderHighlight(span);                                                                                         // 6513
		}                                                                                                                    // 6514
	},                                                                                                                    // 6515
                                                                                                                       // 6516
                                                                                                                       // 6517
	// Unrenders any visual indication of a selection                                                                     // 6518
	unrenderSelection: function() {                                                                                       // 6519
		this.unrenderHelper();                                                                                               // 6520
		this.unrenderHighlight();                                                                                            // 6521
	},                                                                                                                    // 6522
                                                                                                                       // 6523
                                                                                                                       // 6524
	/* Fill System (highlight, background events, business hours)                                                         // 6525
	------------------------------------------------------------------------------------------------------------------*/  // 6526
                                                                                                                       // 6527
                                                                                                                       // 6528
	// Renders a set of rectangles over the given time segments.                                                          // 6529
	// Only returns segments that successfully rendered.                                                                  // 6530
	renderFill: function(type, segs, className) {                                                                         // 6531
		var segCols;                                                                                                         // 6532
		var skeletonEl;                                                                                                      // 6533
		var trEl;                                                                                                            // 6534
		var col, colSegs;                                                                                                    // 6535
		var tdEl;                                                                                                            // 6536
		var containerEl;                                                                                                     // 6537
		var dayDate;                                                                                                         // 6538
		var i, seg;                                                                                                          // 6539
                                                                                                                       // 6540
		if (segs.length) {                                                                                                   // 6541
                                                                                                                       // 6542
			segs = this.renderFillSegEls(type, segs); // assignes `.el` to each seg. returns successfully rendered segs         // 6543
			segCols = this.groupSegCols(segs); // group into sub-arrays, and assigns 'col' to each seg                          // 6544
                                                                                                                       // 6545
			className = className || type.toLowerCase();                                                                        // 6546
			skeletonEl = $(                                                                                                     // 6547
				'<div class="fc-' + className + '-skeleton">' +                                                                    // 6548
					'<table><tr/></table>' +                                                                                          // 6549
				'</div>'                                                                                                           // 6550
			);                                                                                                                  // 6551
			trEl = skeletonEl.find('tr');                                                                                       // 6552
                                                                                                                       // 6553
			for (col = 0; col < segCols.length; col++) {                                                                        // 6554
				colSegs = segCols[col];                                                                                            // 6555
				tdEl = $('<td/>').appendTo(trEl);                                                                                  // 6556
                                                                                                                       // 6557
				if (colSegs.length) {                                                                                              // 6558
					containerEl = $('<div class="fc-' + className + '-container"/>').appendTo(tdEl);                                  // 6559
					dayDate = this.getCellDate(0, col); // row=0                                                                      // 6560
                                                                                                                       // 6561
					for (i = 0; i < colSegs.length; i++) {                                                                            // 6562
						seg = colSegs[i];                                                                                                // 6563
						containerEl.append(                                                                                              // 6564
							seg.el.css({                                                                                                    // 6565
								top: this.computeDateTop(seg.start, dayDate),                                                                  // 6566
								bottom: -this.computeDateTop(seg.end, dayDate) // the y position of the bottom edge                            // 6567
							})                                                                                                              // 6568
						);                                                                                                               // 6569
					}                                                                                                                 // 6570
				}                                                                                                                  // 6571
			}                                                                                                                   // 6572
                                                                                                                       // 6573
			this.bookendCells(trEl);                                                                                            // 6574
                                                                                                                       // 6575
			this.el.append(skeletonEl);                                                                                         // 6576
			this.elsByFill[type] = skeletonEl;                                                                                  // 6577
		}                                                                                                                    // 6578
                                                                                                                       // 6579
		return segs;                                                                                                         // 6580
	}                                                                                                                     // 6581
                                                                                                                       // 6582
});                                                                                                                    // 6583
                                                                                                                       // 6584
;;                                                                                                                     // 6585
                                                                                                                       // 6586
/* Event-rendering methods for the TimeGrid class                                                                      // 6587
----------------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 6589
TimeGrid.mixin({                                                                                                       // 6590
                                                                                                                       // 6591
	eventSkeletonEl: null, // has cells with event-containers, which contain absolutely positioned event elements         // 6592
                                                                                                                       // 6593
                                                                                                                       // 6594
	// Renders the given foreground event segments onto the grid                                                          // 6595
	renderFgSegs: function(segs) {                                                                                        // 6596
		segs = this.renderFgSegEls(segs); // returns a subset of the segs. segs that were actually rendered                  // 6597
                                                                                                                       // 6598
		this.el.append(                                                                                                      // 6599
			this.eventSkeletonEl = $('<div class="fc-content-skeleton"/>')                                                      // 6600
				.append(this.renderSegTable(segs))                                                                                 // 6601
		);                                                                                                                   // 6602
                                                                                                                       // 6603
		return segs; // return only the segs that were actually rendered                                                     // 6604
	},                                                                                                                    // 6605
                                                                                                                       // 6606
                                                                                                                       // 6607
	// Unrenders all currently rendered foreground event segments                                                         // 6608
	unrenderFgSegs: function(segs) {                                                                                      // 6609
		if (this.eventSkeletonEl) {                                                                                          // 6610
			this.eventSkeletonEl.remove();                                                                                      // 6611
			this.eventSkeletonEl = null;                                                                                        // 6612
		}                                                                                                                    // 6613
	},                                                                                                                    // 6614
                                                                                                                       // 6615
                                                                                                                       // 6616
	// Renders and returns the <table> portion of the event-skeleton.                                                     // 6617
	// Returns an object with properties 'tbodyEl' and 'segs'.                                                            // 6618
	renderSegTable: function(segs) {                                                                                      // 6619
		var tableEl = $('<table><tr/></table>');                                                                             // 6620
		var trEl = tableEl.find('tr');                                                                                       // 6621
		var segCols;                                                                                                         // 6622
		var i, seg;                                                                                                          // 6623
		var col, colSegs;                                                                                                    // 6624
		var containerEl;                                                                                                     // 6625
                                                                                                                       // 6626
		segCols = this.groupSegCols(segs); // group into sub-arrays, and assigns 'col' to each seg                           // 6627
                                                                                                                       // 6628
		this.computeSegVerticals(segs); // compute and assign top/bottom                                                     // 6629
                                                                                                                       // 6630
		for (col = 0; col < segCols.length; col++) { // iterate each column grouping                                         // 6631
			colSegs = segCols[col];                                                                                             // 6632
			this.placeSlotSegs(colSegs); // compute horizontal coordinates, z-index's, and reorder the array                    // 6633
                                                                                                                       // 6634
			containerEl = $('<div class="fc-event-container"/>');                                                               // 6635
                                                                                                                       // 6636
			// assign positioning CSS and insert into container                                                                 // 6637
			for (i = 0; i < colSegs.length; i++) {                                                                              // 6638
				seg = colSegs[i];                                                                                                  // 6639
				seg.el.css(this.generateSegPositionCss(seg));                                                                      // 6640
                                                                                                                       // 6641
				// if the height is short, add a className for alternate styling                                                   // 6642
				if (seg.bottom - seg.top < 30) {                                                                                   // 6643
					seg.el.addClass('fc-short');                                                                                      // 6644
				}                                                                                                                  // 6645
                                                                                                                       // 6646
				containerEl.append(seg.el);                                                                                        // 6647
			}                                                                                                                   // 6648
                                                                                                                       // 6649
			trEl.append($('<td/>').append(containerEl));                                                                        // 6650
		}                                                                                                                    // 6651
                                                                                                                       // 6652
		this.bookendCells(trEl);                                                                                             // 6653
                                                                                                                       // 6654
		return tableEl;                                                                                                      // 6655
	},                                                                                                                    // 6656
                                                                                                                       // 6657
                                                                                                                       // 6658
	// Given an array of segments that are all in the same column, sets the backwardCoord and forwardCoord on each.       // 6659
	// NOTE: Also reorders the given array by date!                                                                       // 6660
	placeSlotSegs: function(segs) {                                                                                       // 6661
		var levels;                                                                                                          // 6662
		var level0;                                                                                                          // 6663
		var i;                                                                                                               // 6664
                                                                                                                       // 6665
		this.sortEventSegs(segs); // order by certain criteria                                                               // 6666
		levels = buildSlotSegLevels(segs);                                                                                   // 6667
		computeForwardSlotSegs(levels);                                                                                      // 6668
                                                                                                                       // 6669
		if ((level0 = levels[0])) {                                                                                          // 6670
                                                                                                                       // 6671
			for (i = 0; i < level0.length; i++) {                                                                               // 6672
				computeSlotSegPressures(level0[i]);                                                                                // 6673
			}                                                                                                                   // 6674
                                                                                                                       // 6675
			for (i = 0; i < level0.length; i++) {                                                                               // 6676
				this.computeSlotSegCoords(level0[i], 0, 0);                                                                        // 6677
			}                                                                                                                   // 6678
		}                                                                                                                    // 6679
	},                                                                                                                    // 6680
                                                                                                                       // 6681
                                                                                                                       // 6682
	// Calculate seg.forwardCoord and seg.backwardCoord for the segment, where both values range                          // 6683
	// from 0 to 1. If the calendar is left-to-right, the seg.backwardCoord maps to "left" and                            // 6684
	// seg.forwardCoord maps to "right" (via percentage). Vice-versa if the calendar is right-to-left.                    // 6685
	//                                                                                                                    // 6686
	// The segment might be part of a "series", which means consecutive segments with the same pressure                   // 6687
	// who's width is unknown until an edge has been hit. `seriesBackwardPressure` is the number of                       // 6688
	// segments behind this one in the current series, and `seriesBackwardCoord` is the starting                          // 6689
	// coordinate of the first segment in the series.                                                                     // 6690
	computeSlotSegCoords: function(seg, seriesBackwardPressure, seriesBackwardCoord) {                                    // 6691
		var forwardSegs = seg.forwardSegs;                                                                                   // 6692
		var i;                                                                                                               // 6693
                                                                                                                       // 6694
		if (seg.forwardCoord === undefined) { // not already computed                                                        // 6695
                                                                                                                       // 6696
			if (!forwardSegs.length) {                                                                                          // 6697
                                                                                                                       // 6698
				// if there are no forward segments, this segment should butt up against the edge                                  // 6699
				seg.forwardCoord = 1;                                                                                              // 6700
			}                                                                                                                   // 6701
			else {                                                                                                              // 6702
                                                                                                                       // 6703
				// sort highest pressure first                                                                                     // 6704
				this.sortForwardSlotSegs(forwardSegs);                                                                             // 6705
                                                                                                                       // 6706
				// this segment's forwardCoord will be calculated from the backwardCoord of the                                    // 6707
				// highest-pressure forward segment.                                                                               // 6708
				this.computeSlotSegCoords(forwardSegs[0], seriesBackwardPressure + 1, seriesBackwardCoord);                        // 6709
				seg.forwardCoord = forwardSegs[0].backwardCoord;                                                                   // 6710
			}                                                                                                                   // 6711
                                                                                                                       // 6712
			// calculate the backwardCoord from the forwardCoord. consider the series                                           // 6713
			seg.backwardCoord = seg.forwardCoord -                                                                              // 6714
				(seg.forwardCoord - seriesBackwardCoord) / // available width for series                                           // 6715
				(seriesBackwardPressure + 1); // # of segments in the series                                                       // 6716
                                                                                                                       // 6717
			// use this segment's coordinates to computed the coordinates of the less-pressurized                               // 6718
			// forward segments                                                                                                 // 6719
			for (i=0; i<forwardSegs.length; i++) {                                                                              // 6720
				this.computeSlotSegCoords(forwardSegs[i], 0, seg.forwardCoord);                                                    // 6721
			}                                                                                                                   // 6722
		}                                                                                                                    // 6723
	},                                                                                                                    // 6724
                                                                                                                       // 6725
                                                                                                                       // 6726
	// Refreshes the CSS top/bottom coordinates for each segment element. Probably after a window resize/zoom.            // 6727
	// Repositions business hours segs too, so not just for events. Maybe shouldn't be here.                              // 6728
	updateSegVerticals: function() {                                                                                      // 6729
		var allSegs = (this.segs || []).concat(this.businessHourSegs || []);                                                 // 6730
		var i;                                                                                                               // 6731
                                                                                                                       // 6732
		this.computeSegVerticals(allSegs);                                                                                   // 6733
                                                                                                                       // 6734
		for (i = 0; i < allSegs.length; i++) {                                                                               // 6735
			allSegs[i].el.css(                                                                                                  // 6736
				this.generateSegVerticalCss(allSegs[i])                                                                            // 6737
			);                                                                                                                  // 6738
		}                                                                                                                    // 6739
	},                                                                                                                    // 6740
                                                                                                                       // 6741
                                                                                                                       // 6742
	// For each segment in an array, computes and assigns its top and bottom properties                                   // 6743
	computeSegVerticals: function(segs) {                                                                                 // 6744
		var i, seg;                                                                                                          // 6745
                                                                                                                       // 6746
		for (i = 0; i < segs.length; i++) {                                                                                  // 6747
			seg = segs[i];                                                                                                      // 6748
			seg.top = this.computeDateTop(seg.start, seg.start);                                                                // 6749
			seg.bottom = this.computeDateTop(seg.end, seg.start);                                                               // 6750
		}                                                                                                                    // 6751
	},                                                                                                                    // 6752
                                                                                                                       // 6753
                                                                                                                       // 6754
	// Renders the HTML for a single event segment's default rendering                                                    // 6755
	fgSegHtml: function(seg, disableResizing) {                                                                           // 6756
		var view = this.view;                                                                                                // 6757
		var event = seg.event;                                                                                               // 6758
		var isDraggable = view.isEventDraggable(event);                                                                      // 6759
		var isResizableFromStart = !disableResizing && seg.isStart && view.isEventResizableFromStart(event);                 // 6760
		var isResizableFromEnd = !disableResizing && seg.isEnd && view.isEventResizableFromEnd(event);                       // 6761
		var classes = this.getSegClasses(seg, isDraggable, isResizableFromStart || isResizableFromEnd);                      // 6762
		var skinCss = cssToStr(this.getEventSkinCss(event));                                                                 // 6763
		var timeText;                                                                                                        // 6764
		var fullTimeText; // more verbose time text. for the print stylesheet                                                // 6765
		var startTimeText; // just the start time text                                                                       // 6766
                                                                                                                       // 6767
		classes.unshift('fc-time-grid-event', 'fc-v-event');                                                                 // 6768
                                                                                                                       // 6769
		if (view.isMultiDayEvent(event)) { // if the event appears to span more than one day...                              // 6770
			// Don't display time text on segments that run entirely through a day.                                             // 6771
			// That would appear as midnight-midnight and would look dumb.                                                      // 6772
			// Otherwise, display the time text for the *segment's* times (like 6pm-midnight or midnight-10am)                  // 6773
			if (seg.isStart || seg.isEnd) {                                                                                     // 6774
				timeText = this.getEventTimeText(seg);                                                                             // 6775
				fullTimeText = this.getEventTimeText(seg, 'LT');                                                                   // 6776
				startTimeText = this.getEventTimeText(seg, null, false); // displayEnd=false                                       // 6777
			}                                                                                                                   // 6778
		} else {                                                                                                             // 6779
			// Display the normal time text for the *event's* times                                                             // 6780
			timeText = this.getEventTimeText(event);                                                                            // 6781
			fullTimeText = this.getEventTimeText(event, 'LT');                                                                  // 6782
			startTimeText = this.getEventTimeText(event, null, false); // displayEnd=false                                      // 6783
		}                                                                                                                    // 6784
                                                                                                                       // 6785
		return '<a class="' + classes.join(' ') + '"' +                                                                      // 6786
			(event.url ?                                                                                                        // 6787
				' href="' + htmlEscape(event.url) + '"' :                                                                          // 6788
				''                                                                                                                 // 6789
				) +                                                                                                                // 6790
			(skinCss ?                                                                                                          // 6791
				' style="' + skinCss + '"' :                                                                                       // 6792
				''                                                                                                                 // 6793
				) +                                                                                                                // 6794
			'>' +                                                                                                               // 6795
				'<div class="fc-content">' +                                                                                       // 6796
					(timeText ?                                                                                                       // 6797
						'<div class="fc-time"' +                                                                                         // 6798
						' data-start="' + htmlEscape(startTimeText) + '"' +                                                              // 6799
						' data-full="' + htmlEscape(fullTimeText) + '"' +                                                                // 6800
						'>' +                                                                                                            // 6801
							'<span>' + htmlEscape(timeText) + '</span>' +                                                                   // 6802
						'</div>' :                                                                                                       // 6803
						''                                                                                                               // 6804
						) +                                                                                                              // 6805
					(event.title ?                                                                                                    // 6806
						'<div class="fc-title">' +                                                                                       // 6807
							htmlEscape(event.title) +                                                                                       // 6808
						'</div>' :                                                                                                       // 6809
						''                                                                                                               // 6810
						) +                                                                                                              // 6811
				'</div>' +                                                                                                         // 6812
				'<div class="fc-bg"/>' +                                                                                           // 6813
				/* TODO: write CSS for this                                                                                        // 6814
				(isResizableFromStart ?                                                                                            // 6815
					'<div class="fc-resizer fc-start-resizer" />' :                                                                   // 6816
					''                                                                                                                // 6817
					) +                                                                                                               // 6818
				*/                                                                                                                 // 6819
				(isResizableFromEnd ?                                                                                              // 6820
					'<div class="fc-resizer fc-end-resizer" />' :                                                                     // 6821
					''                                                                                                                // 6822
					) +                                                                                                               // 6823
			'</a>';                                                                                                             // 6824
	},                                                                                                                    // 6825
                                                                                                                       // 6826
                                                                                                                       // 6827
	// Generates an object with CSS properties/values that should be applied to an event segment element.                 // 6828
	// Contains important positioning-related properties that should be applied to any event element, customized or not.  // 6829
	generateSegPositionCss: function(seg) {                                                                               // 6830
		var shouldOverlap = this.view.opt('slotEventOverlap');                                                               // 6831
		var backwardCoord = seg.backwardCoord; // the left side if LTR. the right side if RTL. floating-point                // 6832
		var forwardCoord = seg.forwardCoord; // the right side if LTR. the left side if RTL. floating-point                  // 6833
		var props = this.generateSegVerticalCss(seg); // get top/bottom first                                                // 6834
		var left; // amount of space from left edge, a fraction of the total width                                           // 6835
		var right; // amount of space from right edge, a fraction of the total width                                         // 6836
                                                                                                                       // 6837
		if (shouldOverlap) {                                                                                                 // 6838
			// double the width, but don't go beyond the maximum forward coordinate (1.0)                                       // 6839
			forwardCoord = Math.min(1, backwardCoord + (forwardCoord - backwardCoord) * 2);                                     // 6840
		}                                                                                                                    // 6841
                                                                                                                       // 6842
		if (this.isRTL) {                                                                                                    // 6843
			left = 1 - forwardCoord;                                                                                            // 6844
			right = backwardCoord;                                                                                              // 6845
		}                                                                                                                    // 6846
		else {                                                                                                               // 6847
			left = backwardCoord;                                                                                               // 6848
			right = 1 - forwardCoord;                                                                                           // 6849
		}                                                                                                                    // 6850
                                                                                                                       // 6851
		props.zIndex = seg.level + 1; // convert from 0-base to 1-based                                                      // 6852
		props.left = left * 100 + '%';                                                                                       // 6853
		props.right = right * 100 + '%';                                                                                     // 6854
                                                                                                                       // 6855
		if (shouldOverlap && seg.forwardPressure) {                                                                          // 6856
			// add padding to the edge so that forward stacked events don't cover the resizer's icon                            // 6857
			props[this.isRTL ? 'marginLeft' : 'marginRight'] = 10 * 2; // 10 is a guesstimate of the icon's width               // 6858
		}                                                                                                                    // 6859
                                                                                                                       // 6860
		return props;                                                                                                        // 6861
	},                                                                                                                    // 6862
                                                                                                                       // 6863
                                                                                                                       // 6864
	// Generates an object with CSS properties for the top/bottom coordinates of a segment element                        // 6865
	generateSegVerticalCss: function(seg) {                                                                               // 6866
		return {                                                                                                             // 6867
			top: seg.top,                                                                                                       // 6868
			bottom: -seg.bottom // flipped because needs to be space beyond bottom edge of event container                      // 6869
		};                                                                                                                   // 6870
	},                                                                                                                    // 6871
                                                                                                                       // 6872
                                                                                                                       // 6873
	// Given a flat array of segments, return an array of sub-arrays, grouped by each segment's col                       // 6874
	groupSegCols: function(segs) {                                                                                        // 6875
		var segCols = [];                                                                                                    // 6876
		var i;                                                                                                               // 6877
                                                                                                                       // 6878
		for (i = 0; i < this.colCnt; i++) {                                                                                  // 6879
			segCols.push([]);                                                                                                   // 6880
		}                                                                                                                    // 6881
                                                                                                                       // 6882
		for (i = 0; i < segs.length; i++) {                                                                                  // 6883
			segCols[segs[i].col].push(segs[i]);                                                                                 // 6884
		}                                                                                                                    // 6885
                                                                                                                       // 6886
		return segCols;                                                                                                      // 6887
	},                                                                                                                    // 6888
                                                                                                                       // 6889
                                                                                                                       // 6890
	sortForwardSlotSegs: function(forwardSegs) {                                                                          // 6891
		forwardSegs.sort(proxy(this, 'compareForwardSlotSegs'));                                                             // 6892
	},                                                                                                                    // 6893
                                                                                                                       // 6894
                                                                                                                       // 6895
	// A cmp function for determining which forward segment to rely on more when computing coordinates.                   // 6896
	compareForwardSlotSegs: function(seg1, seg2) {                                                                        // 6897
		// put higher-pressure first                                                                                         // 6898
		return seg2.forwardPressure - seg1.forwardPressure ||                                                                // 6899
			// put segments that are closer to initial edge first (and favor ones with no coords yet)                           // 6900
			(seg1.backwardCoord || 0) - (seg2.backwardCoord || 0) ||                                                            // 6901
			// do normal sorting...                                                                                             // 6902
			this.compareEventSegs(seg1, seg2);                                                                                  // 6903
	}                                                                                                                     // 6904
                                                                                                                       // 6905
});                                                                                                                    // 6906
                                                                                                                       // 6907
                                                                                                                       // 6908
// Builds an array of segments "levels". The first level will be the leftmost tier of segments if the calendar is      // 6909
// left-to-right, or the rightmost if the calendar is right-to-left. Assumes the segments are already ordered by date.
function buildSlotSegLevels(segs) {                                                                                    // 6911
	var levels = [];                                                                                                      // 6912
	var i, seg;                                                                                                           // 6913
	var j;                                                                                                                // 6914
                                                                                                                       // 6915
	for (i=0; i<segs.length; i++) {                                                                                       // 6916
		seg = segs[i];                                                                                                       // 6917
                                                                                                                       // 6918
		// go through all the levels and stop on the first level where there are no collisions                               // 6919
		for (j=0; j<levels.length; j++) {                                                                                    // 6920
			if (!computeSlotSegCollisions(seg, levels[j]).length) {                                                             // 6921
				break;                                                                                                             // 6922
			}                                                                                                                   // 6923
		}                                                                                                                    // 6924
                                                                                                                       // 6925
		seg.level = j;                                                                                                       // 6926
                                                                                                                       // 6927
		(levels[j] || (levels[j] = [])).push(seg);                                                                           // 6928
	}                                                                                                                     // 6929
                                                                                                                       // 6930
	return levels;                                                                                                        // 6931
}                                                                                                                      // 6932
                                                                                                                       // 6933
                                                                                                                       // 6934
// For every segment, figure out the other segments that are in subsequent                                             // 6935
// levels that also occupy the same vertical space. Accumulate in seg.forwardSegs                                      // 6936
function computeForwardSlotSegs(levels) {                                                                              // 6937
	var i, level;                                                                                                         // 6938
	var j, seg;                                                                                                           // 6939
	var k;                                                                                                                // 6940
                                                                                                                       // 6941
	for (i=0; i<levels.length; i++) {                                                                                     // 6942
		level = levels[i];                                                                                                   // 6943
                                                                                                                       // 6944
		for (j=0; j<level.length; j++) {                                                                                     // 6945
			seg = level[j];                                                                                                     // 6946
                                                                                                                       // 6947
			seg.forwardSegs = [];                                                                                               // 6948
			for (k=i+1; k<levels.length; k++) {                                                                                 // 6949
				computeSlotSegCollisions(seg, levels[k], seg.forwardSegs);                                                         // 6950
			}                                                                                                                   // 6951
		}                                                                                                                    // 6952
	}                                                                                                                     // 6953
}                                                                                                                      // 6954
                                                                                                                       // 6955
                                                                                                                       // 6956
// Figure out which path forward (via seg.forwardSegs) results in the longest path until                               // 6957
// the furthest edge is reached. The number of segments in this path will be seg.forwardPressure                       // 6958
function computeSlotSegPressures(seg) {                                                                                // 6959
	var forwardSegs = seg.forwardSegs;                                                                                    // 6960
	var forwardPressure = 0;                                                                                              // 6961
	var i, forwardSeg;                                                                                                    // 6962
                                                                                                                       // 6963
	if (seg.forwardPressure === undefined) { // not already computed                                                      // 6964
                                                                                                                       // 6965
		for (i=0; i<forwardSegs.length; i++) {                                                                               // 6966
			forwardSeg = forwardSegs[i];                                                                                        // 6967
                                                                                                                       // 6968
			// figure out the child's maximum forward path                                                                      // 6969
			computeSlotSegPressures(forwardSeg);                                                                                // 6970
                                                                                                                       // 6971
			// either use the existing maximum, or use the child's forward pressure                                             // 6972
			// plus one (for the forwardSeg itself)                                                                             // 6973
			forwardPressure = Math.max(                                                                                         // 6974
				forwardPressure,                                                                                                   // 6975
				1 + forwardSeg.forwardPressure                                                                                     // 6976
			);                                                                                                                  // 6977
		}                                                                                                                    // 6978
                                                                                                                       // 6979
		seg.forwardPressure = forwardPressure;                                                                               // 6980
	}                                                                                                                     // 6981
}                                                                                                                      // 6982
                                                                                                                       // 6983
                                                                                                                       // 6984
// Find all the segments in `otherSegs` that vertically collide with `seg`.                                            // 6985
// Append into an optionally-supplied `results` array and return.                                                      // 6986
function computeSlotSegCollisions(seg, otherSegs, results) {                                                           // 6987
	results = results || [];                                                                                              // 6988
                                                                                                                       // 6989
	for (var i=0; i<otherSegs.length; i++) {                                                                              // 6990
		if (isSlotSegCollision(seg, otherSegs[i])) {                                                                         // 6991
			results.push(otherSegs[i]);                                                                                         // 6992
		}                                                                                                                    // 6993
	}                                                                                                                     // 6994
                                                                                                                       // 6995
	return results;                                                                                                       // 6996
}                                                                                                                      // 6997
                                                                                                                       // 6998
                                                                                                                       // 6999
// Do these segments occupy the same vertical space?                                                                   // 7000
function isSlotSegCollision(seg1, seg2) {                                                                              // 7001
	return seg1.bottom > seg2.top && seg1.top < seg2.bottom;                                                              // 7002
}                                                                                                                      // 7003
                                                                                                                       // 7004
;;                                                                                                                     // 7005
                                                                                                                       // 7006
/* An abstract class from which other views inherit from                                                               // 7007
----------------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 7009
var View = FC.View = Class.extend({                                                                                    // 7010
                                                                                                                       // 7011
	type: null, // subclass' view name (string)                                                                           // 7012
	name: null, // deprecated. use `type` instead                                                                         // 7013
	title: null, // the text that will be displayed in the header's title                                                 // 7014
                                                                                                                       // 7015
	calendar: null, // owner Calendar object                                                                              // 7016
	options: null, // hash containing all options. already merged with view-specific-options                              // 7017
	el: null, // the view's containing element. set by Calendar                                                           // 7018
                                                                                                                       // 7019
	displaying: null, // a promise representing the state of rendering. null if no render requested                       // 7020
	isSkeletonRendered: false,                                                                                            // 7021
	isEventsRendered: false,                                                                                              // 7022
                                                                                                                       // 7023
	// range the view is actually displaying (moments)                                                                    // 7024
	start: null,                                                                                                          // 7025
	end: null, // exclusive                                                                                               // 7026
                                                                                                                       // 7027
	// range the view is formally responsible for (moments)                                                               // 7028
	// may be different from start/end. for example, a month view might have 1st-31st, excluding padded dates             // 7029
	intervalStart: null,                                                                                                  // 7030
	intervalEnd: null, // exclusive                                                                                       // 7031
	intervalDuration: null,                                                                                               // 7032
	intervalUnit: null, // name of largest unit being displayed, like "month" or "week"                                   // 7033
                                                                                                                       // 7034
	isRTL: false,                                                                                                         // 7035
	isSelected: false, // boolean whether a range of time is user-selected or not                                         // 7036
                                                                                                                       // 7037
	eventOrderSpecs: null, // criteria for ordering events when they have same date/time                                  // 7038
                                                                                                                       // 7039
	// subclasses can optionally use a scroll container                                                                   // 7040
	scrollerEl: null, // the element that will most likely scroll when content is too tall                                // 7041
	scrollTop: null, // cached vertical scroll value                                                                      // 7042
                                                                                                                       // 7043
	// classNames styled by jqui themes                                                                                   // 7044
	widgetHeaderClass: null,                                                                                              // 7045
	widgetContentClass: null,                                                                                             // 7046
	highlightStateClass: null,                                                                                            // 7047
                                                                                                                       // 7048
	// for date utils, computed from options                                                                              // 7049
	nextDayThreshold: null,                                                                                               // 7050
	isHiddenDayHash: null,                                                                                                // 7051
                                                                                                                       // 7052
	// document handlers, bound to `this` object                                                                          // 7053
	documentMousedownProxy: null, // TODO: doesn't work with touch                                                        // 7054
                                                                                                                       // 7055
                                                                                                                       // 7056
	constructor: function(calendar, type, options, intervalDuration) {                                                    // 7057
                                                                                                                       // 7058
		this.calendar = calendar;                                                                                            // 7059
		this.type = this.name = type; // .name is deprecated                                                                 // 7060
		this.options = options;                                                                                              // 7061
		this.intervalDuration = intervalDuration || moment.duration(1, 'day');                                               // 7062
                                                                                                                       // 7063
		this.nextDayThreshold = moment.duration(this.opt('nextDayThreshold'));                                               // 7064
		this.initThemingProps();                                                                                             // 7065
		this.initHiddenDays();                                                                                               // 7066
		this.isRTL = this.opt('isRTL');                                                                                      // 7067
                                                                                                                       // 7068
		this.eventOrderSpecs = parseFieldSpecs(this.opt('eventOrder'));                                                      // 7069
                                                                                                                       // 7070
		this.documentMousedownProxy = proxy(this, 'documentMousedown');                                                      // 7071
                                                                                                                       // 7072
		this.initialize();                                                                                                   // 7073
	},                                                                                                                    // 7074
                                                                                                                       // 7075
                                                                                                                       // 7076
	// A good place for subclasses to initialize member variables                                                         // 7077
	initialize: function() {                                                                                              // 7078
		// subclasses can implement                                                                                          // 7079
	},                                                                                                                    // 7080
                                                                                                                       // 7081
                                                                                                                       // 7082
	// Retrieves an option with the given name                                                                            // 7083
	opt: function(name) {                                                                                                 // 7084
		return this.options[name];                                                                                           // 7085
	},                                                                                                                    // 7086
                                                                                                                       // 7087
                                                                                                                       // 7088
	// Triggers handlers that are view-related. Modifies args before passing to calendar.                                 // 7089
	trigger: function(name, thisObj) { // arguments beyond thisObj are passed along                                       // 7090
		var calendar = this.calendar;                                                                                        // 7091
                                                                                                                       // 7092
		return calendar.trigger.apply(                                                                                       // 7093
			calendar,                                                                                                           // 7094
			[name, thisObj || this].concat(                                                                                     // 7095
				Array.prototype.slice.call(arguments, 2), // arguments beyond thisObj                                              // 7096
				[ this ] // always make the last argument a reference to the view. TODO: deprecate                                 // 7097
			)                                                                                                                   // 7098
		);                                                                                                                   // 7099
	},                                                                                                                    // 7100
                                                                                                                       // 7101
                                                                                                                       // 7102
	/* Dates                                                                                                              // 7103
	------------------------------------------------------------------------------------------------------------------*/  // 7104
                                                                                                                       // 7105
                                                                                                                       // 7106
	// Updates all internal dates to center around the given current unzoned date.                                        // 7107
	setDate: function(date) {                                                                                             // 7108
		this.setRange(this.computeRange(date));                                                                              // 7109
	},                                                                                                                    // 7110
                                                                                                                       // 7111
                                                                                                                       // 7112
	// Updates all internal dates for displaying the given unzoned range.                                                 // 7113
	setRange: function(range) {                                                                                           // 7114
		$.extend(this, range); // assigns every property to this object's member variables                                   // 7115
		this.updateTitle();                                                                                                  // 7116
	},                                                                                                                    // 7117
                                                                                                                       // 7118
                                                                                                                       // 7119
	// Given a single current unzoned date, produce information about what range to display.                              // 7120
	// Subclasses can override. Must return all properties.                                                               // 7121
	computeRange: function(date) {                                                                                        // 7122
		var intervalUnit = computeIntervalUnit(this.intervalDuration);                                                       // 7123
		var intervalStart = date.clone().startOf(intervalUnit);                                                              // 7124
		var intervalEnd = intervalStart.clone().add(this.intervalDuration);                                                  // 7125
		var start, end;                                                                                                      // 7126
                                                                                                                       // 7127
		// normalize the range's time-ambiguity                                                                              // 7128
		if (/year|month|week|day/.test(intervalUnit)) { // whole-days?                                                       // 7129
			intervalStart.stripTime();                                                                                          // 7130
			intervalEnd.stripTime();                                                                                            // 7131
		}                                                                                                                    // 7132
		else { // needs to have a time?                                                                                      // 7133
			if (!intervalStart.hasTime()) {                                                                                     // 7134
				intervalStart = this.calendar.time(0); // give 00:00 time                                                          // 7135
			}                                                                                                                   // 7136
			if (!intervalEnd.hasTime()) {                                                                                       // 7137
				intervalEnd = this.calendar.time(0); // give 00:00 time                                                            // 7138
			}                                                                                                                   // 7139
		}                                                                                                                    // 7140
                                                                                                                       // 7141
		start = intervalStart.clone();                                                                                       // 7142
		start = this.skipHiddenDays(start);                                                                                  // 7143
		end = intervalEnd.clone();                                                                                           // 7144
		end = this.skipHiddenDays(end, -1, true); // exclusively move backwards                                              // 7145
                                                                                                                       // 7146
		return {                                                                                                             // 7147
			intervalUnit: intervalUnit,                                                                                         // 7148
			intervalStart: intervalStart,                                                                                       // 7149
			intervalEnd: intervalEnd,                                                                                           // 7150
			start: start,                                                                                                       // 7151
			end: end                                                                                                            // 7152
		};                                                                                                                   // 7153
	},                                                                                                                    // 7154
                                                                                                                       // 7155
                                                                                                                       // 7156
	// Computes the new date when the user hits the prev button, given the current date                                   // 7157
	computePrevDate: function(date) {                                                                                     // 7158
		return this.massageCurrentDate(                                                                                      // 7159
			date.clone().startOf(this.intervalUnit).subtract(this.intervalDuration), -1                                         // 7160
		);                                                                                                                   // 7161
	},                                                                                                                    // 7162
                                                                                                                       // 7163
                                                                                                                       // 7164
	// Computes the new date when the user hits the next button, given the current date                                   // 7165
	computeNextDate: function(date) {                                                                                     // 7166
		return this.massageCurrentDate(                                                                                      // 7167
			date.clone().startOf(this.intervalUnit).add(this.intervalDuration)                                                  // 7168
		);                                                                                                                   // 7169
	},                                                                                                                    // 7170
                                                                                                                       // 7171
                                                                                                                       // 7172
	// Given an arbitrarily calculated current date of the calendar, returns a date that is ensured to be completely      // 7173
	// visible. `direction` is optional and indicates which direction the current date was being                          // 7174
	// incremented or decremented (1 or -1).                                                                              // 7175
	massageCurrentDate: function(date, direction) {                                                                       // 7176
		if (this.intervalDuration.as('days') <= 1) { // if the view displays a single day or smaller                         // 7177
			if (this.isHiddenDay(date)) {                                                                                       // 7178
				date = this.skipHiddenDays(date, direction);                                                                       // 7179
				date.startOf('day');                                                                                               // 7180
			}                                                                                                                   // 7181
		}                                                                                                                    // 7182
                                                                                                                       // 7183
		return date;                                                                                                         // 7184
	},                                                                                                                    // 7185
                                                                                                                       // 7186
                                                                                                                       // 7187
	/* Title and Date Formatting                                                                                          // 7188
	------------------------------------------------------------------------------------------------------------------*/  // 7189
                                                                                                                       // 7190
                                                                                                                       // 7191
	// Sets the view's title property to the most updated computed value                                                  // 7192
	updateTitle: function() {                                                                                             // 7193
		this.title = this.computeTitle();                                                                                    // 7194
	},                                                                                                                    // 7195
                                                                                                                       // 7196
                                                                                                                       // 7197
	// Computes what the title at the top of the calendar should be for this view                                         // 7198
	computeTitle: function() {                                                                                            // 7199
		return this.formatRange(                                                                                             // 7200
			{                                                                                                                   // 7201
				// in case intervalStart/End has a time, make sure timezone is correct                                             // 7202
				start: this.calendar.applyTimezone(this.intervalStart),                                                            // 7203
				end: this.calendar.applyTimezone(this.intervalEnd)                                                                 // 7204
			},                                                                                                                  // 7205
			this.opt('titleFormat') || this.computeTitleFormat(),                                                               // 7206
			this.opt('titleRangeSeparator')                                                                                     // 7207
		);                                                                                                                   // 7208
	},                                                                                                                    // 7209
                                                                                                                       // 7210
                                                                                                                       // 7211
	// Generates the format string that should be used to generate the title for the current date range.                  // 7212
	// Attempts to compute the most appropriate format if not explicitly specified with `titleFormat`.                    // 7213
	computeTitleFormat: function() {                                                                                      // 7214
		if (this.intervalUnit == 'year') {                                                                                   // 7215
			return 'YYYY';                                                                                                      // 7216
		}                                                                                                                    // 7217
		else if (this.intervalUnit == 'month') {                                                                             // 7218
			return this.opt('monthYearFormat'); // like "September 2014"                                                        // 7219
		}                                                                                                                    // 7220
		else if (this.intervalDuration.as('days') > 1) {                                                                     // 7221
			return 'll'; // multi-day range. shorter, like "Sep 9 - 10 2014"                                                    // 7222
		}                                                                                                                    // 7223
		else {                                                                                                               // 7224
			return 'LL'; // one day. longer, like "September 9 2014"                                                            // 7225
		}                                                                                                                    // 7226
	},                                                                                                                    // 7227
                                                                                                                       // 7228
                                                                                                                       // 7229
	// Utility for formatting a range. Accepts a range object, formatting string, and optional separator.                 // 7230
	// Displays all-day ranges naturally, with an inclusive end. Takes the current isRTL into account.                    // 7231
	// The timezones of the dates within `range` will be respected.                                                       // 7232
	formatRange: function(range, formatStr, separator) {                                                                  // 7233
		var end = range.end;                                                                                                 // 7234
                                                                                                                       // 7235
		if (!end.hasTime()) { // all-day?                                                                                    // 7236
			end = end.clone().subtract(1); // convert to inclusive. last ms of previous day                                     // 7237
		}                                                                                                                    // 7238
                                                                                                                       // 7239
		return formatRange(range.start, end, formatStr, separator, this.opt('isRTL'));                                       // 7240
	},                                                                                                                    // 7241
                                                                                                                       // 7242
                                                                                                                       // 7243
	/* Rendering                                                                                                          // 7244
	------------------------------------------------------------------------------------------------------------------*/  // 7245
                                                                                                                       // 7246
                                                                                                                       // 7247
	// Sets the container element that the view should render inside of.                                                  // 7248
	// Does other DOM-related initializations.                                                                            // 7249
	setElement: function(el) {                                                                                            // 7250
		this.el = el;                                                                                                        // 7251
		this.bindGlobalHandlers();                                                                                           // 7252
	},                                                                                                                    // 7253
                                                                                                                       // 7254
                                                                                                                       // 7255
	// Removes the view's container element from the DOM, clearing any content beforehand.                                // 7256
	// Undoes any other DOM-related attachments.                                                                          // 7257
	removeElement: function() {                                                                                           // 7258
		this.clear(); // clears all content                                                                                  // 7259
                                                                                                                       // 7260
		// clean up the skeleton                                                                                             // 7261
		if (this.isSkeletonRendered) {                                                                                       // 7262
			this.unrenderSkeleton();                                                                                            // 7263
			this.isSkeletonRendered = false;                                                                                    // 7264
		}                                                                                                                    // 7265
                                                                                                                       // 7266
		this.unbindGlobalHandlers();                                                                                         // 7267
                                                                                                                       // 7268
		this.el.remove();                                                                                                    // 7269
                                                                                                                       // 7270
		// NOTE: don't null-out this.el in case the View was destroyed within an API callback.                               // 7271
		// We don't null-out the View's other jQuery element references upon destroy,                                        // 7272
		//  so we shouldn't kill this.el either.                                                                             // 7273
	},                                                                                                                    // 7274
                                                                                                                       // 7275
                                                                                                                       // 7276
	// Does everything necessary to display the view centered around the given unzoned date.                              // 7277
	// Does every type of rendering EXCEPT rendering events.                                                              // 7278
	// Is asychronous and returns a promise.                                                                              // 7279
	display: function(date) {                                                                                             // 7280
		var _this = this;                                                                                                    // 7281
		var scrollState = null;                                                                                              // 7282
                                                                                                                       // 7283
		if (this.displaying) {                                                                                               // 7284
			scrollState = this.queryScroll();                                                                                   // 7285
		}                                                                                                                    // 7286
                                                                                                                       // 7287
		this.calendar.freezeContentHeight();                                                                                 // 7288
                                                                                                                       // 7289
		return this.clear().then(function() { // clear the content first (async)                                             // 7290
			return (                                                                                                            // 7291
				_this.displaying =                                                                                                 // 7292
					$.when(_this.displayView(date)) // displayView might return a promise                                             // 7293
						.then(function() {                                                                                               // 7294
							_this.forceScroll(_this.computeInitialScroll(scrollState));                                                     // 7295
							_this.calendar.unfreezeContentHeight();                                                                         // 7296
							_this.triggerRender();                                                                                          // 7297
						})                                                                                                               // 7298
			);                                                                                                                  // 7299
		});                                                                                                                  // 7300
	},                                                                                                                    // 7301
                                                                                                                       // 7302
                                                                                                                       // 7303
	// Does everything necessary to clear the content of the view.                                                        // 7304
	// Clears dates and events. Does not clear the skeleton.                                                              // 7305
	// Is asychronous and returns a promise.                                                                              // 7306
	clear: function() {                                                                                                   // 7307
		var _this = this;                                                                                                    // 7308
		var displaying = this.displaying;                                                                                    // 7309
                                                                                                                       // 7310
		if (displaying) { // previously displayed, or in the process of being displayed?                                     // 7311
			return displaying.then(function() { // wait for the display to finish                                               // 7312
				_this.displaying = null;                                                                                           // 7313
				_this.clearEvents();                                                                                               // 7314
				return _this.clearView(); // might return a promise. chain it                                                      // 7315
			});                                                                                                                 // 7316
		}                                                                                                                    // 7317
		else {                                                                                                               // 7318
			return $.when(); // an immediately-resolved promise                                                                 // 7319
		}                                                                                                                    // 7320
	},                                                                                                                    // 7321
                                                                                                                       // 7322
                                                                                                                       // 7323
	// If the view has already been displayed, tears it down and displays it again.                                       // 7324
	// Will re-render the events if necessary, which display/clear DO NOT do.                                             // 7325
	// TODO: make behavior more consistent.                                                                               // 7326
	redisplay: function() {                                                                                               // 7327
		if (this.isSkeletonRendered) {                                                                                       // 7328
			var wasEventsRendered = this.isEventsRendered;                                                                      // 7329
			this.clearEvents(); // won't trigger handlers if events never rendered                                              // 7330
			this.clearView();                                                                                                   // 7331
			this.displayView();                                                                                                 // 7332
			if (wasEventsRendered) { // only render and trigger handlers if events previously rendered                          // 7333
				this.displayEvents();                                                                                              // 7334
			}                                                                                                                   // 7335
		}                                                                                                                    // 7336
	},                                                                                                                    // 7337
                                                                                                                       // 7338
                                                                                                                       // 7339
	// Displays the view's non-event content, such as date-related content or anything required by events.                // 7340
	// Renders the view's non-content skeleton if necessary.                                                              // 7341
	// Can be asynchronous and return a promise.                                                                          // 7342
	displayView: function(date) {                                                                                         // 7343
		if (!this.isSkeletonRendered) {                                                                                      // 7344
			this.renderSkeleton();                                                                                              // 7345
			this.isSkeletonRendered = true;                                                                                     // 7346
		}                                                                                                                    // 7347
		if (date) {                                                                                                          // 7348
			this.setDate(date);                                                                                                 // 7349
		}                                                                                                                    // 7350
		if (this.render) {                                                                                                   // 7351
			this.render(); // TODO: deprecate                                                                                   // 7352
		}                                                                                                                    // 7353
		this.renderDates();                                                                                                  // 7354
		this.updateSize();                                                                                                   // 7355
		this.renderBusinessHours(); // might need coordinates, so should go after updateSize()                               // 7356
	},                                                                                                                    // 7357
                                                                                                                       // 7358
                                                                                                                       // 7359
	// Unrenders the view content that was rendered in displayView.                                                       // 7360
	// Can be asynchronous and return a promise.                                                                          // 7361
	clearView: function() {                                                                                               // 7362
		this.unselect();                                                                                                     // 7363
		this.triggerUnrender();                                                                                              // 7364
		this.unrenderBusinessHours();                                                                                        // 7365
		this.unrenderDates();                                                                                                // 7366
		if (this.destroy) {                                                                                                  // 7367
			this.destroy(); // TODO: deprecate                                                                                  // 7368
		}                                                                                                                    // 7369
	},                                                                                                                    // 7370
                                                                                                                       // 7371
                                                                                                                       // 7372
	// Renders the basic structure of the view before any content is rendered                                             // 7373
	renderSkeleton: function() {                                                                                          // 7374
		// subclasses should implement                                                                                       // 7375
	},                                                                                                                    // 7376
                                                                                                                       // 7377
                                                                                                                       // 7378
	// Unrenders the basic structure of the view                                                                          // 7379
	unrenderSkeleton: function() {                                                                                        // 7380
		// subclasses should implement                                                                                       // 7381
	},                                                                                                                    // 7382
                                                                                                                       // 7383
                                                                                                                       // 7384
	// Renders the view's date-related content.                                                                           // 7385
	// Assumes setRange has already been called and the skeleton has already been rendered.                               // 7386
	renderDates: function() {                                                                                             // 7387
		// subclasses should implement                                                                                       // 7388
	},                                                                                                                    // 7389
                                                                                                                       // 7390
                                                                                                                       // 7391
	// Unrenders the view's date-related content                                                                          // 7392
	unrenderDates: function() {                                                                                           // 7393
		// subclasses should override                                                                                        // 7394
	},                                                                                                                    // 7395
                                                                                                                       // 7396
                                                                                                                       // 7397
	// Renders business-hours onto the view. Assumes updateSize has already been called.                                  // 7398
	renderBusinessHours: function() {                                                                                     // 7399
		// subclasses should implement                                                                                       // 7400
	},                                                                                                                    // 7401
                                                                                                                       // 7402
                                                                                                                       // 7403
	// Unrenders previously-rendered business-hours                                                                       // 7404
	unrenderBusinessHours: function() {                                                                                   // 7405
		// subclasses should implement                                                                                       // 7406
	},                                                                                                                    // 7407
                                                                                                                       // 7408
                                                                                                                       // 7409
	// Signals that the view's content has been rendered                                                                  // 7410
	triggerRender: function() {                                                                                           // 7411
		this.trigger('viewRender', this, this, this.el);                                                                     // 7412
	},                                                                                                                    // 7413
                                                                                                                       // 7414
                                                                                                                       // 7415
	// Signals that the view's content is about to be unrendered                                                          // 7416
	triggerUnrender: function() {                                                                                         // 7417
		this.trigger('viewDestroy', this, this, this.el);                                                                    // 7418
	},                                                                                                                    // 7419
                                                                                                                       // 7420
                                                                                                                       // 7421
	// Binds DOM handlers to elements that reside outside the view container, such as the document                        // 7422
	bindGlobalHandlers: function() {                                                                                      // 7423
		$(document).on('mousedown', this.documentMousedownProxy);                                                            // 7424
	},                                                                                                                    // 7425
                                                                                                                       // 7426
                                                                                                                       // 7427
	// Unbinds DOM handlers from elements that reside outside the view container                                          // 7428
	unbindGlobalHandlers: function() {                                                                                    // 7429
		$(document).off('mousedown', this.documentMousedownProxy);                                                           // 7430
	},                                                                                                                    // 7431
                                                                                                                       // 7432
                                                                                                                       // 7433
	// Initializes internal variables related to theming                                                                  // 7434
	initThemingProps: function() {                                                                                        // 7435
		var tm = this.opt('theme') ? 'ui' : 'fc';                                                                            // 7436
                                                                                                                       // 7437
		this.widgetHeaderClass = tm + '-widget-header';                                                                      // 7438
		this.widgetContentClass = tm + '-widget-content';                                                                    // 7439
		this.highlightStateClass = tm + '-state-highlight';                                                                  // 7440
	},                                                                                                                    // 7441
                                                                                                                       // 7442
                                                                                                                       // 7443
	/* Dimensions                                                                                                         // 7444
	------------------------------------------------------------------------------------------------------------------*/  // 7445
                                                                                                                       // 7446
                                                                                                                       // 7447
	// Refreshes anything dependant upon sizing of the container element of the grid                                      // 7448
	updateSize: function(isResize) {                                                                                      // 7449
		var scrollState;                                                                                                     // 7450
                                                                                                                       // 7451
		if (isResize) {                                                                                                      // 7452
			scrollState = this.queryScroll();                                                                                   // 7453
		}                                                                                                                    // 7454
                                                                                                                       // 7455
		this.updateHeight(isResize);                                                                                         // 7456
		this.updateWidth(isResize);                                                                                          // 7457
                                                                                                                       // 7458
		if (isResize) {                                                                                                      // 7459
			this.setScroll(scrollState);                                                                                        // 7460
		}                                                                                                                    // 7461
	},                                                                                                                    // 7462
                                                                                                                       // 7463
                                                                                                                       // 7464
	// Refreshes the horizontal dimensions of the calendar                                                                // 7465
	updateWidth: function(isResize) {                                                                                     // 7466
		// subclasses should implement                                                                                       // 7467
	},                                                                                                                    // 7468
                                                                                                                       // 7469
                                                                                                                       // 7470
	// Refreshes the vertical dimensions of the calendar                                                                  // 7471
	updateHeight: function(isResize) {                                                                                    // 7472
		var calendar = this.calendar; // we poll the calendar for height information                                         // 7473
                                                                                                                       // 7474
		this.setHeight(                                                                                                      // 7475
			calendar.getSuggestedViewHeight(),                                                                                  // 7476
			calendar.isHeightAuto()                                                                                             // 7477
		);                                                                                                                   // 7478
	},                                                                                                                    // 7479
                                                                                                                       // 7480
                                                                                                                       // 7481
	// Updates the vertical dimensions of the calendar to the specified height.                                           // 7482
	// if `isAuto` is set to true, height becomes merely a suggestion and the view should use its "natural" height.       // 7483
	setHeight: function(height, isAuto) {                                                                                 // 7484
		// subclasses should implement                                                                                       // 7485
	},                                                                                                                    // 7486
                                                                                                                       // 7487
                                                                                                                       // 7488
	/* Scroller                                                                                                           // 7489
	------------------------------------------------------------------------------------------------------------------*/  // 7490
                                                                                                                       // 7491
                                                                                                                       // 7492
	// Given the total height of the view, return the number of pixels that should be used for the scroller.              // 7493
	// Utility for subclasses.                                                                                            // 7494
	computeScrollerHeight: function(totalHeight) {                                                                        // 7495
		var scrollerEl = this.scrollerEl;                                                                                    // 7496
		var both;                                                                                                            // 7497
		var otherHeight; // cumulative height of everything that is not the scrollerEl in the view (header+borders)          // 7498
                                                                                                                       // 7499
		both = this.el.add(scrollerEl);                                                                                      // 7500
                                                                                                                       // 7501
		// fuckin IE8/9/10/11 sometimes returns 0 for dimensions. this weird hack was the only thing that worked             // 7502
		both.css({                                                                                                           // 7503
			position: 'relative', // cause a reflow, which will force fresh dimension recalculation                             // 7504
			left: -1 // ensure reflow in case the el was already relative. negative is less likely to cause new scroll          // 7505
		});                                                                                                                  // 7506
		otherHeight = this.el.outerHeight() - scrollerEl.height(); // grab the dimensions                                    // 7507
		both.css({ position: '', left: '' }); // undo hack                                                                   // 7508
                                                                                                                       // 7509
		return totalHeight - otherHeight;                                                                                    // 7510
	},                                                                                                                    // 7511
                                                                                                                       // 7512
                                                                                                                       // 7513
	// Computes the initial pre-configured scroll state prior to allowing the user to change it.                          // 7514
	// Given the scroll state from the previous rendering. If first time rendering, given null.                           // 7515
	computeInitialScroll: function(previousScrollState) {                                                                 // 7516
		return 0;                                                                                                            // 7517
	},                                                                                                                    // 7518
                                                                                                                       // 7519
                                                                                                                       // 7520
	// Retrieves the view's current natural scroll state. Can return an arbitrary format.                                 // 7521
	queryScroll: function() {                                                                                             // 7522
		if (this.scrollerEl) {                                                                                               // 7523
			return this.scrollerEl.scrollTop(); // operates on scrollerEl by default                                            // 7524
		}                                                                                                                    // 7525
	},                                                                                                                    // 7526
                                                                                                                       // 7527
                                                                                                                       // 7528
	// Sets the view's scroll state. Will accept the same format computeInitialScroll and queryScroll produce.            // 7529
	setScroll: function(scrollState) {                                                                                    // 7530
		if (this.scrollerEl) {                                                                                               // 7531
			return this.scrollerEl.scrollTop(scrollState); // operates on scrollerEl by default                                 // 7532
		}                                                                                                                    // 7533
	},                                                                                                                    // 7534
                                                                                                                       // 7535
                                                                                                                       // 7536
	// Sets the scroll state, making sure to overcome any predefined scroll value the browser has in mind                 // 7537
	forceScroll: function(scrollState) {                                                                                  // 7538
		var _this = this;                                                                                                    // 7539
                                                                                                                       // 7540
		this.setScroll(scrollState);                                                                                         // 7541
		setTimeout(function() {                                                                                              // 7542
			_this.setScroll(scrollState);                                                                                       // 7543
		}, 0);                                                                                                               // 7544
	},                                                                                                                    // 7545
                                                                                                                       // 7546
                                                                                                                       // 7547
	/* Event Elements / Segments                                                                                          // 7548
	------------------------------------------------------------------------------------------------------------------*/  // 7549
                                                                                                                       // 7550
                                                                                                                       // 7551
	// Does everything necessary to display the given events onto the current view                                        // 7552
	displayEvents: function(events) {                                                                                     // 7553
		var scrollState = this.queryScroll();                                                                                // 7554
                                                                                                                       // 7555
		this.clearEvents();                                                                                                  // 7556
		this.renderEvents(events);                                                                                           // 7557
		this.isEventsRendered = true;                                                                                        // 7558
		this.setScroll(scrollState);                                                                                         // 7559
		this.triggerEventRender();                                                                                           // 7560
	},                                                                                                                    // 7561
                                                                                                                       // 7562
                                                                                                                       // 7563
	// Does everything necessary to clear the view's currently-rendered events                                            // 7564
	clearEvents: function() {                                                                                             // 7565
		if (this.isEventsRendered) {                                                                                         // 7566
			this.triggerEventUnrender();                                                                                        // 7567
			if (this.destroyEvents) {                                                                                           // 7568
				this.destroyEvents(); // TODO: deprecate                                                                           // 7569
			}                                                                                                                   // 7570
			this.unrenderEvents();                                                                                              // 7571
			this.isEventsRendered = false;                                                                                      // 7572
		}                                                                                                                    // 7573
	},                                                                                                                    // 7574
                                                                                                                       // 7575
                                                                                                                       // 7576
	// Renders the events onto the view.                                                                                  // 7577
	renderEvents: function(events) {                                                                                      // 7578
		// subclasses should implement                                                                                       // 7579
	},                                                                                                                    // 7580
                                                                                                                       // 7581
                                                                                                                       // 7582
	// Removes event elements from the view.                                                                              // 7583
	unrenderEvents: function() {                                                                                          // 7584
		// subclasses should implement                                                                                       // 7585
	},                                                                                                                    // 7586
                                                                                                                       // 7587
                                                                                                                       // 7588
	// Signals that all events have been rendered                                                                         // 7589
	triggerEventRender: function() {                                                                                      // 7590
		this.renderedEventSegEach(function(seg) {                                                                            // 7591
			this.trigger('eventAfterRender', seg.event, seg.event, seg.el);                                                     // 7592
		});                                                                                                                  // 7593
		this.trigger('eventAfterAllRender');                                                                                 // 7594
	},                                                                                                                    // 7595
                                                                                                                       // 7596
                                                                                                                       // 7597
	// Signals that all event elements are about to be removed                                                            // 7598
	triggerEventUnrender: function() {                                                                                    // 7599
		this.renderedEventSegEach(function(seg) {                                                                            // 7600
			this.trigger('eventDestroy', seg.event, seg.event, seg.el);                                                         // 7601
		});                                                                                                                  // 7602
	},                                                                                                                    // 7603
                                                                                                                       // 7604
                                                                                                                       // 7605
	// Given an event and the default element used for rendering, returns the element that should actually be used.       // 7606
	// Basically runs events and elements through the eventRender hook.                                                   // 7607
	resolveEventEl: function(event, el) {                                                                                 // 7608
		var custom = this.trigger('eventRender', event, event, el);                                                          // 7609
                                                                                                                       // 7610
		if (custom === false) { // means don't render at all                                                                 // 7611
			el = null;                                                                                                          // 7612
		}                                                                                                                    // 7613
		else if (custom && custom !== true) {                                                                                // 7614
			el = $(custom);                                                                                                     // 7615
		}                                                                                                                    // 7616
                                                                                                                       // 7617
		return el;                                                                                                           // 7618
	},                                                                                                                    // 7619
                                                                                                                       // 7620
                                                                                                                       // 7621
	// Hides all rendered event segments linked to the given event                                                        // 7622
	showEvent: function(event) {                                                                                          // 7623
		this.renderedEventSegEach(function(seg) {                                                                            // 7624
			seg.el.css('visibility', '');                                                                                       // 7625
		}, event);                                                                                                           // 7626
	},                                                                                                                    // 7627
                                                                                                                       // 7628
                                                                                                                       // 7629
	// Shows all rendered event segments linked to the given event                                                        // 7630
	hideEvent: function(event) {                                                                                          // 7631
		this.renderedEventSegEach(function(seg) {                                                                            // 7632
			seg.el.css('visibility', 'hidden');                                                                                 // 7633
		}, event);                                                                                                           // 7634
	},                                                                                                                    // 7635
                                                                                                                       // 7636
                                                                                                                       // 7637
	// Iterates through event segments that have been rendered (have an el). Goes through all by default.                 // 7638
	// If the optional `event` argument is specified, only iterates through segments linked to that event.                // 7639
	// The `this` value of the callback function will be the view.                                                        // 7640
	renderedEventSegEach: function(func, event) {                                                                         // 7641
		var segs = this.getEventSegs();                                                                                      // 7642
		var i;                                                                                                               // 7643
                                                                                                                       // 7644
		for (i = 0; i < segs.length; i++) {                                                                                  // 7645
			if (!event || segs[i].event._id === event._id) {                                                                    // 7646
				if (segs[i].el) {                                                                                                  // 7647
					func.call(this, segs[i]);                                                                                         // 7648
				}                                                                                                                  // 7649
			}                                                                                                                   // 7650
		}                                                                                                                    // 7651
	},                                                                                                                    // 7652
                                                                                                                       // 7653
                                                                                                                       // 7654
	// Retrieves all the rendered segment objects for the view                                                            // 7655
	getEventSegs: function() {                                                                                            // 7656
		// subclasses must implement                                                                                         // 7657
		return [];                                                                                                           // 7658
	},                                                                                                                    // 7659
                                                                                                                       // 7660
                                                                                                                       // 7661
	/* Event Drag-n-Drop                                                                                                  // 7662
	------------------------------------------------------------------------------------------------------------------*/  // 7663
                                                                                                                       // 7664
                                                                                                                       // 7665
	// Computes if the given event is allowed to be dragged by the user                                                   // 7666
	isEventDraggable: function(event) {                                                                                   // 7667
		var source = event.source || {};                                                                                     // 7668
                                                                                                                       // 7669
		return firstDefined(                                                                                                 // 7670
			event.startEditable,                                                                                                // 7671
			source.startEditable,                                                                                               // 7672
			this.opt('eventStartEditable'),                                                                                     // 7673
			event.editable,                                                                                                     // 7674
			source.editable,                                                                                                    // 7675
			this.opt('editable')                                                                                                // 7676
		);                                                                                                                   // 7677
	},                                                                                                                    // 7678
                                                                                                                       // 7679
                                                                                                                       // 7680
	// Must be called when an event in the view is dropped onto new location.                                             // 7681
	// `dropLocation` is an object that contains the new zoned start/end/allDay values for the event.                     // 7682
	reportEventDrop: function(event, dropLocation, largeUnit, el, ev) {                                                   // 7683
		var calendar = this.calendar;                                                                                        // 7684
		var mutateResult = calendar.mutateEvent(event, dropLocation, largeUnit);                                             // 7685
		var undoFunc = function() {                                                                                          // 7686
			mutateResult.undo();                                                                                                // 7687
			calendar.reportEventChange();                                                                                       // 7688
		};                                                                                                                   // 7689
                                                                                                                       // 7690
		this.triggerEventDrop(event, mutateResult.dateDelta, undoFunc, el, ev);                                              // 7691
		calendar.reportEventChange(); // will rerender events                                                                // 7692
	},                                                                                                                    // 7693
                                                                                                                       // 7694
                                                                                                                       // 7695
	// Triggers event-drop handlers that have subscribed via the API                                                      // 7696
	triggerEventDrop: function(event, dateDelta, undoFunc, el, ev) {                                                      // 7697
		this.trigger('eventDrop', el[0], event, dateDelta, undoFunc, ev, {}); // {} = jqui dummy                             // 7698
	},                                                                                                                    // 7699
                                                                                                                       // 7700
                                                                                                                       // 7701
	/* External Element Drag-n-Drop                                                                                       // 7702
	------------------------------------------------------------------------------------------------------------------*/  // 7703
                                                                                                                       // 7704
                                                                                                                       // 7705
	// Must be called when an external element, via jQuery UI, has been dropped onto the calendar.                        // 7706
	// `meta` is the parsed data that has been embedded into the dragging event.                                          // 7707
	// `dropLocation` is an object that contains the new zoned start/end/allDay values for the event.                     // 7708
	reportExternalDrop: function(meta, dropLocation, el, ev, ui) {                                                        // 7709
		var eventProps = meta.eventProps;                                                                                    // 7710
		var eventInput;                                                                                                      // 7711
		var event;                                                                                                           // 7712
                                                                                                                       // 7713
		// Try to build an event object and render it. TODO: decouple the two                                                // 7714
		if (eventProps) {                                                                                                    // 7715
			eventInput = $.extend({}, eventProps, dropLocation);                                                                // 7716
			event = this.calendar.renderEvent(eventInput, meta.stick)[0]; // renderEvent returns an array                       // 7717
		}                                                                                                                    // 7718
                                                                                                                       // 7719
		this.triggerExternalDrop(event, dropLocation, el, ev, ui);                                                           // 7720
	},                                                                                                                    // 7721
                                                                                                                       // 7722
                                                                                                                       // 7723
	// Triggers external-drop handlers that have subscribed via the API                                                   // 7724
	triggerExternalDrop: function(event, dropLocation, el, ev, ui) {                                                      // 7725
                                                                                                                       // 7726
		// trigger 'drop' regardless of whether element represents an event                                                  // 7727
		this.trigger('drop', el[0], dropLocation.start, ev, ui);                                                             // 7728
                                                                                                                       // 7729
		if (event) {                                                                                                         // 7730
			this.trigger('eventReceive', null, event); // signal an external event landed                                       // 7731
		}                                                                                                                    // 7732
	},                                                                                                                    // 7733
                                                                                                                       // 7734
                                                                                                                       // 7735
	/* Drag-n-Drop Rendering (for both events and external elements)                                                      // 7736
	------------------------------------------------------------------------------------------------------------------*/  // 7737
                                                                                                                       // 7738
                                                                                                                       // 7739
	// Renders a visual indication of a event or external-element drag over the given drop zone.                          // 7740
	// If an external-element, seg will be `null`                                                                         // 7741
	renderDrag: function(dropLocation, seg) {                                                                             // 7742
		// subclasses must implement                                                                                         // 7743
	},                                                                                                                    // 7744
                                                                                                                       // 7745
                                                                                                                       // 7746
	// Unrenders a visual indication of an event or external-element being dragged.                                       // 7747
	unrenderDrag: function() {                                                                                            // 7748
		// subclasses must implement                                                                                         // 7749
	},                                                                                                                    // 7750
                                                                                                                       // 7751
                                                                                                                       // 7752
	/* Event Resizing                                                                                                     // 7753
	------------------------------------------------------------------------------------------------------------------*/  // 7754
                                                                                                                       // 7755
                                                                                                                       // 7756
	// Computes if the given event is allowed to be resized from its starting edge                                        // 7757
	isEventResizableFromStart: function(event) {                                                                          // 7758
		return this.opt('eventResizableFromStart') && this.isEventResizable(event);                                          // 7759
	},                                                                                                                    // 7760
                                                                                                                       // 7761
                                                                                                                       // 7762
	// Computes if the given event is allowed to be resized from its ending edge                                          // 7763
	isEventResizableFromEnd: function(event) {                                                                            // 7764
		return this.isEventResizable(event);                                                                                 // 7765
	},                                                                                                                    // 7766
                                                                                                                       // 7767
                                                                                                                       // 7768
	// Computes if the given event is allowed to be resized by the user at all                                            // 7769
	isEventResizable: function(event) {                                                                                   // 7770
		var source = event.source || {};                                                                                     // 7771
                                                                                                                       // 7772
		return firstDefined(                                                                                                 // 7773
			event.durationEditable,                                                                                             // 7774
			source.durationEditable,                                                                                            // 7775
			this.opt('eventDurationEditable'),                                                                                  // 7776
			event.editable,                                                                                                     // 7777
			source.editable,                                                                                                    // 7778
			this.opt('editable')                                                                                                // 7779
		);                                                                                                                   // 7780
	},                                                                                                                    // 7781
                                                                                                                       // 7782
                                                                                                                       // 7783
	// Must be called when an event in the view has been resized to a new length                                          // 7784
	reportEventResize: function(event, resizeLocation, largeUnit, el, ev) {                                               // 7785
		var calendar = this.calendar;                                                                                        // 7786
		var mutateResult = calendar.mutateEvent(event, resizeLocation, largeUnit);                                           // 7787
		var undoFunc = function() {                                                                                          // 7788
			mutateResult.undo();                                                                                                // 7789
			calendar.reportEventChange();                                                                                       // 7790
		};                                                                                                                   // 7791
                                                                                                                       // 7792
		this.triggerEventResize(event, mutateResult.durationDelta, undoFunc, el, ev);                                        // 7793
		calendar.reportEventChange(); // will rerender events                                                                // 7794
	},                                                                                                                    // 7795
                                                                                                                       // 7796
                                                                                                                       // 7797
	// Triggers event-resize handlers that have subscribed via the API                                                    // 7798
	triggerEventResize: function(event, durationDelta, undoFunc, el, ev) {                                                // 7799
		this.trigger('eventResize', el[0], event, durationDelta, undoFunc, ev, {}); // {} = jqui dummy                       // 7800
	},                                                                                                                    // 7801
                                                                                                                       // 7802
                                                                                                                       // 7803
	/* Selection                                                                                                          // 7804
	------------------------------------------------------------------------------------------------------------------*/  // 7805
                                                                                                                       // 7806
                                                                                                                       // 7807
	// Selects a date span on the view. `start` and `end` are both Moments.                                               // 7808
	// `ev` is the native mouse event that begin the interaction.                                                         // 7809
	select: function(span, ev) {                                                                                          // 7810
		this.unselect(ev);                                                                                                   // 7811
		this.renderSelection(span);                                                                                          // 7812
		this.reportSelection(span, ev);                                                                                      // 7813
	},                                                                                                                    // 7814
                                                                                                                       // 7815
                                                                                                                       // 7816
	// Renders a visual indication of the selection                                                                       // 7817
	renderSelection: function(span) {                                                                                     // 7818
		// subclasses should implement                                                                                       // 7819
	},                                                                                                                    // 7820
                                                                                                                       // 7821
                                                                                                                       // 7822
	// Called when a new selection is made. Updates internal state and triggers handlers.                                 // 7823
	reportSelection: function(span, ev) {                                                                                 // 7824
		this.isSelected = true;                                                                                              // 7825
		this.triggerSelect(span, ev);                                                                                        // 7826
	},                                                                                                                    // 7827
                                                                                                                       // 7828
                                                                                                                       // 7829
	// Triggers handlers to 'select'                                                                                      // 7830
	triggerSelect: function(span, ev) {                                                                                   // 7831
		this.trigger(                                                                                                        // 7832
			'select',                                                                                                           // 7833
			null,                                                                                                               // 7834
			this.calendar.applyTimezone(span.start), // convert to calendar's tz for external API                               // 7835
			this.calendar.applyTimezone(span.end), // "                                                                         // 7836
			ev                                                                                                                  // 7837
		);                                                                                                                   // 7838
	},                                                                                                                    // 7839
                                                                                                                       // 7840
                                                                                                                       // 7841
	// Undoes a selection. updates in the internal state and triggers handlers.                                           // 7842
	// `ev` is the native mouse event that began the interaction.                                                         // 7843
	unselect: function(ev) {                                                                                              // 7844
		if (this.isSelected) {                                                                                               // 7845
			this.isSelected = false;                                                                                            // 7846
			if (this.destroySelection) {                                                                                        // 7847
				this.destroySelection(); // TODO: deprecate                                                                        // 7848
			}                                                                                                                   // 7849
			this.unrenderSelection();                                                                                           // 7850
			this.trigger('unselect', null, ev);                                                                                 // 7851
		}                                                                                                                    // 7852
	},                                                                                                                    // 7853
                                                                                                                       // 7854
                                                                                                                       // 7855
	// Unrenders a visual indication of selection                                                                         // 7856
	unrenderSelection: function() {                                                                                       // 7857
		// subclasses should implement                                                                                       // 7858
	},                                                                                                                    // 7859
                                                                                                                       // 7860
                                                                                                                       // 7861
	// Handler for unselecting when the user clicks something and the 'unselectAuto' setting is on                        // 7862
	documentMousedown: function(ev) {                                                                                     // 7863
		var ignore;                                                                                                          // 7864
                                                                                                                       // 7865
		// is there a selection, and has the user made a proper left click?                                                  // 7866
		if (this.isSelected && this.opt('unselectAuto') && isPrimaryMouseButton(ev)) {                                       // 7867
                                                                                                                       // 7868
			// only unselect if the clicked element is not identical to or inside of an 'unselectCancel' element                // 7869
			ignore = this.opt('unselectCancel');                                                                                // 7870
			if (!ignore || !$(ev.target).closest(ignore).length) {                                                              // 7871
				this.unselect(ev);                                                                                                 // 7872
			}                                                                                                                   // 7873
		}                                                                                                                    // 7874
	},                                                                                                                    // 7875
                                                                                                                       // 7876
                                                                                                                       // 7877
	/* Day Click                                                                                                          // 7878
	------------------------------------------------------------------------------------------------------------------*/  // 7879
                                                                                                                       // 7880
                                                                                                                       // 7881
	// Triggers handlers to 'dayClick'                                                                                    // 7882
	// Span has start/end of the clicked area. Only the start is useful.                                                  // 7883
	triggerDayClick: function(span, dayEl, ev) {                                                                          // 7884
		this.trigger(                                                                                                        // 7885
			'dayClick',                                                                                                         // 7886
			dayEl,                                                                                                              // 7887
			this.calendar.applyTimezone(span.start), // convert to calendar's timezone for external API                         // 7888
			ev                                                                                                                  // 7889
		);                                                                                                                   // 7890
	},                                                                                                                    // 7891
                                                                                                                       // 7892
                                                                                                                       // 7893
	/* Date Utils                                                                                                         // 7894
	------------------------------------------------------------------------------------------------------------------*/  // 7895
                                                                                                                       // 7896
                                                                                                                       // 7897
	// Initializes internal variables related to calculating hidden days-of-week                                          // 7898
	initHiddenDays: function() {                                                                                          // 7899
		var hiddenDays = this.opt('hiddenDays') || []; // array of day-of-week indices that are hidden                       // 7900
		var isHiddenDayHash = []; // is the day-of-week hidden? (hash with day-of-week-index -> bool)                        // 7901
		var dayCnt = 0;                                                                                                      // 7902
		var i;                                                                                                               // 7903
                                                                                                                       // 7904
		if (this.opt('weekends') === false) {                                                                                // 7905
			hiddenDays.push(0, 6); // 0=sunday, 6=saturday                                                                      // 7906
		}                                                                                                                    // 7907
                                                                                                                       // 7908
		for (i = 0; i < 7; i++) {                                                                                            // 7909
			if (                                                                                                                // 7910
				!(isHiddenDayHash[i] = $.inArray(i, hiddenDays) !== -1)                                                            // 7911
			) {                                                                                                                 // 7912
				dayCnt++;                                                                                                          // 7913
			}                                                                                                                   // 7914
		}                                                                                                                    // 7915
                                                                                                                       // 7916
		if (!dayCnt) {                                                                                                       // 7917
			throw 'invalid hiddenDays'; // all days were hidden? bad.                                                           // 7918
		}                                                                                                                    // 7919
                                                                                                                       // 7920
		this.isHiddenDayHash = isHiddenDayHash;                                                                              // 7921
	},                                                                                                                    // 7922
                                                                                                                       // 7923
                                                                                                                       // 7924
	// Is the current day hidden?                                                                                         // 7925
	// `day` is a day-of-week index (0-6), or a Moment                                                                    // 7926
	isHiddenDay: function(day) {                                                                                          // 7927
		if (moment.isMoment(day)) {                                                                                          // 7928
			day = day.day();                                                                                                    // 7929
		}                                                                                                                    // 7930
		return this.isHiddenDayHash[day];                                                                                    // 7931
	},                                                                                                                    // 7932
                                                                                                                       // 7933
                                                                                                                       // 7934
	// Incrementing the current day until it is no longer a hidden day, returning a copy.                                 // 7935
	// If the initial value of `date` is not a hidden day, don't do anything.                                             // 7936
	// Pass `isExclusive` as `true` if you are dealing with an end date.                                                  // 7937
	// `inc` defaults to `1` (increment one day forward each time)                                                        // 7938
	skipHiddenDays: function(date, inc, isExclusive) {                                                                    // 7939
		var out = date.clone();                                                                                              // 7940
		inc = inc || 1;                                                                                                      // 7941
		while (                                                                                                              // 7942
			this.isHiddenDayHash[(out.day() + (isExclusive ? inc : 0) + 7) % 7]                                                 // 7943
		) {                                                                                                                  // 7944
			out.add(inc, 'days');                                                                                               // 7945
		}                                                                                                                    // 7946
		return out;                                                                                                          // 7947
	},                                                                                                                    // 7948
                                                                                                                       // 7949
                                                                                                                       // 7950
	// Returns the date range of the full days the given range visually appears to occupy.                                // 7951
	// Returns a new range object.                                                                                        // 7952
	computeDayRange: function(range) {                                                                                    // 7953
		var startDay = range.start.clone().stripTime(); // the beginning of the day the range starts                         // 7954
		var end = range.end;                                                                                                 // 7955
		var endDay = null;                                                                                                   // 7956
		var endTimeMS;                                                                                                       // 7957
                                                                                                                       // 7958
		if (end) {                                                                                                           // 7959
			endDay = end.clone().stripTime(); // the beginning of the day the range exclusively ends                            // 7960
			endTimeMS = +end.time(); // # of milliseconds into `endDay`                                                         // 7961
                                                                                                                       // 7962
			// If the end time is actually inclusively part of the next day and is equal to or                                  // 7963
			// beyond the next day threshold, adjust the end to be the exclusive end of `endDay`.                               // 7964
			// Otherwise, leaving it as inclusive will cause it to exclude `endDay`.                                            // 7965
			if (endTimeMS && endTimeMS >= this.nextDayThreshold) {                                                              // 7966
				endDay.add(1, 'days');                                                                                             // 7967
			}                                                                                                                   // 7968
		}                                                                                                                    // 7969
                                                                                                                       // 7970
		// If no end was specified, or if it is within `startDay` but not past nextDayThreshold,                             // 7971
		// assign the default duration of one day.                                                                           // 7972
		if (!end || endDay <= startDay) {                                                                                    // 7973
			endDay = startDay.clone().add(1, 'days');                                                                           // 7974
		}                                                                                                                    // 7975
                                                                                                                       // 7976
		return { start: startDay, end: endDay };                                                                             // 7977
	},                                                                                                                    // 7978
                                                                                                                       // 7979
                                                                                                                       // 7980
	// Does the given event visually appear to occupy more than one day?                                                  // 7981
	isMultiDayEvent: function(event) {                                                                                    // 7982
		var range = this.computeDayRange(event); // event is range-ish                                                       // 7983
                                                                                                                       // 7984
		return range.end.diff(range.start, 'days') > 1;                                                                      // 7985
	}                                                                                                                     // 7986
                                                                                                                       // 7987
});                                                                                                                    // 7988
                                                                                                                       // 7989
;;                                                                                                                     // 7990
                                                                                                                       // 7991
var Calendar = FC.Calendar = Class.extend({                                                                            // 7992
                                                                                                                       // 7993
	dirDefaults: null, // option defaults related to LTR or RTL                                                           // 7994
	langDefaults: null, // option defaults related to current locale                                                      // 7995
	overrides: null, // option overrides given to the fullCalendar constructor                                            // 7996
	options: null, // all defaults combined with overrides                                                                // 7997
	viewSpecCache: null, // cache of view definitions                                                                     // 7998
	view: null, // current View object                                                                                    // 7999
	header: null,                                                                                                         // 8000
	loadingLevel: 0, // number of simultaneous loading tasks                                                              // 8001
                                                                                                                       // 8002
                                                                                                                       // 8003
	// a lot of this class' OOP logic is scoped within this constructor function,                                         // 8004
	// but in the future, write individual methods on the prototype.                                                      // 8005
	constructor: Calendar_constructor,                                                                                    // 8006
                                                                                                                       // 8007
                                                                                                                       // 8008
	// Subclasses can override this for initialization logic after the constructor has been called                        // 8009
	initialize: function() {                                                                                              // 8010
	},                                                                                                                    // 8011
                                                                                                                       // 8012
                                                                                                                       // 8013
	// Initializes `this.options` and other important options-related objects                                             // 8014
	initOptions: function(overrides) {                                                                                    // 8015
		var lang, langDefaults;                                                                                              // 8016
		var isRTL, dirDefaults;                                                                                              // 8017
                                                                                                                       // 8018
		// converts legacy options into non-legacy ones.                                                                     // 8019
		// in the future, when this is removed, don't use `overrides` reference. make a copy.                                // 8020
		overrides = massageOverrides(overrides);                                                                             // 8021
                                                                                                                       // 8022
		lang = overrides.lang;                                                                                               // 8023
		langDefaults = langOptionHash[lang];                                                                                 // 8024
		if (!langDefaults) {                                                                                                 // 8025
			lang = Calendar.defaults.lang;                                                                                      // 8026
			langDefaults = langOptionHash[lang] || {};                                                                          // 8027
		}                                                                                                                    // 8028
                                                                                                                       // 8029
		isRTL = firstDefined(                                                                                                // 8030
			overrides.isRTL,                                                                                                    // 8031
			langDefaults.isRTL,                                                                                                 // 8032
			Calendar.defaults.isRTL                                                                                             // 8033
		);                                                                                                                   // 8034
		dirDefaults = isRTL ? Calendar.rtlDefaults : {};                                                                     // 8035
                                                                                                                       // 8036
		this.dirDefaults = dirDefaults;                                                                                      // 8037
		this.langDefaults = langDefaults;                                                                                    // 8038
		this.overrides = overrides;                                                                                          // 8039
		this.options = mergeOptions([ // merge defaults and overrides. lowest to highest precedence                          // 8040
			Calendar.defaults, // global defaults                                                                               // 8041
			dirDefaults,                                                                                                        // 8042
			langDefaults,                                                                                                       // 8043
			overrides                                                                                                           // 8044
		]);                                                                                                                  // 8045
		populateInstanceComputableOptions(this.options);                                                                     // 8046
                                                                                                                       // 8047
		this.viewSpecCache = {}; // somewhat unrelated                                                                       // 8048
	},                                                                                                                    // 8049
                                                                                                                       // 8050
                                                                                                                       // 8051
	// Gets information about how to create a view. Will use a cache.                                                     // 8052
	getViewSpec: function(viewType) {                                                                                     // 8053
		var cache = this.viewSpecCache;                                                                                      // 8054
                                                                                                                       // 8055
		return cache[viewType] || (cache[viewType] = this.buildViewSpec(viewType));                                          // 8056
	},                                                                                                                    // 8057
                                                                                                                       // 8058
                                                                                                                       // 8059
	// Given a duration singular unit, like "week" or "day", finds a matching view spec.                                  // 8060
	// Preference is given to views that have corresponding buttons.                                                      // 8061
	getUnitViewSpec: function(unit) {                                                                                     // 8062
		var viewTypes;                                                                                                       // 8063
		var i;                                                                                                               // 8064
		var spec;                                                                                                            // 8065
                                                                                                                       // 8066
		if ($.inArray(unit, intervalUnits) != -1) {                                                                          // 8067
                                                                                                                       // 8068
			// put views that have buttons first. there will be duplicates, but oh well                                         // 8069
			viewTypes = this.header.getViewsWithButtons();                                                                      // 8070
			$.each(FC.views, function(viewType) { // all views                                                                  // 8071
				viewTypes.push(viewType);                                                                                          // 8072
			});                                                                                                                 // 8073
                                                                                                                       // 8074
			for (i = 0; i < viewTypes.length; i++) {                                                                            // 8075
				spec = this.getViewSpec(viewTypes[i]);                                                                             // 8076
				if (spec) {                                                                                                        // 8077
					if (spec.singleUnit == unit) {                                                                                    // 8078
						return spec;                                                                                                     // 8079
					}                                                                                                                 // 8080
				}                                                                                                                  // 8081
			}                                                                                                                   // 8082
		}                                                                                                                    // 8083
	},                                                                                                                    // 8084
                                                                                                                       // 8085
                                                                                                                       // 8086
	// Builds an object with information on how to create a given view                                                    // 8087
	buildViewSpec: function(requestedViewType) {                                                                          // 8088
		var viewOverrides = this.overrides.views || {};                                                                      // 8089
		var specChain = []; // for the view. lowest to highest priority                                                      // 8090
		var defaultsChain = []; // for the view. lowest to highest priority                                                  // 8091
		var overridesChain = []; // for the view. lowest to highest priority                                                 // 8092
		var viewType = requestedViewType;                                                                                    // 8093
		var spec; // for the view                                                                                            // 8094
		var overrides; // for the view                                                                                       // 8095
		var duration;                                                                                                        // 8096
		var unit;                                                                                                            // 8097
                                                                                                                       // 8098
		// iterate from the specific view definition to a more general one until we hit an actual View class                 // 8099
		while (viewType) {                                                                                                   // 8100
			spec = fcViews[viewType];                                                                                           // 8101
			overrides = viewOverrides[viewType];                                                                                // 8102
			viewType = null; // clear. might repopulate for another iteration                                                   // 8103
                                                                                                                       // 8104
			if (typeof spec === 'function') { // TODO: deprecate                                                                // 8105
				spec = { 'class': spec };                                                                                          // 8106
			}                                                                                                                   // 8107
                                                                                                                       // 8108
			if (spec) {                                                                                                         // 8109
				specChain.unshift(spec);                                                                                           // 8110
				defaultsChain.unshift(spec.defaults || {});                                                                        // 8111
				duration = duration || spec.duration;                                                                              // 8112
				viewType = viewType || spec.type;                                                                                  // 8113
			}                                                                                                                   // 8114
                                                                                                                       // 8115
			if (overrides) {                                                                                                    // 8116
				overridesChain.unshift(overrides); // view-specific option hashes have options at zero-level                       // 8117
				duration = duration || overrides.duration;                                                                         // 8118
				viewType = viewType || overrides.type;                                                                             // 8119
			}                                                                                                                   // 8120
		}                                                                                                                    // 8121
                                                                                                                       // 8122
		spec = mergeProps(specChain);                                                                                        // 8123
		spec.type = requestedViewType;                                                                                       // 8124
		if (!spec['class']) {                                                                                                // 8125
			return false;                                                                                                       // 8126
		}                                                                                                                    // 8127
                                                                                                                       // 8128
		if (duration) {                                                                                                      // 8129
			duration = moment.duration(duration);                                                                               // 8130
			if (duration.valueOf()) { // valid?                                                                                 // 8131
				spec.duration = duration;                                                                                          // 8132
				unit = computeIntervalUnit(duration);                                                                              // 8133
                                                                                                                       // 8134
				// view is a single-unit duration, like "week" or "day"                                                            // 8135
				// incorporate options for this. lowest priority                                                                   // 8136
				if (duration.as(unit) === 1) {                                                                                     // 8137
					spec.singleUnit = unit;                                                                                           // 8138
					overridesChain.unshift(viewOverrides[unit] || {});                                                                // 8139
				}                                                                                                                  // 8140
			}                                                                                                                   // 8141
		}                                                                                                                    // 8142
                                                                                                                       // 8143
		spec.defaults = mergeOptions(defaultsChain);                                                                         // 8144
		spec.overrides = mergeOptions(overridesChain);                                                                       // 8145
                                                                                                                       // 8146
		this.buildViewSpecOptions(spec);                                                                                     // 8147
		this.buildViewSpecButtonText(spec, requestedViewType);                                                               // 8148
                                                                                                                       // 8149
		return spec;                                                                                                         // 8150
	},                                                                                                                    // 8151
                                                                                                                       // 8152
                                                                                                                       // 8153
	// Builds and assigns a view spec's options object from its already-assigned defaults and overrides                   // 8154
	buildViewSpecOptions: function(spec) {                                                                                // 8155
		spec.options = mergeOptions([ // lowest to highest priority                                                          // 8156
			Calendar.defaults, // global defaults                                                                               // 8157
			spec.defaults, // view's defaults (from ViewSubclass.defaults)                                                      // 8158
			this.dirDefaults,                                                                                                   // 8159
			this.langDefaults, // locale and dir take precedence over view's defaults!                                          // 8160
			this.overrides, // calendar's overrides (options given to constructor)                                              // 8161
			spec.overrides // view's overrides (view-specific options)                                                          // 8162
		]);                                                                                                                  // 8163
		populateInstanceComputableOptions(spec.options);                                                                     // 8164
	},                                                                                                                    // 8165
                                                                                                                       // 8166
                                                                                                                       // 8167
	// Computes and assigns a view spec's buttonText-related options                                                      // 8168
	buildViewSpecButtonText: function(spec, requestedViewType) {                                                          // 8169
                                                                                                                       // 8170
		// given an options object with a possible `buttonText` hash, lookup the buttonText for the                          // 8171
		// requested view, falling back to a generic unit entry like "week" or "day"                                         // 8172
		function queryButtonText(options) {                                                                                  // 8173
			var buttonText = options.buttonText || {};                                                                          // 8174
			return buttonText[requestedViewType] ||                                                                             // 8175
				(spec.singleUnit ? buttonText[spec.singleUnit] : null);                                                            // 8176
		}                                                                                                                    // 8177
                                                                                                                       // 8178
		// highest to lowest priority                                                                                        // 8179
		spec.buttonTextOverride =                                                                                            // 8180
			queryButtonText(this.overrides) || // constructor-specified buttonText lookup hash takes precedence                 // 8181
			spec.overrides.buttonText; // `buttonText` for view-specific options is a string                                    // 8182
                                                                                                                       // 8183
		// highest to lowest priority. mirrors buildViewSpecOptions                                                          // 8184
		spec.buttonTextDefault =                                                                                             // 8185
			queryButtonText(this.langDefaults) ||                                                                               // 8186
			queryButtonText(this.dirDefaults) ||                                                                                // 8187
			spec.defaults.buttonText || // a single string. from ViewSubclass.defaults                                          // 8188
			queryButtonText(Calendar.defaults) ||                                                                               // 8189
			(spec.duration ? this.humanizeDuration(spec.duration) : null) || // like "3 days"                                   // 8190
			requestedViewType; // fall back to given view name                                                                  // 8191
	},                                                                                                                    // 8192
                                                                                                                       // 8193
                                                                                                                       // 8194
	// Given a view name for a custom view or a standard view, creates a ready-to-go View object                          // 8195
	instantiateView: function(viewType) {                                                                                 // 8196
		var spec = this.getViewSpec(viewType);                                                                               // 8197
                                                                                                                       // 8198
		return new spec['class'](this, viewType, spec.options, spec.duration);                                               // 8199
	},                                                                                                                    // 8200
                                                                                                                       // 8201
                                                                                                                       // 8202
	// Returns a boolean about whether the view is okay to instantiate at some point                                      // 8203
	isValidViewType: function(viewType) {                                                                                 // 8204
		return Boolean(this.getViewSpec(viewType));                                                                          // 8205
	},                                                                                                                    // 8206
                                                                                                                       // 8207
                                                                                                                       // 8208
	// Should be called when any type of async data fetching begins                                                       // 8209
	pushLoading: function() {                                                                                             // 8210
		if (!(this.loadingLevel++)) {                                                                                        // 8211
			this.trigger('loading', null, true, this.view);                                                                     // 8212
		}                                                                                                                    // 8213
	},                                                                                                                    // 8214
                                                                                                                       // 8215
                                                                                                                       // 8216
	// Should be called when any type of async data fetching completes                                                    // 8217
	popLoading: function() {                                                                                              // 8218
		if (!(--this.loadingLevel)) {                                                                                        // 8219
			this.trigger('loading', null, false, this.view);                                                                    // 8220
		}                                                                                                                    // 8221
	},                                                                                                                    // 8222
                                                                                                                       // 8223
                                                                                                                       // 8224
	// Given arguments to the select method in the API, returns a span (unzoned start/end and other info)                 // 8225
	buildSelectSpan: function(zonedStartInput, zonedEndInput) {                                                           // 8226
		var start = this.moment(zonedStartInput).stripZone();                                                                // 8227
		var end;                                                                                                             // 8228
                                                                                                                       // 8229
		if (zonedEndInput) {                                                                                                 // 8230
			end = this.moment(zonedEndInput).stripZone();                                                                       // 8231
		}                                                                                                                    // 8232
		else if (start.hasTime()) {                                                                                          // 8233
			end = start.clone().add(this.defaultTimedEventDuration);                                                            // 8234
		}                                                                                                                    // 8235
		else {                                                                                                               // 8236
			end = start.clone().add(this.defaultAllDayEventDuration);                                                           // 8237
		}                                                                                                                    // 8238
                                                                                                                       // 8239
		return { start: start, end: end };                                                                                   // 8240
	}                                                                                                                     // 8241
                                                                                                                       // 8242
});                                                                                                                    // 8243
                                                                                                                       // 8244
                                                                                                                       // 8245
Calendar.mixin(Emitter);                                                                                               // 8246
                                                                                                                       // 8247
                                                                                                                       // 8248
function Calendar_constructor(element, overrides) {                                                                    // 8249
	var t = this;                                                                                                         // 8250
                                                                                                                       // 8251
                                                                                                                       // 8252
	t.initOptions(overrides || {});                                                                                       // 8253
	var options = this.options;                                                                                           // 8254
                                                                                                                       // 8255
	                                                                                                                      // 8256
	// Exports                                                                                                            // 8257
	// -----------------------------------------------------------------------------------                                // 8258
                                                                                                                       // 8259
	t.render = render;                                                                                                    // 8260
	t.destroy = destroy;                                                                                                  // 8261
	t.refetchEvents = refetchEvents;                                                                                      // 8262
	t.reportEvents = reportEvents;                                                                                        // 8263
	t.reportEventChange = reportEventChange;                                                                              // 8264
	t.rerenderEvents = renderEvents; // `renderEvents` serves as a rerender. an API method                                // 8265
	t.changeView = renderView; // `renderView` will switch to another view                                                // 8266
	t.select = select;                                                                                                    // 8267
	t.unselect = unselect;                                                                                                // 8268
	t.prev = prev;                                                                                                        // 8269
	t.next = next;                                                                                                        // 8270
	t.prevYear = prevYear;                                                                                                // 8271
	t.nextYear = nextYear;                                                                                                // 8272
	t.today = today;                                                                                                      // 8273
	t.gotoDate = gotoDate;                                                                                                // 8274
	t.incrementDate = incrementDate;                                                                                      // 8275
	t.zoomTo = zoomTo;                                                                                                    // 8276
	t.getDate = getDate;                                                                                                  // 8277
	t.getCalendar = getCalendar;                                                                                          // 8278
	t.getView = getView;                                                                                                  // 8279
	t.option = option;                                                                                                    // 8280
	t.trigger = trigger;                                                                                                  // 8281
                                                                                                                       // 8282
                                                                                                                       // 8283
                                                                                                                       // 8284
	// Language-data Internals                                                                                            // 8285
	// -----------------------------------------------------------------------------------                                // 8286
	// Apply overrides to the current language's data                                                                     // 8287
                                                                                                                       // 8288
                                                                                                                       // 8289
	var localeData = createObject( // make a cheap copy                                                                   // 8290
		getMomentLocaleData(options.lang) // will fall back to en                                                            // 8291
	);                                                                                                                    // 8292
                                                                                                                       // 8293
	if (options.monthNames) {                                                                                             // 8294
		localeData._months = options.monthNames;                                                                             // 8295
	}                                                                                                                     // 8296
	if (options.monthNamesShort) {                                                                                        // 8297
		localeData._monthsShort = options.monthNamesShort;                                                                   // 8298
	}                                                                                                                     // 8299
	if (options.dayNames) {                                                                                               // 8300
		localeData._weekdays = options.dayNames;                                                                             // 8301
	}                                                                                                                     // 8302
	if (options.dayNamesShort) {                                                                                          // 8303
		localeData._weekdaysShort = options.dayNamesShort;                                                                   // 8304
	}                                                                                                                     // 8305
	if (options.firstDay != null) {                                                                                       // 8306
		var _week = createObject(localeData._week); // _week: { dow: # }                                                     // 8307
		_week.dow = options.firstDay;                                                                                        // 8308
		localeData._week = _week;                                                                                            // 8309
	}                                                                                                                     // 8310
                                                                                                                       // 8311
	// assign a normalized value, to be used by our .week() moment extension                                              // 8312
	localeData._fullCalendar_weekCalc = (function(weekCalc) {                                                             // 8313
		if (typeof weekCalc === 'function') {                                                                                // 8314
			return weekCalc;                                                                                                    // 8315
		}                                                                                                                    // 8316
		else if (weekCalc === 'local') {                                                                                     // 8317
			return weekCalc;                                                                                                    // 8318
		}                                                                                                                    // 8319
		else if (weekCalc === 'iso' || weekCalc === 'ISO') {                                                                 // 8320
			return 'ISO';                                                                                                       // 8321
		}                                                                                                                    // 8322
	})(options.weekNumberCalculation);                                                                                    // 8323
                                                                                                                       // 8324
                                                                                                                       // 8325
                                                                                                                       // 8326
	// Calendar-specific Date Utilities                                                                                   // 8327
	// -----------------------------------------------------------------------------------                                // 8328
                                                                                                                       // 8329
                                                                                                                       // 8330
	t.defaultAllDayEventDuration = moment.duration(options.defaultAllDayEventDuration);                                   // 8331
	t.defaultTimedEventDuration = moment.duration(options.defaultTimedEventDuration);                                     // 8332
                                                                                                                       // 8333
                                                                                                                       // 8334
	// Builds a moment using the settings of the current calendar: timezone and language.                                 // 8335
	// Accepts anything the vanilla moment() constructor accepts.                                                         // 8336
	t.moment = function() {                                                                                               // 8337
		var mom;                                                                                                             // 8338
                                                                                                                       // 8339
		if (options.timezone === 'local') {                                                                                  // 8340
			mom = FC.moment.apply(null, arguments);                                                                             // 8341
                                                                                                                       // 8342
			// Force the moment to be local, because FC.moment doesn't guarantee it.                                            // 8343
			if (mom.hasTime()) { // don't give ambiguously-timed moments a local zone                                           // 8344
				mom.local();                                                                                                       // 8345
			}                                                                                                                   // 8346
		}                                                                                                                    // 8347
		else if (options.timezone === 'UTC') {                                                                               // 8348
			mom = FC.moment.utc.apply(null, arguments); // process as UTC                                                       // 8349
		}                                                                                                                    // 8350
		else {                                                                                                               // 8351
			mom = FC.moment.parseZone.apply(null, arguments); // let the input decide the zone                                  // 8352
		}                                                                                                                    // 8353
                                                                                                                       // 8354
		if ('_locale' in mom) { // moment 2.8 and above                                                                      // 8355
			mom._locale = localeData;                                                                                           // 8356
		}                                                                                                                    // 8357
		else { // pre-moment-2.8                                                                                             // 8358
			mom._lang = localeData;                                                                                             // 8359
		}                                                                                                                    // 8360
                                                                                                                       // 8361
		return mom;                                                                                                          // 8362
	};                                                                                                                    // 8363
                                                                                                                       // 8364
                                                                                                                       // 8365
	// Returns a boolean about whether or not the calendar knows how to calculate                                         // 8366
	// the timezone offset of arbitrary dates in the current timezone.                                                    // 8367
	t.getIsAmbigTimezone = function() {                                                                                   // 8368
		return options.timezone !== 'local' && options.timezone !== 'UTC';                                                   // 8369
	};                                                                                                                    // 8370
                                                                                                                       // 8371
                                                                                                                       // 8372
	// Returns a copy of the given date in the current timezone. Has no effect on dates without times.                    // 8373
	t.applyTimezone = function(date) {                                                                                    // 8374
		if (!date.hasTime()) {                                                                                               // 8375
			return date.clone();                                                                                                // 8376
		}                                                                                                                    // 8377
                                                                                                                       // 8378
		var zonedDate = t.moment(date.toArray());                                                                            // 8379
		var timeAdjust = date.time() - zonedDate.time();                                                                     // 8380
		var adjustedZonedDate;                                                                                               // 8381
                                                                                                                       // 8382
		// Safari sometimes has problems with this coersion when near DST. Adjust if necessary. (bug #2396)                  // 8383
		if (timeAdjust) { // is the time result different than expected?                                                     // 8384
			adjustedZonedDate = zonedDate.clone().add(timeAdjust); // add milliseconds                                          // 8385
			if (date.time() - adjustedZonedDate.time() === 0) { // does it match perfectly now?                                 // 8386
				zonedDate = adjustedZonedDate;                                                                                     // 8387
			}                                                                                                                   // 8388
		}                                                                                                                    // 8389
                                                                                                                       // 8390
		return zonedDate;                                                                                                    // 8391
	};                                                                                                                    // 8392
                                                                                                                       // 8393
                                                                                                                       // 8394
	// Returns a moment for the current date, as defined by the client's computer or from the `now` option.               // 8395
	// Will return an moment with an ambiguous timezone.                                                                  // 8396
	t.getNow = function() {                                                                                               // 8397
		var now = options.now;                                                                                               // 8398
		if (typeof now === 'function') {                                                                                     // 8399
			now = now();                                                                                                        // 8400
		}                                                                                                                    // 8401
		return t.moment(now).stripZone();                                                                                    // 8402
	};                                                                                                                    // 8403
                                                                                                                       // 8404
                                                                                                                       // 8405
	// Get an event's normalized end date. If not present, calculate it from the defaults.                                // 8406
	t.getEventEnd = function(event) {                                                                                     // 8407
		if (event.end) {                                                                                                     // 8408
			return event.end.clone();                                                                                           // 8409
		}                                                                                                                    // 8410
		else {                                                                                                               // 8411
			return t.getDefaultEventEnd(event.allDay, event.start);                                                             // 8412
		}                                                                                                                    // 8413
	};                                                                                                                    // 8414
                                                                                                                       // 8415
                                                                                                                       // 8416
	// Given an event's allDay status and start date, return what its fallback end date should be.                        // 8417
	// TODO: rename to computeDefaultEventEnd                                                                             // 8418
	t.getDefaultEventEnd = function(allDay, zonedStart) {                                                                 // 8419
		var end = zonedStart.clone();                                                                                        // 8420
                                                                                                                       // 8421
		if (allDay) {                                                                                                        // 8422
			end.stripTime().add(t.defaultAllDayEventDuration);                                                                  // 8423
		}                                                                                                                    // 8424
		else {                                                                                                               // 8425
			end.add(t.defaultTimedEventDuration);                                                                               // 8426
		}                                                                                                                    // 8427
                                                                                                                       // 8428
		if (t.getIsAmbigTimezone()) {                                                                                        // 8429
			end.stripZone(); // we don't know what the tzo should be                                                            // 8430
		}                                                                                                                    // 8431
                                                                                                                       // 8432
		return end;                                                                                                          // 8433
	};                                                                                                                    // 8434
                                                                                                                       // 8435
                                                                                                                       // 8436
	// Produces a human-readable string for the given duration.                                                           // 8437
	// Side-effect: changes the locale of the given duration.                                                             // 8438
	t.humanizeDuration = function(duration) {                                                                             // 8439
		return (duration.locale || duration.lang).call(duration, options.lang) // works moment-pre-2.8                       // 8440
			.humanize();                                                                                                        // 8441
	};                                                                                                                    // 8442
                                                                                                                       // 8443
                                                                                                                       // 8444
	                                                                                                                      // 8445
	// Imports                                                                                                            // 8446
	// -----------------------------------------------------------------------------------                                // 8447
                                                                                                                       // 8448
                                                                                                                       // 8449
	EventManager.call(t, options);                                                                                        // 8450
	var isFetchNeeded = t.isFetchNeeded;                                                                                  // 8451
	var fetchEvents = t.fetchEvents;                                                                                      // 8452
                                                                                                                       // 8453
                                                                                                                       // 8454
                                                                                                                       // 8455
	// Locals                                                                                                             // 8456
	// -----------------------------------------------------------------------------------                                // 8457
                                                                                                                       // 8458
                                                                                                                       // 8459
	var _element = element[0];                                                                                            // 8460
	var header;                                                                                                           // 8461
	var headerElement;                                                                                                    // 8462
	var content;                                                                                                          // 8463
	var tm; // for making theme classes                                                                                   // 8464
	var currentView; // NOTE: keep this in sync with this.view                                                            // 8465
	var viewsByType = {}; // holds all instantiated view instances, current or not                                        // 8466
	var suggestedViewHeight;                                                                                              // 8467
	var windowResizeProxy; // wraps the windowResize function                                                             // 8468
	var ignoreWindowResize = 0;                                                                                           // 8469
	var events = [];                                                                                                      // 8470
	var date; // unzoned                                                                                                  // 8471
	                                                                                                                      // 8472
	                                                                                                                      // 8473
	                                                                                                                      // 8474
	// Main Rendering                                                                                                     // 8475
	// -----------------------------------------------------------------------------------                                // 8476
                                                                                                                       // 8477
                                                                                                                       // 8478
	// compute the initial ambig-timezone date                                                                            // 8479
	if (options.defaultDate != null) {                                                                                    // 8480
		date = t.moment(options.defaultDate).stripZone();                                                                    // 8481
	}                                                                                                                     // 8482
	else {                                                                                                                // 8483
		date = t.getNow(); // getNow already returns unzoned                                                                 // 8484
	}                                                                                                                     // 8485
	                                                                                                                      // 8486
	                                                                                                                      // 8487
	function render() {                                                                                                   // 8488
		if (!content) {                                                                                                      // 8489
			initialRender();                                                                                                    // 8490
		}                                                                                                                    // 8491
		else if (elementVisible()) {                                                                                         // 8492
			// mainly for the public API                                                                                        // 8493
			calcSize();                                                                                                         // 8494
			renderView();                                                                                                       // 8495
		}                                                                                                                    // 8496
	}                                                                                                                     // 8497
	                                                                                                                      // 8498
	                                                                                                                      // 8499
	function initialRender() {                                                                                            // 8500
		tm = options.theme ? 'ui' : 'fc';                                                                                    // 8501
		element.addClass('fc');                                                                                              // 8502
                                                                                                                       // 8503
		if (options.isRTL) {                                                                                                 // 8504
			element.addClass('fc-rtl');                                                                                         // 8505
		}                                                                                                                    // 8506
		else {                                                                                                               // 8507
			element.addClass('fc-ltr');                                                                                         // 8508
		}                                                                                                                    // 8509
                                                                                                                       // 8510
		if (options.theme) {                                                                                                 // 8511
			element.addClass('ui-widget');                                                                                      // 8512
		}                                                                                                                    // 8513
		else {                                                                                                               // 8514
			element.addClass('fc-unthemed');                                                                                    // 8515
		}                                                                                                                    // 8516
                                                                                                                       // 8517
		content = $("<div class='fc-view-container'/>").prependTo(element);                                                  // 8518
                                                                                                                       // 8519
		header = t.header = new Header(t, options);                                                                          // 8520
		headerElement = header.render();                                                                                     // 8521
		if (headerElement) {                                                                                                 // 8522
			element.prepend(headerElement);                                                                                     // 8523
		}                                                                                                                    // 8524
                                                                                                                       // 8525
		renderView(options.defaultView);                                                                                     // 8526
                                                                                                                       // 8527
		if (options.handleWindowResize) {                                                                                    // 8528
			windowResizeProxy = debounce(windowResize, options.windowResizeDelay); // prevents rapid calls                      // 8529
			$(window).resize(windowResizeProxy);                                                                                // 8530
		}                                                                                                                    // 8531
	}                                                                                                                     // 8532
	                                                                                                                      // 8533
	                                                                                                                      // 8534
	function destroy() {                                                                                                  // 8535
                                                                                                                       // 8536
		if (currentView) {                                                                                                   // 8537
			currentView.removeElement();                                                                                        // 8538
                                                                                                                       // 8539
			// NOTE: don't null-out currentView/t.view in case API methods are called after destroy.                            // 8540
			// It is still the "current" view, just not rendered.                                                               // 8541
		}                                                                                                                    // 8542
                                                                                                                       // 8543
		header.removeElement();                                                                                              // 8544
		content.remove();                                                                                                    // 8545
		element.removeClass('fc fc-ltr fc-rtl fc-unthemed ui-widget');                                                       // 8546
                                                                                                                       // 8547
		if (windowResizeProxy) {                                                                                             // 8548
			$(window).unbind('resize', windowResizeProxy);                                                                      // 8549
		}                                                                                                                    // 8550
	}                                                                                                                     // 8551
	                                                                                                                      // 8552
	                                                                                                                      // 8553
	function elementVisible() {                                                                                           // 8554
		return element.is(':visible');                                                                                       // 8555
	}                                                                                                                     // 8556
	                                                                                                                      // 8557
	                                                                                                                      // 8558
                                                                                                                       // 8559
	// View Rendering                                                                                                     // 8560
	// -----------------------------------------------------------------------------------                                // 8561
                                                                                                                       // 8562
                                                                                                                       // 8563
	// Renders a view because of a date change, view-type change, or for the first time.                                  // 8564
	// If not given a viewType, keep the current view but render different dates.                                         // 8565
	function renderView(viewType) {                                                                                       // 8566
		ignoreWindowResize++;                                                                                                // 8567
                                                                                                                       // 8568
		// if viewType is changing, remove the old view's rendering                                                          // 8569
		if (currentView && viewType && currentView.type !== viewType) {                                                      // 8570
			header.deactivateButton(currentView.type);                                                                          // 8571
			freezeContentHeight(); // prevent a scroll jump when view element is removed                                        // 8572
			currentView.removeElement();                                                                                        // 8573
			currentView = t.view = null;                                                                                        // 8574
		}                                                                                                                    // 8575
                                                                                                                       // 8576
		// if viewType changed, or the view was never created, create a fresh view                                           // 8577
		if (!currentView && viewType) {                                                                                      // 8578
			currentView = t.view =                                                                                              // 8579
				viewsByType[viewType] ||                                                                                           // 8580
				(viewsByType[viewType] = t.instantiateView(viewType));                                                             // 8581
                                                                                                                       // 8582
			currentView.setElement(                                                                                             // 8583
				$("<div class='fc-view fc-" + viewType + "-view' />").appendTo(content)                                            // 8584
			);                                                                                                                  // 8585
			header.activateButton(viewType);                                                                                    // 8586
		}                                                                                                                    // 8587
                                                                                                                       // 8588
		if (currentView) {                                                                                                   // 8589
                                                                                                                       // 8590
			// in case the view should render a period of time that is completely hidden                                        // 8591
			date = currentView.massageCurrentDate(date);                                                                        // 8592
                                                                                                                       // 8593
			// render or rerender the view                                                                                      // 8594
			if (                                                                                                                // 8595
				!currentView.displaying ||                                                                                         // 8596
				!date.isWithin(currentView.intervalStart, currentView.intervalEnd) // implicit date window change                  // 8597
			) {                                                                                                                 // 8598
				if (elementVisible()) {                                                                                            // 8599
                                                                                                                       // 8600
					currentView.display(date); // will call freezeContentHeight                                                       // 8601
					unfreezeContentHeight(); // immediately unfreeze regardless of whether display is async                           // 8602
                                                                                                                       // 8603
					// need to do this after View::render, so dates are calculated                                                    // 8604
					updateHeaderTitle();                                                                                              // 8605
					updateTodayButton();                                                                                              // 8606
                                                                                                                       // 8607
					getAndRenderEvents();                                                                                             // 8608
				}                                                                                                                  // 8609
			}                                                                                                                   // 8610
		}                                                                                                                    // 8611
                                                                                                                       // 8612
		unfreezeContentHeight(); // undo any lone freezeContentHeight calls                                                  // 8613
		ignoreWindowResize--;                                                                                                // 8614
	}                                                                                                                     // 8615
                                                                                                                       // 8616
	                                                                                                                      // 8617
                                                                                                                       // 8618
	// Resizing                                                                                                           // 8619
	// -----------------------------------------------------------------------------------                                // 8620
                                                                                                                       // 8621
                                                                                                                       // 8622
	t.getSuggestedViewHeight = function() {                                                                               // 8623
		if (suggestedViewHeight === undefined) {                                                                             // 8624
			calcSize();                                                                                                         // 8625
		}                                                                                                                    // 8626
		return suggestedViewHeight;                                                                                          // 8627
	};                                                                                                                    // 8628
                                                                                                                       // 8629
                                                                                                                       // 8630
	t.isHeightAuto = function() {                                                                                         // 8631
		return options.contentHeight === 'auto' || options.height === 'auto';                                                // 8632
	};                                                                                                                    // 8633
	                                                                                                                      // 8634
	                                                                                                                      // 8635
	function updateSize(shouldRecalc) {                                                                                   // 8636
		if (elementVisible()) {                                                                                              // 8637
                                                                                                                       // 8638
			if (shouldRecalc) {                                                                                                 // 8639
				_calcSize();                                                                                                       // 8640
			}                                                                                                                   // 8641
                                                                                                                       // 8642
			ignoreWindowResize++;                                                                                               // 8643
			currentView.updateSize(true); // isResize=true. will poll getSuggestedViewHeight() and isHeightAuto()               // 8644
			ignoreWindowResize--;                                                                                               // 8645
                                                                                                                       // 8646
			return true; // signal success                                                                                      // 8647
		}                                                                                                                    // 8648
	}                                                                                                                     // 8649
                                                                                                                       // 8650
                                                                                                                       // 8651
	function calcSize() {                                                                                                 // 8652
		if (elementVisible()) {                                                                                              // 8653
			_calcSize();                                                                                                        // 8654
		}                                                                                                                    // 8655
	}                                                                                                                     // 8656
	                                                                                                                      // 8657
	                                                                                                                      // 8658
	function _calcSize() { // assumes elementVisible                                                                      // 8659
		if (typeof options.contentHeight === 'number') { // exists and not 'auto'                                            // 8660
			suggestedViewHeight = options.contentHeight;                                                                        // 8661
		}                                                                                                                    // 8662
		else if (typeof options.height === 'number') { // exists and not 'auto'                                              // 8663
			suggestedViewHeight = options.height - (headerElement ? headerElement.outerHeight(true) : 0);                       // 8664
		}                                                                                                                    // 8665
		else {                                                                                                               // 8666
			suggestedViewHeight = Math.round(content.width() / Math.max(options.aspectRatio, .5));                              // 8667
		}                                                                                                                    // 8668
	}                                                                                                                     // 8669
	                                                                                                                      // 8670
	                                                                                                                      // 8671
	function windowResize(ev) {                                                                                           // 8672
		if (                                                                                                                 // 8673
			!ignoreWindowResize &&                                                                                              // 8674
			ev.target === window && // so we don't process jqui "resize" events that have bubbled up                            // 8675
			currentView.start // view has already been rendered                                                                 // 8676
		) {                                                                                                                  // 8677
			if (updateSize(true)) {                                                                                             // 8678
				currentView.trigger('windowResize', _element);                                                                     // 8679
			}                                                                                                                   // 8680
		}                                                                                                                    // 8681
	}                                                                                                                     // 8682
	                                                                                                                      // 8683
	                                                                                                                      // 8684
	                                                                                                                      // 8685
	/* Event Fetching/Rendering                                                                                           // 8686
	-----------------------------------------------------------------------------*/                                       // 8687
	// TODO: going forward, most of this stuff should be directly handled by the view                                     // 8688
                                                                                                                       // 8689
                                                                                                                       // 8690
	function refetchEvents() { // can be called as an API method                                                          // 8691
		destroyEvents(); // so that events are cleared before user starts waiting for AJAX                                   // 8692
		fetchAndRenderEvents();                                                                                              // 8693
	}                                                                                                                     // 8694
                                                                                                                       // 8695
                                                                                                                       // 8696
	function renderEvents() { // destroys old events if previously rendered                                               // 8697
		if (elementVisible()) {                                                                                              // 8698
			freezeContentHeight();                                                                                              // 8699
			currentView.displayEvents(events);                                                                                  // 8700
			unfreezeContentHeight();                                                                                            // 8701
		}                                                                                                                    // 8702
	}                                                                                                                     // 8703
                                                                                                                       // 8704
                                                                                                                       // 8705
	function destroyEvents() {                                                                                            // 8706
		freezeContentHeight();                                                                                               // 8707
		currentView.clearEvents();                                                                                           // 8708
		unfreezeContentHeight();                                                                                             // 8709
	}                                                                                                                     // 8710
	                                                                                                                      // 8711
                                                                                                                       // 8712
	function getAndRenderEvents() {                                                                                       // 8713
		if (!options.lazyFetching || isFetchNeeded(currentView.start, currentView.end)) {                                    // 8714
			fetchAndRenderEvents();                                                                                             // 8715
		}                                                                                                                    // 8716
		else {                                                                                                               // 8717
			renderEvents();                                                                                                     // 8718
		}                                                                                                                    // 8719
	}                                                                                                                     // 8720
                                                                                                                       // 8721
                                                                                                                       // 8722
	function fetchAndRenderEvents() {                                                                                     // 8723
		fetchEvents(currentView.start, currentView.end);                                                                     // 8724
			// ... will call reportEvents                                                                                       // 8725
			// ... which will call renderEvents                                                                                 // 8726
	}                                                                                                                     // 8727
                                                                                                                       // 8728
	                                                                                                                      // 8729
	// called when event data arrives                                                                                     // 8730
	function reportEvents(_events) {                                                                                      // 8731
		events = _events;                                                                                                    // 8732
		renderEvents();                                                                                                      // 8733
	}                                                                                                                     // 8734
                                                                                                                       // 8735
                                                                                                                       // 8736
	// called when a single event's data has been changed                                                                 // 8737
	function reportEventChange() {                                                                                        // 8738
		renderEvents();                                                                                                      // 8739
	}                                                                                                                     // 8740
                                                                                                                       // 8741
                                                                                                                       // 8742
                                                                                                                       // 8743
	/* Header Updating                                                                                                    // 8744
	-----------------------------------------------------------------------------*/                                       // 8745
                                                                                                                       // 8746
                                                                                                                       // 8747
	function updateHeaderTitle() {                                                                                        // 8748
		header.updateTitle(currentView.title);                                                                               // 8749
	}                                                                                                                     // 8750
                                                                                                                       // 8751
                                                                                                                       // 8752
	function updateTodayButton() {                                                                                        // 8753
		var now = t.getNow();                                                                                                // 8754
		if (now.isWithin(currentView.intervalStart, currentView.intervalEnd)) {                                              // 8755
			header.disableButton('today');                                                                                      // 8756
		}                                                                                                                    // 8757
		else {                                                                                                               // 8758
			header.enableButton('today');                                                                                       // 8759
		}                                                                                                                    // 8760
	}                                                                                                                     // 8761
	                                                                                                                      // 8762
                                                                                                                       // 8763
                                                                                                                       // 8764
	/* Selection                                                                                                          // 8765
	-----------------------------------------------------------------------------*/                                       // 8766
	                                                                                                                      // 8767
                                                                                                                       // 8768
	// this public method receives start/end dates in any format, with any timezone                                       // 8769
	function select(zonedStartInput, zonedEndInput) {                                                                     // 8770
		currentView.select(                                                                                                  // 8771
			t.buildSelectSpan.apply(t, arguments)                                                                               // 8772
		);                                                                                                                   // 8773
	}                                                                                                                     // 8774
	                                                                                                                      // 8775
                                                                                                                       // 8776
	function unselect() { // safe to be called before renderView                                                          // 8777
		if (currentView) {                                                                                                   // 8778
			currentView.unselect();                                                                                             // 8779
		}                                                                                                                    // 8780
	}                                                                                                                     // 8781
	                                                                                                                      // 8782
	                                                                                                                      // 8783
	                                                                                                                      // 8784
	/* Date                                                                                                               // 8785
	-----------------------------------------------------------------------------*/                                       // 8786
	                                                                                                                      // 8787
	                                                                                                                      // 8788
	function prev() {                                                                                                     // 8789
		date = currentView.computePrevDate(date);                                                                            // 8790
		renderView();                                                                                                        // 8791
	}                                                                                                                     // 8792
	                                                                                                                      // 8793
	                                                                                                                      // 8794
	function next() {                                                                                                     // 8795
		date = currentView.computeNextDate(date);                                                                            // 8796
		renderView();                                                                                                        // 8797
	}                                                                                                                     // 8798
	                                                                                                                      // 8799
	                                                                                                                      // 8800
	function prevYear() {                                                                                                 // 8801
		date.add(-1, 'years');                                                                                               // 8802
		renderView();                                                                                                        // 8803
	}                                                                                                                     // 8804
	                                                                                                                      // 8805
	                                                                                                                      // 8806
	function nextYear() {                                                                                                 // 8807
		date.add(1, 'years');                                                                                                // 8808
		renderView();                                                                                                        // 8809
	}                                                                                                                     // 8810
	                                                                                                                      // 8811
	                                                                                                                      // 8812
	function today() {                                                                                                    // 8813
		date = t.getNow();                                                                                                   // 8814
		renderView();                                                                                                        // 8815
	}                                                                                                                     // 8816
	                                                                                                                      // 8817
	                                                                                                                      // 8818
	function gotoDate(zonedDateInput) {                                                                                   // 8819
		date = t.moment(zonedDateInput).stripZone();                                                                         // 8820
		renderView();                                                                                                        // 8821
	}                                                                                                                     // 8822
	                                                                                                                      // 8823
	                                                                                                                      // 8824
	function incrementDate(delta) {                                                                                       // 8825
		date.add(moment.duration(delta));                                                                                    // 8826
		renderView();                                                                                                        // 8827
	}                                                                                                                     // 8828
                                                                                                                       // 8829
                                                                                                                       // 8830
	// Forces navigation to a view for the given date.                                                                    // 8831
	// `viewType` can be a specific view name or a generic one like "week" or "day".                                      // 8832
	function zoomTo(newDate, viewType) {                                                                                  // 8833
		var spec;                                                                                                            // 8834
                                                                                                                       // 8835
		viewType = viewType || 'day'; // day is default zoom                                                                 // 8836
		spec = t.getViewSpec(viewType) || t.getUnitViewSpec(viewType);                                                       // 8837
                                                                                                                       // 8838
		date = newDate.clone();                                                                                              // 8839
		renderView(spec ? spec.type : null);                                                                                 // 8840
	}                                                                                                                     // 8841
	                                                                                                                      // 8842
	                                                                                                                      // 8843
	// for external API                                                                                                   // 8844
	function getDate() {                                                                                                  // 8845
		return t.applyTimezone(date); // infuse the calendar's timezone                                                      // 8846
	}                                                                                                                     // 8847
                                                                                                                       // 8848
                                                                                                                       // 8849
                                                                                                                       // 8850
	/* Height "Freezing"                                                                                                  // 8851
	-----------------------------------------------------------------------------*/                                       // 8852
	// TODO: move this into the view                                                                                      // 8853
                                                                                                                       // 8854
	t.freezeContentHeight = freezeContentHeight;                                                                          // 8855
	t.unfreezeContentHeight = unfreezeContentHeight;                                                                      // 8856
                                                                                                                       // 8857
                                                                                                                       // 8858
	function freezeContentHeight() {                                                                                      // 8859
		content.css({                                                                                                        // 8860
			width: '100%',                                                                                                      // 8861
			height: content.height(),                                                                                           // 8862
			overflow: 'hidden'                                                                                                  // 8863
		});                                                                                                                  // 8864
	}                                                                                                                     // 8865
                                                                                                                       // 8866
                                                                                                                       // 8867
	function unfreezeContentHeight() {                                                                                    // 8868
		content.css({                                                                                                        // 8869
			width: '',                                                                                                          // 8870
			height: '',                                                                                                         // 8871
			overflow: ''                                                                                                        // 8872
		});                                                                                                                  // 8873
	}                                                                                                                     // 8874
	                                                                                                                      // 8875
	                                                                                                                      // 8876
	                                                                                                                      // 8877
	/* Misc                                                                                                               // 8878
	-----------------------------------------------------------------------------*/                                       // 8879
	                                                                                                                      // 8880
                                                                                                                       // 8881
	function getCalendar() {                                                                                              // 8882
		return t;                                                                                                            // 8883
	}                                                                                                                     // 8884
                                                                                                                       // 8885
	                                                                                                                      // 8886
	function getView() {                                                                                                  // 8887
		return currentView;                                                                                                  // 8888
	}                                                                                                                     // 8889
	                                                                                                                      // 8890
	                                                                                                                      // 8891
	function option(name, value) {                                                                                        // 8892
		if (value === undefined) {                                                                                           // 8893
			return options[name];                                                                                               // 8894
		}                                                                                                                    // 8895
		if (name == 'height' || name == 'contentHeight' || name == 'aspectRatio') {                                          // 8896
			options[name] = value;                                                                                              // 8897
			updateSize(true); // true = allow recalculation of height                                                           // 8898
		}                                                                                                                    // 8899
	}                                                                                                                     // 8900
	                                                                                                                      // 8901
	                                                                                                                      // 8902
	function trigger(name, thisObj) { // overrides the Emitter's trigger method :(                                        // 8903
		var args = Array.prototype.slice.call(arguments, 2);                                                                 // 8904
                                                                                                                       // 8905
		thisObj = thisObj || _element;                                                                                       // 8906
		this.triggerWith(name, thisObj, args); // Emitter's method                                                           // 8907
                                                                                                                       // 8908
		if (options[name]) {                                                                                                 // 8909
			return options[name].apply(thisObj, args);                                                                          // 8910
		}                                                                                                                    // 8911
	}                                                                                                                     // 8912
                                                                                                                       // 8913
	t.initialize();                                                                                                       // 8914
}                                                                                                                      // 8915
                                                                                                                       // 8916
;;                                                                                                                     // 8917
                                                                                                                       // 8918
Calendar.defaults = {                                                                                                  // 8919
                                                                                                                       // 8920
	titleRangeSeparator: ' \u2014 ', // emphasized dash                                                                   // 8921
	monthYearFormat: 'MMMM YYYY', // required for en. other languages rely on datepicker computable option                // 8922
                                                                                                                       // 8923
	defaultTimedEventDuration: '02:00:00',                                                                                // 8924
	defaultAllDayEventDuration: { days: 1 },                                                                              // 8925
	forceEventDuration: false,                                                                                            // 8926
	nextDayThreshold: '09:00:00', // 9am                                                                                  // 8927
                                                                                                                       // 8928
	// display                                                                                                            // 8929
	defaultView: 'month',                                                                                                 // 8930
	aspectRatio: 1.35,                                                                                                    // 8931
	header: {                                                                                                             // 8932
		left: 'title',                                                                                                       // 8933
		center: '',                                                                                                          // 8934
		right: 'today prev,next'                                                                                             // 8935
	},                                                                                                                    // 8936
	weekends: true,                                                                                                       // 8937
	weekNumbers: false,                                                                                                   // 8938
                                                                                                                       // 8939
	weekNumberTitle: 'W',                                                                                                 // 8940
	weekNumberCalculation: 'local',                                                                                       // 8941
	                                                                                                                      // 8942
	//editable: false,                                                                                                    // 8943
                                                                                                                       // 8944
	scrollTime: '06:00:00',                                                                                               // 8945
	                                                                                                                      // 8946
	// event ajax                                                                                                         // 8947
	lazyFetching: true,                                                                                                   // 8948
	startParam: 'start',                                                                                                  // 8949
	endParam: 'end',                                                                                                      // 8950
	timezoneParam: 'timezone',                                                                                            // 8951
                                                                                                                       // 8952
	timezone: false,                                                                                                      // 8953
                                                                                                                       // 8954
	//allDayDefault: undefined,                                                                                           // 8955
                                                                                                                       // 8956
	// locale                                                                                                             // 8957
	isRTL: false,                                                                                                         // 8958
	buttonText: {                                                                                                         // 8959
		prev: "prev",                                                                                                        // 8960
		next: "next",                                                                                                        // 8961
		prevYear: "prev year",                                                                                               // 8962
		nextYear: "next year",                                                                                               // 8963
		year: 'year', // TODO: locale files need to specify this                                                             // 8964
		today: 'today',                                                                                                      // 8965
		month: 'month',                                                                                                      // 8966
		week: 'week',                                                                                                        // 8967
		day: 'day'                                                                                                           // 8968
	},                                                                                                                    // 8969
                                                                                                                       // 8970
	buttonIcons: {                                                                                                        // 8971
		prev: 'left-single-arrow',                                                                                           // 8972
		next: 'right-single-arrow',                                                                                          // 8973
		prevYear: 'left-double-arrow',                                                                                       // 8974
		nextYear: 'right-double-arrow'                                                                                       // 8975
	},                                                                                                                    // 8976
	                                                                                                                      // 8977
	// jquery-ui theming                                                                                                  // 8978
	theme: false,                                                                                                         // 8979
	themeButtonIcons: {                                                                                                   // 8980
		prev: 'circle-triangle-w',                                                                                           // 8981
		next: 'circle-triangle-e',                                                                                           // 8982
		prevYear: 'seek-prev',                                                                                               // 8983
		nextYear: 'seek-next'                                                                                                // 8984
	},                                                                                                                    // 8985
                                                                                                                       // 8986
	//eventResizableFromStart: false,                                                                                     // 8987
	dragOpacity: .75,                                                                                                     // 8988
	dragRevertDuration: 500,                                                                                              // 8989
	dragScroll: true,                                                                                                     // 8990
	                                                                                                                      // 8991
	//selectable: false,                                                                                                  // 8992
	unselectAuto: true,                                                                                                   // 8993
	                                                                                                                      // 8994
	dropAccept: '*',                                                                                                      // 8995
                                                                                                                       // 8996
	eventOrder: 'title',                                                                                                  // 8997
                                                                                                                       // 8998
	eventLimit: false,                                                                                                    // 8999
	eventLimitText: 'more',                                                                                               // 9000
	eventLimitClick: 'popover',                                                                                           // 9001
	dayPopoverFormat: 'LL',                                                                                               // 9002
	                                                                                                                      // 9003
	handleWindowResize: true,                                                                                             // 9004
	windowResizeDelay: 200 // milliseconds before an updateSize happens                                                   // 9005
	                                                                                                                      // 9006
};                                                                                                                     // 9007
                                                                                                                       // 9008
                                                                                                                       // 9009
Calendar.englishDefaults = { // used by lang.js                                                                        // 9010
	dayPopoverFormat: 'dddd, MMMM D'                                                                                      // 9011
};                                                                                                                     // 9012
                                                                                                                       // 9013
                                                                                                                       // 9014
Calendar.rtlDefaults = { // right-to-left defaults                                                                     // 9015
	header: { // TODO: smarter solution (first/center/last ?)                                                             // 9016
		left: 'next,prev today',                                                                                             // 9017
		center: '',                                                                                                          // 9018
		right: 'title'                                                                                                       // 9019
	},                                                                                                                    // 9020
	buttonIcons: {                                                                                                        // 9021
		prev: 'right-single-arrow',                                                                                          // 9022
		next: 'left-single-arrow',                                                                                           // 9023
		prevYear: 'right-double-arrow',                                                                                      // 9024
		nextYear: 'left-double-arrow'                                                                                        // 9025
	},                                                                                                                    // 9026
	themeButtonIcons: {                                                                                                   // 9027
		prev: 'circle-triangle-e',                                                                                           // 9028
		next: 'circle-triangle-w',                                                                                           // 9029
		nextYear: 'seek-prev',                                                                                               // 9030
		prevYear: 'seek-next'                                                                                                // 9031
	}                                                                                                                     // 9032
};                                                                                                                     // 9033
                                                                                                                       // 9034
;;                                                                                                                     // 9035
                                                                                                                       // 9036
var langOptionHash = FC.langs = {}; // initialize and expose                                                           // 9037
                                                                                                                       // 9038
                                                                                                                       // 9039
// TODO: document the structure and ordering of a FullCalendar lang file                                               // 9040
// TODO: rename everything "lang" to "locale", like what the moment project did                                        // 9041
                                                                                                                       // 9042
                                                                                                                       // 9043
// Initialize jQuery UI datepicker translations while using some of the translations                                   // 9044
// Will set this as the default language for datepicker.                                                               // 9045
FC.datepickerLang = function(langCode, dpLangCode, dpOptions) {                                                        // 9046
                                                                                                                       // 9047
	// get the FullCalendar internal option hash for this language. create if necessary                                   // 9048
	var fcOptions = langOptionHash[langCode] || (langOptionHash[langCode] = {});                                          // 9049
                                                                                                                       // 9050
	// transfer some simple options from datepicker to fc                                                                 // 9051
	fcOptions.isRTL = dpOptions.isRTL;                                                                                    // 9052
	fcOptions.weekNumberTitle = dpOptions.weekHeader;                                                                     // 9053
                                                                                                                       // 9054
	// compute some more complex options from datepicker                                                                  // 9055
	$.each(dpComputableOptions, function(name, func) {                                                                    // 9056
		fcOptions[name] = func(dpOptions);                                                                                   // 9057
	});                                                                                                                   // 9058
                                                                                                                       // 9059
	// is jQuery UI Datepicker is on the page?                                                                            // 9060
	if ($.datepicker) {                                                                                                   // 9061
                                                                                                                       // 9062
		// Register the language data.                                                                                       // 9063
		// FullCalendar and MomentJS use language codes like "pt-br" but Datepicker                                          // 9064
		// does it like "pt-BR" or if it doesn't have the language, maybe just "pt".                                         // 9065
		// Make an alias so the language can be referenced either way.                                                       // 9066
		$.datepicker.regional[dpLangCode] =                                                                                  // 9067
			$.datepicker.regional[langCode] = // alias                                                                          // 9068
				dpOptions;                                                                                                         // 9069
                                                                                                                       // 9070
		// Alias 'en' to the default language data. Do this every time.                                                      // 9071
		$.datepicker.regional.en = $.datepicker.regional[''];                                                                // 9072
                                                                                                                       // 9073
		// Set as Datepicker's global defaults.                                                                              // 9074
		$.datepicker.setDefaults(dpOptions);                                                                                 // 9075
	}                                                                                                                     // 9076
};                                                                                                                     // 9077
                                                                                                                       // 9078
                                                                                                                       // 9079
// Sets FullCalendar-specific translations. Will set the language as the global default.                               // 9080
FC.lang = function(langCode, newFcOptions) {                                                                           // 9081
	var fcOptions;                                                                                                        // 9082
	var momOptions;                                                                                                       // 9083
                                                                                                                       // 9084
	// get the FullCalendar internal option hash for this language. create if necessary                                   // 9085
	fcOptions = langOptionHash[langCode] || (langOptionHash[langCode] = {});                                              // 9086
                                                                                                                       // 9087
	// provided new options for this language? merge them in                                                              // 9088
	if (newFcOptions) {                                                                                                   // 9089
		fcOptions = langOptionHash[langCode] = mergeOptions([ fcOptions, newFcOptions ]);                                    // 9090
	}                                                                                                                     // 9091
                                                                                                                       // 9092
	// compute language options that weren't defined.                                                                     // 9093
	// always do this. newFcOptions can be undefined when initializing from i18n file,                                    // 9094
	// so no way to tell if this is an initialization or a default-setting.                                               // 9095
	momOptions = getMomentLocaleData(langCode); // will fall back to en                                                   // 9096
	$.each(momComputableOptions, function(name, func) {                                                                   // 9097
		if (fcOptions[name] == null) {                                                                                       // 9098
			fcOptions[name] = func(momOptions, fcOptions);                                                                      // 9099
		}                                                                                                                    // 9100
	});                                                                                                                   // 9101
                                                                                                                       // 9102
	// set it as the default language for FullCalendar                                                                    // 9103
	Calendar.defaults.lang = langCode;                                                                                    // 9104
};                                                                                                                     // 9105
                                                                                                                       // 9106
                                                                                                                       // 9107
// NOTE: can't guarantee any of these computations will run because not every language has datepicker                  // 9108
// configs, so make sure there are English fallbacks for these in the defaults file.                                   // 9109
var dpComputableOptions = {                                                                                            // 9110
                                                                                                                       // 9111
	buttonText: function(dpOptions) {                                                                                     // 9112
		return {                                                                                                             // 9113
			// the translations sometimes wrongly contain HTML entities                                                         // 9114
			prev: stripHtmlEntities(dpOptions.prevText),                                                                        // 9115
			next: stripHtmlEntities(dpOptions.nextText),                                                                        // 9116
			today: stripHtmlEntities(dpOptions.currentText)                                                                     // 9117
		};                                                                                                                   // 9118
	},                                                                                                                    // 9119
                                                                                                                       // 9120
	// Produces format strings like "MMMM YYYY" -> "September 2014"                                                       // 9121
	monthYearFormat: function(dpOptions) {                                                                                // 9122
		return dpOptions.showMonthAfterYear ?                                                                                // 9123
			'YYYY[' + dpOptions.yearSuffix + '] MMMM' :                                                                         // 9124
			'MMMM YYYY[' + dpOptions.yearSuffix + ']';                                                                          // 9125
	}                                                                                                                     // 9126
                                                                                                                       // 9127
};                                                                                                                     // 9128
                                                                                                                       // 9129
var momComputableOptions = {                                                                                           // 9130
                                                                                                                       // 9131
	// Produces format strings like "ddd M/D" -> "Fri 9/15"                                                               // 9132
	dayOfMonthFormat: function(momOptions, fcOptions) {                                                                   // 9133
		var format = momOptions.longDateFormat('l'); // for the format like "M/D/YYYY"                                       // 9134
                                                                                                                       // 9135
		// strip the year off the edge, as well as other misc non-whitespace chars                                           // 9136
		format = format.replace(/^Y+[^\w\s]*|[^\w\s]*Y+$/g, '');                                                             // 9137
                                                                                                                       // 9138
		if (fcOptions.isRTL) {                                                                                               // 9139
			format += ' ddd'; // for RTL, add day-of-week to end                                                                // 9140
		}                                                                                                                    // 9141
		else {                                                                                                               // 9142
			format = 'ddd ' + format; // for LTR, add day-of-week to beginning                                                  // 9143
		}                                                                                                                    // 9144
		return format;                                                                                                       // 9145
	},                                                                                                                    // 9146
                                                                                                                       // 9147
	// Produces format strings like "h:mma" -> "6:00pm"                                                                   // 9148
	mediumTimeFormat: function(momOptions) { // can't be called `timeFormat` because collides with option                 // 9149
		return momOptions.longDateFormat('LT')                                                                               // 9150
			.replace(/\s*a$/i, 'a'); // convert AM/PM/am/pm to lowercase. remove any spaces beforehand                          // 9151
	},                                                                                                                    // 9152
                                                                                                                       // 9153
	// Produces format strings like "h(:mm)a" -> "6pm" / "6:30pm"                                                         // 9154
	smallTimeFormat: function(momOptions) {                                                                               // 9155
		return momOptions.longDateFormat('LT')                                                                               // 9156
			.replace(':mm', '(:mm)')                                                                                            // 9157
			.replace(/(\Wmm)$/, '($1)') // like above, but for foreign langs                                                    // 9158
			.replace(/\s*a$/i, 'a'); // convert AM/PM/am/pm to lowercase. remove any spaces beforehand                          // 9159
	},                                                                                                                    // 9160
                                                                                                                       // 9161
	// Produces format strings like "h(:mm)t" -> "6p" / "6:30p"                                                           // 9162
	extraSmallTimeFormat: function(momOptions) {                                                                          // 9163
		return momOptions.longDateFormat('LT')                                                                               // 9164
			.replace(':mm', '(:mm)')                                                                                            // 9165
			.replace(/(\Wmm)$/, '($1)') // like above, but for foreign langs                                                    // 9166
			.replace(/\s*a$/i, 't'); // convert to AM/PM/am/pm to lowercase one-letter. remove any spaces beforehand            // 9167
	},                                                                                                                    // 9168
                                                                                                                       // 9169
	// Produces format strings like "ha" / "H" -> "6pm" / "18"                                                            // 9170
	hourFormat: function(momOptions) {                                                                                    // 9171
		return momOptions.longDateFormat('LT')                                                                               // 9172
			.replace(':mm', '')                                                                                                 // 9173
			.replace(/(\Wmm)$/, '') // like above, but for foreign langs                                                        // 9174
			.replace(/\s*a$/i, 'a'); // convert AM/PM/am/pm to lowercase. remove any spaces beforehand                          // 9175
	},                                                                                                                    // 9176
                                                                                                                       // 9177
	// Produces format strings like "h:mm" -> "6:30" (with no AM/PM)                                                      // 9178
	noMeridiemTimeFormat: function(momOptions) {                                                                          // 9179
		return momOptions.longDateFormat('LT')                                                                               // 9180
			.replace(/\s*a$/i, ''); // remove trailing AM/PM                                                                    // 9181
	}                                                                                                                     // 9182
                                                                                                                       // 9183
};                                                                                                                     // 9184
                                                                                                                       // 9185
                                                                                                                       // 9186
// options that should be computed off live calendar options (considers override options)                              // 9187
// TODO: best place for this? related to lang?                                                                         // 9188
// TODO: flipping text based on isRTL is a bad idea because the CSS `direction` might want to handle it                // 9189
var instanceComputableOptions = {                                                                                      // 9190
                                                                                                                       // 9191
	// Produces format strings for results like "Mo 16"                                                                   // 9192
	smallDayDateFormat: function(options) {                                                                               // 9193
		return options.isRTL ?                                                                                               // 9194
			'D dd' :                                                                                                            // 9195
			'dd D';                                                                                                             // 9196
	},                                                                                                                    // 9197
                                                                                                                       // 9198
	// Produces format strings for results like "Wk 5"                                                                    // 9199
	weekFormat: function(options) {                                                                                       // 9200
		return options.isRTL ?                                                                                               // 9201
			'w[ ' + options.weekNumberTitle + ']' :                                                                             // 9202
			'[' + options.weekNumberTitle + ' ]w';                                                                              // 9203
	},                                                                                                                    // 9204
                                                                                                                       // 9205
	// Produces format strings for results like "Wk5"                                                                     // 9206
	smallWeekFormat: function(options) {                                                                                  // 9207
		return options.isRTL ?                                                                                               // 9208
			'w[' + options.weekNumberTitle + ']' :                                                                              // 9209
			'[' + options.weekNumberTitle + ']w';                                                                               // 9210
	}                                                                                                                     // 9211
                                                                                                                       // 9212
};                                                                                                                     // 9213
                                                                                                                       // 9214
function populateInstanceComputableOptions(options) {                                                                  // 9215
	$.each(instanceComputableOptions, function(name, func) {                                                              // 9216
		if (options[name] == null) {                                                                                         // 9217
			options[name] = func(options);                                                                                      // 9218
		}                                                                                                                    // 9219
	});                                                                                                                   // 9220
}                                                                                                                      // 9221
                                                                                                                       // 9222
                                                                                                                       // 9223
// Returns moment's internal locale data. If doesn't exist, returns English.                                           // 9224
// Works with moment-pre-2.8                                                                                           // 9225
function getMomentLocaleData(langCode) {                                                                               // 9226
	var func = moment.localeData || moment.langData;                                                                      // 9227
	return func.call(moment, langCode) ||                                                                                 // 9228
		func.call(moment, 'en'); // the newer localData could return null, so fall back to en                                // 9229
}                                                                                                                      // 9230
                                                                                                                       // 9231
                                                                                                                       // 9232
// Initialize English by forcing computation of moment-derived options.                                                // 9233
// Also, sets it as the default.                                                                                       // 9234
FC.lang('en', Calendar.englishDefaults);                                                                               // 9235
                                                                                                                       // 9236
;;                                                                                                                     // 9237
                                                                                                                       // 9238
/* Top toolbar area with buttons and title                                                                             // 9239
----------------------------------------------------------------------------------------------------------------------*/
// TODO: rename all header-related things to "toolbar"                                                                 // 9241
                                                                                                                       // 9242
function Header(calendar, options) {                                                                                   // 9243
	var t = this;                                                                                                         // 9244
	                                                                                                                      // 9245
	// exports                                                                                                            // 9246
	t.render = render;                                                                                                    // 9247
	t.removeElement = removeElement;                                                                                      // 9248
	t.updateTitle = updateTitle;                                                                                          // 9249
	t.activateButton = activateButton;                                                                                    // 9250
	t.deactivateButton = deactivateButton;                                                                                // 9251
	t.disableButton = disableButton;                                                                                      // 9252
	t.enableButton = enableButton;                                                                                        // 9253
	t.getViewsWithButtons = getViewsWithButtons;                                                                          // 9254
	                                                                                                                      // 9255
	// locals                                                                                                             // 9256
	var el = $();                                                                                                         // 9257
	var viewsWithButtons = [];                                                                                            // 9258
	var tm;                                                                                                               // 9259
                                                                                                                       // 9260
                                                                                                                       // 9261
	function render() {                                                                                                   // 9262
		var sections = options.header;                                                                                       // 9263
                                                                                                                       // 9264
		tm = options.theme ? 'ui' : 'fc';                                                                                    // 9265
                                                                                                                       // 9266
		if (sections) {                                                                                                      // 9267
			el = $("<div class='fc-toolbar'/>")                                                                                 // 9268
				.append(renderSection('left'))                                                                                     // 9269
				.append(renderSection('right'))                                                                                    // 9270
				.append(renderSection('center'))                                                                                   // 9271
				.append('<div class="fc-clear"/>');                                                                                // 9272
                                                                                                                       // 9273
			return el;                                                                                                          // 9274
		}                                                                                                                    // 9275
	}                                                                                                                     // 9276
	                                                                                                                      // 9277
	                                                                                                                      // 9278
	function removeElement() {                                                                                            // 9279
		el.remove();                                                                                                         // 9280
		el = $();                                                                                                            // 9281
	}                                                                                                                     // 9282
	                                                                                                                      // 9283
	                                                                                                                      // 9284
	function renderSection(position) {                                                                                    // 9285
		var sectionEl = $('<div class="fc-' + position + '"/>');                                                             // 9286
		var buttonStr = options.header[position];                                                                            // 9287
                                                                                                                       // 9288
		if (buttonStr) {                                                                                                     // 9289
			$.each(buttonStr.split(' '), function(i) {                                                                          // 9290
				var groupChildren = $();                                                                                           // 9291
				var isOnlyButtons = true;                                                                                          // 9292
				var groupEl;                                                                                                       // 9293
                                                                                                                       // 9294
				$.each(this.split(','), function(j, buttonName) {                                                                  // 9295
					var customButtonProps;                                                                                            // 9296
					var viewSpec;                                                                                                     // 9297
					var buttonClick;                                                                                                  // 9298
					var overrideText; // text explicitly set by calendar's constructor options. overcomes icons                       // 9299
					var defaultText;                                                                                                  // 9300
					var themeIcon;                                                                                                    // 9301
					var normalIcon;                                                                                                   // 9302
					var innerHtml;                                                                                                    // 9303
					var classes;                                                                                                      // 9304
					var button; // the element                                                                                        // 9305
                                                                                                                       // 9306
					if (buttonName == 'title') {                                                                                      // 9307
						groupChildren = groupChildren.add($('<h2>&nbsp;</h2>')); // we always want it to take up height                  // 9308
						isOnlyButtons = false;                                                                                           // 9309
					}                                                                                                                 // 9310
					else {                                                                                                            // 9311
						if ((customButtonProps = (calendar.options.customButtons || {})[buttonName])) {                                  // 9312
							buttonClick = function(ev) {                                                                                    // 9313
								if (customButtonProps.click) {                                                                                 // 9314
									customButtonProps.click.call(button[0], ev);                                                                  // 9315
								}                                                                                                              // 9316
							};                                                                                                              // 9317
							overrideText = ''; // icons will override text                                                                  // 9318
							defaultText = customButtonProps.text;                                                                           // 9319
						}                                                                                                                // 9320
						else if ((viewSpec = calendar.getViewSpec(buttonName))) {                                                        // 9321
							buttonClick = function() {                                                                                      // 9322
								calendar.changeView(buttonName);                                                                               // 9323
							};                                                                                                              // 9324
							viewsWithButtons.push(buttonName);                                                                              // 9325
							overrideText = viewSpec.buttonTextOverride;                                                                     // 9326
							defaultText = viewSpec.buttonTextDefault;                                                                       // 9327
						}                                                                                                                // 9328
						else if (calendar[buttonName]) { // a calendar method                                                            // 9329
							buttonClick = function() {                                                                                      // 9330
								calendar[buttonName]();                                                                                        // 9331
							};                                                                                                              // 9332
							overrideText = (calendar.overrides.buttonText || {})[buttonName];                                               // 9333
							defaultText = options.buttonText[buttonName]; // everything else is considered default                          // 9334
						}                                                                                                                // 9335
                                                                                                                       // 9336
						if (buttonClick) {                                                                                               // 9337
                                                                                                                       // 9338
							themeIcon =                                                                                                     // 9339
								customButtonProps ?                                                                                            // 9340
									customButtonProps.themeIcon :                                                                                 // 9341
									options.themeButtonIcons[buttonName];                                                                         // 9342
                                                                                                                       // 9343
							normalIcon =                                                                                                    // 9344
								customButtonProps ?                                                                                            // 9345
									customButtonProps.icon :                                                                                      // 9346
									options.buttonIcons[buttonName];                                                                              // 9347
                                                                                                                       // 9348
							if (overrideText) {                                                                                             // 9349
								innerHtml = htmlEscape(overrideText);                                                                          // 9350
							}                                                                                                               // 9351
							else if (themeIcon && options.theme) {                                                                          // 9352
								innerHtml = "<span class='ui-icon ui-icon-" + themeIcon + "'></span>";                                         // 9353
							}                                                                                                               // 9354
							else if (normalIcon && !options.theme) {                                                                        // 9355
								innerHtml = "<span class='fc-icon fc-icon-" + normalIcon + "'></span>";                                        // 9356
							}                                                                                                               // 9357
							else {                                                                                                          // 9358
								innerHtml = htmlEscape(defaultText);                                                                           // 9359
							}                                                                                                               // 9360
                                                                                                                       // 9361
							classes = [                                                                                                     // 9362
								'fc-' + buttonName + '-button',                                                                                // 9363
								tm + '-button',                                                                                                // 9364
								tm + '-state-default'                                                                                          // 9365
							];                                                                                                              // 9366
                                                                                                                       // 9367
							button = $( // type="button" so that it doesn't submit a form                                                   // 9368
								'<button type="button" class="' + classes.join(' ') + '">' +                                                   // 9369
									innerHtml +                                                                                                   // 9370
								'</button>'                                                                                                    // 9371
								)                                                                                                              // 9372
								.click(function(ev) {                                                                                          // 9373
									// don't process clicks for disabled buttons                                                                  // 9374
									if (!button.hasClass(tm + '-state-disabled')) {                                                               // 9375
                                                                                                                       // 9376
										buttonClick(ev);                                                                                             // 9377
                                                                                                                       // 9378
										// after the click action, if the button becomes the "active" tab, or disabled,                              // 9379
										// it should never have a hover class, so remove it now.                                                     // 9380
										if (                                                                                                         // 9381
											button.hasClass(tm + '-state-active') ||                                                                    // 9382
											button.hasClass(tm + '-state-disabled')                                                                     // 9383
										) {                                                                                                          // 9384
											button.removeClass(tm + '-state-hover');                                                                    // 9385
										}                                                                                                            // 9386
									}                                                                                                             // 9387
								})                                                                                                             // 9388
								.mousedown(function() {                                                                                        // 9389
									// the *down* effect (mouse pressed in).                                                                      // 9390
									// only on buttons that are not the "active" tab, or disabled                                                 // 9391
									button                                                                                                        // 9392
										.not('.' + tm + '-state-active')                                                                             // 9393
										.not('.' + tm + '-state-disabled')                                                                           // 9394
										.addClass(tm + '-state-down');                                                                               // 9395
								})                                                                                                             // 9396
								.mouseup(function() {                                                                                          // 9397
									// undo the *down* effect                                                                                     // 9398
									button.removeClass(tm + '-state-down');                                                                       // 9399
								})                                                                                                             // 9400
								.hover(                                                                                                        // 9401
									function() {                                                                                                  // 9402
										// the *hover* effect.                                                                                       // 9403
										// only on buttons that are not the "active" tab, or disabled                                                // 9404
										button                                                                                                       // 9405
											.not('.' + tm + '-state-active')                                                                            // 9406
											.not('.' + tm + '-state-disabled')                                                                          // 9407
											.addClass(tm + '-state-hover');                                                                             // 9408
									},                                                                                                            // 9409
									function() {                                                                                                  // 9410
										// undo the *hover* effect                                                                                   // 9411
										button                                                                                                       // 9412
											.removeClass(tm + '-state-hover')                                                                           // 9413
											.removeClass(tm + '-state-down'); // if mouseleave happens before mouseup                                   // 9414
									}                                                                                                             // 9415
								);                                                                                                             // 9416
                                                                                                                       // 9417
							groupChildren = groupChildren.add(button);                                                                      // 9418
						}                                                                                                                // 9419
					}                                                                                                                 // 9420
				});                                                                                                                // 9421
                                                                                                                       // 9422
				if (isOnlyButtons) {                                                                                               // 9423
					groupChildren                                                                                                     // 9424
						.first().addClass(tm + '-corner-left').end()                                                                     // 9425
						.last().addClass(tm + '-corner-right').end();                                                                    // 9426
				}                                                                                                                  // 9427
                                                                                                                       // 9428
				if (groupChildren.length > 1) {                                                                                    // 9429
					groupEl = $('<div/>');                                                                                            // 9430
					if (isOnlyButtons) {                                                                                              // 9431
						groupEl.addClass('fc-button-group');                                                                             // 9432
					}                                                                                                                 // 9433
					groupEl.append(groupChildren);                                                                                    // 9434
					sectionEl.append(groupEl);                                                                                        // 9435
				}                                                                                                                  // 9436
				else {                                                                                                             // 9437
					sectionEl.append(groupChildren); // 1 or 0 children                                                               // 9438
				}                                                                                                                  // 9439
			});                                                                                                                 // 9440
		}                                                                                                                    // 9441
                                                                                                                       // 9442
		return sectionEl;                                                                                                    // 9443
	}                                                                                                                     // 9444
	                                                                                                                      // 9445
	                                                                                                                      // 9446
	function updateTitle(text) {                                                                                          // 9447
		el.find('h2').text(text);                                                                                            // 9448
	}                                                                                                                     // 9449
	                                                                                                                      // 9450
	                                                                                                                      // 9451
	function activateButton(buttonName) {                                                                                 // 9452
		el.find('.fc-' + buttonName + '-button')                                                                             // 9453
			.addClass(tm + '-state-active');                                                                                    // 9454
	}                                                                                                                     // 9455
	                                                                                                                      // 9456
	                                                                                                                      // 9457
	function deactivateButton(buttonName) {                                                                               // 9458
		el.find('.fc-' + buttonName + '-button')                                                                             // 9459
			.removeClass(tm + '-state-active');                                                                                 // 9460
	}                                                                                                                     // 9461
	                                                                                                                      // 9462
	                                                                                                                      // 9463
	function disableButton(buttonName) {                                                                                  // 9464
		el.find('.fc-' + buttonName + '-button')                                                                             // 9465
			.attr('disabled', 'disabled')                                                                                       // 9466
			.addClass(tm + '-state-disabled');                                                                                  // 9467
	}                                                                                                                     // 9468
	                                                                                                                      // 9469
	                                                                                                                      // 9470
	function enableButton(buttonName) {                                                                                   // 9471
		el.find('.fc-' + buttonName + '-button')                                                                             // 9472
			.removeAttr('disabled')                                                                                             // 9473
			.removeClass(tm + '-state-disabled');                                                                               // 9474
	}                                                                                                                     // 9475
                                                                                                                       // 9476
                                                                                                                       // 9477
	function getViewsWithButtons() {                                                                                      // 9478
		return viewsWithButtons;                                                                                             // 9479
	}                                                                                                                     // 9480
                                                                                                                       // 9481
}                                                                                                                      // 9482
                                                                                                                       // 9483
;;                                                                                                                     // 9484
                                                                                                                       // 9485
FC.sourceNormalizers = [];                                                                                             // 9486
FC.sourceFetchers = [];                                                                                                // 9487
                                                                                                                       // 9488
var ajaxDefaults = {                                                                                                   // 9489
	dataType: 'json',                                                                                                     // 9490
	cache: false                                                                                                          // 9491
};                                                                                                                     // 9492
                                                                                                                       // 9493
var eventGUID = 1;                                                                                                     // 9494
                                                                                                                       // 9495
                                                                                                                       // 9496
function EventManager(options) { // assumed to be a calendar                                                           // 9497
	var t = this;                                                                                                         // 9498
	                                                                                                                      // 9499
	                                                                                                                      // 9500
	// exports                                                                                                            // 9501
	t.isFetchNeeded = isFetchNeeded;                                                                                      // 9502
	t.fetchEvents = fetchEvents;                                                                                          // 9503
	t.addEventSource = addEventSource;                                                                                    // 9504
	t.removeEventSource = removeEventSource;                                                                              // 9505
	t.updateEvent = updateEvent;                                                                                          // 9506
	t.renderEvent = renderEvent;                                                                                          // 9507
	t.removeEvents = removeEvents;                                                                                        // 9508
	t.clientEvents = clientEvents;                                                                                        // 9509
	t.mutateEvent = mutateEvent;                                                                                          // 9510
	t.normalizeEventDates = normalizeEventDates;                                                                          // 9511
	t.normalizeEventTimes = normalizeEventTimes;                                                                          // 9512
	                                                                                                                      // 9513
	                                                                                                                      // 9514
	// imports                                                                                                            // 9515
	var reportEvents = t.reportEvents;                                                                                    // 9516
	                                                                                                                      // 9517
	                                                                                                                      // 9518
	// locals                                                                                                             // 9519
	var stickySource = { events: [] };                                                                                    // 9520
	var sources = [ stickySource ];                                                                                       // 9521
	var rangeStart, rangeEnd;                                                                                             // 9522
	var currentFetchID = 0;                                                                                               // 9523
	var pendingSourceCnt = 0;                                                                                             // 9524
	var cache = []; // holds events that have already been expanded                                                       // 9525
                                                                                                                       // 9526
                                                                                                                       // 9527
	$.each(                                                                                                               // 9528
		(options.events ? [ options.events ] : []).concat(options.eventSources || []),                                       // 9529
		function(i, sourceInput) {                                                                                           // 9530
			var source = buildEventSource(sourceInput);                                                                         // 9531
			if (source) {                                                                                                       // 9532
				sources.push(source);                                                                                              // 9533
			}                                                                                                                   // 9534
		}                                                                                                                    // 9535
	);                                                                                                                    // 9536
	                                                                                                                      // 9537
	                                                                                                                      // 9538
	                                                                                                                      // 9539
	/* Fetching                                                                                                           // 9540
	-----------------------------------------------------------------------------*/                                       // 9541
                                                                                                                       // 9542
                                                                                                                       // 9543
	// start and end are assumed to be unzoned                                                                            // 9544
	function isFetchNeeded(start, end) {                                                                                  // 9545
		return !rangeStart || // nothing has been fetched yet?                                                               // 9546
			start < rangeStart || end > rangeEnd; // is part of the new range outside of the old range?                         // 9547
	}                                                                                                                     // 9548
	                                                                                                                      // 9549
	                                                                                                                      // 9550
	function fetchEvents(start, end) {                                                                                    // 9551
		rangeStart = start;                                                                                                  // 9552
		rangeEnd = end;                                                                                                      // 9553
		cache = [];                                                                                                          // 9554
		var fetchID = ++currentFetchID;                                                                                      // 9555
		var len = sources.length;                                                                                            // 9556
		pendingSourceCnt = len;                                                                                              // 9557
		for (var i=0; i<len; i++) {                                                                                          // 9558
			fetchEventSource(sources[i], fetchID);                                                                              // 9559
		}                                                                                                                    // 9560
	}                                                                                                                     // 9561
	                                                                                                                      // 9562
	                                                                                                                      // 9563
	function fetchEventSource(source, fetchID) {                                                                          // 9564
		_fetchEventSource(source, function(eventInputs) {                                                                    // 9565
			var isArraySource = $.isArray(source.events);                                                                       // 9566
			var i, eventInput;                                                                                                  // 9567
			var abstractEvent;                                                                                                  // 9568
                                                                                                                       // 9569
			if (fetchID == currentFetchID) {                                                                                    // 9570
                                                                                                                       // 9571
				if (eventInputs) {                                                                                                 // 9572
					for (i = 0; i < eventInputs.length; i++) {                                                                        // 9573
						eventInput = eventInputs[i];                                                                                     // 9574
                                                                                                                       // 9575
						if (isArraySource) { // array sources have already been convert to Event Objects                                 // 9576
							abstractEvent = eventInput;                                                                                     // 9577
						}                                                                                                                // 9578
						else {                                                                                                           // 9579
							abstractEvent = buildEventFromInput(eventInput, source);                                                        // 9580
						}                                                                                                                // 9581
                                                                                                                       // 9582
						if (abstractEvent) { // not false (an invalid event)                                                             // 9583
							cache.push.apply(                                                                                               // 9584
								cache,                                                                                                         // 9585
								expandEvent(abstractEvent) // add individual expanded events to the cache                                      // 9586
							);                                                                                                              // 9587
						}                                                                                                                // 9588
					}                                                                                                                 // 9589
				}                                                                                                                  // 9590
                                                                                                                       // 9591
				pendingSourceCnt--;                                                                                                // 9592
				if (!pendingSourceCnt) {                                                                                           // 9593
					reportEvents(cache);                                                                                              // 9594
				}                                                                                                                  // 9595
			}                                                                                                                   // 9596
		});                                                                                                                  // 9597
	}                                                                                                                     // 9598
	                                                                                                                      // 9599
	                                                                                                                      // 9600
	function _fetchEventSource(source, callback) {                                                                        // 9601
		var i;                                                                                                               // 9602
		var fetchers = FC.sourceFetchers;                                                                                    // 9603
		var res;                                                                                                             // 9604
                                                                                                                       // 9605
		for (i=0; i<fetchers.length; i++) {                                                                                  // 9606
			res = fetchers[i].call(                                                                                             // 9607
				t, // this, the Calendar object                                                                                    // 9608
				source,                                                                                                            // 9609
				rangeStart.clone(),                                                                                                // 9610
				rangeEnd.clone(),                                                                                                  // 9611
				options.timezone,                                                                                                  // 9612
				callback                                                                                                           // 9613
			);                                                                                                                  // 9614
                                                                                                                       // 9615
			if (res === true) {                                                                                                 // 9616
				// the fetcher is in charge. made its own async request                                                            // 9617
				return;                                                                                                            // 9618
			}                                                                                                                   // 9619
			else if (typeof res == 'object') {                                                                                  // 9620
				// the fetcher returned a new source. process it                                                                   // 9621
				_fetchEventSource(res, callback);                                                                                  // 9622
				return;                                                                                                            // 9623
			}                                                                                                                   // 9624
		}                                                                                                                    // 9625
                                                                                                                       // 9626
		var events = source.events;                                                                                          // 9627
		if (events) {                                                                                                        // 9628
			if ($.isFunction(events)) {                                                                                         // 9629
				t.pushLoading();                                                                                                   // 9630
				events.call(                                                                                                       // 9631
					t, // this, the Calendar object                                                                                   // 9632
					rangeStart.clone(),                                                                                               // 9633
					rangeEnd.clone(),                                                                                                 // 9634
					options.timezone,                                                                                                 // 9635
					function(events) {                                                                                                // 9636
						callback(events);                                                                                                // 9637
						t.popLoading();                                                                                                  // 9638
					}                                                                                                                 // 9639
				);                                                                                                                 // 9640
			}                                                                                                                   // 9641
			else if ($.isArray(events)) {                                                                                       // 9642
				callback(events);                                                                                                  // 9643
			}                                                                                                                   // 9644
			else {                                                                                                              // 9645
				callback();                                                                                                        // 9646
			}                                                                                                                   // 9647
		}else{                                                                                                               // 9648
			var url = source.url;                                                                                               // 9649
			if (url) {                                                                                                          // 9650
				var success = source.success;                                                                                      // 9651
				var error = source.error;                                                                                          // 9652
				var complete = source.complete;                                                                                    // 9653
                                                                                                                       // 9654
				// retrieve any outbound GET/POST $.ajax data from the options                                                     // 9655
				var customData;                                                                                                    // 9656
				if ($.isFunction(source.data)) {                                                                                   // 9657
					// supplied as a function that returns a key/value object                                                         // 9658
					customData = source.data();                                                                                       // 9659
				}                                                                                                                  // 9660
				else {                                                                                                             // 9661
					// supplied as a straight key/value object                                                                        // 9662
					customData = source.data;                                                                                         // 9663
				}                                                                                                                  // 9664
                                                                                                                       // 9665
				// use a copy of the custom data so we can modify the parameters                                                   // 9666
				// and not affect the passed-in object.                                                                            // 9667
				var data = $.extend({}, customData || {});                                                                         // 9668
                                                                                                                       // 9669
				var startParam = firstDefined(source.startParam, options.startParam);                                              // 9670
				var endParam = firstDefined(source.endParam, options.endParam);                                                    // 9671
				var timezoneParam = firstDefined(source.timezoneParam, options.timezoneParam);                                     // 9672
                                                                                                                       // 9673
				if (startParam) {                                                                                                  // 9674
					data[startParam] = rangeStart.format();                                                                           // 9675
				}                                                                                                                  // 9676
				if (endParam) {                                                                                                    // 9677
					data[endParam] = rangeEnd.format();                                                                               // 9678
				}                                                                                                                  // 9679
				if (options.timezone && options.timezone != 'local') {                                                             // 9680
					data[timezoneParam] = options.timezone;                                                                           // 9681
				}                                                                                                                  // 9682
                                                                                                                       // 9683
				t.pushLoading();                                                                                                   // 9684
				$.ajax($.extend({}, ajaxDefaults, source, {                                                                        // 9685
					data: data,                                                                                                       // 9686
					success: function(events) {                                                                                       // 9687
						events = events || [];                                                                                           // 9688
						var res = applyAll(success, this, arguments);                                                                    // 9689
						if ($.isArray(res)) {                                                                                            // 9690
							events = res;                                                                                                   // 9691
						}                                                                                                                // 9692
						callback(events);                                                                                                // 9693
					},                                                                                                                // 9694
					error: function() {                                                                                               // 9695
						applyAll(error, this, arguments);                                                                                // 9696
						callback();                                                                                                      // 9697
					},                                                                                                                // 9698
					complete: function() {                                                                                            // 9699
						applyAll(complete, this, arguments);                                                                             // 9700
						t.popLoading();                                                                                                  // 9701
					}                                                                                                                 // 9702
				}));                                                                                                               // 9703
			}else{                                                                                                              // 9704
				callback();                                                                                                        // 9705
			}                                                                                                                   // 9706
		}                                                                                                                    // 9707
	}                                                                                                                     // 9708
	                                                                                                                      // 9709
	                                                                                                                      // 9710
	                                                                                                                      // 9711
	/* Sources                                                                                                            // 9712
	-----------------------------------------------------------------------------*/                                       // 9713
	                                                                                                                      // 9714
                                                                                                                       // 9715
	function addEventSource(sourceInput) {                                                                                // 9716
		var source = buildEventSource(sourceInput);                                                                          // 9717
		if (source) {                                                                                                        // 9718
			sources.push(source);                                                                                               // 9719
			pendingSourceCnt++;                                                                                                 // 9720
			fetchEventSource(source, currentFetchID); // will eventually call reportEvents                                      // 9721
		}                                                                                                                    // 9722
	}                                                                                                                     // 9723
                                                                                                                       // 9724
                                                                                                                       // 9725
	function buildEventSource(sourceInput) { // will return undefined if invalid source                                   // 9726
		var normalizers = FC.sourceNormalizers;                                                                              // 9727
		var source;                                                                                                          // 9728
		var i;                                                                                                               // 9729
                                                                                                                       // 9730
		if ($.isFunction(sourceInput) || $.isArray(sourceInput)) {                                                           // 9731
			source = { events: sourceInput };                                                                                   // 9732
		}                                                                                                                    // 9733
		else if (typeof sourceInput === 'string') {                                                                          // 9734
			source = { url: sourceInput };                                                                                      // 9735
		}                                                                                                                    // 9736
		else if (typeof sourceInput === 'object') {                                                                          // 9737
			source = $.extend({}, sourceInput); // shallow copy                                                                 // 9738
		}                                                                                                                    // 9739
                                                                                                                       // 9740
		if (source) {                                                                                                        // 9741
                                                                                                                       // 9742
			// TODO: repeat code, same code for event classNames                                                                // 9743
			if (source.className) {                                                                                             // 9744
				if (typeof source.className === 'string') {                                                                        // 9745
					source.className = source.className.split(/\s+/);                                                                 // 9746
				}                                                                                                                  // 9747
				// otherwise, assumed to be an array                                                                               // 9748
			}                                                                                                                   // 9749
			else {                                                                                                              // 9750
				source.className = [];                                                                                             // 9751
			}                                                                                                                   // 9752
                                                                                                                       // 9753
			// for array sources, we convert to standard Event Objects up front                                                 // 9754
			if ($.isArray(source.events)) {                                                                                     // 9755
				source.origArray = source.events; // for removeEventSource                                                         // 9756
				source.events = $.map(source.events, function(eventInput) {                                                        // 9757
					return buildEventFromInput(eventInput, source);                                                                   // 9758
				});                                                                                                                // 9759
			}                                                                                                                   // 9760
                                                                                                                       // 9761
			for (i=0; i<normalizers.length; i++) {                                                                              // 9762
				normalizers[i].call(t, source);                                                                                    // 9763
			}                                                                                                                   // 9764
                                                                                                                       // 9765
			return source;                                                                                                      // 9766
		}                                                                                                                    // 9767
	}                                                                                                                     // 9768
                                                                                                                       // 9769
                                                                                                                       // 9770
	function removeEventSource(source) {                                                                                  // 9771
		sources = $.grep(sources, function(src) {                                                                            // 9772
			return !isSourcesEqual(src, source);                                                                                // 9773
		});                                                                                                                  // 9774
		// remove all client events from that source                                                                         // 9775
		cache = $.grep(cache, function(e) {                                                                                  // 9776
			return !isSourcesEqual(e.source, source);                                                                           // 9777
		});                                                                                                                  // 9778
		reportEvents(cache);                                                                                                 // 9779
	}                                                                                                                     // 9780
                                                                                                                       // 9781
                                                                                                                       // 9782
	function isSourcesEqual(source1, source2) {                                                                           // 9783
		return source1 && source2 && getSourcePrimitive(source1) == getSourcePrimitive(source2);                             // 9784
	}                                                                                                                     // 9785
                                                                                                                       // 9786
                                                                                                                       // 9787
	function getSourcePrimitive(source) {                                                                                 // 9788
		return (                                                                                                             // 9789
			(typeof source === 'object') ? // a normalized event source?                                                        // 9790
				(source.origArray || source.googleCalendarId || source.url || source.events) : // get the primitive                // 9791
				null                                                                                                               // 9792
		) ||                                                                                                                 // 9793
		source; // the given argument *is* the primitive                                                                     // 9794
	}                                                                                                                     // 9795
	                                                                                                                      // 9796
	                                                                                                                      // 9797
	                                                                                                                      // 9798
	/* Manipulation                                                                                                       // 9799
	-----------------------------------------------------------------------------*/                                       // 9800
                                                                                                                       // 9801
                                                                                                                       // 9802
	// Only ever called from the externally-facing API                                                                    // 9803
	function updateEvent(event) {                                                                                         // 9804
                                                                                                                       // 9805
		// massage start/end values, even if date string values                                                              // 9806
		event.start = t.moment(event.start);                                                                                 // 9807
		if (event.end) {                                                                                                     // 9808
			event.end = t.moment(event.end);                                                                                    // 9809
		}                                                                                                                    // 9810
		else {                                                                                                               // 9811
			event.end = null;                                                                                                   // 9812
		}                                                                                                                    // 9813
                                                                                                                       // 9814
		mutateEvent(event, getMiscEventProps(event)); // will handle start/end/allDay normalization                          // 9815
		reportEvents(cache); // reports event modifications (so we can redraw)                                               // 9816
	}                                                                                                                     // 9817
                                                                                                                       // 9818
                                                                                                                       // 9819
	// Returns a hash of misc event properties that should be copied over to related events.                              // 9820
	function getMiscEventProps(event) {                                                                                   // 9821
		var props = {};                                                                                                      // 9822
                                                                                                                       // 9823
		$.each(event, function(name, val) {                                                                                  // 9824
			if (isMiscEventPropName(name)) {                                                                                    // 9825
				if (val !== undefined && isAtomic(val)) { // a defined non-object                                                  // 9826
					props[name] = val;                                                                                                // 9827
				}                                                                                                                  // 9828
			}                                                                                                                   // 9829
		});                                                                                                                  // 9830
                                                                                                                       // 9831
		return props;                                                                                                        // 9832
	}                                                                                                                     // 9833
                                                                                                                       // 9834
	// non-date-related, non-id-related, non-secret                                                                       // 9835
	function isMiscEventPropName(name) {                                                                                  // 9836
		return !/^_|^(id|allDay|start|end)$/.test(name);                                                                     // 9837
	}                                                                                                                     // 9838
                                                                                                                       // 9839
	                                                                                                                      // 9840
	// returns the expanded events that were created                                                                      // 9841
	function renderEvent(eventInput, stick) {                                                                             // 9842
		var abstractEvent = buildEventFromInput(eventInput);                                                                 // 9843
		var events;                                                                                                          // 9844
		var i, event;                                                                                                        // 9845
                                                                                                                       // 9846
		if (abstractEvent) { // not false (a valid input)                                                                    // 9847
			events = expandEvent(abstractEvent);                                                                                // 9848
                                                                                                                       // 9849
			for (i = 0; i < events.length; i++) {                                                                               // 9850
				event = events[i];                                                                                                 // 9851
                                                                                                                       // 9852
				if (!event.source) {                                                                                               // 9853
					if (stick) {                                                                                                      // 9854
						stickySource.events.push(event);                                                                                 // 9855
						event.source = stickySource;                                                                                     // 9856
					}                                                                                                                 // 9857
					cache.push(event);                                                                                                // 9858
				}                                                                                                                  // 9859
			}                                                                                                                   // 9860
                                                                                                                       // 9861
			reportEvents(cache);                                                                                                // 9862
                                                                                                                       // 9863
			return events;                                                                                                      // 9864
		}                                                                                                                    // 9865
                                                                                                                       // 9866
		return [];                                                                                                           // 9867
	}                                                                                                                     // 9868
	                                                                                                                      // 9869
	                                                                                                                      // 9870
	function removeEvents(filter) {                                                                                       // 9871
		var eventID;                                                                                                         // 9872
		var i;                                                                                                               // 9873
                                                                                                                       // 9874
		if (filter == null) { // null or undefined. remove all events                                                        // 9875
			filter = function() { return true; }; // will always match                                                          // 9876
		}                                                                                                                    // 9877
		else if (!$.isFunction(filter)) { // an event ID                                                                     // 9878
			eventID = filter + '';                                                                                              // 9879
			filter = function(event) {                                                                                          // 9880
				return event._id == eventID;                                                                                       // 9881
			};                                                                                                                  // 9882
		}                                                                                                                    // 9883
                                                                                                                       // 9884
		// Purge event(s) from our local cache                                                                               // 9885
		cache = $.grep(cache, filter, true); // inverse=true                                                                 // 9886
                                                                                                                       // 9887
		// Remove events from array sources.                                                                                 // 9888
		// This works because they have been converted to official Event Objects up front.                                   // 9889
		// (and as a result, event._id has been calculated).                                                                 // 9890
		for (i=0; i<sources.length; i++) {                                                                                   // 9891
			if ($.isArray(sources[i].events)) {                                                                                 // 9892
				sources[i].events = $.grep(sources[i].events, filter, true);                                                       // 9893
			}                                                                                                                   // 9894
		}                                                                                                                    // 9895
                                                                                                                       // 9896
		reportEvents(cache);                                                                                                 // 9897
	}                                                                                                                     // 9898
	                                                                                                                      // 9899
	                                                                                                                      // 9900
	function clientEvents(filter) {                                                                                       // 9901
		if ($.isFunction(filter)) {                                                                                          // 9902
			return $.grep(cache, filter);                                                                                       // 9903
		}                                                                                                                    // 9904
		else if (filter != null) { // not null, not undefined. an event ID                                                   // 9905
			filter += '';                                                                                                       // 9906
			return $.grep(cache, function(e) {                                                                                  // 9907
				return e._id == filter;                                                                                            // 9908
			});                                                                                                                 // 9909
		}                                                                                                                    // 9910
		return cache; // else, return all                                                                                    // 9911
	}                                                                                                                     // 9912
	                                                                                                                      // 9913
	                                                                                                                      // 9914
	                                                                                                                      // 9915
	/* Event Normalization                                                                                                // 9916
	-----------------------------------------------------------------------------*/                                       // 9917
                                                                                                                       // 9918
                                                                                                                       // 9919
	// Given a raw object with key/value properties, returns an "abstract" Event object.                                  // 9920
	// An "abstract" event is an event that, if recurring, will not have been expanded yet.                               // 9921
	// Will return `false` when input is invalid.                                                                         // 9922
	// `source` is optional                                                                                               // 9923
	function buildEventFromInput(input, source) {                                                                         // 9924
		var out = {};                                                                                                        // 9925
		var start, end;                                                                                                      // 9926
		var allDay;                                                                                                          // 9927
                                                                                                                       // 9928
		if (options.eventDataTransform) {                                                                                    // 9929
			input = options.eventDataTransform(input);                                                                          // 9930
		}                                                                                                                    // 9931
		if (source && source.eventDataTransform) {                                                                           // 9932
			input = source.eventDataTransform(input);                                                                           // 9933
		}                                                                                                                    // 9934
                                                                                                                       // 9935
		// Copy all properties over to the resulting object.                                                                 // 9936
		// The special-case properties will be copied over afterwards.                                                       // 9937
		$.extend(out, input);                                                                                                // 9938
                                                                                                                       // 9939
		if (source) {                                                                                                        // 9940
			out.source = source;                                                                                                // 9941
		}                                                                                                                    // 9942
                                                                                                                       // 9943
		out._id = input._id || (input.id === undefined ? '_fc' + eventGUID++ : input.id + '');                               // 9944
                                                                                                                       // 9945
		if (input.className) {                                                                                               // 9946
			if (typeof input.className == 'string') {                                                                           // 9947
				out.className = input.className.split(/\s+/);                                                                      // 9948
			}                                                                                                                   // 9949
			else { // assumed to be an array                                                                                    // 9950
				out.className = input.className;                                                                                   // 9951
			}                                                                                                                   // 9952
		}                                                                                                                    // 9953
		else {                                                                                                               // 9954
			out.className = [];                                                                                                 // 9955
		}                                                                                                                    // 9956
                                                                                                                       // 9957
		start = input.start || input.date; // "date" is an alias for "start"                                                 // 9958
		end = input.end;                                                                                                     // 9959
                                                                                                                       // 9960
		// parse as a time (Duration) if applicable                                                                          // 9961
		if (isTimeString(start)) {                                                                                           // 9962
			start = moment.duration(start);                                                                                     // 9963
		}                                                                                                                    // 9964
		if (isTimeString(end)) {                                                                                             // 9965
			end = moment.duration(end);                                                                                         // 9966
		}                                                                                                                    // 9967
                                                                                                                       // 9968
		if (input.dow || moment.isDuration(start) || moment.isDuration(end)) {                                               // 9969
                                                                                                                       // 9970
			// the event is "abstract" (recurring) so don't calculate exact start/end dates just yet                            // 9971
			out.start = start ? moment.duration(start) : null; // will be a Duration or null                                    // 9972
			out.end = end ? moment.duration(end) : null; // will be a Duration or null                                          // 9973
			out._recurring = true; // our internal marker                                                                       // 9974
		}                                                                                                                    // 9975
		else {                                                                                                               // 9976
                                                                                                                       // 9977
			if (start) {                                                                                                        // 9978
				start = t.moment(start);                                                                                           // 9979
				if (!start.isValid()) {                                                                                            // 9980
					return false;                                                                                                     // 9981
				}                                                                                                                  // 9982
			}                                                                                                                   // 9983
                                                                                                                       // 9984
			if (end) {                                                                                                          // 9985
				end = t.moment(end);                                                                                               // 9986
				if (!end.isValid()) {                                                                                              // 9987
					end = null; // let defaults take over                                                                             // 9988
				}                                                                                                                  // 9989
			}                                                                                                                   // 9990
                                                                                                                       // 9991
			allDay = input.allDay;                                                                                              // 9992
			if (allDay === undefined) { // still undefined? fallback to default                                                 // 9993
				allDay = firstDefined(                                                                                             // 9994
					source ? source.allDayDefault : undefined,                                                                        // 9995
					options.allDayDefault                                                                                             // 9996
				);                                                                                                                 // 9997
				// still undefined? normalizeEventDates will calculate it                                                          // 9998
			}                                                                                                                   // 9999
                                                                                                                       // 10000
			assignDatesToEvent(start, end, allDay, out);                                                                        // 10001
		}                                                                                                                    // 10002
                                                                                                                       // 10003
		return out;                                                                                                          // 10004
	}                                                                                                                     // 10005
                                                                                                                       // 10006
                                                                                                                       // 10007
	// Normalizes and assigns the given dates to the given partially-formed event object.                                 // 10008
	// NOTE: mutates the given start/end moments. does not make a copy.                                                   // 10009
	function assignDatesToEvent(start, end, allDay, event) {                                                              // 10010
		event.start = start;                                                                                                 // 10011
		event.end = end;                                                                                                     // 10012
		event.allDay = allDay;                                                                                               // 10013
		normalizeEventDates(event);                                                                                          // 10014
		backupEventDates(event);                                                                                             // 10015
	}                                                                                                                     // 10016
                                                                                                                       // 10017
                                                                                                                       // 10018
	// Ensures proper values for allDay/start/end. Accepts an Event object, or a plain object with event-ish properties.  // 10019
	// NOTE: Will modify the given object.                                                                                // 10020
	function normalizeEventDates(eventProps) {                                                                            // 10021
                                                                                                                       // 10022
		normalizeEventTimes(eventProps);                                                                                     // 10023
                                                                                                                       // 10024
		if (eventProps.end && !eventProps.end.isAfter(eventProps.start)) {                                                   // 10025
			eventProps.end = null;                                                                                              // 10026
		}                                                                                                                    // 10027
                                                                                                                       // 10028
		if (!eventProps.end) {                                                                                               // 10029
			if (options.forceEventDuration) {                                                                                   // 10030
				eventProps.end = t.getDefaultEventEnd(eventProps.allDay, eventProps.start);                                        // 10031
			}                                                                                                                   // 10032
			else {                                                                                                              // 10033
				eventProps.end = null;                                                                                             // 10034
			}                                                                                                                   // 10035
		}                                                                                                                    // 10036
	}                                                                                                                     // 10037
                                                                                                                       // 10038
                                                                                                                       // 10039
	// Ensures the allDay property exists and the timeliness of the start/end dates are consistent                        // 10040
	function normalizeEventTimes(eventProps) {                                                                            // 10041
		if (eventProps.allDay == null) {                                                                                     // 10042
			eventProps.allDay = !(eventProps.start.hasTime() || (eventProps.end && eventProps.end.hasTime()));                  // 10043
		}                                                                                                                    // 10044
                                                                                                                       // 10045
		if (eventProps.allDay) {                                                                                             // 10046
			eventProps.start.stripTime();                                                                                       // 10047
			if (eventProps.end) {                                                                                               // 10048
				// TODO: consider nextDayThreshold here? If so, will require a lot of testing and adjustment                       // 10049
				eventProps.end.stripTime();                                                                                        // 10050
			}                                                                                                                   // 10051
		}                                                                                                                    // 10052
		else {                                                                                                               // 10053
			if (!eventProps.start.hasTime()) {                                                                                  // 10054
				eventProps.start = t.applyTimezone(eventProps.start.time(0)); // will assign a 00:00 time                          // 10055
			}                                                                                                                   // 10056
			if (eventProps.end && !eventProps.end.hasTime()) {                                                                  // 10057
				eventProps.end = t.applyTimezone(eventProps.end.time(0)); // will assign a 00:00 time                              // 10058
			}                                                                                                                   // 10059
		}                                                                                                                    // 10060
	}                                                                                                                     // 10061
                                                                                                                       // 10062
                                                                                                                       // 10063
	// If the given event is a recurring event, break it down into an array of individual instances.                      // 10064
	// If not a recurring event, return an array with the single original event.                                          // 10065
	// If given a falsy input (probably because of a failed buildEventFromInput call), returns an empty array.            // 10066
	// HACK: can override the recurring window by providing custom rangeStart/rangeEnd (for businessHours).               // 10067
	function expandEvent(abstractEvent, _rangeStart, _rangeEnd) {                                                         // 10068
		var events = [];                                                                                                     // 10069
		var dowHash;                                                                                                         // 10070
		var dow;                                                                                                             // 10071
		var i;                                                                                                               // 10072
		var date;                                                                                                            // 10073
		var startTime, endTime;                                                                                              // 10074
		var start, end;                                                                                                      // 10075
		var event;                                                                                                           // 10076
                                                                                                                       // 10077
		_rangeStart = _rangeStart || rangeStart;                                                                             // 10078
		_rangeEnd = _rangeEnd || rangeEnd;                                                                                   // 10079
                                                                                                                       // 10080
		if (abstractEvent) {                                                                                                 // 10081
			if (abstractEvent._recurring) {                                                                                     // 10082
                                                                                                                       // 10083
				// make a boolean hash as to whether the event occurs on each day-of-week                                          // 10084
				if ((dow = abstractEvent.dow)) {                                                                                   // 10085
					dowHash = {};                                                                                                     // 10086
					for (i = 0; i < dow.length; i++) {                                                                                // 10087
						dowHash[dow[i]] = true;                                                                                          // 10088
					}                                                                                                                 // 10089
				}                                                                                                                  // 10090
                                                                                                                       // 10091
				// iterate through every day in the current range                                                                  // 10092
				date = _rangeStart.clone().stripTime(); // holds the date of the current day                                       // 10093
				while (date.isBefore(_rangeEnd)) {                                                                                 // 10094
                                                                                                                       // 10095
					if (!dowHash || dowHash[date.day()]) { // if everyday, or this particular day-of-week                             // 10096
                                                                                                                       // 10097
						startTime = abstractEvent.start; // the stored start and end properties are times (Durations)                    // 10098
						endTime = abstractEvent.end; // "                                                                                // 10099
						start = date.clone();                                                                                            // 10100
						end = null;                                                                                                      // 10101
                                                                                                                       // 10102
						if (startTime) {                                                                                                 // 10103
							start = start.time(startTime);                                                                                  // 10104
						}                                                                                                                // 10105
						if (endTime) {                                                                                                   // 10106
							end = date.clone().time(endTime);                                                                               // 10107
						}                                                                                                                // 10108
                                                                                                                       // 10109
						event = $.extend({}, abstractEvent); // make a copy of the original                                              // 10110
						assignDatesToEvent(                                                                                              // 10111
							start, end,                                                                                                     // 10112
							!startTime && !endTime, // allDay?                                                                              // 10113
							event                                                                                                           // 10114
						);                                                                                                               // 10115
						events.push(event);                                                                                              // 10116
					}                                                                                                                 // 10117
                                                                                                                       // 10118
					date.add(1, 'days');                                                                                              // 10119
				}                                                                                                                  // 10120
			}                                                                                                                   // 10121
			else {                                                                                                              // 10122
				events.push(abstractEvent); // return the original event. will be a one-item array                                 // 10123
			}                                                                                                                   // 10124
		}                                                                                                                    // 10125
                                                                                                                       // 10126
		return events;                                                                                                       // 10127
	}                                                                                                                     // 10128
                                                                                                                       // 10129
                                                                                                                       // 10130
                                                                                                                       // 10131
	/* Event Modification Math                                                                                            // 10132
	-----------------------------------------------------------------------------------------*/                           // 10133
                                                                                                                       // 10134
                                                                                                                       // 10135
	// Modifies an event and all related events by applying the given properties.                                         // 10136
	// Special date-diffing logic is used for manipulation of dates.                                                      // 10137
	// If `props` does not contain start/end dates, the updated values are assumed to be the event's current start/end.   // 10138
	// All date comparisons are done against the event's pristine _start and _end dates.                                  // 10139
	// Returns an object with delta information and a function to undo all operations.                                    // 10140
	// For making computations in a granularity greater than day/time, specify largeUnit.                                 // 10141
	// NOTE: The given `newProps` might be mutated for normalization purposes.                                            // 10142
	function mutateEvent(event, newProps, largeUnit) {                                                                    // 10143
		var miscProps = {};                                                                                                  // 10144
		var oldProps;                                                                                                        // 10145
		var clearEnd;                                                                                                        // 10146
		var startDelta;                                                                                                      // 10147
		var endDelta;                                                                                                        // 10148
		var durationDelta;                                                                                                   // 10149
		var undoFunc;                                                                                                        // 10150
                                                                                                                       // 10151
		// diffs the dates in the appropriate way, returning a duration                                                      // 10152
		function diffDates(date1, date0) { // date1 - date0                                                                  // 10153
			if (largeUnit) {                                                                                                    // 10154
				return diffByUnit(date1, date0, largeUnit);                                                                        // 10155
			}                                                                                                                   // 10156
			else if (newProps.allDay) {                                                                                         // 10157
				return diffDay(date1, date0);                                                                                      // 10158
			}                                                                                                                   // 10159
			else {                                                                                                              // 10160
				return diffDayTime(date1, date0);                                                                                  // 10161
			}                                                                                                                   // 10162
		}                                                                                                                    // 10163
                                                                                                                       // 10164
		newProps = newProps || {};                                                                                           // 10165
                                                                                                                       // 10166
		// normalize new date-related properties                                                                             // 10167
		if (!newProps.start) {                                                                                               // 10168
			newProps.start = event.start.clone();                                                                               // 10169
		}                                                                                                                    // 10170
		if (newProps.end === undefined) {                                                                                    // 10171
			newProps.end = event.end ? event.end.clone() : null;                                                                // 10172
		}                                                                                                                    // 10173
		if (newProps.allDay == null) { // is null or undefined?                                                              // 10174
			newProps.allDay = event.allDay;                                                                                     // 10175
		}                                                                                                                    // 10176
		normalizeEventDates(newProps);                                                                                       // 10177
                                                                                                                       // 10178
		// create normalized versions of the original props to compare against                                               // 10179
		// need a real end value, for diffing                                                                                // 10180
		oldProps = {                                                                                                         // 10181
			start: event._start.clone(),                                                                                        // 10182
			end: event._end ? event._end.clone() : t.getDefaultEventEnd(event._allDay, event._start),                           // 10183
			allDay: newProps.allDay // normalize the dates in the same regard as the new properties                             // 10184
		};                                                                                                                   // 10185
		normalizeEventDates(oldProps);                                                                                       // 10186
                                                                                                                       // 10187
		// need to clear the end date if explicitly changed to null                                                          // 10188
		clearEnd = event._end !== null && newProps.end === null;                                                             // 10189
                                                                                                                       // 10190
		// compute the delta for moving the start date                                                                       // 10191
		startDelta = diffDates(newProps.start, oldProps.start);                                                              // 10192
                                                                                                                       // 10193
		// compute the delta for moving the end date                                                                         // 10194
		if (newProps.end) {                                                                                                  // 10195
			endDelta = diffDates(newProps.end, oldProps.end);                                                                   // 10196
			durationDelta = endDelta.subtract(startDelta);                                                                      // 10197
		}                                                                                                                    // 10198
		else {                                                                                                               // 10199
			durationDelta = null;                                                                                               // 10200
		}                                                                                                                    // 10201
                                                                                                                       // 10202
		// gather all non-date-related properties                                                                            // 10203
		$.each(newProps, function(name, val) {                                                                               // 10204
			if (isMiscEventPropName(name)) {                                                                                    // 10205
				if (val !== undefined) {                                                                                           // 10206
					miscProps[name] = val;                                                                                            // 10207
				}                                                                                                                  // 10208
			}                                                                                                                   // 10209
		});                                                                                                                  // 10210
                                                                                                                       // 10211
		// apply the operations to the event and all related events                                                          // 10212
		undoFunc = mutateEvents(                                                                                             // 10213
			clientEvents(event._id), // get events with this ID                                                                 // 10214
			clearEnd,                                                                                                           // 10215
			newProps.allDay,                                                                                                    // 10216
			startDelta,                                                                                                         // 10217
			durationDelta,                                                                                                      // 10218
			miscProps                                                                                                           // 10219
		);                                                                                                                   // 10220
                                                                                                                       // 10221
		return {                                                                                                             // 10222
			dateDelta: startDelta,                                                                                              // 10223
			durationDelta: durationDelta,                                                                                       // 10224
			undo: undoFunc                                                                                                      // 10225
		};                                                                                                                   // 10226
	}                                                                                                                     // 10227
                                                                                                                       // 10228
                                                                                                                       // 10229
	// Modifies an array of events in the following ways (operations are in order):                                       // 10230
	// - clear the event's `end`                                                                                          // 10231
	// - convert the event to allDay                                                                                      // 10232
	// - add `dateDelta` to the start and end                                                                             // 10233
	// - add `durationDelta` to the event's duration                                                                      // 10234
	// - assign `miscProps` to the event                                                                                  // 10235
	//                                                                                                                    // 10236
	// Returns a function that can be called to undo all the operations.                                                  // 10237
	//                                                                                                                    // 10238
	// TODO: don't use so many closures. possible memory issues when lots of events with same ID.                         // 10239
	//                                                                                                                    // 10240
	function mutateEvents(events, clearEnd, allDay, dateDelta, durationDelta, miscProps) {                                // 10241
		var isAmbigTimezone = t.getIsAmbigTimezone();                                                                        // 10242
		var undoFunctions = [];                                                                                              // 10243
                                                                                                                       // 10244
		// normalize zero-length deltas to be null                                                                           // 10245
		if (dateDelta && !dateDelta.valueOf()) { dateDelta = null; }                                                         // 10246
		if (durationDelta && !durationDelta.valueOf()) { durationDelta = null; }                                             // 10247
                                                                                                                       // 10248
		$.each(events, function(i, event) {                                                                                  // 10249
			var oldProps;                                                                                                       // 10250
			var newProps;                                                                                                       // 10251
                                                                                                                       // 10252
			// build an object holding all the old values, both date-related and misc.                                          // 10253
			// for the undo function.                                                                                           // 10254
			oldProps = {                                                                                                        // 10255
				start: event.start.clone(),                                                                                        // 10256
				end: event.end ? event.end.clone() : null,                                                                         // 10257
				allDay: event.allDay                                                                                               // 10258
			};                                                                                                                  // 10259
			$.each(miscProps, function(name) {                                                                                  // 10260
				oldProps[name] = event[name];                                                                                      // 10261
			});                                                                                                                 // 10262
                                                                                                                       // 10263
			// new date-related properties. work off the original date snapshot.                                                // 10264
			// ok to use references because they will be thrown away when backupEventDates is called.                           // 10265
			newProps = {                                                                                                        // 10266
				start: event._start,                                                                                               // 10267
				end: event._end,                                                                                                   // 10268
				allDay: allDay // normalize the dates in the same regard as the new properties                                     // 10269
			};                                                                                                                  // 10270
			normalizeEventDates(newProps); // massages start/end/allDay                                                         // 10271
                                                                                                                       // 10272
			// strip or ensure the end date                                                                                     // 10273
			if (clearEnd) {                                                                                                     // 10274
				newProps.end = null;                                                                                               // 10275
			}                                                                                                                   // 10276
			else if (durationDelta && !newProps.end) { // the duration translation requires an end date                         // 10277
				newProps.end = t.getDefaultEventEnd(newProps.allDay, newProps.start);                                              // 10278
			}                                                                                                                   // 10279
                                                                                                                       // 10280
			if (dateDelta) {                                                                                                    // 10281
				newProps.start.add(dateDelta);                                                                                     // 10282
				if (newProps.end) {                                                                                                // 10283
					newProps.end.add(dateDelta);                                                                                      // 10284
				}                                                                                                                  // 10285
			}                                                                                                                   // 10286
                                                                                                                       // 10287
			if (durationDelta) {                                                                                                // 10288
				newProps.end.add(durationDelta); // end already ensured above                                                      // 10289
			}                                                                                                                   // 10290
                                                                                                                       // 10291
			// if the dates have changed, and we know it is impossible to recompute the                                         // 10292
			// timezone offsets, strip the zone.                                                                                // 10293
			if (                                                                                                                // 10294
				isAmbigTimezone &&                                                                                                 // 10295
				!newProps.allDay &&                                                                                                // 10296
				(dateDelta || durationDelta)                                                                                       // 10297
			) {                                                                                                                 // 10298
				newProps.start.stripZone();                                                                                        // 10299
				if (newProps.end) {                                                                                                // 10300
					newProps.end.stripZone();                                                                                         // 10301
				}                                                                                                                  // 10302
			}                                                                                                                   // 10303
                                                                                                                       // 10304
			$.extend(event, miscProps, newProps); // copy over misc props, then date-related props                              // 10305
			backupEventDates(event); // regenerate internal _start/_end/_allDay                                                 // 10306
                                                                                                                       // 10307
			undoFunctions.push(function() {                                                                                     // 10308
				$.extend(event, oldProps);                                                                                         // 10309
				backupEventDates(event); // regenerate internal _start/_end/_allDay                                                // 10310
			});                                                                                                                 // 10311
		});                                                                                                                  // 10312
                                                                                                                       // 10313
		return function() {                                                                                                  // 10314
			for (var i = 0; i < undoFunctions.length; i++) {                                                                    // 10315
				undoFunctions[i]();                                                                                                // 10316
			}                                                                                                                   // 10317
		};                                                                                                                   // 10318
	}                                                                                                                     // 10319
                                                                                                                       // 10320
                                                                                                                       // 10321
	/* Business Hours                                                                                                     // 10322
	-----------------------------------------------------------------------------------------*/                           // 10323
                                                                                                                       // 10324
	t.getBusinessHoursEvents = getBusinessHoursEvents;                                                                    // 10325
                                                                                                                       // 10326
                                                                                                                       // 10327
	// Returns an array of events as to when the business hours occur in the given view.                                  // 10328
	// Abuse of our event system :(                                                                                       // 10329
	function getBusinessHoursEvents(wholeDay) {                                                                           // 10330
		var optionVal = options.businessHours;                                                                               // 10331
		var defaultVal = {                                                                                                   // 10332
			className: 'fc-nonbusiness',                                                                                        // 10333
			start: '09:00',                                                                                                     // 10334
			end: '17:00',                                                                                                       // 10335
			dow: [ 1, 2, 3, 4, 5 ], // monday - friday                                                                          // 10336
			rendering: 'inverse-background'                                                                                     // 10337
		};                                                                                                                   // 10338
		var view = t.getView();                                                                                              // 10339
		var eventInput;                                                                                                      // 10340
                                                                                                                       // 10341
		if (optionVal) { // `true` (which means "use the defaults") or an override object                                    // 10342
			eventInput = $.extend(                                                                                              // 10343
				{}, // copy to a new object in either case                                                                         // 10344
				defaultVal,                                                                                                        // 10345
				typeof optionVal === 'object' ? optionVal : {} // override the defaults                                            // 10346
			);                                                                                                                  // 10347
		}                                                                                                                    // 10348
                                                                                                                       // 10349
		if (eventInput) {                                                                                                    // 10350
                                                                                                                       // 10351
			// if a whole-day series is requested, clear the start/end times                                                    // 10352
			if (wholeDay) {                                                                                                     // 10353
				eventInput.start = null;                                                                                           // 10354
				eventInput.end = null;                                                                                             // 10355
			}                                                                                                                   // 10356
                                                                                                                       // 10357
			return expandEvent(                                                                                                 // 10358
				buildEventFromInput(eventInput),                                                                                   // 10359
				view.start,                                                                                                        // 10360
				view.end                                                                                                           // 10361
			);                                                                                                                  // 10362
		}                                                                                                                    // 10363
                                                                                                                       // 10364
		return [];                                                                                                           // 10365
	}                                                                                                                     // 10366
                                                                                                                       // 10367
                                                                                                                       // 10368
	/* Overlapping / Constraining                                                                                         // 10369
	-----------------------------------------------------------------------------------------*/                           // 10370
                                                                                                                       // 10371
	t.isEventSpanAllowed = isEventSpanAllowed;                                                                            // 10372
	t.isExternalSpanAllowed = isExternalSpanAllowed;                                                                      // 10373
	t.isSelectionSpanAllowed = isSelectionSpanAllowed;                                                                    // 10374
                                                                                                                       // 10375
                                                                                                                       // 10376
	// Determines if the given event can be relocated to the given span (unzoned start/end with other misc data)          // 10377
	function isEventSpanAllowed(span, event) {                                                                            // 10378
		var source = event.source || {};                                                                                     // 10379
		var constraint = firstDefined(                                                                                       // 10380
			event.constraint,                                                                                                   // 10381
			source.constraint,                                                                                                  // 10382
			options.eventConstraint                                                                                             // 10383
		);                                                                                                                   // 10384
		var overlap = firstDefined(                                                                                          // 10385
			event.overlap,                                                                                                      // 10386
			source.overlap,                                                                                                     // 10387
			options.eventOverlap                                                                                                // 10388
		);                                                                                                                   // 10389
		return isSpanAllowed(span, constraint, overlap, event);                                                              // 10390
	}                                                                                                                     // 10391
                                                                                                                       // 10392
                                                                                                                       // 10393
	// Determines if an external event can be relocated to the given span (unzoned start/end with other misc data)        // 10394
	function isExternalSpanAllowed(eventSpan, eventLocation, eventProps) {                                                // 10395
		var eventInput;                                                                                                      // 10396
		var event;                                                                                                           // 10397
                                                                                                                       // 10398
		// note: very similar logic is in View's reportExternalDrop                                                          // 10399
		if (eventProps) {                                                                                                    // 10400
			eventInput = $.extend({}, eventProps, eventLocation);                                                               // 10401
			event = expandEvent(buildEventFromInput(eventInput))[0];                                                            // 10402
		}                                                                                                                    // 10403
                                                                                                                       // 10404
		if (event) {                                                                                                         // 10405
			return isEventSpanAllowed(eventSpan, event);                                                                        // 10406
		}                                                                                                                    // 10407
		else { // treat it as a selection                                                                                    // 10408
                                                                                                                       // 10409
			return isSelectionSpanAllowed(eventSpan);                                                                           // 10410
		}                                                                                                                    // 10411
	}                                                                                                                     // 10412
                                                                                                                       // 10413
                                                                                                                       // 10414
	// Determines the given span (unzoned start/end with other misc data) can be selected.                                // 10415
	function isSelectionSpanAllowed(span) {                                                                               // 10416
		return isSpanAllowed(span, options.selectConstraint, options.selectOverlap);                                         // 10417
	}                                                                                                                     // 10418
                                                                                                                       // 10419
                                                                                                                       // 10420
	// Returns true if the given span (caused by an event drop/resize or a selection) is allowed to exist                 // 10421
	// according to the constraint/overlap settings.                                                                      // 10422
	// `event` is not required if checking a selection.                                                                   // 10423
	function isSpanAllowed(span, constraint, overlap, event) {                                                            // 10424
		var constraintEvents;                                                                                                // 10425
		var anyContainment;                                                                                                  // 10426
		var peerEvents;                                                                                                      // 10427
		var i, peerEvent;                                                                                                    // 10428
		var peerOverlap;                                                                                                     // 10429
                                                                                                                       // 10430
		// the range must be fully contained by at least one of produced constraint events                                   // 10431
		if (constraint != null) {                                                                                            // 10432
                                                                                                                       // 10433
			// not treated as an event! intermediate data structure                                                             // 10434
			// TODO: use ranges in the future                                                                                   // 10435
			constraintEvents = constraintToEvents(constraint);                                                                  // 10436
                                                                                                                       // 10437
			anyContainment = false;                                                                                             // 10438
			for (i = 0; i < constraintEvents.length; i++) {                                                                     // 10439
				if (eventContainsRange(constraintEvents[i], span)) {                                                               // 10440
					anyContainment = true;                                                                                            // 10441
					break;                                                                                                            // 10442
				}                                                                                                                  // 10443
			}                                                                                                                   // 10444
                                                                                                                       // 10445
			if (!anyContainment) {                                                                                              // 10446
				return false;                                                                                                      // 10447
			}                                                                                                                   // 10448
		}                                                                                                                    // 10449
                                                                                                                       // 10450
		peerEvents = t.getPeerEvents(span, event);                                                                           // 10451
                                                                                                                       // 10452
		for (i = 0; i < peerEvents.length; i++)  {                                                                           // 10453
			peerEvent = peerEvents[i];                                                                                          // 10454
                                                                                                                       // 10455
			// there needs to be an actual intersection before disallowing anything                                             // 10456
			if (eventIntersectsRange(peerEvent, span)) {                                                                        // 10457
                                                                                                                       // 10458
				// evaluate overlap for the given range and short-circuit if necessary                                             // 10459
				if (overlap === false) {                                                                                           // 10460
					return false;                                                                                                     // 10461
				}                                                                                                                  // 10462
				// if the event's overlap is a test function, pass the peer event in question as the first param                   // 10463
				else if (typeof overlap === 'function' && !overlap(peerEvent, event)) {                                            // 10464
					return false;                                                                                                     // 10465
				}                                                                                                                  // 10466
                                                                                                                       // 10467
				// if we are computing if the given range is allowable for an event, consider the other event's                    // 10468
				// EventObject-specific or Source-specific `overlap` property                                                      // 10469
				if (event) {                                                                                                       // 10470
					peerOverlap = firstDefined(                                                                                       // 10471
						peerEvent.overlap,                                                                                               // 10472
						(peerEvent.source || {}).overlap                                                                                 // 10473
						// we already considered the global `eventOverlap`                                                               // 10474
					);                                                                                                                // 10475
					if (peerOverlap === false) {                                                                                      // 10476
						return false;                                                                                                    // 10477
					}                                                                                                                 // 10478
					// if the peer event's overlap is a test function, pass the subject event as the first param                      // 10479
					if (typeof peerOverlap === 'function' && !peerOverlap(event, peerEvent)) {                                        // 10480
						return false;                                                                                                    // 10481
					}                                                                                                                 // 10482
				}                                                                                                                  // 10483
			}                                                                                                                   // 10484
		}                                                                                                                    // 10485
                                                                                                                       // 10486
		return true;                                                                                                         // 10487
	}                                                                                                                     // 10488
                                                                                                                       // 10489
                                                                                                                       // 10490
	// Given an event input from the API, produces an array of event objects. Possible event inputs:                      // 10491
	// 'businessHours'                                                                                                    // 10492
	// An event ID (number or string)                                                                                     // 10493
	// An object with specific start/end dates or a recurring event (like what businessHours accepts)                     // 10494
	function constraintToEvents(constraintInput) {                                                                        // 10495
                                                                                                                       // 10496
		if (constraintInput === 'businessHours') {                                                                           // 10497
			return getBusinessHoursEvents();                                                                                    // 10498
		}                                                                                                                    // 10499
                                                                                                                       // 10500
		if (typeof constraintInput === 'object') {                                                                           // 10501
			return expandEvent(buildEventFromInput(constraintInput));                                                           // 10502
		}                                                                                                                    // 10503
                                                                                                                       // 10504
		return clientEvents(constraintInput); // probably an ID                                                              // 10505
	}                                                                                                                     // 10506
                                                                                                                       // 10507
                                                                                                                       // 10508
	// Does the event's date range fully contain the given range?                                                         // 10509
	// start/end already assumed to have stripped zones :(                                                                // 10510
	function eventContainsRange(event, range) {                                                                           // 10511
		var eventStart = event.start.clone().stripZone();                                                                    // 10512
		var eventEnd = t.getEventEnd(event).stripZone();                                                                     // 10513
                                                                                                                       // 10514
		return range.start >= eventStart && range.end <= eventEnd;                                                           // 10515
	}                                                                                                                     // 10516
                                                                                                                       // 10517
                                                                                                                       // 10518
	// Does the event's date range intersect with the given range?                                                        // 10519
	// start/end already assumed to have stripped zones :(                                                                // 10520
	function eventIntersectsRange(event, range) {                                                                         // 10521
		var eventStart = event.start.clone().stripZone();                                                                    // 10522
		var eventEnd = t.getEventEnd(event).stripZone();                                                                     // 10523
                                                                                                                       // 10524
		return range.start < eventEnd && range.end > eventStart;                                                             // 10525
	}                                                                                                                     // 10526
                                                                                                                       // 10527
                                                                                                                       // 10528
	t.getEventCache = function() {                                                                                        // 10529
		return cache;                                                                                                        // 10530
	};                                                                                                                    // 10531
                                                                                                                       // 10532
}                                                                                                                      // 10533
                                                                                                                       // 10534
                                                                                                                       // 10535
// Returns a list of events that the given event should be compared against when being considered for a move to        // 10536
// the specified span. Attached to the Calendar's prototype because EventManager is a mixin for a Calendar.            // 10537
Calendar.prototype.getPeerEvents = function(span, event) {                                                             // 10538
	var cache = this.getEventCache();                                                                                     // 10539
	var peerEvents = [];                                                                                                  // 10540
	var i, otherEvent;                                                                                                    // 10541
                                                                                                                       // 10542
	for (i = 0; i < cache.length; i++) {                                                                                  // 10543
		otherEvent = cache[i];                                                                                               // 10544
		if (                                                                                                                 // 10545
			!event ||                                                                                                           // 10546
			event._id !== otherEvent._id // don't compare the event to itself or other related [repeating] events               // 10547
		) {                                                                                                                  // 10548
			peerEvents.push(otherEvent);                                                                                        // 10549
		}                                                                                                                    // 10550
	}                                                                                                                     // 10551
                                                                                                                       // 10552
	return peerEvents;                                                                                                    // 10553
};                                                                                                                     // 10554
                                                                                                                       // 10555
                                                                                                                       // 10556
// updates the "backup" properties, which are preserved in order to compute diffs later on.                            // 10557
function backupEventDates(event) {                                                                                     // 10558
	event._allDay = event.allDay;                                                                                         // 10559
	event._start = event.start.clone();                                                                                   // 10560
	event._end = event.end ? event.end.clone() : null;                                                                    // 10561
}                                                                                                                      // 10562
                                                                                                                       // 10563
;;                                                                                                                     // 10564
                                                                                                                       // 10565
/* An abstract class for the "basic" views, as well as month view. Renders one or more rows of day cells.              // 10566
----------------------------------------------------------------------------------------------------------------------*/
// It is a manager for a DayGrid subcomponent, which does most of the heavy lifting.                                   // 10568
// It is responsible for managing width/height.                                                                        // 10569
                                                                                                                       // 10570
var BasicView = FC.BasicView = View.extend({                                                                           // 10571
                                                                                                                       // 10572
	dayGridClass: DayGrid, // class the dayGrid will be instantiated from (overridable by subclasses)                     // 10573
	dayGrid: null, // the main subcomponent that does most of the heavy lifting                                           // 10574
                                                                                                                       // 10575
	dayNumbersVisible: false, // display day numbers on each day cell?                                                    // 10576
	weekNumbersVisible: false, // display week numbers along the side?                                                    // 10577
                                                                                                                       // 10578
	weekNumberWidth: null, // width of all the week-number cells running down the side                                    // 10579
                                                                                                                       // 10580
	headContainerEl: null, // div that hold's the dayGrid's rendered date header                                          // 10581
	headRowEl: null, // the fake row element of the day-of-week header                                                    // 10582
                                                                                                                       // 10583
                                                                                                                       // 10584
	initialize: function() {                                                                                              // 10585
		this.dayGrid = this.instantiateDayGrid();                                                                            // 10586
	},                                                                                                                    // 10587
                                                                                                                       // 10588
                                                                                                                       // 10589
	// Generates the DayGrid object this view needs. Draws from this.dayGridClass                                         // 10590
	instantiateDayGrid: function() {                                                                                      // 10591
		// generate a subclass on the fly with BasicView-specific behavior                                                   // 10592
		// TODO: cache this subclass                                                                                         // 10593
		var subclass = this.dayGridClass.extend(basicDayGridMethods);                                                        // 10594
                                                                                                                       // 10595
		return new subclass(this);                                                                                           // 10596
	},                                                                                                                    // 10597
                                                                                                                       // 10598
                                                                                                                       // 10599
	// Sets the display range and computes all necessary dates                                                            // 10600
	setRange: function(range) {                                                                                           // 10601
		View.prototype.setRange.call(this, range); // call the super-method                                                  // 10602
                                                                                                                       // 10603
		this.dayGrid.breakOnWeeks = /year|month|week/.test(this.intervalUnit); // do before setRange                         // 10604
		this.dayGrid.setRange(range);                                                                                        // 10605
	},                                                                                                                    // 10606
                                                                                                                       // 10607
                                                                                                                       // 10608
	// Compute the value to feed into setRange. Overrides superclass.                                                     // 10609
	computeRange: function(date) {                                                                                        // 10610
		var range = View.prototype.computeRange.call(this, date); // get value from the super-method                         // 10611
                                                                                                                       // 10612
		// year and month views should be aligned with weeks. this is already done for week                                  // 10613
		if (/year|month/.test(range.intervalUnit)) {                                                                         // 10614
			range.start.startOf('week');                                                                                        // 10615
			range.start = this.skipHiddenDays(range.start);                                                                     // 10616
                                                                                                                       // 10617
			// make end-of-week if not already                                                                                  // 10618
			if (range.end.weekday()) {                                                                                          // 10619
				range.end.add(1, 'week').startOf('week');                                                                          // 10620
				range.end = this.skipHiddenDays(range.end, -1, true); // exclusively move backwards                                // 10621
			}                                                                                                                   // 10622
		}                                                                                                                    // 10623
                                                                                                                       // 10624
		return range;                                                                                                        // 10625
	},                                                                                                                    // 10626
                                                                                                                       // 10627
                                                                                                                       // 10628
	// Renders the view into `this.el`, which should already be assigned                                                  // 10629
	renderDates: function() {                                                                                             // 10630
                                                                                                                       // 10631
		this.dayNumbersVisible = this.dayGrid.rowCnt > 1; // TODO: make grid responsible                                     // 10632
		this.weekNumbersVisible = this.opt('weekNumbers');                                                                   // 10633
		this.dayGrid.numbersVisible = this.dayNumbersVisible || this.weekNumbersVisible;                                     // 10634
                                                                                                                       // 10635
		this.el.addClass('fc-basic-view').html(this.renderSkeletonHtml());                                                   // 10636
		this.renderHead();                                                                                                   // 10637
                                                                                                                       // 10638
		this.scrollerEl = this.el.find('.fc-day-grid-container');                                                            // 10639
                                                                                                                       // 10640
		this.dayGrid.setElement(this.el.find('.fc-day-grid'));                                                               // 10641
		this.dayGrid.renderDates(this.hasRigidRows());                                                                       // 10642
	},                                                                                                                    // 10643
                                                                                                                       // 10644
                                                                                                                       // 10645
	// render the day-of-week headers                                                                                     // 10646
	renderHead: function() {                                                                                              // 10647
		this.headContainerEl =                                                                                               // 10648
			this.el.find('.fc-head-container')                                                                                  // 10649
				.html(this.dayGrid.renderHeadHtml());                                                                              // 10650
		this.headRowEl = this.headContainerEl.find('.fc-row');                                                               // 10651
	},                                                                                                                    // 10652
                                                                                                                       // 10653
                                                                                                                       // 10654
	// Unrenders the content of the view. Since we haven't separated skeleton rendering from date rendering,              // 10655
	// always completely kill the dayGrid's rendering.                                                                    // 10656
	unrenderDates: function() {                                                                                           // 10657
		this.dayGrid.unrenderDates();                                                                                        // 10658
		this.dayGrid.removeElement();                                                                                        // 10659
	},                                                                                                                    // 10660
                                                                                                                       // 10661
                                                                                                                       // 10662
	renderBusinessHours: function() {                                                                                     // 10663
		this.dayGrid.renderBusinessHours();                                                                                  // 10664
	},                                                                                                                    // 10665
                                                                                                                       // 10666
                                                                                                                       // 10667
	// Builds the HTML skeleton for the view.                                                                             // 10668
	// The day-grid component will render inside of a container defined by this HTML.                                     // 10669
	renderSkeletonHtml: function() {                                                                                      // 10670
		return '' +                                                                                                          // 10671
			'<table>' +                                                                                                         // 10672
				'<thead class="fc-head">' +                                                                                        // 10673
					'<tr>' +                                                                                                          // 10674
						'<td class="fc-head-container ' + this.widgetHeaderClass + '"></td>' +                                           // 10675
					'</tr>' +                                                                                                         // 10676
				'</thead>' +                                                                                                       // 10677
				'<tbody class="fc-body">' +                                                                                        // 10678
					'<tr>' +                                                                                                          // 10679
						'<td class="' + this.widgetContentClass + '">' +                                                                 // 10680
							'<div class="fc-day-grid-container">' +                                                                         // 10681
								'<div class="fc-day-grid"/>' +                                                                                 // 10682
							'</div>' +                                                                                                      // 10683
						'</td>' +                                                                                                        // 10684
					'</tr>' +                                                                                                         // 10685
				'</tbody>' +                                                                                                       // 10686
			'</table>';                                                                                                         // 10687
	},                                                                                                                    // 10688
                                                                                                                       // 10689
                                                                                                                       // 10690
	// Generates an HTML attribute string for setting the width of the week number column, if it is known                 // 10691
	weekNumberStyleAttr: function() {                                                                                     // 10692
		if (this.weekNumberWidth !== null) {                                                                                 // 10693
			return 'style="width:' + this.weekNumberWidth + 'px"';                                                              // 10694
		}                                                                                                                    // 10695
		return '';                                                                                                           // 10696
	},                                                                                                                    // 10697
                                                                                                                       // 10698
                                                                                                                       // 10699
	// Determines whether each row should have a constant height                                                          // 10700
	hasRigidRows: function() {                                                                                            // 10701
		var eventLimit = this.opt('eventLimit');                                                                             // 10702
		return eventLimit && typeof eventLimit !== 'number';                                                                 // 10703
	},                                                                                                                    // 10704
                                                                                                                       // 10705
                                                                                                                       // 10706
	/* Dimensions                                                                                                         // 10707
	------------------------------------------------------------------------------------------------------------------*/  // 10708
                                                                                                                       // 10709
                                                                                                                       // 10710
	// Refreshes the horizontal dimensions of the view                                                                    // 10711
	updateWidth: function() {                                                                                             // 10712
		if (this.weekNumbersVisible) {                                                                                       // 10713
			// Make sure all week number cells running down the side have the same width.                                       // 10714
			// Record the width for cells created later.                                                                        // 10715
			this.weekNumberWidth = matchCellWidths(                                                                             // 10716
				this.el.find('.fc-week-number')                                                                                    // 10717
			);                                                                                                                  // 10718
		}                                                                                                                    // 10719
	},                                                                                                                    // 10720
                                                                                                                       // 10721
                                                                                                                       // 10722
	// Adjusts the vertical dimensions of the view to the specified values                                                // 10723
	setHeight: function(totalHeight, isAuto) {                                                                            // 10724
		var eventLimit = this.opt('eventLimit');                                                                             // 10725
		var scrollerHeight;                                                                                                  // 10726
                                                                                                                       // 10727
		// reset all heights to be natural                                                                                   // 10728
		unsetScroller(this.scrollerEl);                                                                                      // 10729
		uncompensateScroll(this.headRowEl);                                                                                  // 10730
                                                                                                                       // 10731
		this.dayGrid.removeSegPopover(); // kill the "more" popover if displayed                                             // 10732
                                                                                                                       // 10733
		// is the event limit a constant level number?                                                                       // 10734
		if (eventLimit && typeof eventLimit === 'number') {                                                                  // 10735
			this.dayGrid.limitRows(eventLimit); // limit the levels first so the height can redistribute after                  // 10736
		}                                                                                                                    // 10737
                                                                                                                       // 10738
		scrollerHeight = this.computeScrollerHeight(totalHeight);                                                            // 10739
		this.setGridHeight(scrollerHeight, isAuto);                                                                          // 10740
                                                                                                                       // 10741
		// is the event limit dynamically calculated?                                                                        // 10742
		if (eventLimit && typeof eventLimit !== 'number') {                                                                  // 10743
			this.dayGrid.limitRows(eventLimit); // limit the levels after the grid's row heights have been set                  // 10744
		}                                                                                                                    // 10745
                                                                                                                       // 10746
		if (!isAuto && setPotentialScroller(this.scrollerEl, scrollerHeight)) { // using scrollbars?                         // 10747
                                                                                                                       // 10748
			compensateScroll(this.headRowEl, getScrollbarWidths(this.scrollerEl));                                              // 10749
                                                                                                                       // 10750
			// doing the scrollbar compensation might have created text overflow which created more height. redo                // 10751
			scrollerHeight = this.computeScrollerHeight(totalHeight);                                                           // 10752
			this.scrollerEl.height(scrollerHeight);                                                                             // 10753
		}                                                                                                                    // 10754
	},                                                                                                                    // 10755
                                                                                                                       // 10756
                                                                                                                       // 10757
	// Sets the height of just the DayGrid component in this view                                                         // 10758
	setGridHeight: function(height, isAuto) {                                                                             // 10759
		if (isAuto) {                                                                                                        // 10760
			undistributeHeight(this.dayGrid.rowEls); // let the rows be their natural height with no expanding                  // 10761
		}                                                                                                                    // 10762
		else {                                                                                                               // 10763
			distributeHeight(this.dayGrid.rowEls, height, true); // true = compensate for height-hogging rows                   // 10764
		}                                                                                                                    // 10765
	},                                                                                                                    // 10766
                                                                                                                       // 10767
                                                                                                                       // 10768
	/* Hit Areas                                                                                                          // 10769
	------------------------------------------------------------------------------------------------------------------*/  // 10770
	// forward all hit-related method calls to dayGrid                                                                    // 10771
                                                                                                                       // 10772
                                                                                                                       // 10773
	prepareHits: function() {                                                                                             // 10774
		this.dayGrid.prepareHits();                                                                                          // 10775
	},                                                                                                                    // 10776
                                                                                                                       // 10777
                                                                                                                       // 10778
	releaseHits: function() {                                                                                             // 10779
		this.dayGrid.releaseHits();                                                                                          // 10780
	},                                                                                                                    // 10781
                                                                                                                       // 10782
                                                                                                                       // 10783
	queryHit: function(left, top) {                                                                                       // 10784
		return this.dayGrid.queryHit(left, top);                                                                             // 10785
	},                                                                                                                    // 10786
                                                                                                                       // 10787
                                                                                                                       // 10788
	getHitSpan: function(hit) {                                                                                           // 10789
		return this.dayGrid.getHitSpan(hit);                                                                                 // 10790
	},                                                                                                                    // 10791
                                                                                                                       // 10792
                                                                                                                       // 10793
	getHitEl: function(hit) {                                                                                             // 10794
		return this.dayGrid.getHitEl(hit);                                                                                   // 10795
	},                                                                                                                    // 10796
                                                                                                                       // 10797
                                                                                                                       // 10798
	/* Events                                                                                                             // 10799
	------------------------------------------------------------------------------------------------------------------*/  // 10800
                                                                                                                       // 10801
                                                                                                                       // 10802
	// Renders the given events onto the view and populates the segments array                                            // 10803
	renderEvents: function(events) {                                                                                      // 10804
		this.dayGrid.renderEvents(events);                                                                                   // 10805
                                                                                                                       // 10806
		this.updateHeight(); // must compensate for events that overflow the row                                             // 10807
	},                                                                                                                    // 10808
                                                                                                                       // 10809
                                                                                                                       // 10810
	// Retrieves all segment objects that are rendered in the view                                                        // 10811
	getEventSegs: function() {                                                                                            // 10812
		return this.dayGrid.getEventSegs();                                                                                  // 10813
	},                                                                                                                    // 10814
                                                                                                                       // 10815
                                                                                                                       // 10816
	// Unrenders all event elements and clears internal segment data                                                      // 10817
	unrenderEvents: function() {                                                                                          // 10818
		this.dayGrid.unrenderEvents();                                                                                       // 10819
                                                                                                                       // 10820
		// we DON'T need to call updateHeight() because:                                                                     // 10821
		// A) a renderEvents() call always happens after this, which will eventually call updateHeight()                     // 10822
		// B) in IE8, this causes a flash whenever events are rerendered                                                     // 10823
	},                                                                                                                    // 10824
                                                                                                                       // 10825
                                                                                                                       // 10826
	/* Dragging (for both events and external elements)                                                                   // 10827
	------------------------------------------------------------------------------------------------------------------*/  // 10828
                                                                                                                       // 10829
                                                                                                                       // 10830
	// A returned value of `true` signals that a mock "helper" event has been rendered.                                   // 10831
	renderDrag: function(dropLocation, seg) {                                                                             // 10832
		return this.dayGrid.renderDrag(dropLocation, seg);                                                                   // 10833
	},                                                                                                                    // 10834
                                                                                                                       // 10835
                                                                                                                       // 10836
	unrenderDrag: function() {                                                                                            // 10837
		this.dayGrid.unrenderDrag();                                                                                         // 10838
	},                                                                                                                    // 10839
                                                                                                                       // 10840
                                                                                                                       // 10841
	/* Selection                                                                                                          // 10842
	------------------------------------------------------------------------------------------------------------------*/  // 10843
                                                                                                                       // 10844
                                                                                                                       // 10845
	// Renders a visual indication of a selection                                                                         // 10846
	renderSelection: function(span) {                                                                                     // 10847
		this.dayGrid.renderSelection(span);                                                                                  // 10848
	},                                                                                                                    // 10849
                                                                                                                       // 10850
                                                                                                                       // 10851
	// Unrenders a visual indications of a selection                                                                      // 10852
	unrenderSelection: function() {                                                                                       // 10853
		this.dayGrid.unrenderSelection();                                                                                    // 10854
	}                                                                                                                     // 10855
                                                                                                                       // 10856
});                                                                                                                    // 10857
                                                                                                                       // 10858
                                                                                                                       // 10859
// Methods that will customize the rendering behavior of the BasicView's dayGrid                                       // 10860
var basicDayGridMethods = {                                                                                            // 10861
                                                                                                                       // 10862
                                                                                                                       // 10863
	// Generates the HTML that will go before the day-of week header cells                                                // 10864
	renderHeadIntroHtml: function() {                                                                                     // 10865
		var view = this.view;                                                                                                // 10866
                                                                                                                       // 10867
		if (view.weekNumbersVisible) {                                                                                       // 10868
			return '' +                                                                                                         // 10869
				'<th class="fc-week-number ' + view.widgetHeaderClass + '" ' + view.weekNumberStyleAttr() + '>' +                  // 10870
					'<span>' + // needed for matchCellWidths                                                                          // 10871
						htmlEscape(view.opt('weekNumberTitle')) +                                                                        // 10872
					'</span>' +                                                                                                       // 10873
				'</th>';                                                                                                           // 10874
		}                                                                                                                    // 10875
                                                                                                                       // 10876
		return '';                                                                                                           // 10877
	},                                                                                                                    // 10878
                                                                                                                       // 10879
                                                                                                                       // 10880
	// Generates the HTML that will go before content-skeleton cells that display the day/week numbers                    // 10881
	renderNumberIntroHtml: function(row) {                                                                                // 10882
		var view = this.view;                                                                                                // 10883
                                                                                                                       // 10884
		if (view.weekNumbersVisible) {                                                                                       // 10885
			return '' +                                                                                                         // 10886
				'<td class="fc-week-number" ' + view.weekNumberStyleAttr() + '>' +                                                 // 10887
					'<span>' + // needed for matchCellWidths                                                                          // 10888
						this.getCellDate(row, 0).format('w') +                                                                           // 10889
					'</span>' +                                                                                                       // 10890
				'</td>';                                                                                                           // 10891
		}                                                                                                                    // 10892
                                                                                                                       // 10893
		return '';                                                                                                           // 10894
	},                                                                                                                    // 10895
                                                                                                                       // 10896
                                                                                                                       // 10897
	// Generates the HTML that goes before the day bg cells for each day-row                                              // 10898
	renderBgIntroHtml: function() {                                                                                       // 10899
		var view = this.view;                                                                                                // 10900
                                                                                                                       // 10901
		if (view.weekNumbersVisible) {                                                                                       // 10902
			return '<td class="fc-week-number ' + view.widgetContentClass + '" ' +                                              // 10903
				view.weekNumberStyleAttr() + '></td>';                                                                             // 10904
		}                                                                                                                    // 10905
                                                                                                                       // 10906
		return '';                                                                                                           // 10907
	},                                                                                                                    // 10908
                                                                                                                       // 10909
                                                                                                                       // 10910
	// Generates the HTML that goes before every other type of row generated by DayGrid.                                  // 10911
	// Affects helper-skeleton and highlight-skeleton rows.                                                               // 10912
	renderIntroHtml: function() {                                                                                         // 10913
		var view = this.view;                                                                                                // 10914
                                                                                                                       // 10915
		if (view.weekNumbersVisible) {                                                                                       // 10916
			return '<td class="fc-week-number" ' + view.weekNumberStyleAttr() + '></td>';                                       // 10917
		}                                                                                                                    // 10918
                                                                                                                       // 10919
		return '';                                                                                                           // 10920
	}                                                                                                                     // 10921
                                                                                                                       // 10922
};                                                                                                                     // 10923
                                                                                                                       // 10924
;;                                                                                                                     // 10925
                                                                                                                       // 10926
/* A month view with day cells running in rows (one-per-week) and columns                                              // 10927
----------------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 10929
var MonthView = FC.MonthView = BasicView.extend({                                                                      // 10930
                                                                                                                       // 10931
	// Produces information about what range to display                                                                   // 10932
	computeRange: function(date) {                                                                                        // 10933
		var range = BasicView.prototype.computeRange.call(this, date); // get value from super-method                        // 10934
		var rowCnt;                                                                                                          // 10935
                                                                                                                       // 10936
		// ensure 6 weeks                                                                                                    // 10937
		if (this.isFixedWeeks()) {                                                                                           // 10938
			rowCnt = Math.ceil(range.end.diff(range.start, 'weeks', true)); // could be partial weeks due to hiddenDays         // 10939
			range.end.add(6 - rowCnt, 'weeks');                                                                                 // 10940
		}                                                                                                                    // 10941
                                                                                                                       // 10942
		return range;                                                                                                        // 10943
	},                                                                                                                    // 10944
                                                                                                                       // 10945
                                                                                                                       // 10946
	// Overrides the default BasicView behavior to have special multi-week auto-height logic                              // 10947
	setGridHeight: function(height, isAuto) {                                                                             // 10948
                                                                                                                       // 10949
		isAuto = isAuto || this.opt('weekMode') === 'variable'; // LEGACY: weekMode is deprecated                            // 10950
                                                                                                                       // 10951
		// if auto, make the height of each row the height that it would be if there were 6 weeks                            // 10952
		if (isAuto) {                                                                                                        // 10953
			height *= this.rowCnt / 6;                                                                                          // 10954
		}                                                                                                                    // 10955
                                                                                                                       // 10956
		distributeHeight(this.dayGrid.rowEls, height, !isAuto); // if auto, don't compensate for height-hogging rows         // 10957
	},                                                                                                                    // 10958
                                                                                                                       // 10959
                                                                                                                       // 10960
	isFixedWeeks: function() {                                                                                            // 10961
		var weekMode = this.opt('weekMode'); // LEGACY: weekMode is deprecated                                               // 10962
		if (weekMode) {                                                                                                      // 10963
			return weekMode === 'fixed'; // if any other type of weekMode, assume NOT fixed                                     // 10964
		}                                                                                                                    // 10965
                                                                                                                       // 10966
		return this.opt('fixedWeekCount');                                                                                   // 10967
	}                                                                                                                     // 10968
                                                                                                                       // 10969
});                                                                                                                    // 10970
                                                                                                                       // 10971
;;                                                                                                                     // 10972
                                                                                                                       // 10973
fcViews.basic = {                                                                                                      // 10974
	'class': BasicView                                                                                                    // 10975
};                                                                                                                     // 10976
                                                                                                                       // 10977
fcViews.basicDay = {                                                                                                   // 10978
	type: 'basic',                                                                                                        // 10979
	duration: { days: 1 }                                                                                                 // 10980
};                                                                                                                     // 10981
                                                                                                                       // 10982
fcViews.basicWeek = {                                                                                                  // 10983
	type: 'basic',                                                                                                        // 10984
	duration: { weeks: 1 }                                                                                                // 10985
};                                                                                                                     // 10986
                                                                                                                       // 10987
fcViews.month = {                                                                                                      // 10988
	'class': MonthView,                                                                                                   // 10989
	duration: { months: 1 }, // important for prev/next                                                                   // 10990
	defaults: {                                                                                                           // 10991
		fixedWeekCount: true                                                                                                 // 10992
	}                                                                                                                     // 10993
};                                                                                                                     // 10994
;;                                                                                                                     // 10995
                                                                                                                       // 10996
/* An abstract class for all agenda-related views. Displays one more columns with time slots running vertically.       // 10997
----------------------------------------------------------------------------------------------------------------------*/
// Is a manager for the TimeGrid subcomponent and possibly the DayGrid subcomponent (if allDaySlot is on).             // 10999
// Responsible for managing width/height.                                                                              // 11000
                                                                                                                       // 11001
var AgendaView = FC.AgendaView = View.extend({                                                                         // 11002
                                                                                                                       // 11003
	timeGridClass: TimeGrid, // class used to instantiate the timeGrid. subclasses can override                           // 11004
	timeGrid: null, // the main time-grid subcomponent of this view                                                       // 11005
                                                                                                                       // 11006
	dayGridClass: DayGrid, // class used to instantiate the dayGrid. subclasses can override                              // 11007
	dayGrid: null, // the "all-day" subcomponent. if all-day is turned off, this will be null                             // 11008
                                                                                                                       // 11009
	axisWidth: null, // the width of the time axis running down the side                                                  // 11010
                                                                                                                       // 11011
	headContainerEl: null, // div that hold's the timeGrid's rendered date header                                         // 11012
	noScrollRowEls: null, // set of fake row elements that must compensate when scrollerEl has scrollbars                 // 11013
                                                                                                                       // 11014
	// when the time-grid isn't tall enough to occupy the given height, we render an <hr> underneath                      // 11015
	bottomRuleEl: null,                                                                                                   // 11016
	bottomRuleHeight: null,                                                                                               // 11017
                                                                                                                       // 11018
                                                                                                                       // 11019
	initialize: function() {                                                                                              // 11020
		this.timeGrid = this.instantiateTimeGrid();                                                                          // 11021
                                                                                                                       // 11022
		if (this.opt('allDaySlot')) { // should we display the "all-day" area?                                               // 11023
			this.dayGrid = this.instantiateDayGrid(); // the all-day subcomponent of this view                                  // 11024
		}                                                                                                                    // 11025
	},                                                                                                                    // 11026
                                                                                                                       // 11027
                                                                                                                       // 11028
	// Instantiates the TimeGrid object this view needs. Draws from this.timeGridClass                                    // 11029
	instantiateTimeGrid: function() {                                                                                     // 11030
		var subclass = this.timeGridClass.extend(agendaTimeGridMethods);                                                     // 11031
                                                                                                                       // 11032
		return new subclass(this);                                                                                           // 11033
	},                                                                                                                    // 11034
                                                                                                                       // 11035
                                                                                                                       // 11036
	// Instantiates the DayGrid object this view might need. Draws from this.dayGridClass                                 // 11037
	instantiateDayGrid: function() {                                                                                      // 11038
		var subclass = this.dayGridClass.extend(agendaDayGridMethods);                                                       // 11039
                                                                                                                       // 11040
		return new subclass(this);                                                                                           // 11041
	},                                                                                                                    // 11042
                                                                                                                       // 11043
                                                                                                                       // 11044
	/* Rendering                                                                                                          // 11045
	------------------------------------------------------------------------------------------------------------------*/  // 11046
                                                                                                                       // 11047
                                                                                                                       // 11048
	// Sets the display range and computes all necessary dates                                                            // 11049
	setRange: function(range) {                                                                                           // 11050
		View.prototype.setRange.call(this, range); // call the super-method                                                  // 11051
                                                                                                                       // 11052
		this.timeGrid.setRange(range);                                                                                       // 11053
		if (this.dayGrid) {                                                                                                  // 11054
			this.dayGrid.setRange(range);                                                                                       // 11055
		}                                                                                                                    // 11056
	},                                                                                                                    // 11057
                                                                                                                       // 11058
                                                                                                                       // 11059
	// Renders the view into `this.el`, which has already been assigned                                                   // 11060
	renderDates: function() {                                                                                             // 11061
                                                                                                                       // 11062
		this.el.addClass('fc-agenda-view').html(this.renderSkeletonHtml());                                                  // 11063
		this.renderHead();                                                                                                   // 11064
                                                                                                                       // 11065
		// the element that wraps the time-grid that will probably scroll                                                    // 11066
		this.scrollerEl = this.el.find('.fc-time-grid-container');                                                           // 11067
                                                                                                                       // 11068
		this.timeGrid.setElement(this.el.find('.fc-time-grid'));                                                             // 11069
		this.timeGrid.renderDates();                                                                                         // 11070
                                                                                                                       // 11071
		// the <hr> that sometimes displays under the time-grid                                                              // 11072
		this.bottomRuleEl = $('<hr class="fc-divider ' + this.widgetHeaderClass + '"/>')                                     // 11073
			.appendTo(this.timeGrid.el); // inject it into the time-grid                                                        // 11074
                                                                                                                       // 11075
		if (this.dayGrid) {                                                                                                  // 11076
			this.dayGrid.setElement(this.el.find('.fc-day-grid'));                                                              // 11077
			this.dayGrid.renderDates();                                                                                         // 11078
                                                                                                                       // 11079
			// have the day-grid extend it's coordinate area over the <hr> dividing the two grids                               // 11080
			this.dayGrid.bottomCoordPadding = this.dayGrid.el.next('hr').outerHeight();                                         // 11081
		}                                                                                                                    // 11082
                                                                                                                       // 11083
		this.noScrollRowEls = this.el.find('.fc-row:not(.fc-scroller *)'); // fake rows not within the scroller              // 11084
	},                                                                                                                    // 11085
                                                                                                                       // 11086
                                                                                                                       // 11087
	// render the day-of-week headers                                                                                     // 11088
	renderHead: function() {                                                                                              // 11089
		this.headContainerEl =                                                                                               // 11090
			this.el.find('.fc-head-container')                                                                                  // 11091
				.html(this.timeGrid.renderHeadHtml());                                                                             // 11092
	},                                                                                                                    // 11093
                                                                                                                       // 11094
                                                                                                                       // 11095
	// Unrenders the content of the view. Since we haven't separated skeleton rendering from date rendering,              // 11096
	// always completely kill each grid's rendering.                                                                      // 11097
	unrenderDates: function() {                                                                                           // 11098
		this.timeGrid.unrenderDates();                                                                                       // 11099
		this.timeGrid.removeElement();                                                                                       // 11100
                                                                                                                       // 11101
		if (this.dayGrid) {                                                                                                  // 11102
			this.dayGrid.unrenderDates();                                                                                       // 11103
			this.dayGrid.removeElement();                                                                                       // 11104
		}                                                                                                                    // 11105
	},                                                                                                                    // 11106
                                                                                                                       // 11107
                                                                                                                       // 11108
	renderBusinessHours: function() {                                                                                     // 11109
		this.timeGrid.renderBusinessHours();                                                                                 // 11110
                                                                                                                       // 11111
		if (this.dayGrid) {                                                                                                  // 11112
			this.dayGrid.renderBusinessHours();                                                                                 // 11113
		}                                                                                                                    // 11114
	},                                                                                                                    // 11115
                                                                                                                       // 11116
                                                                                                                       // 11117
	// Builds the HTML skeleton for the view.                                                                             // 11118
	// The day-grid and time-grid components will render inside containers defined by this HTML.                          // 11119
	renderSkeletonHtml: function() {                                                                                      // 11120
		return '' +                                                                                                          // 11121
			'<table>' +                                                                                                         // 11122
				'<thead class="fc-head">' +                                                                                        // 11123
					'<tr>' +                                                                                                          // 11124
						'<td class="fc-head-container ' + this.widgetHeaderClass + '"></td>' +                                           // 11125
					'</tr>' +                                                                                                         // 11126
				'</thead>' +                                                                                                       // 11127
				'<tbody class="fc-body">' +                                                                                        // 11128
					'<tr>' +                                                                                                          // 11129
						'<td class="' + this.widgetContentClass + '">' +                                                                 // 11130
							(this.dayGrid ?                                                                                                 // 11131
								'<div class="fc-day-grid"/>' +                                                                                 // 11132
								'<hr class="fc-divider ' + this.widgetHeaderClass + '"/>' :                                                    // 11133
								''                                                                                                             // 11134
								) +                                                                                                            // 11135
							'<div class="fc-time-grid-container">' +                                                                        // 11136
								'<div class="fc-time-grid"/>' +                                                                                // 11137
							'</div>' +                                                                                                      // 11138
						'</td>' +                                                                                                        // 11139
					'</tr>' +                                                                                                         // 11140
				'</tbody>' +                                                                                                       // 11141
			'</table>';                                                                                                         // 11142
	},                                                                                                                    // 11143
                                                                                                                       // 11144
                                                                                                                       // 11145
	// Generates an HTML attribute string for setting the width of the axis, if it is known                               // 11146
	axisStyleAttr: function() {                                                                                           // 11147
		if (this.axisWidth !== null) {                                                                                       // 11148
			 return 'style="width:' + this.axisWidth + 'px"';                                                                   // 11149
		}                                                                                                                    // 11150
		return '';                                                                                                           // 11151
	},                                                                                                                    // 11152
                                                                                                                       // 11153
                                                                                                                       // 11154
	/* Dimensions                                                                                                         // 11155
	------------------------------------------------------------------------------------------------------------------*/  // 11156
                                                                                                                       // 11157
                                                                                                                       // 11158
	updateSize: function(isResize) {                                                                                      // 11159
		this.timeGrid.updateSize(isResize);                                                                                  // 11160
                                                                                                                       // 11161
		View.prototype.updateSize.call(this, isResize); // call the super-method                                             // 11162
	},                                                                                                                    // 11163
                                                                                                                       // 11164
                                                                                                                       // 11165
	// Refreshes the horizontal dimensions of the view                                                                    // 11166
	updateWidth: function() {                                                                                             // 11167
		// make all axis cells line up, and record the width so newly created axis cells will have it                        // 11168
		this.axisWidth = matchCellWidths(this.el.find('.fc-axis'));                                                          // 11169
	},                                                                                                                    // 11170
                                                                                                                       // 11171
                                                                                                                       // 11172
	// Adjusts the vertical dimensions of the view to the specified values                                                // 11173
	setHeight: function(totalHeight, isAuto) {                                                                            // 11174
		var eventLimit;                                                                                                      // 11175
		var scrollerHeight;                                                                                                  // 11176
                                                                                                                       // 11177
		if (this.bottomRuleHeight === null) {                                                                                // 11178
			// calculate the height of the rule the very first time                                                             // 11179
			this.bottomRuleHeight = this.bottomRuleEl.outerHeight();                                                            // 11180
		}                                                                                                                    // 11181
		this.bottomRuleEl.hide(); // .show() will be called later if this <hr> is necessary                                  // 11182
                                                                                                                       // 11183
		// reset all dimensions back to the original state                                                                   // 11184
		this.scrollerEl.css('overflow', '');                                                                                 // 11185
		unsetScroller(this.scrollerEl);                                                                                      // 11186
		uncompensateScroll(this.noScrollRowEls);                                                                             // 11187
                                                                                                                       // 11188
		// limit number of events in the all-day area                                                                        // 11189
		if (this.dayGrid) {                                                                                                  // 11190
			this.dayGrid.removeSegPopover(); // kill the "more" popover if displayed                                            // 11191
                                                                                                                       // 11192
			eventLimit = this.opt('eventLimit');                                                                                // 11193
			if (eventLimit && typeof eventLimit !== 'number') {                                                                 // 11194
				eventLimit = AGENDA_ALL_DAY_EVENT_LIMIT; // make sure "auto" goes to a real number                                 // 11195
			}                                                                                                                   // 11196
			if (eventLimit) {                                                                                                   // 11197
				this.dayGrid.limitRows(eventLimit);                                                                                // 11198
			}                                                                                                                   // 11199
		}                                                                                                                    // 11200
                                                                                                                       // 11201
		if (!isAuto) { // should we force dimensions of the scroll container, or let the contents be natural height?         // 11202
                                                                                                                       // 11203
			scrollerHeight = this.computeScrollerHeight(totalHeight);                                                           // 11204
			if (setPotentialScroller(this.scrollerEl, scrollerHeight)) { // using scrollbars?                                   // 11205
                                                                                                                       // 11206
				// make the all-day and header rows lines up                                                                       // 11207
				compensateScroll(this.noScrollRowEls, getScrollbarWidths(this.scrollerEl));                                        // 11208
                                                                                                                       // 11209
				// the scrollbar compensation might have changed text flow, which might affect height, so recalculate              // 11210
				// and reapply the desired height to the scroller.                                                                 // 11211
				scrollerHeight = this.computeScrollerHeight(totalHeight);                                                          // 11212
				this.scrollerEl.height(scrollerHeight);                                                                            // 11213
			}                                                                                                                   // 11214
			else { // no scrollbars                                                                                             // 11215
				// still, force a height and display the bottom rule (marks the end of day)                                        // 11216
				this.scrollerEl.height(scrollerHeight).css('overflow', 'hidden'); // in case <hr> goes outside                     // 11217
				this.bottomRuleEl.show();                                                                                          // 11218
			}                                                                                                                   // 11219
		}                                                                                                                    // 11220
	},                                                                                                                    // 11221
                                                                                                                       // 11222
                                                                                                                       // 11223
	// Computes the initial pre-configured scroll state prior to allowing the user to change it                           // 11224
	computeInitialScroll: function() {                                                                                    // 11225
		var scrollTime = moment.duration(this.opt('scrollTime'));                                                            // 11226
		var top = this.timeGrid.computeTimeTop(scrollTime);                                                                  // 11227
                                                                                                                       // 11228
		// zoom can give weird floating-point values. rather scroll a little bit further                                     // 11229
		top = Math.ceil(top);                                                                                                // 11230
                                                                                                                       // 11231
		if (top) {                                                                                                           // 11232
			top++; // to overcome top border that slots beyond the first have. looks better                                     // 11233
		}                                                                                                                    // 11234
                                                                                                                       // 11235
		return top;                                                                                                          // 11236
	},                                                                                                                    // 11237
                                                                                                                       // 11238
                                                                                                                       // 11239
	/* Hit Areas                                                                                                          // 11240
	------------------------------------------------------------------------------------------------------------------*/  // 11241
	// forward all hit-related method calls to the grids (dayGrid might not be defined)                                   // 11242
                                                                                                                       // 11243
                                                                                                                       // 11244
	prepareHits: function() {                                                                                             // 11245
		this.timeGrid.prepareHits();                                                                                         // 11246
		if (this.dayGrid) {                                                                                                  // 11247
			this.dayGrid.prepareHits();                                                                                         // 11248
		}                                                                                                                    // 11249
	},                                                                                                                    // 11250
                                                                                                                       // 11251
                                                                                                                       // 11252
	releaseHits: function() {                                                                                             // 11253
		this.timeGrid.releaseHits();                                                                                         // 11254
		if (this.dayGrid) {                                                                                                  // 11255
			this.dayGrid.releaseHits();                                                                                         // 11256
		}                                                                                                                    // 11257
	},                                                                                                                    // 11258
                                                                                                                       // 11259
                                                                                                                       // 11260
	queryHit: function(left, top) {                                                                                       // 11261
		var hit = this.timeGrid.queryHit(left, top);                                                                         // 11262
                                                                                                                       // 11263
		if (!hit && this.dayGrid) {                                                                                          // 11264
			hit = this.dayGrid.queryHit(left, top);                                                                             // 11265
		}                                                                                                                    // 11266
                                                                                                                       // 11267
		return hit;                                                                                                          // 11268
	},                                                                                                                    // 11269
                                                                                                                       // 11270
                                                                                                                       // 11271
	getHitSpan: function(hit) {                                                                                           // 11272
		// TODO: hit.component is set as a hack to identify where the hit came from                                          // 11273
		return hit.component.getHitSpan(hit);                                                                                // 11274
	},                                                                                                                    // 11275
                                                                                                                       // 11276
                                                                                                                       // 11277
	getHitEl: function(hit) {                                                                                             // 11278
		// TODO: hit.component is set as a hack to identify where the hit came from                                          // 11279
		return hit.component.getHitEl(hit);                                                                                  // 11280
	},                                                                                                                    // 11281
                                                                                                                       // 11282
                                                                                                                       // 11283
	/* Events                                                                                                             // 11284
	------------------------------------------------------------------------------------------------------------------*/  // 11285
                                                                                                                       // 11286
                                                                                                                       // 11287
	// Renders events onto the view and populates the View's segment array                                                // 11288
	renderEvents: function(events) {                                                                                      // 11289
		var dayEvents = [];                                                                                                  // 11290
		var timedEvents = [];                                                                                                // 11291
		var daySegs = [];                                                                                                    // 11292
		var timedSegs;                                                                                                       // 11293
		var i;                                                                                                               // 11294
                                                                                                                       // 11295
		// separate the events into all-day and timed                                                                        // 11296
		for (i = 0; i < events.length; i++) {                                                                                // 11297
			if (events[i].allDay) {                                                                                             // 11298
				dayEvents.push(events[i]);                                                                                         // 11299
			}                                                                                                                   // 11300
			else {                                                                                                              // 11301
				timedEvents.push(events[i]);                                                                                       // 11302
			}                                                                                                                   // 11303
		}                                                                                                                    // 11304
                                                                                                                       // 11305
		// render the events in the subcomponents                                                                            // 11306
		timedSegs = this.timeGrid.renderEvents(timedEvents);                                                                 // 11307
		if (this.dayGrid) {                                                                                                  // 11308
			daySegs = this.dayGrid.renderEvents(dayEvents);                                                                     // 11309
		}                                                                                                                    // 11310
                                                                                                                       // 11311
		// the all-day area is flexible and might have a lot of events, so shift the height                                  // 11312
		this.updateHeight();                                                                                                 // 11313
	},                                                                                                                    // 11314
                                                                                                                       // 11315
                                                                                                                       // 11316
	// Retrieves all segment objects that are rendered in the view                                                        // 11317
	getEventSegs: function() {                                                                                            // 11318
		return this.timeGrid.getEventSegs().concat(                                                                          // 11319
			this.dayGrid ? this.dayGrid.getEventSegs() : []                                                                     // 11320
		);                                                                                                                   // 11321
	},                                                                                                                    // 11322
                                                                                                                       // 11323
                                                                                                                       // 11324
	// Unrenders all event elements and clears internal segment data                                                      // 11325
	unrenderEvents: function() {                                                                                          // 11326
                                                                                                                       // 11327
		// unrender the events in the subcomponents                                                                          // 11328
		this.timeGrid.unrenderEvents();                                                                                      // 11329
		if (this.dayGrid) {                                                                                                  // 11330
			this.dayGrid.unrenderEvents();                                                                                      // 11331
		}                                                                                                                    // 11332
                                                                                                                       // 11333
		// we DON'T need to call updateHeight() because:                                                                     // 11334
		// A) a renderEvents() call always happens after this, which will eventually call updateHeight()                     // 11335
		// B) in IE8, this causes a flash whenever events are rerendered                                                     // 11336
	},                                                                                                                    // 11337
                                                                                                                       // 11338
                                                                                                                       // 11339
	/* Dragging (for events and external elements)                                                                        // 11340
	------------------------------------------------------------------------------------------------------------------*/  // 11341
                                                                                                                       // 11342
                                                                                                                       // 11343
	// A returned value of `true` signals that a mock "helper" event has been rendered.                                   // 11344
	renderDrag: function(dropLocation, seg) {                                                                             // 11345
		if (dropLocation.start.hasTime()) {                                                                                  // 11346
			return this.timeGrid.renderDrag(dropLocation, seg);                                                                 // 11347
		}                                                                                                                    // 11348
		else if (this.dayGrid) {                                                                                             // 11349
			return this.dayGrid.renderDrag(dropLocation, seg);                                                                  // 11350
		}                                                                                                                    // 11351
	},                                                                                                                    // 11352
                                                                                                                       // 11353
                                                                                                                       // 11354
	unrenderDrag: function() {                                                                                            // 11355
		this.timeGrid.unrenderDrag();                                                                                        // 11356
		if (this.dayGrid) {                                                                                                  // 11357
			this.dayGrid.unrenderDrag();                                                                                        // 11358
		}                                                                                                                    // 11359
	},                                                                                                                    // 11360
                                                                                                                       // 11361
                                                                                                                       // 11362
	/* Selection                                                                                                          // 11363
	------------------------------------------------------------------------------------------------------------------*/  // 11364
                                                                                                                       // 11365
                                                                                                                       // 11366
	// Renders a visual indication of a selection                                                                         // 11367
	renderSelection: function(span) {                                                                                     // 11368
		if (span.start.hasTime() || span.end.hasTime()) {                                                                    // 11369
			this.timeGrid.renderSelection(span);                                                                                // 11370
		}                                                                                                                    // 11371
		else if (this.dayGrid) {                                                                                             // 11372
			this.dayGrid.renderSelection(span);                                                                                 // 11373
		}                                                                                                                    // 11374
	},                                                                                                                    // 11375
                                                                                                                       // 11376
                                                                                                                       // 11377
	// Unrenders a visual indications of a selection                                                                      // 11378
	unrenderSelection: function() {                                                                                       // 11379
		this.timeGrid.unrenderSelection();                                                                                   // 11380
		if (this.dayGrid) {                                                                                                  // 11381
			this.dayGrid.unrenderSelection();                                                                                   // 11382
		}                                                                                                                    // 11383
	}                                                                                                                     // 11384
                                                                                                                       // 11385
});                                                                                                                    // 11386
                                                                                                                       // 11387
                                                                                                                       // 11388
// Methods that will customize the rendering behavior of the AgendaView's timeGrid                                     // 11389
var agendaTimeGridMethods = {                                                                                          // 11390
                                                                                                                       // 11391
                                                                                                                       // 11392
	// Generates the HTML that will go before the day-of week header cells                                                // 11393
	renderHeadIntroHtml: function() {                                                                                     // 11394
		var view = this.view;                                                                                                // 11395
		var weekText;                                                                                                        // 11396
                                                                                                                       // 11397
		if (view.opt('weekNumbers')) {                                                                                       // 11398
			weekText = this.start.format(view.opt('smallWeekFormat'));                                                          // 11399
                                                                                                                       // 11400
			return '' +                                                                                                         // 11401
				'<th class="fc-axis fc-week-number ' + view.widgetHeaderClass + '" ' + view.axisStyleAttr() + '>' +                // 11402
					'<span>' + // needed for matchCellWidths                                                                          // 11403
						htmlEscape(weekText) +                                                                                           // 11404
					'</span>' +                                                                                                       // 11405
				'</th>';                                                                                                           // 11406
		}                                                                                                                    // 11407
		else {                                                                                                               // 11408
			return '<th class="fc-axis ' + view.widgetHeaderClass + '" ' + view.axisStyleAttr() + '></th>';                     // 11409
		}                                                                                                                    // 11410
	},                                                                                                                    // 11411
                                                                                                                       // 11412
                                                                                                                       // 11413
	// Generates the HTML that goes before the bg of the TimeGrid slot area. Long vertical column.                        // 11414
	renderBgIntroHtml: function() {                                                                                       // 11415
		var view = this.view;                                                                                                // 11416
                                                                                                                       // 11417
		return '<td class="fc-axis ' + view.widgetContentClass + '" ' + view.axisStyleAttr() + '></td>';                     // 11418
	},                                                                                                                    // 11419
                                                                                                                       // 11420
                                                                                                                       // 11421
	// Generates the HTML that goes before all other types of cells.                                                      // 11422
	// Affects content-skeleton, helper-skeleton, highlight-skeleton for both the time-grid and day-grid.                 // 11423
	renderIntroHtml: function() {                                                                                         // 11424
		var view = this.view;                                                                                                // 11425
                                                                                                                       // 11426
		return '<td class="fc-axis" ' + view.axisStyleAttr() + '></td>';                                                     // 11427
	}                                                                                                                     // 11428
                                                                                                                       // 11429
};                                                                                                                     // 11430
                                                                                                                       // 11431
                                                                                                                       // 11432
// Methods that will customize the rendering behavior of the AgendaView's dayGrid                                      // 11433
var agendaDayGridMethods = {                                                                                           // 11434
                                                                                                                       // 11435
                                                                                                                       // 11436
	// Generates the HTML that goes before the all-day cells                                                              // 11437
	renderBgIntroHtml: function() {                                                                                       // 11438
		var view = this.view;                                                                                                // 11439
                                                                                                                       // 11440
		return '' +                                                                                                          // 11441
			'<td class="fc-axis ' + view.widgetContentClass + '" ' + view.axisStyleAttr() + '>' +                               // 11442
				'<span>' + // needed for matchCellWidths                                                                           // 11443
					(view.opt('allDayHtml') || htmlEscape(view.opt('allDayText'))) +                                                  // 11444
				'</span>' +                                                                                                        // 11445
			'</td>';                                                                                                            // 11446
	},                                                                                                                    // 11447
                                                                                                                       // 11448
                                                                                                                       // 11449
	// Generates the HTML that goes before all other types of cells.                                                      // 11450
	// Affects content-skeleton, helper-skeleton, highlight-skeleton for both the time-grid and day-grid.                 // 11451
	renderIntroHtml: function() {                                                                                         // 11452
		var view = this.view;                                                                                                // 11453
                                                                                                                       // 11454
		return '<td class="fc-axis" ' + view.axisStyleAttr() + '></td>';                                                     // 11455
	}                                                                                                                     // 11456
                                                                                                                       // 11457
};                                                                                                                     // 11458
                                                                                                                       // 11459
;;                                                                                                                     // 11460
                                                                                                                       // 11461
var AGENDA_ALL_DAY_EVENT_LIMIT = 5;                                                                                    // 11462
                                                                                                                       // 11463
// potential nice values for the slot-duration and interval-duration                                                   // 11464
// from largest to smallest                                                                                            // 11465
var AGENDA_STOCK_SUB_DURATIONS = [                                                                                     // 11466
	{ hours: 1 },                                                                                                         // 11467
	{ minutes: 30 },                                                                                                      // 11468
	{ minutes: 15 },                                                                                                      // 11469
	{ seconds: 30 },                                                                                                      // 11470
	{ seconds: 15 }                                                                                                       // 11471
];                                                                                                                     // 11472
                                                                                                                       // 11473
fcViews.agenda = {                                                                                                     // 11474
	'class': AgendaView,                                                                                                  // 11475
	defaults: {                                                                                                           // 11476
		allDaySlot: true,                                                                                                    // 11477
		allDayText: 'all-day',                                                                                               // 11478
		slotDuration: '00:30:00',                                                                                            // 11479
		minTime: '00:00:00',                                                                                                 // 11480
		maxTime: '24:00:00',                                                                                                 // 11481
		slotEventOverlap: true // a bad name. confused with overlap/constraint system                                        // 11482
	}                                                                                                                     // 11483
};                                                                                                                     // 11484
                                                                                                                       // 11485
fcViews.agendaDay = {                                                                                                  // 11486
	type: 'agenda',                                                                                                       // 11487
	duration: { days: 1 }                                                                                                 // 11488
};                                                                                                                     // 11489
                                                                                                                       // 11490
fcViews.agendaWeek = {                                                                                                 // 11491
	type: 'agenda',                                                                                                       // 11492
	duration: { weeks: 1 }                                                                                                // 11493
};                                                                                                                     // 11494
;;                                                                                                                     // 11495
                                                                                                                       // 11496
return FC; // export for Node/CommonJS                                                                                 // 11497
});                                                                                                                    // 11498
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rzymek_fullcalendar/fullcalendar/dist/lang-all.js                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
!function(a){"function"==typeof define&&define.amd?define(["jquery","moment"],a):a(jQuery,moment)}(function(a,b){!function(){(b.defineLocale||b.lang).call(b,"ar-ma",{months:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),weekdays:"الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),longDateFormat:{LT:"HH:mm",LTS:"LT:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd D MMMM YYYY LT"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:6,doy:12}}),a.fullCalendar.datepickerLang("ar-ma","ar",{closeText:"إغلاق",prevText:"&#x3C;السابق",nextText:"التالي&#x3E;",currentText:"اليوم",monthNames:["كانون الثاني","شباط","آذار","نيسان","مايو","حزيران","تموز","آب","أيلول","تشرين الأول","تشرين الثاني","كانون الأول"],monthNamesShort:["1","2","3","4","5","6","7","8","9","10","11","12"],dayNames:["الأحد","الاثنين","الثلاثاء","الأربعاء","الخميس","الجمعة","السبت"],dayNamesShort:["الأحد","الاثنين","الثلاثاء","الأربعاء","الخميس","الجمعة","السبت"],dayNamesMin:["ح","ن","ث","ر","خ","ج","س"],weekHeader:"أسبوع",dateFormat:"dd/mm/yy",firstDay:6,isRTL:!0,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("ar-ma",{buttonText:{month:"شهر",week:"أسبوع",day:"يوم",list:"أجندة"},allDayText:"اليوم كله",eventLimitText:"أخرى"})}(),function(){var c={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},d={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"};(b.defineLocale||b.lang).call(b,"ar-sa",{months:"يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd D MMMM YYYY LT"},meridiemParse:/ص|م/,isPM:function(a){return"م"===a},meridiem:function(a,b,c){return 12>a?"ص":"م"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},preparse:function(a){return a.replace(/[١٢٣٤٥٦٧٨٩٠]/g,function(a){return d[a]}).replace(/،/g,",")},postformat:function(a){return a.replace(/\d/g,function(a){return c[a]}).replace(/,/g,"،")},week:{dow:6,doy:12}}),a.fullCalendar.datepickerLang("ar-sa","ar",{closeText:"إغلاق",prevText:"&#x3C;السابق",nextText:"التالي&#x3E;",currentText:"اليوم",monthNames:["كانون الثاني","شباط","آذار","نيسان","مايو","حزيران","تموز","آب","أيلول","تشرين الأول","تشرين الثاني","كانون الأول"],monthNamesShort:["1","2","3","4","5","6","7","8","9","10","11","12"],dayNames:["الأحد","الاثنين","الثلاثاء","الأربعاء","الخميس","الجمعة","السبت"],dayNamesShort:["الأحد","الاثنين","الثلاثاء","الأربعاء","الخميس","الجمعة","السبت"],dayNamesMin:["ح","ن","ث","ر","خ","ج","س"],weekHeader:"أسبوع",dateFormat:"dd/mm/yy",firstDay:6,isRTL:!0,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("ar-sa",{buttonText:{month:"شهر",week:"أسبوع",day:"يوم",list:"أجندة"},allDayText:"اليوم كله",eventLimitText:"أخرى"})}(),function(){(b.defineLocale||b.lang).call(b,"ar-tn",{months:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),monthsShort:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),longDateFormat:{LT:"HH:mm",LTS:"LT:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd D MMMM YYYY LT"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:1,doy:4}}),a.fullCalendar.datepickerLang("ar-tn","ar",{closeText:"إغلاق",prevText:"&#x3C;السابق",nextText:"التالي&#x3E;",currentText:"اليوم",monthNames:["كانون الثاني","شباط","آذار","نيسان","مايو","حزيران","تموز","آب","أيلول","تشرين الأول","تشرين الثاني","كانون الأول"],monthNamesShort:["1","2","3","4","5","6","7","8","9","10","11","12"],dayNames:["الأحد","الاثنين","الثلاثاء","الأربعاء","الخميس","الجمعة","السبت"],dayNamesShort:["الأحد","الاثنين","الثلاثاء","الأربعاء","الخميس","الجمعة","السبت"],dayNamesMin:["ح","ن","ث","ر","خ","ج","س"],weekHeader:"أسبوع",dateFormat:"dd/mm/yy",firstDay:6,isRTL:!0,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("ar-tn",{buttonText:{month:"شهر",week:"أسبوع",day:"يوم",list:"أجندة"},allDayText:"اليوم كله",eventLimitText:"أخرى"})}(),function(){var c={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},d={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"},e=function(a){return 0===a?0:1===a?1:2===a?2:a%100>=3&&10>=a%100?3:a%100>=11?4:5},f={s:["أقل من ثانية","ثانية واحدة",["ثانيتان","ثانيتين"],"%d ثوان","%d ثانية","%d ثانية"],m:["أقل من دقيقة","دقيقة واحدة",["دقيقتان","دقيقتين"],"%d دقائق","%d دقيقة","%d دقيقة"],h:["أقل من ساعة","ساعة واحدة",["ساعتان","ساعتين"],"%d ساعات","%d ساعة","%d ساعة"],d:["أقل من يوم","يوم واحد",["يومان","يومين"],"%d أيام","%d يومًا","%d يوم"],M:["أقل من شهر","شهر واحد",["شهران","شهرين"],"%d أشهر","%d شهرا","%d شهر"],y:["أقل من عام","عام واحد",["عامان","عامين"],"%d أعوام","%d عامًا","%d عام"]},g=function(a){return function(b,c,d,g){var h=e(b),i=f[a][e(b)];return 2===h&&(i=i[c?0:1]),i.replace(/%d/i,b)}},h=["كانون الثاني يناير","شباط فبراير","آذار مارس","نيسان أبريل","أيار مايو","حزيران يونيو","تموز يوليو","آب أغسطس","أيلول سبتمبر","تشرين الأول أكتوبر","تشرين الثاني نوفمبر","كانون الأول ديسمبر"];(b.defineLocale||b.lang).call(b,"ar",{months:h,monthsShort:h,weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd D MMMM YYYY LT"},meridiemParse:/ص|م/,isPM:function(a){return"م"===a},meridiem:function(a,b,c){return 12>a?"ص":"م"},calendar:{sameDay:"[اليوم عند الساعة] LT",nextDay:"[غدًا عند الساعة] LT",nextWeek:"dddd [عند الساعة] LT",lastDay:"[أمس عند الساعة] LT",lastWeek:"dddd [عند الساعة] LT",sameElse:"L"},relativeTime:{future:"بعد %s",past:"منذ %s",s:g("s"),m:g("m"),mm:g("m"),h:g("h"),hh:g("h"),d:g("d"),dd:g("d"),M:g("M"),MM:g("M"),y:g("y"),yy:g("y")},preparse:function(a){return a.replace(/[١٢٣٤٥٦٧٨٩٠]/g,function(a){return d[a]}).replace(/،/g,",")},postformat:function(a){return a.replace(/\d/g,function(a){return c[a]}).replace(/,/g,"،")},week:{dow:6,doy:12}}),a.fullCalendar.datepickerLang("ar","ar",{closeText:"إغلاق",prevText:"&#x3C;السابق",nextText:"التالي&#x3E;",currentText:"اليوم",monthNames:["كانون الثاني","شباط","آذار","نيسان","مايو","حزيران","تموز","آب","أيلول","تشرين الأول","تشرين الثاني","كانون الأول"],monthNamesShort:["1","2","3","4","5","6","7","8","9","10","11","12"],dayNames:["الأحد","الاثنين","الثلاثاء","الأربعاء","الخميس","الجمعة","السبت"],dayNamesShort:["الأحد","الاثنين","الثلاثاء","الأربعاء","الخميس","الجمعة","السبت"],dayNamesMin:["ح","ن","ث","ر","خ","ج","س"],weekHeader:"أسبوع",dateFormat:"dd/mm/yy",firstDay:6,isRTL:!0,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("ar",{buttonText:{month:"شهر",week:"أسبوع",day:"يوم",list:"أجندة"},allDayText:"اليوم كله",eventLimitText:"أخرى"})}(),function(){(b.defineLocale||b.lang).call(b,"bg",{months:"януари_февруари_март_април_май_юни_юли_август_септември_октомври_ноември_декември".split("_"),monthsShort:"янр_фев_мар_апр_май_юни_юли_авг_сеп_окт_ное_дек".split("_"),weekdays:"неделя_понеделник_вторник_сряда_четвъртък_петък_събота".split("_"),weekdaysShort:"нед_пон_вто_сря_чет_пет_съб".split("_"),weekdaysMin:"нд_пн_вт_ср_чт_пт_сб".split("_"),longDateFormat:{LT:"H:mm",LTS:"LT:ss",L:"D.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd, D MMMM YYYY LT"},calendar:{sameDay:"[Днес в] LT",nextDay:"[Утре в] LT",nextWeek:"dddd [в] LT",lastDay:"[Вчера в] LT",lastWeek:function(){switch(this.day()){case 0:case 3:case 6:return"[В изминалата] dddd [в] LT";case 1:case 2:case 4:case 5:return"[В изминалия] dddd [в] LT"}},sameElse:"L"},relativeTime:{future:"след %s",past:"преди %s",s:"няколко секунди",m:"минута",mm:"%d минути",h:"час",hh:"%d часа",d:"ден",dd:"%d дни",M:"месец",MM:"%d месеца",y:"година",yy:"%d години"},ordinalParse:/\d{1,2}-(ев|ен|ти|ви|ри|ми)/,ordinal:function(a){var b=a%10,c=a%100;return 0===a?a+"-ев":0===c?a+"-ен":c>10&&20>c?a+"-ти":1===b?a+"-ви":2===b?a+"-ри":7===b||8===b?a+"-ми":a+"-ти"},week:{dow:1,doy:7}}),a.fullCalendar.datepickerLang("bg","bg",{closeText:"затвори",prevText:"&#x3C;назад",nextText:"напред&#x3E;",nextBigText:"&#x3E;&#x3E;",currentText:"днес",monthNames:["Януари","Февруари","Март","Април","Май","Юни","Юли","Август","Септември","Октомври","Ноември","Декември"],monthNamesShort:["Яну","Фев","Мар","Апр","Май","Юни","Юли","Авг","Сеп","Окт","Нов","Дек"],dayNames:["Неделя","Понеделник","Вторник","Сряда","Четвъртък","Петък","Събота"],dayNamesShort:["Нед","Пон","Вто","Сря","Чет","Пет","Съб"],dayNamesMin:["Не","По","Вт","Ср","Че","Пе","Съ"],weekHeader:"Wk",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("bg",{buttonText:{month:"Месец",week:"Седмица",day:"Ден",list:"График"},allDayText:"Цял ден",eventLimitText:function(a){return"+още "+a}})}(),function(){(b.defineLocale||b.lang).call(b,"ca",{months:"gener_febrer_març_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre".split("_"),monthsShort:"gen._febr._mar._abr._mai._jun._jul._ag._set._oct._nov._des.".split("_"),weekdays:"diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte".split("_"),weekdaysShort:"dg._dl._dt._dc._dj._dv._ds.".split("_"),weekdaysMin:"Dg_Dl_Dt_Dc_Dj_Dv_Ds".split("_"),longDateFormat:{LT:"H:mm",LTS:"LT:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd D MMMM YYYY LT"},calendar:{sameDay:function(){return"[avui a "+(1!==this.hours()?"les":"la")+"] LT"},nextDay:function(){return"[demà a "+(1!==this.hours()?"les":"la")+"] LT"},nextWeek:function(){return"dddd [a "+(1!==this.hours()?"les":"la")+"] LT"},lastDay:function(){return"[ahir a "+(1!==this.hours()?"les":"la")+"] LT"},lastWeek:function(){return"[el] dddd [passat a "+(1!==this.hours()?"les":"la")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"fa %s",s:"uns segons",m:"un minut",mm:"%d minuts",h:"una hora",hh:"%d hores",d:"un dia",dd:"%d dies",M:"un mes",MM:"%d mesos",y:"un any",yy:"%d anys"},ordinalParse:/\d{1,2}(r|n|t|è|a)/,ordinal:function(a,b){var c=1===a?"r":2===a?"n":3===a?"r":4===a?"t":"è";return("w"===b||"W"===b)&&(c="a"),a+c},week:{dow:1,doy:4}}),a.fullCalendar.datepickerLang("ca","ca",{closeText:"Tanca",prevText:"Anterior",nextText:"Següent",currentText:"Avui",monthNames:["gener","febrer","març","abril","maig","juny","juliol","agost","setembre","octubre","novembre","desembre"],monthNamesShort:["gen","feb","març","abr","maig","juny","jul","ag","set","oct","nov","des"],dayNames:["diumenge","dilluns","dimarts","dimecres","dijous","divendres","dissabte"],dayNamesShort:["dg","dl","dt","dc","dj","dv","ds"],dayNamesMin:["dg","dl","dt","dc","dj","dv","ds"],weekHeader:"Set",dateFormat:"dd/mm/yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("ca",{buttonText:{month:"Mes",week:"Setmana",day:"Dia",list:"Agenda"},allDayText:"Tot el dia",eventLimitText:"més"})}(),function(){function c(a){return a>1&&5>a&&1!==~~(a/10)}function d(a,b,d,e){var f=a+" ";switch(d){case"s":return b||e?"pár sekund":"pár sekundami";case"m":return b?"minuta":e?"minutu":"minutou";case"mm":return b||e?f+(c(a)?"minuty":"minut"):f+"minutami";case"h":return b?"hodina":e?"hodinu":"hodinou";case"hh":return b||e?f+(c(a)?"hodiny":"hodin"):f+"hodinami";case"d":return b||e?"den":"dnem";case"dd":return b||e?f+(c(a)?"dny":"dní"):f+"dny";case"M":return b||e?"měsíc":"měsícem";case"MM":return b||e?f+(c(a)?"měsíce":"měsíců"):f+"měsíci";case"y":return b||e?"rok":"rokem";case"yy":return b||e?f+(c(a)?"roky":"let"):f+"lety"}}var e="leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec".split("_"),f="led_úno_bře_dub_kvě_čvn_čvc_srp_zář_říj_lis_pro".split("_");(b.defineLocale||b.lang).call(b,"cs",{months:e,monthsShort:f,monthsParse:function(a,b){var c,d=[];for(c=0;12>c;c++)d[c]=new RegExp("^"+a[c]+"$|^"+b[c]+"$","i");return d}(e,f),weekdays:"neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota".split("_"),weekdaysShort:"ne_po_út_st_čt_pá_so".split("_"),weekdaysMin:"ne_po_út_st_čt_pá_so".split("_"),longDateFormat:{LT:"H:mm",LTS:"LT:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY LT",LLLL:"dddd D. MMMM YYYY LT"},calendar:{sameDay:"[dnes v] LT",nextDay:"[zítra v] LT",nextWeek:function(){switch(this.day()){case 0:return"[v neděli v] LT";case 1:case 2:return"[v] dddd [v] LT";case 3:return"[ve středu v] LT";case 4:return"[ve čtvrtek v] LT";case 5:return"[v pátek v] LT";case 6:return"[v sobotu v] LT"}},lastDay:"[včera v] LT",lastWeek:function(){switch(this.day()){case 0:return"[minulou neděli v] LT";case 1:case 2:return"[minulé] dddd [v] LT";case 3:return"[minulou středu v] LT";case 4:case 5:return"[minulý] dddd [v] LT";case 6:return"[minulou sobotu v] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"před %s",s:d,m:d,mm:d,h:d,hh:d,d:d,dd:d,M:d,MM:d,y:d,yy:d},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),a.fullCalendar.datepickerLang("cs","cs",{closeText:"Zavřít",prevText:"&#x3C;Dříve",nextText:"Později&#x3E;",currentText:"Nyní",monthNames:["leden","únor","březen","duben","květen","červen","červenec","srpen","září","říjen","listopad","prosinec"],monthNamesShort:["led","úno","bře","dub","kvě","čer","čvc","srp","zář","říj","lis","pro"],dayNames:["neděle","pondělí","úterý","středa","čtvrtek","pátek","sobota"],dayNamesShort:["ne","po","út","st","čt","pá","so"],dayNamesMin:["ne","po","út","st","čt","pá","so"],weekHeader:"Týd",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("cs",{buttonText:{month:"Měsíc",week:"Týden",day:"Den",list:"Agenda"},allDayText:"Celý den",eventLimitText:function(a){return"+další: "+a}})}(),function(){(b.defineLocale||b.lang).call(b,"da",{months:"januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),weekdays:"søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"),weekdaysShort:"søn_man_tir_ons_tor_fre_lør".split("_"),weekdaysMin:"sø_ma_ti_on_to_fr_lø".split("_"),longDateFormat:{LT:"HH:mm",LTS:"LT:ss",L:"DD/MM/YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY LT",LLLL:"dddd [d.] D. MMMM YYYY LT"},calendar:{sameDay:"[I dag kl.] LT",nextDay:"[I morgen kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[I går kl.] LT",lastWeek:"[sidste] dddd [kl] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s siden",s:"få sekunder",m:"et minut",mm:"%d minutter",h:"en time",hh:"%d timer",d:"en dag",dd:"%d dage",M:"en måned",MM:"%d måneder",y:"et år",yy:"%d år"},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),a.fullCalendar.datepickerLang("da","da",{closeText:"Luk",prevText:"&#x3C;Forrige",nextText:"Næste&#x3E;",currentText:"Idag",monthNames:["Januar","Februar","Marts","April","Maj","Juni","Juli","August","September","Oktober","November","December"],monthNamesShort:["Jan","Feb","Mar","Apr","Maj","Jun","Jul","Aug","Sep","Okt","Nov","Dec"],dayNames:["Søndag","Mandag","Tirsdag","Onsdag","Torsdag","Fredag","Lørdag"],dayNamesShort:["Søn","Man","Tir","Ons","Tor","Fre","Lør"],dayNamesMin:["Sø","Ma","Ti","On","To","Fr","Lø"],weekHeader:"Uge",dateFormat:"dd-mm-yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("da",{buttonText:{month:"Måned",week:"Uge",day:"Dag",list:"Agenda"},allDayText:"Hele dagen",eventLimitText:"flere"})}(),function(){function c(a,b,c,d){var e={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[a+" Tage",a+" Tagen"],M:["ein Monat","einem Monat"],MM:[a+" Monate",a+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[a+" Jahre",a+" Jahren"]};return b?e[c][0]:e[c][1]}(b.defineLocale||b.lang).call(b,"de-at",{months:"Jänner_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jän._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split("_"),weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY LT",LLLL:"dddd, D. MMMM YYYY LT"},calendar:{sameDay:"[Heute um] LT [Uhr]",sameElse:"L",nextDay:"[Morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[Gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",m:c,mm:"%d Minuten",h:c,hh:"%d Stunden",d:c,dd:c,M:c,MM:c,y:c,yy:c},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),a.fullCalendar.datepickerLang("de-at","de",{closeText:"Schließen",prevText:"&#x3C;Zurück",nextText:"Vor&#x3E;",currentText:"Heute",monthNames:["Januar","Februar","März","April","Mai","Juni","Juli","August","September","Oktober","November","Dezember"],monthNamesShort:["Jan","Feb","Mär","Apr","Mai","Jun","Jul","Aug","Sep","Okt","Nov","Dez"],dayNames:["Sonntag","Montag","Dienstag","Mittwoch","Donnerstag","Freitag","Samstag"],dayNamesShort:["So","Mo","Di","Mi","Do","Fr","Sa"],dayNamesMin:["So","Mo","Di","Mi","Do","Fr","Sa"],weekHeader:"KW",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("de-at",{buttonText:{month:"Monat",week:"Woche",day:"Tag",list:"Terminübersicht"},allDayText:"Ganztägig",eventLimitText:function(a){return"+ weitere "+a}})}(),function(){function c(a,b,c,d){var e={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[a+" Tage",a+" Tagen"],M:["ein Monat","einem Monat"],MM:[a+" Monate",a+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[a+" Jahre",a+" Jahren"]};return b?e[c][0]:e[c][1]}(b.defineLocale||b.lang).call(b,"de",{months:"Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split("_"),weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY LT",LLLL:"dddd, D. MMMM YYYY LT"},calendar:{sameDay:"[Heute um] LT [Uhr]",sameElse:"L",nextDay:"[Morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[Gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",m:c,mm:"%d Minuten",h:c,hh:"%d Stunden",d:c,dd:c,M:c,MM:c,y:c,yy:c},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),a.fullCalendar.datepickerLang("de","de",{closeText:"Schließen",prevText:"&#x3C;Zurück",nextText:"Vor&#x3E;",currentText:"Heute",monthNames:["Januar","Februar","März","April","Mai","Juni","Juli","August","September","Oktober","November","Dezember"],monthNamesShort:["Jan","Feb","Mär","Apr","Mai","Jun","Jul","Aug","Sep","Okt","Nov","Dez"],dayNames:["Sonntag","Montag","Dienstag","Mittwoch","Donnerstag","Freitag","Samstag"],dayNamesShort:["So","Mo","Di","Mi","Do","Fr","Sa"],dayNamesMin:["So","Mo","Di","Mi","Do","Fr","Sa"],weekHeader:"KW",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("de",{buttonText:{month:"Monat",week:"Woche",day:"Tag",list:"Terminübersicht"},allDayText:"Ganztägig",eventLimitText:function(a){return"+ weitere "+a}})}(),function(){(b.defineLocale||b.lang).call(b,"el",{monthsNominativeEl:"Ιανουάριος_Φεβρουάριος_Μάρτιος_Απρίλιος_Μάιος_Ιούνιος_Ιούλιος_Αύγουστος_Σεπτέμβριος_Οκτώβριος_Νοέμβριος_Δεκέμβριος".split("_"),monthsGenitiveEl:"Ιανουαρίου_Φεβρουαρίου_Μαρτίου_Απριλίου_Μαΐου_Ιουνίου_Ιουλίου_Αυγούστου_Σεπτεμβρίου_Οκτωβρίου_Νοεμβρίου_Δεκεμβρίου".split("_"),months:function(a,b){return/D/.test(b.substring(0,b.indexOf("MMMM")))?this._monthsGenitiveEl[a.month()]:this._monthsNominativeEl[a.month()]},monthsShort:"Ιαν_Φεβ_Μαρ_Απρ_Μαϊ_Ιουν_Ιουλ_Αυγ_Σεπ_Οκτ_Νοε_Δεκ".split("_"),weekdays:"Κυριακή_Δευτέρα_Τρίτη_Τετάρτη_Πέμπτη_Παρασκευή_Σάββατο".split("_"),weekdaysShort:"Κυρ_Δευ_Τρι_Τετ_Πεμ_Παρ_Σαβ".split("_"),weekdaysMin:"Κυ_Δε_Τρ_Τε_Πε_Πα_Σα".split("_"),meridiem:function(a,b,c){return a>11?c?"μμ":"ΜΜ":c?"πμ":"ΠΜ"},isPM:function(a){return"μ"===(a+"").toLowerCase()[0]},meridiemParse:/[ΠΜ]\.?Μ?\.?/i,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd, D MMMM YYYY LT"},calendarEl:{sameDay:"[Σήμερα {}] LT",nextDay:"[Αύριο {}] LT",nextWeek:"dddd [{}] LT",lastDay:"[Χθες {}] LT",lastWeek:function(){switch(this.day()){case 6:return"[το προηγούμενο] dddd [{}] LT";default:return"[την προηγούμενη] dddd [{}] LT"}},sameElse:"L"},calendar:function(a,b){var c=this._calendarEl[a],d=b&&b.hours();return"function"==typeof c&&(c=c.apply(b)),c.replace("{}",d%12===1?"στη":"στις")},relativeTime:{future:"σε %s",past:"%s πριν",s:"λίγα δευτερόλεπτα",m:"ένα λεπτό",mm:"%d λεπτά",h:"μία ώρα",hh:"%d ώρες",d:"μία μέρα",dd:"%d μέρες",M:"ένας μήνας",MM:"%d μήνες",y:"ένας χρόνος",yy:"%d χρόνια"},ordinalParse:/\d{1,2}η/,ordinal:"%dη",week:{dow:1,doy:4}}),a.fullCalendar.datepickerLang("el","el",{closeText:"Κλείσιμο",prevText:"Προηγούμενος",nextText:"Επόμενος",currentText:"Σήμερα",monthNames:["Ιανουάριος","Φεβρουάριος","Μάρτιος","Απρίλιος","Μάιος","Ιούνιος","Ιούλιος","Αύγουστος","Σεπτέμβριος","Οκτώβριος","Νοέμβριος","Δεκέμβριος"],monthNamesShort:["Ιαν","Φεβ","Μαρ","Απρ","Μαι","Ιουν","Ιουλ","Αυγ","Σεπ","Οκτ","Νοε","Δεκ"],dayNames:["Κυριακή","Δευτέρα","Τρίτη","Τετάρτη","Πέμπτη","Παρασκευή","Σάββατο"],dayNamesShort:["Κυρ","Δευ","Τρι","Τετ","Πεμ","Παρ","Σαβ"],dayNamesMin:["Κυ","Δε","Τρ","Τε","Πε","Πα","Σα"],weekHeader:"Εβδ",dateFormat:"dd/mm/yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("el",{buttonText:{month:"Μήνας",week:"Εβδομάδα",day:"Ημέρα",list:"Ατζέντα"},allDayText:"Ολοήμερο",eventLimitText:"περισσότερα"})}(),function(){(b.defineLocale||b.lang).call(b,"en-au",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd, D MMMM YYYY LT"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},ordinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(a){var b=a%10,c=1===~~(a%100/10)?"th":1===b?"st":2===b?"nd":3===b?"rd":"th";return a+c},week:{dow:1,doy:4}}),a.fullCalendar.datepickerLang("en-au","en-AU",{closeText:"Done",prevText:"Prev",nextText:"Next",currentText:"Today",monthNames:["January","February","March","April","May","June","July","August","September","October","November","December"],monthNamesShort:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],dayNames:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],dayNamesShort:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],dayNamesMin:["Su","Mo","Tu","We","Th","Fr","Sa"],weekHeader:"Wk",dateFormat:"dd/mm/yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("en-au")}(),function(){(b.defineLocale||b.lang).call(b,"en-ca",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"YYYY-MM-DD",LL:"D MMMM, YYYY",LLL:"D MMMM, YYYY LT",LLLL:"dddd, D MMMM, YYYY LT"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},ordinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(a){var b=a%10,c=1===~~(a%100/10)?"th":1===b?"st":2===b?"nd":3===b?"rd":"th";return a+c}}),a.fullCalendar.lang("en-ca")}(),function(){(b.defineLocale||b.lang).call(b,"en-gb",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd, D MMMM YYYY LT"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},ordinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(a){var b=a%10,c=1===~~(a%100/10)?"th":1===b?"st":2===b?"nd":3===b?"rd":"th";return a+c},week:{dow:1,doy:4}}),a.fullCalendar.datepickerLang("en-gb","en-GB",{closeText:"Done",prevText:"Prev",nextText:"Next",currentText:"Today",monthNames:["January","February","March","April","May","June","July","August","September","October","November","December"],monthNamesShort:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],dayNames:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],dayNamesShort:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],dayNamesMin:["Su","Mo","Tu","We","Th","Fr","Sa"],weekHeader:"Wk",dateFormat:"dd/mm/yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("en-gb")}(),function(){var c="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),d="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_");(b.defineLocale||b.lang).call(b,"es",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(a,b){return/-MMM-/.test(b)?d[a.month()]:c[a.month()]},weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"Do_Lu_Ma_Mi_Ju_Vi_Sá".split("_"),longDateFormat:{LT:"H:mm",LTS:"LT:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY LT",LLLL:"dddd, D [de] MMMM [de] YYYY LT"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},ordinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}}),a.fullCalendar.datepickerLang("es","es",{closeText:"Cerrar",prevText:"&#x3C;Ant",nextText:"Sig&#x3E;",currentText:"Hoy",monthNames:["enero","febrero","marzo","abril","mayo","junio","julio","agosto","septiembre","octubre","noviembre","diciembre"],monthNamesShort:["ene","feb","mar","abr","may","jun","jul","ago","sep","oct","nov","dic"],dayNames:["domingo","lunes","martes","miércoles","jueves","viernes","sábado"],dayNamesShort:["dom","lun","mar","mié","jue","vie","sáb"],dayNamesMin:["D","L","M","X","J","V","S"],weekHeader:"Sm",dateFormat:"dd/mm/yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("es",{buttonText:{month:"Mes",week:"Semana",day:"Día",list:"Agenda"},allDayHtml:"Todo<br/>el día",eventLimitText:"más"})}(),function(){var c={1:"۱",2:"۲",3:"۳",4:"۴",5:"۵",6:"۶",7:"۷",8:"۸",9:"۹",0:"۰"},d={"۱":"1","۲":"2","۳":"3","۴":"4","۵":"5","۶":"6","۷":"7","۸":"8","۹":"9","۰":"0"};(b.defineLocale||b.lang).call(b,"fa",{months:"ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"),monthsShort:"ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"),weekdays:"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"),weekdaysShort:"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"),weekdaysMin:"ی_د_س_چ_پ_ج_ش".split("_"),longDateFormat:{LT:"HH:mm",LTS:"LT:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd, D MMMM YYYY LT"},meridiemParse:/قبل از ظهر|بعد از ظهر/,isPM:function(a){return/بعد از ظهر/.test(a)},meridiem:function(a,b,c){return 12>a?"قبل از ظهر":"بعد از ظهر"},calendar:{sameDay:"[امروز ساعت] LT",nextDay:"[فردا ساعت] LT",nextWeek:"dddd [ساعت] LT",lastDay:"[دیروز ساعت] LT",lastWeek:"dddd [پیش] [ساعت] LT",sameElse:"L"},relativeTime:{future:"در %s",past:"%s پیش",s:"چندین ثانیه",m:"یک دقیقه",mm:"%d دقیقه",h:"یک ساعت",hh:"%d ساعت",d:"یک روز",dd:"%d روز",M:"یک ماه",MM:"%d ماه",y:"یک سال",yy:"%d سال"},preparse:function(a){return a.replace(/[۰-۹]/g,function(a){return d[a]}).replace(/،/g,",")},postformat:function(a){return a.replace(/\d/g,function(a){return c[a]}).replace(/,/g,"،")},ordinalParse:/\d{1,2}م/,ordinal:"%dم",week:{dow:6,doy:12}}),a.fullCalendar.datepickerLang("fa","fa",{closeText:"بستن",prevText:"&#x3C;قبلی",nextText:"بعدی&#x3E;",currentText:"امروز",monthNames:["ژانویه","فوریه","مارس","آوریل","مه","ژوئن","ژوئیه","اوت","سپتامبر","اکتبر","نوامبر","دسامبر"],monthNamesShort:["1","2","3","4","5","6","7","8","9","10","11","12"],dayNames:["يکشنبه","دوشنبه","سه‌شنبه","چهارشنبه","پنجشنبه","جمعه","شنبه"],dayNamesShort:["ی","د","س","چ","پ","ج","ش"],dayNamesMin:["ی","د","س","چ","پ","ج","ش"],weekHeader:"هف",dateFormat:"yy/mm/dd",firstDay:6,isRTL:!0,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("fa",{buttonText:{month:"ماه",week:"هفته",day:"روز",list:"برنامه"
},allDayText:"تمام روز",eventLimitText:function(a){return"بیش از "+a}})}(),function(){function c(a,b,c,e){var f="";switch(c){case"s":return e?"muutaman sekunnin":"muutama sekunti";case"m":return e?"minuutin":"minuutti";case"mm":f=e?"minuutin":"minuuttia";break;case"h":return e?"tunnin":"tunti";case"hh":f=e?"tunnin":"tuntia";break;case"d":return e?"päivän":"päivä";case"dd":f=e?"päivän":"päivää";break;case"M":return e?"kuukauden":"kuukausi";case"MM":f=e?"kuukauden":"kuukautta";break;case"y":return e?"vuoden":"vuosi";case"yy":f=e?"vuoden":"vuotta"}return f=d(a,e)+" "+f}function d(a,b){return 10>a?b?f[a]:e[a]:a}var e="nolla yksi kaksi kolme neljä viisi kuusi seitsemän kahdeksan yhdeksän".split(" "),f=["nolla","yhden","kahden","kolmen","neljän","viiden","kuuden",e[7],e[8],e[9]];(b.defineLocale||b.lang).call(b,"fi",{months:"tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesäkuu_heinäkuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu".split("_"),monthsShort:"tammi_helmi_maalis_huhti_touko_kesä_heinä_elo_syys_loka_marras_joulu".split("_"),weekdays:"sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai".split("_"),weekdaysShort:"su_ma_ti_ke_to_pe_la".split("_"),weekdaysMin:"su_ma_ti_ke_to_pe_la".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD.MM.YYYY",LL:"Do MMMM[ta] YYYY",LLL:"Do MMMM[ta] YYYY, [klo] LT",LLLL:"dddd, Do MMMM[ta] YYYY, [klo] LT",l:"D.M.YYYY",ll:"Do MMM YYYY",lll:"Do MMM YYYY, [klo] LT",llll:"ddd, Do MMM YYYY, [klo] LT"},calendar:{sameDay:"[tänään] [klo] LT",nextDay:"[huomenna] [klo] LT",nextWeek:"dddd [klo] LT",lastDay:"[eilen] [klo] LT",lastWeek:"[viime] dddd[na] [klo] LT",sameElse:"L"},relativeTime:{future:"%s päästä",past:"%s sitten",s:c,m:c,mm:c,h:c,hh:c,d:c,dd:c,M:c,MM:c,y:c,yy:c},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),a.fullCalendar.datepickerLang("fi","fi",{closeText:"Sulje",prevText:"&#xAB;Edellinen",nextText:"Seuraava&#xBB;",currentText:"Tänään",monthNames:["Tammikuu","Helmikuu","Maaliskuu","Huhtikuu","Toukokuu","Kesäkuu","Heinäkuu","Elokuu","Syyskuu","Lokakuu","Marraskuu","Joulukuu"],monthNamesShort:["Tammi","Helmi","Maalis","Huhti","Touko","Kesä","Heinä","Elo","Syys","Loka","Marras","Joulu"],dayNamesShort:["Su","Ma","Ti","Ke","To","Pe","La"],dayNames:["Sunnuntai","Maanantai","Tiistai","Keskiviikko","Torstai","Perjantai","Lauantai"],dayNamesMin:["Su","Ma","Ti","Ke","To","Pe","La"],weekHeader:"Vk",dateFormat:"d.m.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("fi",{buttonText:{month:"Kuukausi",week:"Viikko",day:"Päivä",list:"Tapahtumat"},allDayText:"Koko päivä",eventLimitText:"lisää"})}(),function(){(b.defineLocale||b.lang).call(b,"fr-ca",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"Di_Lu_Ma_Me_Je_Ve_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"LT:ss",L:"YYYY-MM-DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd D MMMM YYYY LT"},calendar:{sameDay:"[Aujourd'hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},ordinalParse:/\d{1,2}(er|)/,ordinal:function(a){return a+(1===a?"er":"")}}),a.fullCalendar.datepickerLang("fr-ca","fr-CA",{closeText:"Fermer",prevText:"Précédent",nextText:"Suivant",currentText:"Aujourd'hui",monthNames:["janvier","février","mars","avril","mai","juin","juillet","août","septembre","octobre","novembre","décembre"],monthNamesShort:["janv.","févr.","mars","avril","mai","juin","juil.","août","sept.","oct.","nov.","déc."],dayNames:["dimanche","lundi","mardi","mercredi","jeudi","vendredi","samedi"],dayNamesShort:["dim.","lun.","mar.","mer.","jeu.","ven.","sam."],dayNamesMin:["D","L","M","M","J","V","S"],weekHeader:"Sem.",dateFormat:"yy-mm-dd",firstDay:0,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("fr-ca",{buttonText:{month:"Mois",week:"Semaine",day:"Jour",list:"Mon planning"},allDayHtml:"Toute la<br/>journée",eventLimitText:"en plus"})}(),function(){(b.defineLocale||b.lang).call(b,"fr",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"Di_Lu_Ma_Me_Je_Ve_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"LT:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd D MMMM YYYY LT"},calendar:{sameDay:"[Aujourd'hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},ordinalParse:/\d{1,2}(er|)/,ordinal:function(a){return a+(1===a?"er":"")},week:{dow:1,doy:4}}),a.fullCalendar.datepickerLang("fr","fr",{closeText:"Fermer",prevText:"Précédent",nextText:"Suivant",currentText:"Aujourd'hui",monthNames:["janvier","février","mars","avril","mai","juin","juillet","août","septembre","octobre","novembre","décembre"],monthNamesShort:["janv.","févr.","mars","avr.","mai","juin","juil.","août","sept.","oct.","nov.","déc."],dayNames:["dimanche","lundi","mardi","mercredi","jeudi","vendredi","samedi"],dayNamesShort:["dim.","lun.","mar.","mer.","jeu.","ven.","sam."],dayNamesMin:["D","L","M","M","J","V","S"],weekHeader:"Sem.",dateFormat:"dd/mm/yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("fr",{buttonText:{month:"Mois",week:"Semaine",day:"Jour",list:"Mon planning"},allDayHtml:"Toute la<br/>journée",eventLimitText:"en plus"})}(),function(){(b.defineLocale||b.lang).call(b,"he",{months:"ינואר_פברואר_מרץ_אפריל_מאי_יוני_יולי_אוגוסט_ספטמבר_אוקטובר_נובמבר_דצמבר".split("_"),monthsShort:"ינו׳_פבר׳_מרץ_אפר׳_מאי_יוני_יולי_אוג׳_ספט׳_אוק׳_נוב׳_דצמ׳".split("_"),weekdays:"ראשון_שני_שלישי_רביעי_חמישי_שישי_שבת".split("_"),weekdaysShort:"א׳_ב׳_ג׳_ד׳_ה׳_ו׳_ש׳".split("_"),weekdaysMin:"א_ב_ג_ד_ה_ו_ש".split("_"),longDateFormat:{LT:"HH:mm",LTS:"LT:ss",L:"DD/MM/YYYY",LL:"D [ב]MMMM YYYY",LLL:"D [ב]MMMM YYYY LT",LLLL:"dddd, D [ב]MMMM YYYY LT",l:"D/M/YYYY",ll:"D MMM YYYY",lll:"D MMM YYYY LT",llll:"ddd, D MMM YYYY LT"},calendar:{sameDay:"[היום ב־]LT",nextDay:"[מחר ב־]LT",nextWeek:"dddd [בשעה] LT",lastDay:"[אתמול ב־]LT",lastWeek:"[ביום] dddd [האחרון בשעה] LT",sameElse:"L"},relativeTime:{future:"בעוד %s",past:"לפני %s",s:"מספר שניות",m:"דקה",mm:"%d דקות",h:"שעה",hh:function(a){return 2===a?"שעתיים":a+" שעות"},d:"יום",dd:function(a){return 2===a?"יומיים":a+" ימים"},M:"חודש",MM:function(a){return 2===a?"חודשיים":a+" חודשים"},y:"שנה",yy:function(a){return 2===a?"שנתיים":a%10===0&&10!==a?a+" שנה":a+" שנים"}}}),a.fullCalendar.datepickerLang("he","he",{closeText:"סגור",prevText:"&#x3C;הקודם",nextText:"הבא&#x3E;",currentText:"היום",monthNames:["ינואר","פברואר","מרץ","אפריל","מאי","יוני","יולי","אוגוסט","ספטמבר","אוקטובר","נובמבר","דצמבר"],monthNamesShort:["ינו","פבר","מרץ","אפר","מאי","יוני","יולי","אוג","ספט","אוק","נוב","דצמ"],dayNames:["ראשון","שני","שלישי","רביעי","חמישי","שישי","שבת"],dayNamesShort:["א'","ב'","ג'","ד'","ה'","ו'","שבת"],dayNamesMin:["א'","ב'","ג'","ד'","ה'","ו'","שבת"],weekHeader:"Wk",dateFormat:"dd/mm/yy",firstDay:0,isRTL:!0,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("he",{defaultButtonText:{month:"חודש",week:"שבוע",day:"יום",list:"סדר יום"},weekNumberTitle:"שבוע",allDayText:"כל היום",eventLimitText:"אחר"})}(),function(){var c={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},d={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"};(b.defineLocale||b.lang).call(b,"hi",{months:"जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर".split("_"),monthsShort:"जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.".split("_"),weekdays:"रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"),weekdaysShort:"रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि".split("_"),weekdaysMin:"र_सो_मं_बु_गु_शु_श".split("_"),longDateFormat:{LT:"A h:mm बजे",LTS:"A h:mm:ss बजे",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, LT",LLLL:"dddd, D MMMM YYYY, LT"},calendar:{sameDay:"[आज] LT",nextDay:"[कल] LT",nextWeek:"dddd, LT",lastDay:"[कल] LT",lastWeek:"[पिछले] dddd, LT",sameElse:"L"},relativeTime:{future:"%s में",past:"%s पहले",s:"कुछ ही क्षण",m:"एक मिनट",mm:"%d मिनट",h:"एक घंटा",hh:"%d घंटे",d:"एक दिन",dd:"%d दिन",M:"एक महीने",MM:"%d महीने",y:"एक वर्ष",yy:"%d वर्ष"},preparse:function(a){return a.replace(/[१२३४५६७८९०]/g,function(a){return d[a]})},postformat:function(a){return a.replace(/\d/g,function(a){return c[a]})},meridiemParse:/रात|सुबह|दोपहर|शाम/,meridiemHour:function(a,b){return 12===a&&(a=0),"रात"===b?4>a?a:a+12:"सुबह"===b?a:"दोपहर"===b?a>=10?a:a+12:"शाम"===b?a+12:void 0},meridiem:function(a,b,c){return 4>a?"रात":10>a?"सुबह":17>a?"दोपहर":20>a?"शाम":"रात"},week:{dow:0,doy:6}}),a.fullCalendar.datepickerLang("hi","hi",{closeText:"बंद",prevText:"पिछला",nextText:"अगला",currentText:"आज",monthNames:["जनवरी ","फरवरी","मार्च","अप्रेल","मई","जून","जूलाई","अगस्त ","सितम्बर","अक्टूबर","नवम्बर","दिसम्बर"],monthNamesShort:["जन","फर","मार्च","अप्रेल","मई","जून","जूलाई","अग","सित","अक्ट","नव","दि"],dayNames:["रविवार","सोमवार","मंगलवार","बुधवार","गुरुवार","शुक्रवार","शनिवार"],dayNamesShort:["रवि","सोम","मंगल","बुध","गुरु","शुक्र","शनि"],dayNamesMin:["रवि","सोम","मंगल","बुध","गुरु","शुक्र","शनि"],weekHeader:"हफ्ता",dateFormat:"dd/mm/yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("hi",{buttonText:{month:"महीना",week:"सप्ताह",day:"दिन",list:"कार्यसूची"},allDayText:"सभी दिन",eventLimitText:function(a){return"+अधिक "+a}})}(),function(){function c(a,b,c){var d=a+" ";switch(c){case"m":return b?"jedna minuta":"jedne minute";case"mm":return d+=1===a?"minuta":2===a||3===a||4===a?"minute":"minuta";case"h":return b?"jedan sat":"jednog sata";case"hh":return d+=1===a?"sat":2===a||3===a||4===a?"sata":"sati";case"dd":return d+=1===a?"dan":"dana";case"MM":return d+=1===a?"mjesec":2===a||3===a||4===a?"mjeseca":"mjeseci";case"yy":return d+=1===a?"godina":2===a||3===a||4===a?"godine":"godina"}}(b.defineLocale||b.lang).call(b,"hr",{months:"sječanj_veljača_ožujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac".split("_"),monthsShort:"sje._vel._ožu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.".split("_"),weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),longDateFormat:{LT:"H:mm",LTS:"LT:ss",L:"DD. MM. YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY LT",LLLL:"dddd, D. MMMM YYYY LT"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[jučer u] LT",lastWeek:function(){switch(this.day()){case 0:case 3:return"[prošlu] dddd [u] LT";case 6:return"[prošle] [subote] [u] LT";case 1:case 2:case 4:case 5:return"[prošli] dddd [u] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"par sekundi",m:c,mm:c,h:c,hh:c,d:"dan",dd:c,M:"mjesec",MM:c,y:"godinu",yy:c},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}}),a.fullCalendar.datepickerLang("hr","hr",{closeText:"Zatvori",prevText:"&#x3C;",nextText:"&#x3E;",currentText:"Danas",monthNames:["Siječanj","Veljača","Ožujak","Travanj","Svibanj","Lipanj","Srpanj","Kolovoz","Rujan","Listopad","Studeni","Prosinac"],monthNamesShort:["Sij","Velj","Ožu","Tra","Svi","Lip","Srp","Kol","Ruj","Lis","Stu","Pro"],dayNames:["Nedjelja","Ponedjeljak","Utorak","Srijeda","Četvrtak","Petak","Subota"],dayNamesShort:["Ned","Pon","Uto","Sri","Čet","Pet","Sub"],dayNamesMin:["Ne","Po","Ut","Sr","Če","Pe","Su"],weekHeader:"Tje",dateFormat:"dd.mm.yy.",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("hr",{buttonText:{month:"Mjesec",week:"Tjedan",day:"Dan",list:"Raspored"},allDayText:"Cijeli dan",eventLimitText:function(a){return"+ još "+a}})}(),function(){function c(a,b,c,d){var e=a;switch(c){case"s":return d||b?"néhány másodperc":"néhány másodperce";case"m":return"egy"+(d||b?" perc":" perce");case"mm":return e+(d||b?" perc":" perce");case"h":return"egy"+(d||b?" óra":" órája");case"hh":return e+(d||b?" óra":" órája");case"d":return"egy"+(d||b?" nap":" napja");case"dd":return e+(d||b?" nap":" napja");case"M":return"egy"+(d||b?" hónap":" hónapja");case"MM":return e+(d||b?" hónap":" hónapja");case"y":return"egy"+(d||b?" év":" éve");case"yy":return e+(d||b?" év":" éve")}return""}function d(a){return(a?"":"[múlt] ")+"["+e[this.day()]+"] LT[-kor]"}var e="vasárnap hétfőn kedden szerdán csütörtökön pénteken szombaton".split(" ");(b.defineLocale||b.lang).call(b,"hu",{months:"január_február_március_április_május_június_július_augusztus_szeptember_október_november_december".split("_"),monthsShort:"jan_feb_márc_ápr_máj_jún_júl_aug_szept_okt_nov_dec".split("_"),weekdays:"vasárnap_hétfő_kedd_szerda_csütörtök_péntek_szombat".split("_"),weekdaysShort:"vas_hét_kedd_sze_csüt_pén_szo".split("_"),weekdaysMin:"v_h_k_sze_cs_p_szo".split("_"),longDateFormat:{LT:"H:mm",LTS:"LT:ss",L:"YYYY.MM.DD.",LL:"YYYY. MMMM D.",LLL:"YYYY. MMMM D., LT",LLLL:"YYYY. MMMM D., dddd LT"},meridiemParse:/de|du/i,isPM:function(a){return"u"===a.charAt(1).toLowerCase()},meridiem:function(a,b,c){return 12>a?c===!0?"de":"DE":c===!0?"du":"DU"},calendar:{sameDay:"[ma] LT[-kor]",nextDay:"[holnap] LT[-kor]",nextWeek:function(){return d.call(this,!0)},lastDay:"[tegnap] LT[-kor]",lastWeek:function(){return d.call(this,!1)},sameElse:"L"},relativeTime:{future:"%s múlva",past:"%s",s:c,m:c,mm:c,h:c,hh:c,d:c,dd:c,M:c,MM:c,y:c,yy:c},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}}),a.fullCalendar.datepickerLang("hu","hu",{closeText:"bezár",prevText:"vissza",nextText:"előre",currentText:"ma",monthNames:["Január","Február","Március","Április","Május","Június","Július","Augusztus","Szeptember","Október","November","December"],monthNamesShort:["Jan","Feb","Már","Ápr","Máj","Jún","Júl","Aug","Szep","Okt","Nov","Dec"],dayNames:["Vasárnap","Hétfő","Kedd","Szerda","Csütörtök","Péntek","Szombat"],dayNamesShort:["Vas","Hét","Ked","Sze","Csü","Pén","Szo"],dayNamesMin:["V","H","K","Sze","Cs","P","Szo"],weekHeader:"Hét",dateFormat:"yy.mm.dd.",firstDay:1,isRTL:!1,showMonthAfterYear:!0,yearSuffix:""}),a.fullCalendar.lang("hu",{buttonText:{month:"Hónap",week:"Hét",day:"Nap",list:"Napló"},allDayText:"Egész nap",eventLimitText:"további"})}(),function(){(b.defineLocale||b.lang).call(b,"id",{months:"Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember".split("_"),monthsShort:"Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nov_Des".split("_"),weekdays:"Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu".split("_"),weekdaysShort:"Min_Sen_Sel_Rab_Kam_Jum_Sab".split("_"),weekdaysMin:"Mg_Sn_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"LT.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] LT",LLLL:"dddd, D MMMM YYYY [pukul] LT"},meridiemParse:/pagi|siang|sore|malam/,meridiemHour:function(a,b){return 12===a&&(a=0),"pagi"===b?a:"siang"===b?a>=11?a:a+12:"sore"===b||"malam"===b?a+12:void 0},meridiem:function(a,b,c){return 11>a?"pagi":15>a?"siang":19>a?"sore":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Besok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kemarin pukul] LT",lastWeek:"dddd [lalu pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lalu",s:"beberapa detik",m:"semenit",mm:"%d menit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:1,doy:7}}),a.fullCalendar.datepickerLang("id","id",{closeText:"Tutup",prevText:"&#x3C;mundur",nextText:"maju&#x3E;",currentText:"hari ini",monthNames:["Januari","Februari","Maret","April","Mei","Juni","Juli","Agustus","September","Oktober","Nopember","Desember"],monthNamesShort:["Jan","Feb","Mar","Apr","Mei","Jun","Jul","Agus","Sep","Okt","Nop","Des"],dayNames:["Minggu","Senin","Selasa","Rabu","Kamis","Jumat","Sabtu"],dayNamesShort:["Min","Sen","Sel","Rab","kam","Jum","Sab"],dayNamesMin:["Mg","Sn","Sl","Rb","Km","jm","Sb"],weekHeader:"Mg",dateFormat:"dd/mm/yy",firstDay:0,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("id",{buttonText:{month:"Bulan",week:"Minggu",day:"Hari",list:"Agenda"},allDayHtml:"Sehari<br/>penuh",eventLimitText:"lebih"})}(),function(){function c(a){return a%100===11?!0:a%10===1?!1:!0}function d(a,b,d,e){var f=a+" ";switch(d){case"s":return b||e?"nokkrar sekúndur":"nokkrum sekúndum";case"m":return b?"mínúta":"mínútu";case"mm":return c(a)?f+(b||e?"mínútur":"mínútum"):b?f+"mínúta":f+"mínútu";case"hh":return c(a)?f+(b||e?"klukkustundir":"klukkustundum"):f+"klukkustund";case"d":return b?"dagur":e?"dag":"degi";case"dd":return c(a)?b?f+"dagar":f+(e?"daga":"dögum"):b?f+"dagur":f+(e?"dag":"degi");case"M":return b?"mánuður":e?"mánuð":"mánuði";case"MM":return c(a)?b?f+"mánuðir":f+(e?"mánuði":"mánuðum"):b?f+"mánuður":f+(e?"mánuð":"mánuði");case"y":return b||e?"ár":"ári";case"yy":return c(a)?f+(b||e?"ár":"árum"):f+(b||e?"ár":"ári")}}(b.defineLocale||b.lang).call(b,"is",{months:"janúar_febrúar_mars_apríl_maí_júní_júlí_ágúst_september_október_nóvember_desember".split("_"),monthsShort:"jan_feb_mar_apr_maí_jún_júl_ágú_sep_okt_nóv_des".split("_"),weekdays:"sunnudagur_mánudagur_þriðjudagur_miðvikudagur_fimmtudagur_föstudagur_laugardagur".split("_"),weekdaysShort:"sun_mán_þri_mið_fim_fös_lau".split("_"),weekdaysMin:"Su_Má_Þr_Mi_Fi_Fö_La".split("_"),longDateFormat:{LT:"H:mm",LTS:"LT:ss",L:"DD/MM/YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] LT",LLLL:"dddd, D. MMMM YYYY [kl.] LT"},calendar:{sameDay:"[í dag kl.] LT",nextDay:"[á morgun kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[í gær kl.] LT",lastWeek:"[síðasta] dddd [kl.] LT",sameElse:"L"},relativeTime:{future:"eftir %s",past:"fyrir %s síðan",s:d,m:d,mm:d,h:"klukkustund",hh:d,d:d,dd:d,M:d,MM:d,y:d,yy:d},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),a.fullCalendar.datepickerLang("is","is",{closeText:"Loka",prevText:"&#x3C; Fyrri",nextText:"Næsti &#x3E;",currentText:"Í dag",monthNames:["Janúar","Febrúar","Mars","Apríl","Maí","Júní","Júlí","Ágúst","September","Október","Nóvember","Desember"],monthNamesShort:["Jan","Feb","Mar","Apr","Maí","Jún","Júl","Ágú","Sep","Okt","Nóv","Des"],dayNames:["Sunnudagur","Mánudagur","Þriðjudagur","Miðvikudagur","Fimmtudagur","Föstudagur","Laugardagur"],dayNamesShort:["Sun","Mán","Þri","Mið","Fim","Fös","Lau"],dayNamesMin:["Su","Má","Þr","Mi","Fi","Fö","La"],weekHeader:"Vika",dateFormat:"dd.mm.yy",firstDay:0,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("is",{buttonText:{month:"Mánuður",week:"Vika",day:"Dagur",list:"Dagskrá"},allDayHtml:"Allan<br/>daginn",eventLimitText:"meira"})}(),function(){(b.defineLocale||b.lang).call(b,"it",{months:"gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre".split("_"),monthsShort:"gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic".split("_"),weekdays:"Domenica_Lunedì_Martedì_Mercoledì_Giovedì_Venerdì_Sabato".split("_"),weekdaysShort:"Dom_Lun_Mar_Mer_Gio_Ven_Sab".split("_"),weekdaysMin:"D_L_Ma_Me_G_V_S".split("_"),longDateFormat:{LT:"HH:mm",LTS:"LT:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd, D MMMM YYYY LT"},calendar:{sameDay:"[Oggi alle] LT",nextDay:"[Domani alle] LT",nextWeek:"dddd [alle] LT",lastDay:"[Ieri alle] LT",lastWeek:function(){switch(this.day()){case 0:return"[la scorsa] dddd [alle] LT";default:return"[lo scorso] dddd [alle] LT"}},sameElse:"L"},relativeTime:{future:function(a){return(/^[0-9].+$/.test(a)?"tra":"in")+" "+a},past:"%s fa",s:"alcuni secondi",m:"un minuto",mm:"%d minuti",h:"un'ora",hh:"%d ore",d:"un giorno",dd:"%d giorni",M:"un mese",MM:"%d mesi",y:"un anno",yy:"%d anni"},ordinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}}),a.fullCalendar.datepickerLang("it","it",{closeText:"Chiudi",prevText:"&#x3C;Prec",nextText:"Succ&#x3E;",currentText:"Oggi",monthNames:["Gennaio","Febbraio","Marzo","Aprile","Maggio","Giugno","Luglio","Agosto","Settembre","Ottobre","Novembre","Dicembre"],monthNamesShort:["Gen","Feb","Mar","Apr","Mag","Giu","Lug","Ago","Set","Ott","Nov","Dic"],dayNames:["Domenica","Lunedì","Martedì","Mercoledì","Giovedì","Venerdì","Sabato"],dayNamesShort:["Dom","Lun","Mar","Mer","Gio","Ven","Sab"],dayNamesMin:["Do","Lu","Ma","Me","Gi","Ve","Sa"],weekHeader:"Sm",dateFormat:"dd/mm/yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("it",{buttonText:{month:"Mese",week:"Settimana",day:"Giorno",list:"Agenda"},allDayHtml:"Tutto il<br/>giorno",eventLimitText:function(a){return"+altri "+a}})}(),function(){(b.defineLocale||b.lang).call(b,"ja",{months:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日".split("_"),weekdaysShort:"日_月_火_水_木_金_土".split("_"),weekdaysMin:"日_月_火_水_木_金_土".split("_"),longDateFormat:{LT:"Ah時m分",LTS:"LTs秒",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日LT",LLLL:"YYYY年M月D日LT dddd"},meridiemParse:/午前|午後/i,isPM:function(a){return"午後"===a},meridiem:function(a,b,c){return 12>a?"午前":"午後"},calendar:{sameDay:"[今日] LT",nextDay:"[明日] LT",nextWeek:"[来週]dddd LT",lastDay:"[昨日] LT",lastWeek:"[前週]dddd LT",sameElse:"L"},relativeTime:{future:"%s後",past:"%s前",s:"数秒",m:"1分",mm:"%d分",h:"1時間",hh:"%d時間",d:"1日",dd:"%d日",M:"1ヶ月",MM:"%dヶ月",y:"1年",yy:"%d年"}}),a.fullCalendar.datepickerLang("ja","ja",{closeText:"閉じる",prevText:"&#x3C;前",nextText:"次&#x3E;",currentText:"今日",monthNames:["1月","2月","3月","4月","5月","6月","7月","8月","9月","10月","11月","12月"],monthNamesShort:["1月","2月","3月","4月","5月","6月","7月","8月","9月","10月","11月","12月"],dayNames:["日曜日","月曜日","火曜日","水曜日","木曜日","金曜日","土曜日"],dayNamesShort:["日","月","火","水","木","金","土"],dayNamesMin:["日","月","火","水","木","金","土"],weekHeader:"週",dateFormat:"yy/mm/dd",firstDay:0,isRTL:!1,showMonthAfterYear:!0,yearSuffix:"年"}),a.fullCalendar.lang("ja",{buttonText:{month:"月",week:"週",day:"日",list:"予定リスト"},allDayText:"終日",eventLimitText:function(a){return"他 "+a+" 件"}})}(),function(){(b.defineLocale||b.lang).call(b,"ko",{months:"1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),monthsShort:"1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),weekdays:"일요일_월요일_화요일_수요일_목요일_금요일_토요일".split("_"),weekdaysShort:"일_월_화_수_목_금_토".split("_"),weekdaysMin:"일_월_화_수_목_금_토".split("_"),longDateFormat:{LT:"A h시 m분",LTS:"A h시 m분 s초",L:"YYYY.MM.DD",LL:"YYYY년 MMMM D일",LLL:"YYYY년 MMMM D일 LT",LLLL:"YYYY년 MMMM D일 dddd LT"},calendar:{sameDay:"오늘 LT",nextDay:"내일 LT",nextWeek:"dddd LT",lastDay:"어제 LT",lastWeek:"지난주 dddd LT",sameElse:"L"},relativeTime:{future:"%s 후",past:"%s 전",s:"몇초",ss:"%d초",m:"일분",mm:"%d분",h:"한시간",hh:"%d시간",d:"하루",dd:"%d일",M:"한달",MM:"%d달",y:"일년",yy:"%d년"},ordinalParse:/\d{1,2}일/,ordinal:"%d일",meridiemParse:/오전|오후/,isPM:function(a){return"오후"===a},meridiem:function(a,b,c){return 12>a?"오전":"오후"}}),a.fullCalendar.datepickerLang("ko","ko",{closeText:"닫기",prevText:"이전달",nextText:"다음달",currentText:"오늘",monthNames:["1월","2월","3월","4월","5월","6월","7월","8월","9월","10월","11월","12월"],monthNamesShort:["1월","2월","3월","4월","5월","6월","7월","8월","9월","10월","11월","12월"],dayNames:["일요일","월요일","화요일","수요일","목요일","금요일","토요일"],dayNamesShort:["일","월","화","수","목","금","토"],dayNamesMin:["일","월","화","수","목","금","토"],weekHeader:"Wk",dateFormat:"yy-mm-dd",firstDay:0,isRTL:!1,showMonthAfterYear:!0,yearSuffix:"년"}),a.fullCalendar.lang("ko",{buttonText:{month:"월",week:"주",day:"일",list:"일정목록"},allDayText:"종일",eventLimitText:"개"})}(),function(){function c(a,b,c,d){return b?"kelios sekundės":d?"kelių sekundžių":"kelias sekundes"}function d(a,b,c,d){return b?f(c)[0]:d?f(c)[1]:f(c)[2]}function e(a){return a%10===0||a>10&&20>a}function f(a){return i[a].split("_")}function g(a,b,c,g){var h=a+" ";return 1===a?h+d(a,b,c[0],g):b?h+(e(a)?f(c)[1]:f(c)[0]):g?h+f(c)[1]:h+(e(a)?f(c)[1]:f(c)[2])}function h(a,b){var c=-1===b.indexOf("dddd HH:mm"),d=j[a.day()];return c?d:d.substring(0,d.length-2)+"į"}var i={m:"minutė_minutės_minutę",mm:"minutės_minučių_minutes",h:"valanda_valandos_valandą",hh:"valandos_valandų_valandas",d:"diena_dienos_dieną",dd:"dienos_dienų_dienas",M:"mėnuo_mėnesio_mėnesį",MM:"mėnesiai_mėnesių_mėnesius",y:"metai_metų_metus",yy:"metai_metų_metus"},j="sekmadienis_pirmadienis_antradienis_trečiadienis_ketvirtadienis_penktadienis_šeštadienis".split("_");(b.defineLocale||b.lang).call(b,"lt",{months:"sausio_vasario_kovo_balandžio_gegužės_birželio_liepos_rugpjūčio_rugsėjo_spalio_lapkričio_gruodžio".split("_"),monthsShort:"sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd".split("_"),weekdays:h,weekdaysShort:"Sek_Pir_Ant_Tre_Ket_Pen_Šeš".split("_"),weekdaysMin:"S_P_A_T_K_Pn_Š".split("_"),longDateFormat:{LT:"HH:mm",LTS:"LT:ss",L:"YYYY-MM-DD",LL:"YYYY [m.] MMMM D [d.]",LLL:"YYYY [m.] MMMM D [d.], LT [val.]",LLLL:"YYYY [m.] MMMM D [d.], dddd, LT [val.]",l:"YYYY-MM-DD",ll:"YYYY [m.] MMMM D [d.]",lll:"YYYY [m.] MMMM D [d.], LT [val.]",llll:"YYYY [m.] MMMM D [d.], ddd, LT [val.]"},calendar:{sameDay:"[Šiandien] LT",nextDay:"[Rytoj] LT",nextWeek:"dddd LT",lastDay:"[Vakar] LT",lastWeek:"[Praėjusį] dddd LT",sameElse:"L"},relativeTime:{future:"po %s",past:"prieš %s",s:c,m:d,mm:g,h:d,hh:g,d:d,dd:g,M:d,MM:g,y:d,yy:g},ordinalParse:/\d{1,2}-oji/,ordinal:function(a){return a+"-oji"},week:{dow:1,doy:4}}),a.fullCalendar.datepickerLang("lt","lt",{closeText:"Uždaryti",prevText:"&#x3C;Atgal",nextText:"Pirmyn&#x3E;",currentText:"Šiandien",monthNames:["Sausis","Vasaris","Kovas","Balandis","Gegužė","Birželis","Liepa","Rugpjūtis","Rugsėjis","Spalis","Lapkritis","Gruodis"],monthNamesShort:["Sau","Vas","Kov","Bal","Geg","Bir","Lie","Rugp","Rugs","Spa","Lap","Gru"],dayNames:["sekmadienis","pirmadienis","antradienis","trečiadienis","ketvirtadienis","penktadienis","šeštadienis"],dayNamesShort:["sek","pir","ant","tre","ket","pen","šeš"],dayNamesMin:["Se","Pr","An","Tr","Ke","Pe","Še"],weekHeader:"SAV",dateFormat:"yy-mm-dd",firstDay:1,isRTL:!1,showMonthAfterYear:!0,yearSuffix:""}),a.fullCalendar.lang("lt",{buttonText:{month:"Mėnuo",week:"Savaitė",day:"Diena",list:"Darbotvarkė"},allDayText:"Visą dieną",eventLimitText:"daugiau"})}(),function(){function c(a,b,c){var d=a.split("_");return c?b%10===1&&11!==b?d[2]:d[3]:b%10===1&&11!==b?d[0]:d[1]}function d(a,b,d){return a+" "+c(e[d],a,b)}var e={mm:"minūti_minūtes_minūte_minūtes",hh:"stundu_stundas_stunda_stundas",dd:"dienu_dienas_diena_dienas",MM:"mēnesi_mēnešus_mēnesis_mēneši",yy:"gadu_gadus_gads_gadi"};(b.defineLocale||b.lang).call(b,"lv",{months:"janvāris_februāris_marts_aprīlis_maijs_jūnijs_jūlijs_augusts_septembris_oktobris_novembris_decembris".split("_"),monthsShort:"jan_feb_mar_apr_mai_jūn_jūl_aug_sep_okt_nov_dec".split("_"),weekdays:"svētdiena_pirmdiena_otrdiena_trešdiena_ceturtdiena_piektdiena_sestdiena".split("_"),weekdaysShort:"Sv_P_O_T_C_Pk_S".split("_"),weekdaysMin:"Sv_P_O_T_C_Pk_S".split("_"),longDateFormat:{LT:"HH:mm",LTS:"LT:ss",L:"DD.MM.YYYY",LL:"YYYY. [gada] D. MMMM",LLL:"YYYY. [gada] D. MMMM, LT",LLLL:"YYYY. [gada] D. MMMM, dddd, LT"},calendar:{sameDay:"[Šodien pulksten] LT",nextDay:"[Rīt pulksten] LT",nextWeek:"dddd [pulksten] LT",lastDay:"[Vakar pulksten] LT",lastWeek:"[Pagājušā] dddd [pulksten] LT",sameElse:"L"},relativeTime:{future:"%s vēlāk",past:"%s agrāk",s:"dažas sekundes",m:"minūti",mm:d,h:"stundu",hh:d,d:"dienu",dd:d,M:"mēnesi",MM:d,y:"gadu",yy:d},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),a.fullCalendar.datepickerLang("lv","lv",{closeText:"Aizvērt",prevText:"Iepr.",nextText:"Nāk.",currentText:"Šodien",monthNames:["Janvāris","Februāris","Marts","Aprīlis","Maijs","Jūnijs","Jūlijs","Augusts","Septembris","Oktobris","Novembris","Decembris"],monthNamesShort:["Jan","Feb","Mar","Apr","Mai","Jūn","Jūl","Aug","Sep","Okt","Nov","Dec"],dayNames:["svētdiena","pirmdiena","otrdiena","trešdiena","ceturtdiena","piektdiena","sestdiena"],dayNamesShort:["svt","prm","otr","tre","ctr","pkt","sst"],dayNamesMin:["Sv","Pr","Ot","Tr","Ct","Pk","Ss"],weekHeader:"Ned.",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("lv",{buttonText:{month:"Mēnesis",week:"Nedēļa",day:"Diena",list:"Dienas kārtība"},allDayText:"Visu dienu",eventLimitText:function(a){return"+vēl "+a}})}(),function(){(b.defineLocale||b.lang).call(b,"nb",{months:"januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"),weekdays:"søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"),weekdaysShort:"søn_man_tirs_ons_tors_fre_lør".split("_"),weekdaysMin:"sø_ma_ti_on_to_fr_lø".split("_"),longDateFormat:{LT:"H.mm",LTS:"LT.ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] LT",LLLL:"dddd D. MMMM YYYY [kl.] LT"},calendar:{sameDay:"[i dag kl.] LT",nextDay:"[i morgen kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[i går kl.] LT",lastWeek:"[forrige] dddd [kl.] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"for %s siden",s:"noen sekunder",m:"ett minutt",mm:"%d minutter",h:"en time",hh:"%d timer",d:"en dag",dd:"%d dager",M:"en måned",MM:"%d måneder",y:"ett år",yy:"%d år"},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),a.fullCalendar.datepickerLang("nb","nb",{closeText:"Lukk",prevText:"&#xAB;Forrige",nextText:"Neste&#xBB;",currentText:"I dag",monthNames:["januar","februar","mars","april","mai","juni","juli","august","september","oktober","november","desember"],monthNamesShort:["jan","feb","mar","apr","mai","jun","jul","aug","sep","okt","nov","des"],dayNamesShort:["søn","man","tir","ons","tor","fre","lør"],dayNames:["søndag","mandag","tirsdag","onsdag","torsdag","fredag","lørdag"],dayNamesMin:["sø","ma","ti","on","to","fr","lø"],weekHeader:"Uke",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("nb",{buttonText:{month:"Måned",week:"Uke",day:"Dag",list:"Agenda"},allDayText:"Hele dagen",eventLimitText:"til"})}(),function(){var c="jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_"),d="jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_");(b.defineLocale||b.lang).call(b,"nl",{months:"januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"),monthsShort:function(a,b){return/-MMM-/.test(b)?d[a.month()]:c[a.month()]},weekdays:"zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"),weekdaysShort:"zo._ma._di._wo._do._vr._za.".split("_"),weekdaysMin:"Zo_Ma_Di_Wo_Do_Vr_Za".split("_"),longDateFormat:{LT:"HH:mm",LTS:"LT:ss",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd D MMMM YYYY LT"},calendar:{sameDay:"[vandaag om] LT",nextDay:"[morgen om] LT",nextWeek:"dddd [om] LT",lastDay:"[gisteren om] LT",lastWeek:"[afgelopen] dddd [om] LT",sameElse:"L"},relativeTime:{future:"over %s",past:"%s geleden",s:"een paar seconden",m:"één minuut",mm:"%d minuten",h:"één uur",hh:"%d uur",d:"één dag",dd:"%d dagen",M:"één maand",MM:"%d maanden",y:"één jaar",yy:"%d jaar"},ordinalParse:/\d{1,2}(ste|de)/,ordinal:function(a){return a+(1===a||8===a||a>=20?"ste":"de")},week:{dow:1,doy:4}}),a.fullCalendar.datepickerLang("nl","nl",{closeText:"Sluiten",prevText:"←",nextText:"→",currentText:"Vandaag",monthNames:["januari","februari","maart","april","mei","juni","juli","augustus","september","oktober","november","december"],
monthNamesShort:["jan","feb","mrt","apr","mei","jun","jul","aug","sep","okt","nov","dec"],dayNames:["zondag","maandag","dinsdag","woensdag","donderdag","vrijdag","zaterdag"],dayNamesShort:["zon","maa","din","woe","don","vri","zat"],dayNamesMin:["zo","ma","di","wo","do","vr","za"],weekHeader:"Wk",dateFormat:"dd-mm-yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("nl",{buttonText:{month:"Maand",week:"Week",day:"Dag",list:"Agenda"},allDayText:"Hele dag",eventLimitText:"extra"})}(),function(){function c(a){return 5>a%10&&a%10>1&&~~(a/10)%10!==1}function d(a,b,d){var e=a+" ";switch(d){case"m":return b?"minuta":"minutę";case"mm":return e+(c(a)?"minuty":"minut");case"h":return b?"godzina":"godzinę";case"hh":return e+(c(a)?"godziny":"godzin");case"MM":return e+(c(a)?"miesiące":"miesięcy");case"yy":return e+(c(a)?"lata":"lat")}}var e="styczeń_luty_marzec_kwiecień_maj_czerwiec_lipiec_sierpień_wrzesień_październik_listopad_grudzień".split("_"),f="stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_września_października_listopada_grudnia".split("_");(b.defineLocale||b.lang).call(b,"pl",{months:function(a,b){return/D MMMM/.test(b)?f[a.month()]:e[a.month()]},monthsShort:"sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paź_lis_gru".split("_"),weekdays:"niedziela_poniedziałek_wtorek_środa_czwartek_piątek_sobota".split("_"),weekdaysShort:"nie_pon_wt_śr_czw_pt_sb".split("_"),weekdaysMin:"N_Pn_Wt_Śr_Cz_Pt_So".split("_"),longDateFormat:{LT:"HH:mm",LTS:"LT:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd, D MMMM YYYY LT"},calendar:{sameDay:"[Dziś o] LT",nextDay:"[Jutro o] LT",nextWeek:"[W] dddd [o] LT",lastDay:"[Wczoraj o] LT",lastWeek:function(){switch(this.day()){case 0:return"[W zeszłą niedzielę o] LT";case 3:return"[W zeszłą środę o] LT";case 6:return"[W zeszłą sobotę o] LT";default:return"[W zeszły] dddd [o] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"%s temu",s:"kilka sekund",m:d,mm:d,h:d,hh:d,d:"1 dzień",dd:"%d dni",M:"miesiąc",MM:d,y:"rok",yy:d},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),a.fullCalendar.datepickerLang("pl","pl",{closeText:"Zamknij",prevText:"&#x3C;Poprzedni",nextText:"Następny&#x3E;",currentText:"Dziś",monthNames:["Styczeń","Luty","Marzec","Kwiecień","Maj","Czerwiec","Lipiec","Sierpień","Wrzesień","Październik","Listopad","Grudzień"],monthNamesShort:["Sty","Lu","Mar","Kw","Maj","Cze","Lip","Sie","Wrz","Pa","Lis","Gru"],dayNames:["Niedziela","Poniedziałek","Wtorek","Środa","Czwartek","Piątek","Sobota"],dayNamesShort:["Nie","Pn","Wt","Śr","Czw","Pt","So"],dayNamesMin:["N","Pn","Wt","Śr","Cz","Pt","So"],weekHeader:"Tydz",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("pl",{buttonText:{month:"Miesiąc",week:"Tydzień",day:"Dzień",list:"Plan dnia"},allDayText:"Cały dzień",eventLimitText:"więcej"})}(),function(){(b.defineLocale||b.lang).call(b,"pt-br",{months:"janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro".split("_"),monthsShort:"jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez".split("_"),weekdays:"domingo_segunda-feira_terça-feira_quarta-feira_quinta-feira_sexta-feira_sábado".split("_"),weekdaysShort:"dom_seg_ter_qua_qui_sex_sáb".split("_"),weekdaysMin:"dom_2ª_3ª_4ª_5ª_6ª_sáb".split("_"),longDateFormat:{LT:"HH:mm",LTS:"LT:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY [às] LT",LLLL:"dddd, D [de] MMMM [de] YYYY [às] LT"},calendar:{sameDay:"[Hoje às] LT",nextDay:"[Amanhã às] LT",nextWeek:"dddd [às] LT",lastDay:"[Ontem às] LT",lastWeek:function(){return 0===this.day()||6===this.day()?"[Último] dddd [às] LT":"[Última] dddd [às] LT"},sameElse:"L"},relativeTime:{future:"em %s",past:"%s atrás",s:"segundos",m:"um minuto",mm:"%d minutos",h:"uma hora",hh:"%d horas",d:"um dia",dd:"%d dias",M:"um mês",MM:"%d meses",y:"um ano",yy:"%d anos"},ordinalParse:/\d{1,2}º/,ordinal:"%dº"}),a.fullCalendar.datepickerLang("pt-br","pt-BR",{closeText:"Fechar",prevText:"&#x3C;Anterior",nextText:"Próximo&#x3E;",currentText:"Hoje",monthNames:["Janeiro","Fevereiro","Março","Abril","Maio","Junho","Julho","Agosto","Setembro","Outubro","Novembro","Dezembro"],monthNamesShort:["Jan","Fev","Mar","Abr","Mai","Jun","Jul","Ago","Set","Out","Nov","Dez"],dayNames:["Domingo","Segunda-feira","Terça-feira","Quarta-feira","Quinta-feira","Sexta-feira","Sábado"],dayNamesShort:["Dom","Seg","Ter","Qua","Qui","Sex","Sáb"],dayNamesMin:["Dom","Seg","Ter","Qua","Qui","Sex","Sáb"],weekHeader:"Sm",dateFormat:"dd/mm/yy",firstDay:0,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("pt-br",{buttonText:{month:"Mês",week:"Semana",day:"Dia",list:"Compromissos"},allDayText:"dia inteiro",eventLimitText:function(a){return"mais +"+a}})}(),function(){(b.defineLocale||b.lang).call(b,"pt",{months:"janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro".split("_"),monthsShort:"jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez".split("_"),weekdays:"domingo_segunda-feira_terça-feira_quarta-feira_quinta-feira_sexta-feira_sábado".split("_"),weekdaysShort:"dom_seg_ter_qua_qui_sex_sáb".split("_"),weekdaysMin:"dom_2ª_3ª_4ª_5ª_6ª_sáb".split("_"),longDateFormat:{LT:"HH:mm",LTS:"LT:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY LT",LLLL:"dddd, D [de] MMMM [de] YYYY LT"},calendar:{sameDay:"[Hoje às] LT",nextDay:"[Amanhã às] LT",nextWeek:"dddd [às] LT",lastDay:"[Ontem às] LT",lastWeek:function(){return 0===this.day()||6===this.day()?"[Último] dddd [às] LT":"[Última] dddd [às] LT"},sameElse:"L"},relativeTime:{future:"em %s",past:"há %s",s:"segundos",m:"um minuto",mm:"%d minutos",h:"uma hora",hh:"%d horas",d:"um dia",dd:"%d dias",M:"um mês",MM:"%d meses",y:"um ano",yy:"%d anos"},ordinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}}),a.fullCalendar.datepickerLang("pt","pt",{closeText:"Fechar",prevText:"Anterior",nextText:"Seguinte",currentText:"Hoje",monthNames:["Janeiro","Fevereiro","Março","Abril","Maio","Junho","Julho","Agosto","Setembro","Outubro","Novembro","Dezembro"],monthNamesShort:["Jan","Fev","Mar","Abr","Mai","Jun","Jul","Ago","Set","Out","Nov","Dez"],dayNames:["Domingo","Segunda-feira","Terça-feira","Quarta-feira","Quinta-feira","Sexta-feira","Sábado"],dayNamesShort:["Dom","Seg","Ter","Qua","Qui","Sex","Sáb"],dayNamesMin:["Dom","Seg","Ter","Qua","Qui","Sex","Sáb"],weekHeader:"Sem",dateFormat:"dd/mm/yy",firstDay:0,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("pt",{buttonText:{month:"Mês",week:"Semana",day:"Dia",list:"Agenda"},allDayText:"Todo o dia",eventLimitText:"mais"})}(),function(){function c(a,b,c){var d={mm:"minute",hh:"ore",dd:"zile",MM:"luni",yy:"ani"},e=" ";return(a%100>=20||a>=100&&a%100===0)&&(e=" de "),a+e+d[c]}(b.defineLocale||b.lang).call(b,"ro",{months:"ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie".split("_"),monthsShort:"ian._febr._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.".split("_"),weekdays:"duminică_luni_marți_miercuri_joi_vineri_sâmbătă".split("_"),weekdaysShort:"Dum_Lun_Mar_Mie_Joi_Vin_Sâm".split("_"),weekdaysMin:"Du_Lu_Ma_Mi_Jo_Vi_Sâ".split("_"),longDateFormat:{LT:"H:mm",LTS:"LT:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[azi la] LT",nextDay:"[mâine la] LT",nextWeek:"dddd [la] LT",lastDay:"[ieri la] LT",lastWeek:"[fosta] dddd [la] LT",sameElse:"L"},relativeTime:{future:"peste %s",past:"%s în urmă",s:"câteva secunde",m:"un minut",mm:c,h:"o oră",hh:c,d:"o zi",dd:c,M:"o lună",MM:c,y:"un an",yy:c},week:{dow:1,doy:7}}),a.fullCalendar.datepickerLang("ro","ro",{closeText:"Închide",prevText:"&#xAB; Luna precedentă",nextText:"Luna următoare &#xBB;",currentText:"Azi",monthNames:["Ianuarie","Februarie","Martie","Aprilie","Mai","Iunie","Iulie","August","Septembrie","Octombrie","Noiembrie","Decembrie"],monthNamesShort:["Ian","Feb","Mar","Apr","Mai","Iun","Iul","Aug","Sep","Oct","Nov","Dec"],dayNames:["Duminică","Luni","Marţi","Miercuri","Joi","Vineri","Sâmbătă"],dayNamesShort:["Dum","Lun","Mar","Mie","Joi","Vin","Sâm"],dayNamesMin:["Du","Lu","Ma","Mi","Jo","Vi","Sâ"],weekHeader:"Săpt",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("ro",{buttonText:{prev:"precedentă",next:"următoare",month:"Lună",week:"Săptămână",day:"Zi",list:"Agendă"},allDayText:"Toată ziua",eventLimitText:function(a){return"+alte "+a}})}(),function(){function c(a,b){var c=a.split("_");return b%10===1&&b%100!==11?c[0]:b%10>=2&&4>=b%10&&(10>b%100||b%100>=20)?c[1]:c[2]}function d(a,b,d){var e={mm:b?"минута_минуты_минут":"минуту_минуты_минут",hh:"час_часа_часов",dd:"день_дня_дней",MM:"месяц_месяца_месяцев",yy:"год_года_лет"};return"m"===d?b?"минута":"минуту":a+" "+c(e[d],+a)}function e(a,b){var c={nominative:"январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_"),accusative:"января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря".split("_")},d=/D[oD]?(\[[^\[\]]*\]|\s+)+MMMM?/.test(b)?"accusative":"nominative";return c[d][a.month()]}function f(a,b){var c={nominative:"янв_фев_март_апр_май_июнь_июль_авг_сен_окт_ноя_дек".split("_"),accusative:"янв_фев_мар_апр_мая_июня_июля_авг_сен_окт_ноя_дек".split("_")},d=/D[oD]?(\[[^\[\]]*\]|\s+)+MMMM?/.test(b)?"accusative":"nominative";return c[d][a.month()]}function g(a,b){var c={nominative:"воскресенье_понедельник_вторник_среда_четверг_пятница_суббота".split("_"),accusative:"воскресенье_понедельник_вторник_среду_четверг_пятницу_субботу".split("_")},d=/\[ ?[Вв] ?(?:прошлую|следующую|эту)? ?\] ?dddd/.test(b)?"accusative":"nominative";return c[d][a.day()]}(b.defineLocale||b.lang).call(b,"ru",{months:e,monthsShort:f,weekdays:g,weekdaysShort:"вс_пн_вт_ср_чт_пт_сб".split("_"),weekdaysMin:"вс_пн_вт_ср_чт_пт_сб".split("_"),monthsParse:[/^янв/i,/^фев/i,/^мар/i,/^апр/i,/^ма[й|я]/i,/^июн/i,/^июл/i,/^авг/i,/^сен/i,/^окт/i,/^ноя/i,/^дек/i],longDateFormat:{LT:"HH:mm",LTS:"LT:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY г.",LLL:"D MMMM YYYY г., LT",LLLL:"dddd, D MMMM YYYY г., LT"},calendar:{sameDay:"[Сегодня в] LT",nextDay:"[Завтра в] LT",lastDay:"[Вчера в] LT",nextWeek:function(){return 2===this.day()?"[Во] dddd [в] LT":"[В] dddd [в] LT"},lastWeek:function(a){if(a.week()===this.week())return 2===this.day()?"[Во] dddd [в] LT":"[В] dddd [в] LT";switch(this.day()){case 0:return"[В прошлое] dddd [в] LT";case 1:case 2:case 4:return"[В прошлый] dddd [в] LT";case 3:case 5:case 6:return"[В прошлую] dddd [в] LT"}},sameElse:"L"},relativeTime:{future:"через %s",past:"%s назад",s:"несколько секунд",m:d,mm:d,h:"час",hh:d,d:"день",dd:d,M:"месяц",MM:d,y:"год",yy:d},meridiemParse:/ночи|утра|дня|вечера/i,isPM:function(a){return/^(дня|вечера)$/.test(a)},meridiem:function(a,b,c){return 4>a?"ночи":12>a?"утра":17>a?"дня":"вечера"},ordinalParse:/\d{1,2}-(й|го|я)/,ordinal:function(a,b){switch(b){case"M":case"d":case"DDD":return a+"-й";case"D":return a+"-го";case"w":case"W":return a+"-я";default:return a}},week:{dow:1,doy:7}}),a.fullCalendar.datepickerLang("ru","ru",{closeText:"Закрыть",prevText:"&#x3C;Пред",nextText:"След&#x3E;",currentText:"Сегодня",monthNames:["Январь","Февраль","Март","Апрель","Май","Июнь","Июль","Август","Сентябрь","Октябрь","Ноябрь","Декабрь"],monthNamesShort:["Янв","Фев","Мар","Апр","Май","Июн","Июл","Авг","Сен","Окт","Ноя","Дек"],dayNames:["воскресенье","понедельник","вторник","среда","четверг","пятница","суббота"],dayNamesShort:["вск","пнд","втр","срд","чтв","птн","сбт"],dayNamesMin:["Вс","Пн","Вт","Ср","Чт","Пт","Сб"],weekHeader:"Нед",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("ru",{buttonText:{month:"Месяц",week:"Неделя",day:"День",list:"Повестка дня"},allDayText:"Весь день",eventLimitText:function(a){return"+ ещё "+a}})}(),function(){function c(a){return a>1&&5>a}function d(a,b,d,e){var f=a+" ";switch(d){case"s":return b||e?"pár sekúnd":"pár sekundami";case"m":return b?"minúta":e?"minútu":"minútou";case"mm":return b||e?f+(c(a)?"minúty":"minút"):f+"minútami";case"h":return b?"hodina":e?"hodinu":"hodinou";case"hh":return b||e?f+(c(a)?"hodiny":"hodín"):f+"hodinami";case"d":return b||e?"deň":"dňom";case"dd":return b||e?f+(c(a)?"dni":"dní"):f+"dňami";case"M":return b||e?"mesiac":"mesiacom";case"MM":return b||e?f+(c(a)?"mesiace":"mesiacov"):f+"mesiacmi";case"y":return b||e?"rok":"rokom";case"yy":return b||e?f+(c(a)?"roky":"rokov"):f+"rokmi"}}var e="január_február_marec_apríl_máj_jún_júl_august_september_október_november_december".split("_"),f="jan_feb_mar_apr_máj_jún_júl_aug_sep_okt_nov_dec".split("_");(b.defineLocale||b.lang).call(b,"sk",{months:e,monthsShort:f,monthsParse:function(a,b){var c,d=[];for(c=0;12>c;c++)d[c]=new RegExp("^"+a[c]+"$|^"+b[c]+"$","i");return d}(e,f),weekdays:"nedeľa_pondelok_utorok_streda_štvrtok_piatok_sobota".split("_"),weekdaysShort:"ne_po_ut_st_št_pi_so".split("_"),weekdaysMin:"ne_po_ut_st_št_pi_so".split("_"),longDateFormat:{LT:"H:mm",LTS:"LT:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY LT",LLLL:"dddd D. MMMM YYYY LT"},calendar:{sameDay:"[dnes o] LT",nextDay:"[zajtra o] LT",nextWeek:function(){switch(this.day()){case 0:return"[v nedeľu o] LT";case 1:case 2:return"[v] dddd [o] LT";case 3:return"[v stredu o] LT";case 4:return"[vo štvrtok o] LT";case 5:return"[v piatok o] LT";case 6:return"[v sobotu o] LT"}},lastDay:"[včera o] LT",lastWeek:function(){switch(this.day()){case 0:return"[minulú nedeľu o] LT";case 1:case 2:return"[minulý] dddd [o] LT";case 3:return"[minulú stredu o] LT";case 4:case 5:return"[minulý] dddd [o] LT";case 6:return"[minulú sobotu o] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"pred %s",s:d,m:d,mm:d,h:d,hh:d,d:d,dd:d,M:d,MM:d,y:d,yy:d},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}}),a.fullCalendar.datepickerLang("sk","sk",{closeText:"Zavrieť",prevText:"&#x3C;Predchádzajúci",nextText:"Nasledujúci&#x3E;",currentText:"Dnes",monthNames:["január","február","marec","apríl","máj","jún","júl","august","september","október","november","december"],monthNamesShort:["Jan","Feb","Mar","Apr","Máj","Jún","Júl","Aug","Sep","Okt","Nov","Dec"],dayNames:["nedeľa","pondelok","utorok","streda","štvrtok","piatok","sobota"],dayNamesShort:["Ned","Pon","Uto","Str","Štv","Pia","Sob"],dayNamesMin:["Ne","Po","Ut","St","Št","Pia","So"],weekHeader:"Ty",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("sk",{buttonText:{month:"Mesiac",week:"Týždeň",day:"Deň",list:"Rozvrh"},allDayText:"Celý deň",eventLimitText:function(a){return"+ďalšie: "+a}})}(),function(){function c(a,b,c){var d=a+" ";switch(c){case"m":return b?"ena minuta":"eno minuto";case"mm":return d+=1===a?"minuta":2===a?"minuti":3===a||4===a?"minute":"minut";case"h":return b?"ena ura":"eno uro";case"hh":return d+=1===a?"ura":2===a?"uri":3===a||4===a?"ure":"ur";case"dd":return d+=1===a?"dan":"dni";case"MM":return d+=1===a?"mesec":2===a?"meseca":3===a||4===a?"mesece":"mesecev";case"yy":return d+=1===a?"leto":2===a?"leti":3===a||4===a?"leta":"let"}}(b.defineLocale||b.lang).call(b,"sl",{months:"januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december".split("_"),monthsShort:"jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.".split("_"),weekdays:"nedelja_ponedeljek_torek_sreda_četrtek_petek_sobota".split("_"),weekdaysShort:"ned._pon._tor._sre._čet._pet._sob.".split("_"),weekdaysMin:"ne_po_to_sr_če_pe_so".split("_"),longDateFormat:{LT:"H:mm",LTS:"LT:ss",L:"DD. MM. YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY LT",LLLL:"dddd, D. MMMM YYYY LT"},calendar:{sameDay:"[danes ob] LT",nextDay:"[jutri ob] LT",nextWeek:function(){switch(this.day()){case 0:return"[v] [nedeljo] [ob] LT";case 3:return"[v] [sredo] [ob] LT";case 6:return"[v] [soboto] [ob] LT";case 1:case 2:case 4:case 5:return"[v] dddd [ob] LT"}},lastDay:"[včeraj ob] LT",lastWeek:function(){switch(this.day()){case 0:case 3:case 6:return"[prejšnja] dddd [ob] LT";case 1:case 2:case 4:case 5:return"[prejšnji] dddd [ob] LT"}},sameElse:"L"},relativeTime:{future:"čez %s",past:"%s nazaj",s:"nekaj sekund",m:c,mm:c,h:c,hh:c,d:"en dan",dd:c,M:"en mesec",MM:c,y:"eno leto",yy:c},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}}),a.fullCalendar.datepickerLang("sl","sl",{closeText:"Zapri",prevText:"&#x3C;Prejšnji",nextText:"Naslednji&#x3E;",currentText:"Trenutni",monthNames:["Januar","Februar","Marec","April","Maj","Junij","Julij","Avgust","September","Oktober","November","December"],monthNamesShort:["Jan","Feb","Mar","Apr","Maj","Jun","Jul","Avg","Sep","Okt","Nov","Dec"],dayNames:["Nedelja","Ponedeljek","Torek","Sreda","Četrtek","Petek","Sobota"],dayNamesShort:["Ned","Pon","Tor","Sre","Čet","Pet","Sob"],dayNamesMin:["Ne","Po","To","Sr","Če","Pe","So"],weekHeader:"Teden",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("sl",{buttonText:{month:"Mesec",week:"Teden",day:"Dan",list:"Dnevni red"},allDayText:"Ves dan",eventLimitText:"več"})}(),function(){var c={words:{m:["један минут","једне минуте"],mm:["минут","минуте","минута"],h:["један сат","једног сата"],hh:["сат","сата","сати"],dd:["дан","дана","дана"],MM:["месец","месеца","месеци"],yy:["година","године","година"]},correctGrammaticalCase:function(a,b){return 1===a?b[0]:a>=2&&4>=a?b[1]:b[2]},translate:function(a,b,d){var e=c.words[d];return 1===d.length?b?e[0]:e[1]:a+" "+c.correctGrammaticalCase(a,e)}};(b.defineLocale||b.lang).call(b,"sr-cyrl",{months:["јануар","фебруар","март","април","мај","јун","јул","август","септембар","октобар","новембар","децембар"],monthsShort:["јан.","феб.","мар.","апр.","мај","јун","јул","авг.","сеп.","окт.","нов.","дец."],weekdays:["недеља","понедељак","уторак","среда","четвртак","петак","субота"],weekdaysShort:["нед.","пон.","уто.","сре.","чет.","пет.","суб."],weekdaysMin:["не","по","ут","ср","че","пе","су"],longDateFormat:{LT:"H:mm",LTS:"LT:ss",L:"DD. MM. YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY LT",LLLL:"dddd, D. MMMM YYYY LT"},calendar:{sameDay:"[данас у] LT",nextDay:"[сутра у] LT",nextWeek:function(){switch(this.day()){case 0:return"[у] [недељу] [у] LT";case 3:return"[у] [среду] [у] LT";case 6:return"[у] [суботу] [у] LT";case 1:case 2:case 4:case 5:return"[у] dddd [у] LT"}},lastDay:"[јуче у] LT",lastWeek:function(){var a=["[прошле] [недеље] [у] LT","[прошлог] [понедељка] [у] LT","[прошлог] [уторка] [у] LT","[прошле] [среде] [у] LT","[прошлог] [четвртка] [у] LT","[прошлог] [петка] [у] LT","[прошле] [суботе] [у] LT"];return a[this.day()]},sameElse:"L"},relativeTime:{future:"за %s",past:"пре %s",s:"неколико секунди",m:c.translate,mm:c.translate,h:c.translate,hh:c.translate,d:"дан",dd:c.translate,M:"месец",MM:c.translate,y:"годину",yy:c.translate},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}}),a.fullCalendar.datepickerLang("sr-cyrl","sr",{closeText:"Затвори",prevText:"&#x3C;",nextText:"&#x3E;",currentText:"Данас",monthNames:["Јануар","Фебруар","Март","Април","Мај","Јун","Јул","Август","Септембар","Октобар","Новембар","Децембар"],monthNamesShort:["Јан","Феб","Мар","Апр","Мај","Јун","Јул","Авг","Сеп","Окт","Нов","Дец"],dayNames:["Недеља","Понедељак","Уторак","Среда","Четвртак","Петак","Субота"],dayNamesShort:["Нед","Пон","Уто","Сре","Чет","Пет","Суб"],dayNamesMin:["Не","По","Ут","Ср","Че","Пе","Су"],weekHeader:"Сед",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("sr-cyrl",{buttonText:{month:"Месец",week:"Недеља",day:"Дан",list:"Планер"},allDayText:"Цео дан",eventLimitText:function(a){return"+ још "+a}})}(),function(){var c={words:{m:["jedan minut","jedne minute"],mm:["minut","minute","minuta"],h:["jedan sat","jednog sata"],hh:["sat","sata","sati"],dd:["dan","dana","dana"],MM:["mesec","meseca","meseci"],yy:["godina","godine","godina"]},correctGrammaticalCase:function(a,b){return 1===a?b[0]:a>=2&&4>=a?b[1]:b[2]},translate:function(a,b,d){var e=c.words[d];return 1===d.length?b?e[0]:e[1]:a+" "+c.correctGrammaticalCase(a,e)}};(b.defineLocale||b.lang).call(b,"sr",{months:["januar","februar","mart","april","maj","jun","jul","avgust","septembar","oktobar","novembar","decembar"],monthsShort:["jan.","feb.","mar.","apr.","maj","jun","jul","avg.","sep.","okt.","nov.","dec."],weekdays:["nedelja","ponedeljak","utorak","sreda","četvrtak","petak","subota"],weekdaysShort:["ned.","pon.","uto.","sre.","čet.","pet.","sub."],weekdaysMin:["ne","po","ut","sr","če","pe","su"],longDateFormat:{LT:"H:mm",LTS:"LT:ss",L:"DD. MM. YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY LT",LLLL:"dddd, D. MMMM YYYY LT"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedelju] [u] LT";case 3:return"[u] [sredu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[juče u] LT",lastWeek:function(){var a=["[prošle] [nedelje] [u] LT","[prošlog] [ponedeljka] [u] LT","[prošlog] [utorka] [u] LT","[prošle] [srede] [u] LT","[prošlog] [četvrtka] [u] LT","[prošlog] [petka] [u] LT","[prošle] [subote] [u] LT"];return a[this.day()]},sameElse:"L"},relativeTime:{future:"za %s",past:"pre %s",s:"nekoliko sekundi",m:c.translate,mm:c.translate,h:c.translate,hh:c.translate,d:"dan",dd:c.translate,M:"mesec",MM:c.translate,y:"godinu",yy:c.translate},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}}),a.fullCalendar.datepickerLang("sr","sr",{closeText:"Затвори",prevText:"&#x3C;",nextText:"&#x3E;",currentText:"Данас",monthNames:["Јануар","Фебруар","Март","Април","Мај","Јун","Јул","Август","Септембар","Октобар","Новембар","Децембар"],monthNamesShort:["Јан","Феб","Мар","Апр","Мај","Јун","Јул","Авг","Сеп","Окт","Нов","Дец"],dayNames:["Недеља","Понедељак","Уторак","Среда","Четвртак","Петак","Субота"],dayNamesShort:["Нед","Пон","Уто","Сре","Чет","Пет","Суб"],dayNamesMin:["Не","По","Ут","Ср","Че","Пе","Су"],weekHeader:"Сед",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("sr",{buttonText:{month:"Месец",week:"Недеља",day:"Дан",list:"Планер"},allDayText:"Цео дан",eventLimitText:function(a){return"+ још "+a}})}(),function(){(b.defineLocale||b.lang).call(b,"sv",{months:"januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),weekdays:"söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag".split("_"),weekdaysShort:"sön_mån_tis_ons_tor_fre_lör".split("_"),weekdaysMin:"sö_må_ti_on_to_fr_lö".split("_"),longDateFormat:{LT:"HH:mm",LTS:"LT:ss",L:"YYYY-MM-DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd D MMMM YYYY LT"},calendar:{sameDay:"[Idag] LT",nextDay:"[Imorgon] LT",lastDay:"[Igår] LT",nextWeek:"dddd LT",lastWeek:"[Förra] dddd[en] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"för %s sedan",s:"några sekunder",m:"en minut",mm:"%d minuter",h:"en timme",hh:"%d timmar",d:"en dag",dd:"%d dagar",M:"en månad",MM:"%d månader",y:"ett år",yy:"%d år"},ordinalParse:/\d{1,2}(e|a)/,ordinal:function(a){var b=a%10,c=1===~~(a%100/10)?"e":1===b?"a":2===b?"a":"e";return a+c},week:{dow:1,doy:4}}),a.fullCalendar.datepickerLang("sv","sv",{closeText:"Stäng",prevText:"&#xAB;Förra",nextText:"Nästa&#xBB;",currentText:"Idag",monthNames:["Januari","Februari","Mars","April","Maj","Juni","Juli","Augusti","September","Oktober","November","December"],monthNamesShort:["Jan","Feb","Mar","Apr","Maj","Jun","Jul","Aug","Sep","Okt","Nov","Dec"],dayNamesShort:["Sön","Mån","Tis","Ons","Tor","Fre","Lör"],dayNames:["Söndag","Måndag","Tisdag","Onsdag","Torsdag","Fredag","Lördag"],dayNamesMin:["Sö","Må","Ti","On","To","Fr","Lö"],weekHeader:"Ve",dateFormat:"yy-mm-dd",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("sv",{buttonText:{month:"Månad",week:"Vecka",day:"Dag",list:"Program"},allDayText:"Heldag",eventLimitText:"till"})}(),function(){(b.defineLocale||b.lang).call(b,"th",{months:"มกราคม_กุมภาพันธ์_มีนาคม_เมษายน_พฤษภาคม_มิถุนายน_กรกฎาคม_สิงหาคม_กันยายน_ตุลาคม_พฤศจิกายน_ธันวาคม".split("_"),monthsShort:"มกรา_กุมภา_มีนา_เมษา_พฤษภา_มิถุนา_กรกฎา_สิงหา_กันยา_ตุลา_พฤศจิกา_ธันวา".split("_"),weekdays:"อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัสบดี_ศุกร์_เสาร์".split("_"),weekdaysShort:"อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัส_ศุกร์_เสาร์".split("_"),weekdaysMin:"อา._จ._อ._พ._พฤ._ศ._ส.".split("_"),longDateFormat:{LT:"H นาฬิกา m นาที",LTS:"LT s วินาที",L:"YYYY/MM/DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY เวลา LT",LLLL:"วันddddที่ D MMMM YYYY เวลา LT"},meridiemParse:/ก่อนเที่ยง|หลังเที่ยง/,isPM:function(a){return"หลังเที่ยง"===a},meridiem:function(a,b,c){return 12>a?"ก่อนเที่ยง":"หลังเที่ยง"},calendar:{sameDay:"[วันนี้ เวลา] LT",nextDay:"[พรุ่งนี้ เวลา] LT",nextWeek:"dddd[หน้า เวลา] LT",lastDay:"[เมื่อวานนี้ เวลา] LT",lastWeek:"[วัน]dddd[ที่แล้ว เวลา] LT",sameElse:"L"},relativeTime:{future:"อีก %s",past:"%sที่แล้ว",s:"ไม่กี่วินาที",m:"1 นาที",mm:"%d นาที",h:"1 ชั่วโมง",hh:"%d ชั่วโมง",d:"1 วัน",dd:"%d วัน",M:"1 เดือน",MM:"%d เดือน",y:"1 ปี",yy:"%d ปี"}}),a.fullCalendar.datepickerLang("th","th",{closeText:"ปิด",prevText:"&#xAB;&#xA0;ย้อน",nextText:"ถัดไป&#xA0;&#xBB;",currentText:"วันนี้",monthNames:["มกราคม","กุมภาพันธ์","มีนาคม","เมษายน","พฤษภาคม","มิถุนายน","กรกฎาคม","สิงหาคม","กันยายน","ตุลาคม","พฤศจิกายน","ธันวาคม"],monthNamesShort:["ม.ค.","ก.พ.","มี.ค.","เม.ย.","พ.ค.","มิ.ย.","ก.ค.","ส.ค.","ก.ย.","ต.ค.","พ.ย.","ธ.ค."],dayNames:["อาทิตย์","จันทร์","อังคาร","พุธ","พฤหัสบดี","ศุกร์","เสาร์"],dayNamesShort:["อา.","จ.","อ.","พ.","พฤ.","ศ.","ส."],dayNamesMin:["อา.","จ.","อ.","พ.","พฤ.","ศ.","ส."],weekHeader:"Wk",dateFormat:"dd/mm/yy",firstDay:0,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("th",{buttonText:{month:"เดือน",week:"สัปดาห์",day:"วัน",list:"แผนงาน"},allDayText:"ตลอดวัน",eventLimitText:"เพิ่มเติม"})}(),function(){var c={1:"'inci",5:"'inci",8:"'inci",70:"'inci",80:"'inci",2:"'nci",7:"'nci",20:"'nci",50:"'nci",3:"'üncü",4:"'üncü",100:"'üncü",6:"'ncı",9:"'uncu",10:"'uncu",30:"'uncu",60:"'ıncı",90:"'ıncı"};(b.defineLocale||b.lang).call(b,"tr",{months:"Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık".split("_"),monthsShort:"Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara".split("_"),weekdays:"Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi".split("_"),weekdaysShort:"Paz_Pts_Sal_Çar_Per_Cum_Cts".split("_"),weekdaysMin:"Pz_Pt_Sa_Ça_Pe_Cu_Ct".split("_"),longDateFormat:{LT:"HH:mm",LTS:"LT:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY LT",LLLL:"dddd, D MMMM YYYY LT"},calendar:{sameDay:"[bugün saat] LT",nextDay:"[yarın saat] LT",nextWeek:"[haftaya] dddd [saat] LT",lastDay:"[dün] LT",lastWeek:"[geçen hafta] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s sonra",past:"%s önce",s:"birkaç saniye",m:"bir dakika",mm:"%d dakika",h:"bir saat",hh:"%d saat",d:"bir gün",dd:"%d gün",M:"bir ay",MM:"%d ay",y:"bir yıl",yy:"%d yıl"},ordinalParse:/\d{1,2}'(inci|nci|üncü|ncı|uncu|ıncı)/,ordinal:function(a){if(0===a)return a+"'ıncı";var b=a%10,d=a%100-b,e=a>=100?100:null;return a+(c[b]||c[d]||c[e])},week:{dow:1,doy:7}}),a.fullCalendar.datepickerLang("tr","tr",{closeText:"kapat",prevText:"&#x3C;geri",nextText:"ileri&#x3e",currentText:"bugün",monthNames:["Ocak","Şubat","Mart","Nisan","Mayıs","Haziran","Temmuz","Ağustos","Eylül","Ekim","Kasım","Aralık"],monthNamesShort:["Oca","Şub","Mar","Nis","May","Haz","Tem","Ağu","Eyl","Eki","Kas","Ara"],dayNames:["Pazar","Pazartesi","Salı","Çarşamba","Perşembe","Cuma","Cumartesi"],dayNamesShort:["Pz","Pt","Sa","Ça","Pe","Cu","Ct"],dayNamesMin:["Pz","Pt","Sa","Ça","Pe","Cu","Ct"],weekHeader:"Hf",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("tr",{buttonText:{next:"ileri",month:"Ay",week:"Hafta",day:"Gün",list:"Ajanda"},allDayText:"Tüm gün",eventLimitText:"daha fazla"})}(),function(){function c(a,b){var c=a.split("_");return b%10===1&&b%100!==11?c[0]:b%10>=2&&4>=b%10&&(10>b%100||b%100>=20)?c[1]:c[2]}function d(a,b,d){var e={mm:"хвилина_хвилини_хвилин",hh:"година_години_годин",dd:"день_дні_днів",MM:"місяць_місяці_місяців",yy:"рік_роки_років"};return"m"===d?b?"хвилина":"хвилину":"h"===d?b?"година":"годину":a+" "+c(e[d],+a)}function e(a,b){var c={nominative:"січень_лютий_березень_квітень_травень_червень_липень_серпень_вересень_жовтень_листопад_грудень".split("_"),accusative:"січня_лютого_березня_квітня_травня_червня_липня_серпня_вересня_жовтня_листопада_грудня".split("_")},d=/D[oD]? *MMMM?/.test(b)?"accusative":"nominative";return c[d][a.month()]}function f(a,b){var c={nominative:"неділя_понеділок_вівторок_середа_четвер_п’ятниця_субота".split("_"),accusative:"неділю_понеділок_вівторок_середу_четвер_п’ятницю_суботу".split("_"),genitive:"неділі_понеділка_вівторка_середи_четверга_п’ятниці_суботи".split("_")},d=/(\[[ВвУу]\]) ?dddd/.test(b)?"accusative":/\[?(?:минулої|наступної)? ?\] ?dddd/.test(b)?"genitive":"nominative";return c[d][a.day()]}function g(a){return function(){return a+"о"+(11===this.hours()?"б":"")+"] LT"}}(b.defineLocale||b.lang).call(b,"uk",{months:e,monthsShort:"січ_лют_бер_квіт_трав_черв_лип_серп_вер_жовт_лист_груд".split("_"),weekdays:f,weekdaysShort:"нд_пн_вт_ср_чт_пт_сб".split("_"),weekdaysMin:"нд_пн_вт_ср_чт_пт_сб".split("_"),longDateFormat:{LT:"HH:mm",LTS:"LT:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY р.",LLL:"D MMMM YYYY р., LT",LLLL:"dddd, D MMMM YYYY р., LT"},calendar:{sameDay:g("[Сьогодні "),nextDay:g("[Завтра "),lastDay:g("[Вчора "),nextWeek:g("[У] dddd ["),lastWeek:function(){switch(this.day()){case 0:case 3:case 5:case 6:return g("[Минулої] dddd [").call(this);case 1:case 2:case 4:return g("[Минулого] dddd [").call(this)}},sameElse:"L"},relativeTime:{future:"за %s",past:"%s тому",s:"декілька секунд",m:d,mm:d,h:"годину",hh:d,d:"день",dd:d,M:"місяць",MM:d,y:"рік",yy:d},meridiemParse:/ночі|ранку|дня|вечора/,isPM:function(a){return/^(дня|вечора)$/.test(a)},meridiem:function(a,b,c){return 4>a?"ночі":12>a?"ранку":17>a?"дня":"вечора"},ordinalParse:/\d{1,2}-(й|го)/,ordinal:function(a,b){switch(b){case"M":case"d":case"DDD":case"w":case"W":return a+"-й";case"D":return a+"-го";default:return a}},week:{dow:1,doy:7}}),a.fullCalendar.datepickerLang("uk","uk",{closeText:"Закрити",prevText:"&#x3C;",nextText:"&#x3E;",currentText:"Сьогодні",monthNames:["Січень","Лютий","Березень","Квітень","Травень","Червень","Липень","Серпень","Вересень","Жовтень","Листопад","Грудень"],monthNamesShort:["Січ","Лют","Бер","Кві","Тра","Чер","Лип","Сер","Вер","Жов","Лис","Гру"],dayNames:["неділя","понеділок","вівторок","середа","четвер","п’ятниця","субота"],dayNamesShort:["нед","пнд","вів","срд","чтв","птн","сбт"],dayNamesMin:["Нд","Пн","Вт","Ср","Чт","Пт","Сб"],weekHeader:"Тиж",dateFormat:"dd.mm.yy",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("uk",{buttonText:{month:"Місяць",week:"Тиждень",day:"День",list:"Порядок денний"},allDayText:"Увесь день",eventLimitText:function(a){return"+ще "+a+"..."}})}(),function(){(b.defineLocale||b.lang).call(b,"vi",{months:"tháng 1_tháng 2_tháng 3_tháng 4_tháng 5_tháng 6_tháng 7_tháng 8_tháng 9_tháng 10_tháng 11_tháng 12".split("_"),monthsShort:"Th01_Th02_Th03_Th04_Th05_Th06_Th07_Th08_Th09_Th10_Th11_Th12".split("_"),weekdays:"chủ nhật_thứ hai_thứ ba_thứ tư_thứ năm_thứ sáu_thứ bảy".split("_"),weekdaysShort:"CN_T2_T3_T4_T5_T6_T7".split("_"),weekdaysMin:"CN_T2_T3_T4_T5_T6_T7".split("_"),longDateFormat:{LT:"HH:mm",LTS:"LT:ss",L:"DD/MM/YYYY",LL:"D MMMM [năm] YYYY",LLL:"D MMMM [năm] YYYY LT",LLLL:"dddd, D MMMM [năm] YYYY LT",l:"DD/M/YYYY",ll:"D MMM YYYY",lll:"D MMM YYYY LT",llll:"ddd, D MMM YYYY LT"},calendar:{sameDay:"[Hôm nay lúc] LT",nextDay:"[Ngày mai lúc] LT",nextWeek:"dddd [tuần tới lúc] LT",lastDay:"[Hôm qua lúc] LT",lastWeek:"dddd [tuần rồi lúc] LT",sameElse:"L"},relativeTime:{future:"%s tới",past:"%s trước",s:"vài giây",m:"một phút",mm:"%d phút",h:"một giờ",hh:"%d giờ",d:"một ngày",dd:"%d ngày",M:"một tháng",MM:"%d tháng",y:"một năm",yy:"%d năm"},ordinalParse:/\d{1,2}/,ordinal:function(a){return a},week:{dow:1,doy:4}}),
a.fullCalendar.datepickerLang("vi","vi",{closeText:"Đóng",prevText:"&#x3C;Trước",nextText:"Tiếp&#x3E;",currentText:"Hôm nay",monthNames:["Tháng Một","Tháng Hai","Tháng Ba","Tháng Tư","Tháng Năm","Tháng Sáu","Tháng Bảy","Tháng Tám","Tháng Chín","Tháng Mười","Tháng Mười Một","Tháng Mười Hai"],monthNamesShort:["Tháng 1","Tháng 2","Tháng 3","Tháng 4","Tháng 5","Tháng 6","Tháng 7","Tháng 8","Tháng 9","Tháng 10","Tháng 11","Tháng 12"],dayNames:["Chủ Nhật","Thứ Hai","Thứ Ba","Thứ Tư","Thứ Năm","Thứ Sáu","Thứ Bảy"],dayNamesShort:["CN","T2","T3","T4","T5","T6","T7"],dayNamesMin:["CN","T2","T3","T4","T5","T6","T7"],weekHeader:"Tu",dateFormat:"dd/mm/yy",firstDay:0,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""}),a.fullCalendar.lang("vi",{buttonText:{month:"Tháng",week:"Tuần",day:"Ngày",list:"Lịch biểu"},allDayText:"Cả ngày",eventLimitText:function(a){return"+ thêm "+a}})}(),function(){(b.defineLocale||b.lang).call(b,"zh-cn",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"周日_周一_周二_周三_周四_周五_周六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"Ah点mm",LTS:"Ah点m分s秒",L:"YYYY-MM-DD",LL:"YYYY年MMMD日",LLL:"YYYY年MMMD日LT",LLLL:"YYYY年MMMD日ddddLT",l:"YYYY-MM-DD",ll:"YYYY年MMMD日",lll:"YYYY年MMMD日LT",llll:"YYYY年MMMD日ddddLT"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(a,b){return 12===a&&(a=0),"凌晨"===b||"早上"===b||"上午"===b?a:"下午"===b||"晚上"===b?a+12:a>=11?a:a+12},meridiem:function(a,b,c){var d=100*a+b;return 600>d?"凌晨":900>d?"早上":1130>d?"上午":1230>d?"中午":1800>d?"下午":"晚上"},calendar:{sameDay:function(){return 0===this.minutes()?"[今天]Ah[点整]":"[今天]LT"},nextDay:function(){return 0===this.minutes()?"[明天]Ah[点整]":"[明天]LT"},lastDay:function(){return 0===this.minutes()?"[昨天]Ah[点整]":"[昨天]LT"},nextWeek:function(){var a,c;return a=b().startOf("week"),c=this.unix()-a.unix()>=604800?"[下]":"[本]",0===this.minutes()?c+"dddAh点整":c+"dddAh点mm"},lastWeek:function(){var a,c;return a=b().startOf("week"),c=this.unix()<a.unix()?"[上]":"[本]",0===this.minutes()?c+"dddAh点整":c+"dddAh点mm"},sameElse:"LL"},ordinalParse:/\d{1,2}(日|月|周)/,ordinal:function(a,b){switch(b){case"d":case"D":case"DDD":return a+"日";case"M":return a+"月";case"w":case"W":return a+"周";default:return a}},relativeTime:{future:"%s内",past:"%s前",s:"几秒",m:"1分钟",mm:"%d分钟",h:"1小时",hh:"%d小时",d:"1天",dd:"%d天",M:"1个月",MM:"%d个月",y:"1年",yy:"%d年"},week:{dow:1,doy:4}}),a.fullCalendar.datepickerLang("zh-cn","zh-CN",{closeText:"关闭",prevText:"&#x3C;上月",nextText:"下月&#x3E;",currentText:"今天",monthNames:["一月","二月","三月","四月","五月","六月","七月","八月","九月","十月","十一月","十二月"],monthNamesShort:["一月","二月","三月","四月","五月","六月","七月","八月","九月","十月","十一月","十二月"],dayNames:["星期日","星期一","星期二","星期三","星期四","星期五","星期六"],dayNamesShort:["周日","周一","周二","周三","周四","周五","周六"],dayNamesMin:["日","一","二","三","四","五","六"],weekHeader:"周",dateFormat:"yy-mm-dd",firstDay:1,isRTL:!1,showMonthAfterYear:!0,yearSuffix:"年"}),a.fullCalendar.lang("zh-cn",{buttonText:{month:"月",week:"周",day:"日",list:"日程"},allDayText:"全天",eventLimitText:function(a){return"另外 "+a+" 个"}})}(),function(){(b.defineLocale||b.lang).call(b,"zh-tw",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"週日_週一_週二_週三_週四_週五_週六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"Ah點mm",LTS:"Ah點m分s秒",L:"YYYY年MMMD日",LL:"YYYY年MMMD日",LLL:"YYYY年MMMD日LT",LLLL:"YYYY年MMMD日ddddLT",l:"YYYY年MMMD日",ll:"YYYY年MMMD日",lll:"YYYY年MMMD日LT",llll:"YYYY年MMMD日ddddLT"},meridiemParse:/早上|上午|中午|下午|晚上/,meridiemHour:function(a,b){return 12===a&&(a=0),"早上"===b||"上午"===b?a:"中午"===b?a>=11?a:a+12:"下午"===b||"晚上"===b?a+12:void 0},meridiem:function(a,b,c){var d=100*a+b;return 900>d?"早上":1130>d?"上午":1230>d?"中午":1800>d?"下午":"晚上"},calendar:{sameDay:"[今天]LT",nextDay:"[明天]LT",nextWeek:"[下]ddddLT",lastDay:"[昨天]LT",lastWeek:"[上]ddddLT",sameElse:"L"},ordinalParse:/\d{1,2}(日|月|週)/,ordinal:function(a,b){switch(b){case"d":case"D":case"DDD":return a+"日";case"M":return a+"月";case"w":case"W":return a+"週";default:return a}},relativeTime:{future:"%s內",past:"%s前",s:"幾秒",m:"一分鐘",mm:"%d分鐘",h:"一小時",hh:"%d小時",d:"一天",dd:"%d天",M:"一個月",MM:"%d個月",y:"一年",yy:"%d年"}}),a.fullCalendar.datepickerLang("zh-tw","zh-TW",{closeText:"關閉",prevText:"&#x3C;上月",nextText:"下月&#x3E;",currentText:"今天",monthNames:["一月","二月","三月","四月","五月","六月","七月","八月","九月","十月","十一月","十二月"],monthNamesShort:["一月","二月","三月","四月","五月","六月","七月","八月","九月","十月","十一月","十二月"],dayNames:["星期日","星期一","星期二","星期三","星期四","星期五","星期六"],dayNamesShort:["周日","周一","周二","周三","周四","周五","周六"],dayNamesMin:["日","一","二","三","四","五","六"],weekHeader:"周",dateFormat:"yy/mm/dd",firstDay:1,isRTL:!1,showMonthAfterYear:!0,yearSuffix:"年"}),a.fullCalendar.lang("zh-tw",{buttonText:{month:"月",week:"週",day:"天",list:"待辦事項"},allDayText:"全天",eventLimitText:"更多"})}(),(b.locale||b.lang).call(b,"en"),a.fullCalendar.lang("en"),a.datepicker&&a.datepicker.setDefaults(a.datepicker.regional[""])});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rzymek_fullcalendar/fullcalendar/dist/gcal.js                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/*!                                                                                                                    // 1
 * FullCalendar v2.5.0 Google Calendar Plugin                                                                          // 2
 * Docs & License: http://fullcalendar.io/                                                                             // 3
 * (c) 2015 Adam Shaw                                                                                                  // 4
 */                                                                                                                    // 5
                                                                                                                       // 6
(function(factory) {                                                                                                   // 7
	if (typeof define === 'function' && define.amd) {                                                                     // 8
		define([ 'jquery' ], factory);                                                                                       // 9
	}                                                                                                                     // 10
	else if (typeof exports === 'object') { // Node/CommonJS                                                              // 11
		module.exports = factory(require('jquery'));                                                                         // 12
	}                                                                                                                     // 13
	else {                                                                                                                // 14
		factory(jQuery);                                                                                                     // 15
	}                                                                                                                     // 16
})(function($) {                                                                                                       // 17
                                                                                                                       // 18
                                                                                                                       // 19
var API_BASE = 'https://www.googleapis.com/calendar/v3/calendars';                                                     // 20
var FC = $.fullCalendar;                                                                                               // 21
var applyAll = FC.applyAll;                                                                                            // 22
                                                                                                                       // 23
                                                                                                                       // 24
FC.sourceNormalizers.push(function(sourceOptions) {                                                                    // 25
	var googleCalendarId = sourceOptions.googleCalendarId;                                                                // 26
	var url = sourceOptions.url;                                                                                          // 27
	var match;                                                                                                            // 28
                                                                                                                       // 29
	// if the Google Calendar ID hasn't been explicitly defined                                                           // 30
	if (!googleCalendarId && url) {                                                                                       // 31
                                                                                                                       // 32
		// detect if the ID was specified as a single string.                                                                // 33
		// will match calendars like "asdf1234@calendar.google.com" in addition to person email calendars.                   // 34
		if (/^[^\/]+@([^\/\.]+\.)*(google|googlemail|gmail)\.com$/.test(url)) {                                              // 35
			googleCalendarId = url;                                                                                             // 36
		}                                                                                                                    // 37
		// try to scrape it out of a V1 or V3 API feed URL                                                                   // 38
		else if (                                                                                                            // 39
			(match = /^https:\/\/www.googleapis.com\/calendar\/v3\/calendars\/([^\/]*)/.exec(url)) ||                           // 40
			(match = /^https?:\/\/www.google.com\/calendar\/feeds\/([^\/]*)/.exec(url))                                         // 41
		) {                                                                                                                  // 42
			googleCalendarId = decodeURIComponent(match[1]);                                                                    // 43
		}                                                                                                                    // 44
                                                                                                                       // 45
		if (googleCalendarId) {                                                                                              // 46
			sourceOptions.googleCalendarId = googleCalendarId;                                                                  // 47
		}                                                                                                                    // 48
	}                                                                                                                     // 49
                                                                                                                       // 50
                                                                                                                       // 51
	if (googleCalendarId) { // is this a Google Calendar?                                                                 // 52
                                                                                                                       // 53
		// make each Google Calendar source uneditable by default                                                            // 54
		if (sourceOptions.editable == null) {                                                                                // 55
			sourceOptions.editable = false;                                                                                     // 56
		}                                                                                                                    // 57
                                                                                                                       // 58
		// We want removeEventSource to work, but it won't know about the googleCalendarId primitive.                        // 59
		// Shoehorn it into the url, which will function as the unique primitive. Won't cause side effects.                  // 60
		// This hack is obsolete since 2.2.3, but keep it so this plugin file is compatible with old versions.               // 61
		sourceOptions.url = googleCalendarId;                                                                                // 62
	}                                                                                                                     // 63
});                                                                                                                    // 64
                                                                                                                       // 65
                                                                                                                       // 66
FC.sourceFetchers.push(function(sourceOptions, start, end, timezone) {                                                 // 67
	if (sourceOptions.googleCalendarId) {                                                                                 // 68
		return transformOptions(sourceOptions, start, end, timezone, this); // `this` is the calendar                        // 69
	}                                                                                                                     // 70
});                                                                                                                    // 71
                                                                                                                       // 72
                                                                                                                       // 73
function transformOptions(sourceOptions, start, end, timezone, calendar) {                                             // 74
	var url = API_BASE + '/' + encodeURIComponent(sourceOptions.googleCalendarId) + '/events?callback=?'; // jsonp        // 75
	var apiKey = sourceOptions.googleCalendarApiKey || calendar.options.googleCalendarApiKey;                             // 76
	var success = sourceOptions.success;                                                                                  // 77
	var data;                                                                                                             // 78
	var timezoneArg; // populated when a specific timezone. escaped to Google's liking                                    // 79
                                                                                                                       // 80
	function reportError(message, apiErrorObjs) {                                                                         // 81
		var errorObjs = apiErrorObjs || [ { message: message } ]; // to be passed into error handlers                        // 82
                                                                                                                       // 83
		// call error handlers                                                                                               // 84
		(sourceOptions.googleCalendarError || $.noop).apply(calendar, errorObjs);                                            // 85
		(calendar.options.googleCalendarError || $.noop).apply(calendar, errorObjs);                                         // 86
                                                                                                                       // 87
		// print error to debug console                                                                                      // 88
		FC.warn.apply(null, [ message ].concat(apiErrorObjs || []));                                                         // 89
	}                                                                                                                     // 90
                                                                                                                       // 91
	if (!apiKey) {                                                                                                        // 92
		reportError("Specify a googleCalendarApiKey. See http://fullcalendar.io/docs/google_calendar/");                     // 93
		return {}; // an empty source to use instead. won't fetch anything.                                                  // 94
	}                                                                                                                     // 95
                                                                                                                       // 96
	// The API expects an ISO8601 datetime with a time and timezone part.                                                 // 97
	// Since the calendar's timezone offset isn't always known, request the date in UTC and pad it by a day on each       // 98
	// side, guaranteeing we will receive all events in the desired range, albeit a superset.                             // 99
	// .utc() will set a zone and give it a 00:00:00 time.                                                                // 100
	if (!start.hasZone()) {                                                                                               // 101
		start = start.clone().utc().add(-1, 'day');                                                                          // 102
	}                                                                                                                     // 103
	if (!end.hasZone()) {                                                                                                 // 104
		end = end.clone().utc().add(1, 'day');                                                                               // 105
	}                                                                                                                     // 106
                                                                                                                       // 107
	// when sending timezone names to Google, only accepts underscores, not spaces                                        // 108
	if (timezone && timezone != 'local') {                                                                                // 109
		timezoneArg = timezone.replace(' ', '_');                                                                            // 110
	}                                                                                                                     // 111
                                                                                                                       // 112
	data = $.extend({}, sourceOptions.data || {}, {                                                                       // 113
		key: apiKey,                                                                                                         // 114
		timeMin: start.format(),                                                                                             // 115
		timeMax: end.format(),                                                                                               // 116
		timeZone: timezoneArg,                                                                                               // 117
		singleEvents: true,                                                                                                  // 118
		maxResults: 9999                                                                                                     // 119
	});                                                                                                                   // 120
                                                                                                                       // 121
	return $.extend({}, sourceOptions, {                                                                                  // 122
		googleCalendarId: null, // prevents source-normalizing from happening again                                          // 123
		url: url,                                                                                                            // 124
		data: data,                                                                                                          // 125
		startParam: false, // `false` omits this parameter. we already included it above                                     // 126
		endParam: false, // same                                                                                             // 127
		timezoneParam: false, // same                                                                                        // 128
		success: function(data) {                                                                                            // 129
			var events = [];                                                                                                    // 130
			var successArgs;                                                                                                    // 131
			var successRes;                                                                                                     // 132
                                                                                                                       // 133
			if (data.error) {                                                                                                   // 134
				reportError('Google Calendar API: ' + data.error.message, data.error.errors);                                      // 135
			}                                                                                                                   // 136
			else if (data.items) {                                                                                              // 137
				$.each(data.items, function(i, entry) {                                                                            // 138
					var url = entry.htmlLink;                                                                                         // 139
                                                                                                                       // 140
					// make the URLs for each event show times in the correct timezone                                                // 141
					if (timezoneArg) {                                                                                                // 142
						url = injectQsComponent(url, 'ctz=' + timezoneArg);                                                              // 143
					}                                                                                                                 // 144
                                                                                                                       // 145
					events.push({                                                                                                     // 146
						id: entry.id,                                                                                                    // 147
						title: entry.summary,                                                                                            // 148
						start: entry.start.dateTime || entry.start.date, // try timed. will fall back to all-day                         // 149
						end: entry.end.dateTime || entry.end.date, // same                                                               // 150
						url: url,                                                                                                        // 151
						location: entry.location,                                                                                        // 152
						description: entry.description                                                                                   // 153
					});                                                                                                               // 154
				});                                                                                                                // 155
                                                                                                                       // 156
				// call the success handler(s) and allow it to return a new events array                                           // 157
				successArgs = [ events ].concat(Array.prototype.slice.call(arguments, 1)); // forward other jq args                // 158
				successRes = applyAll(success, this, successArgs);                                                                 // 159
				if ($.isArray(successRes)) {                                                                                       // 160
					return successRes;                                                                                                // 161
				}                                                                                                                  // 162
			}                                                                                                                   // 163
                                                                                                                       // 164
			return events;                                                                                                      // 165
		}                                                                                                                    // 166
	});                                                                                                                   // 167
}                                                                                                                      // 168
                                                                                                                       // 169
                                                                                                                       // 170
// Injects a string like "arg=value" into the querystring of a URL                                                     // 171
function injectQsComponent(url, component) {                                                                           // 172
	// inject it after the querystring but before the fragment                                                            // 173
	return url.replace(/(\?.*?)?(#|$)/, function(whole, qs, hash) {                                                       // 174
		return (qs ? qs + '&' : '?') + component + hash;                                                                     // 175
	});                                                                                                                   // 176
}                                                                                                                      // 177
                                                                                                                       // 178
                                                                                                                       // 179
});                                                                                                                    // 180
                                                                                                                       // 181
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rzymek_fullcalendar/template.template.js                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
Template.__checkName("fullcalendar");                                                                                  // 2
Template["fullcalendar"] = new Template("Template.fullcalendar", (function() {                                         // 3
  var view = this;                                                                                                     // 4
  return HTML.Raw("<div></div>");                                                                                      // 5
}));                                                                                                                   // 6
                                                                                                                       // 7
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rzymek_fullcalendar/template.js                                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Template.fullcalendar.rendered = function() {                                                                          // 1
    var div = this.$(this.firstNode);                                                                                  // 2
    if(this.data != null) {                                                                                            // 3
        //jquery takes care of undefined values, no need to check here                                                 // 4
        div.attr('id', this.data.id);                                                                                  // 5
        div.addClass(this.data.class);                                                                                 // 6
    }                                                                                                                  // 7
    div.fullCalendar(this.data);                                                                                       // 8
};                                                                                                                     // 9
                                                                                                                       // 10
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
Package['rzymek:fullcalendar'] = {};

})();
