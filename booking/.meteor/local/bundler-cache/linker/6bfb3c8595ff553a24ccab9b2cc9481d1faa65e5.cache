[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar _ = Package.underscore._;\nvar Random = Package.random.Random;\nvar $ = Package.jquery.$;\nvar jQuery = Package.jquery.jQuery;\n\n/* Package-scope variables */\nvar Kadira, BaseErrorModel, Retry, Ntp, getBrowserInfo, getResolution, getErrorStack, getInfoArray, getTime, checkSizeAndPickFields, fixInternetExplorerXDR, ErrorModel;\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                  //\n// packages/meteorhacks_kadira/lib/common/unify.js                                                  //\n//                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                    //\nKadira = {};                                                                                        // 1\nKadira.options = {};                                                                                // 2\n                                                                                                    // 3\nif(Meteor.wrapAsync) {                                                                              // 4\n  Kadira._wrapAsync = Meteor.wrapAsync;                                                             // 5\n} else {                                                                                            // 6\n  Kadira._wrapAsync = Meteor._wrapAsync;                                                            // 7\n}                                                                                                   // 8\n                                                                                                    // 9\nif(Meteor.isServer) {                                                                               // 10\n  var EventEmitter = Npm.require('events').EventEmitter;                                            // 11\n  var eventBus = new EventEmitter();                                                                // 12\n  eventBus.setMaxListeners(0);                                                                      // 13\n                                                                                                    // 14\n  var buildArgs = function(args) {                                                                  // 15\n    args = _.toArray(args);                                                                         // 16\n    var eventName = args[0] + '-' + args[1];                                                        // 17\n    var args = args.slice(2);                                                                       // 18\n    args.unshift(eventName);                                                                        // 19\n    return args;                                                                                    // 20\n  };                                                                                                // 21\n                                                                                                    // 22\n  Kadira.EventBus = {};                                                                             // 23\n  _.each(['on', 'emit', 'removeListener', 'removeAllListeners'], function(m) {                      // 24\n    Kadira.EventBus[m] = function() {                                                               // 25\n      var args = buildArgs(arguments);                                                              // 26\n      return eventBus[m].apply(eventBus, args);                                                     // 27\n    };                                                                                              // 28\n  });                                                                                               // 29\n}                                                                                                   // 30\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                  //\n// packages/meteorhacks_kadira/lib/models/base_error.js                                             //\n//                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                    //\nBaseErrorModel = function(options) {                                                                // 1\n  this._filters = [];                                                                               // 2\n};                                                                                                  // 3\n                                                                                                    // 4\nBaseErrorModel.prototype.addFilter = function(filter) {                                             // 5\n  if(typeof filter === 'function') {                                                                // 6\n    this._filters.push(filter);                                                                     // 7\n  } else {                                                                                          // 8\n    throw new Error(\"Error filter must be a function\");                                             // 9\n  }                                                                                                 // 10\n};                                                                                                  // 11\n                                                                                                    // 12\nBaseErrorModel.prototype.removeFilter = function(filter) {                                          // 13\n  var index = this._filters.indexOf(filter);                                                        // 14\n  if(index >= 0) {                                                                                  // 15\n    this._filters.splice(index, 1);                                                                 // 16\n  }                                                                                                 // 17\n};                                                                                                  // 18\n                                                                                                    // 19\nBaseErrorModel.prototype.applyFilters = function(type, message, error, subType) {                   // 20\n  for(var lc=0; lc<this._filters.length; lc++) {                                                    // 21\n    var filter = this._filters[lc];                                                                 // 22\n    try {                                                                                           // 23\n      var validated = filter(type, message, error, subType);                                        // 24\n      if(!validated) return false;                                                                  // 25\n    } catch (ex) {                                                                                  // 26\n      // we need to remove this filter                                                              // 27\n      // we may ended up in a error cycle                                                           // 28\n      this._filters.splice(lc, 1);                                                                  // 29\n      throw new Error(\"an error thrown from a filter you've suplied\", ex.message);                  // 30\n    }                                                                                               // 31\n  }                                                                                                 // 32\n                                                                                                    // 33\n  return true;                                                                                      // 34\n};                                                                                                  // 35\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                  //\n// packages/meteorhacks_kadira/lib/retry.js                                                         //\n//                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                    //\n// Retry logic with an exponential backoff.                                                         // 1\n//                                                                                                  // 2\n// options:                                                                                         // 3\n//  baseTimeout: time for initial reconnect attempt (ms).                                           // 4\n//  exponent: exponential factor to increase timeout each attempt.                                  // 5\n//  maxTimeout: maximum time between retries (ms).                                                  // 6\n//  minCount: how many times to reconnect \"instantly\".                                              // 7\n//  minTimeout: time to wait for the first `minCount` retries (ms).                                 // 8\n//  fuzz: factor to randomize retry times by (to avoid retry storms).                               // 9\n                                                                                                    // 10\n//TODO: remove this class and use Meteor Retry in a later version of meteor.                        // 11\n                                                                                                    // 12\nRetry = function (options) {                                                                        // 13\n  var self = this;                                                                                  // 14\n  _.extend(self, _.defaults(_.clone(options || {}), {                                               // 15\n    baseTimeout: 1000, // 1 second                                                                  // 16\n    exponent: 2.2,                                                                                  // 17\n    // The default is high-ish to ensure a server can recover from a                                // 18\n    // failure caused by load.                                                                      // 19\n    maxTimeout: 5 * 60000, // 5 minutes                                                             // 20\n    minTimeout: 10,                                                                                 // 21\n    minCount: 2,                                                                                    // 22\n    fuzz: 0.5 // +- 25%                                                                             // 23\n  }));                                                                                              // 24\n  self.retryTimer = null;                                                                           // 25\n};                                                                                                  // 26\n                                                                                                    // 27\n_.extend(Retry.prototype, {                                                                         // 28\n                                                                                                    // 29\n  // Reset a pending retry, if any.                                                                 // 30\n  clear: function () {                                                                              // 31\n    var self = this;                                                                                // 32\n    if(self.retryTimer)                                                                             // 33\n      clearTimeout(self.retryTimer);                                                                // 34\n    self.retryTimer = null;                                                                         // 35\n  },                                                                                                // 36\n                                                                                                    // 37\n  // Calculate how long to wait in milliseconds to retry, based on the                              // 38\n  // `count` of which retry this is.                                                                // 39\n  _timeout: function (count) {                                                                      // 40\n    var self = this;                                                                                // 41\n                                                                                                    // 42\n    if(count < self.minCount)                                                                       // 43\n      return self.minTimeout;                                                                       // 44\n                                                                                                    // 45\n    var timeout = Math.min(                                                                         // 46\n      self.maxTimeout,                                                                              // 47\n      self.baseTimeout * Math.pow(self.exponent, count));                                           // 48\n    // fuzz the timeout randomly, to avoid reconnect storms when a                                  // 49\n    // server goes down.                                                                            // 50\n    timeout = timeout * ((Random.fraction() * self.fuzz) +                                          // 51\n                         (1 - self.fuzz/2));                                                        // 52\n    return Math.ceil(timeout);                                                                      // 53\n  },                                                                                                // 54\n                                                                                                    // 55\n  // Call `fn` after a delay, based on the `count` of which retry this is.                          // 56\n  retryLater: function (count, fn) {                                                                // 57\n    var self = this;                                                                                // 58\n    var timeout = self._timeout(count);                                                             // 59\n    if(self.retryTimer)                                                                             // 60\n      clearTimeout(self.retryTimer);                                                                // 61\n                                                                                                    // 62\n    self.retryTimer = setTimeout(fn, timeout);                                                      // 63\n    return timeout;                                                                                 // 64\n  }                                                                                                 // 65\n                                                                                                    // 66\n});                                                                                                 // 67\n                                                                                                    // 68\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                  //\n// packages/meteorhacks_kadira/lib/ntp.js                                                           //\n//                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                    //\nvar logger = getLogger();                                                                           // 1\n                                                                                                    // 2\nNtp = function (endpoint) {                                                                         // 3\n  this.setEndpoint(endpoint);                                                                       // 4\n  this.diff = 0;                                                                                    // 5\n  this.synced = false;                                                                              // 6\n  this.reSyncCount = 0;                                                                             // 7\n  this.reSync = new Retry({                                                                         // 8\n    baseTimeout: 1000*60,                                                                           // 9\n    maxTimeout: 1000*60*10,                                                                         // 10\n    minCount: 0                                                                                     // 11\n  });                                                                                               // 12\n}                                                                                                   // 13\n                                                                                                    // 14\nNtp._now = function() {                                                                             // 15\n  var now = Date.now();                                                                             // 16\n  if(typeof now == 'number') {                                                                      // 17\n    return now;                                                                                     // 18\n  } else if(now instanceof Date) {                                                                  // 19\n    // some extenal JS libraries override Date.now and returns a Date object                        // 20\n    // which directly affect us. So we need to prepare for that                                     // 21\n    return now.getTime();                                                                           // 22\n  } else {                                                                                          // 23\n    // trust me. I've seen now === undefined                                                        // 24\n    return (new Date()).getTime();                                                                  // 25\n  }                                                                                                 // 26\n};                                                                                                  // 27\n                                                                                                    // 28\nNtp.prototype.setEndpoint = function(endpoint) {                                                    // 29\n  this.endpoint = endpoint + '/simplentp/sync';                                                     // 30\n};                                                                                                  // 31\n                                                                                                    // 32\nNtp.prototype.getTime = function() {                                                                // 33\n  return Ntp._now() + Math.round(this.diff);                                                        // 34\n};                                                                                                  // 35\n                                                                                                    // 36\nNtp.prototype.syncTime = function(localTime) {                                                      // 37\n  return localTime + Math.ceil(this.diff);                                                          // 38\n};                                                                                                  // 39\n                                                                                                    // 40\nNtp.prototype.sync = function() {                                                                   // 41\n  logger('init sync');                                                                              // 42\n  var self = this;                                                                                  // 43\n  var retryCount = 0;                                                                               // 44\n  var retry = new Retry({                                                                           // 45\n    baseTimeout: 1000*20,                                                                           // 46\n    maxTimeout: 1000*60,                                                                            // 47\n    minCount: 1,                                                                                    // 48\n    minTimeout: 0                                                                                   // 49\n  });                                                                                               // 50\n  syncTime();                                                                                       // 51\n                                                                                                    // 52\n  function syncTime () {                                                                            // 53\n    if(retryCount<5) {                                                                              // 54\n      logger('attempt time sync with server', retryCount);                                          // 55\n      // if we send 0 to the retryLater, cacheDns will run immediately                              // 56\n      retry.retryLater(retryCount++, cacheDns);                                                     // 57\n    } else {                                                                                        // 58\n      logger('maximum retries reached');                                                            // 59\n      self.reSync.retryLater(self.reSyncCount++, function () {                                      // 60\n        var args = [].slice.call(arguments);                                                        // 61\n        self.sync.apply(self, args);                                                                // 62\n      });                                                                                           // 63\n    }                                                                                               // 64\n  }                                                                                                 // 65\n                                                                                                    // 66\n  // first attempt is to cache dns. So, calculation does not                                        // 67\n  // include DNS resolution time                                                                    // 68\n  function cacheDns () {                                                                            // 69\n    self.getServerTime(function(err) {                                                              // 70\n      if(!err) {                                                                                    // 71\n        calculateTimeDiff();                                                                        // 72\n      } else {                                                                                      // 73\n        syncTime();                                                                                 // 74\n      }                                                                                             // 75\n    });                                                                                             // 76\n  }                                                                                                 // 77\n                                                                                                    // 78\n  function calculateTimeDiff () {                                                                   // 79\n    var clientStartTime = (new Date()).getTime();                                                   // 80\n    self.getServerTime(function(err, serverTime) {                                                  // 81\n      if(!err && serverTime) {                                                                      // 82\n        // (Date.now() + clientStartTime)/2 : Midpoint between req and res                          // 83\n        var networkTime = ((new Date()).getTime() - clientStartTime)/2                              // 84\n        var serverStartTime = serverTime - networkTime;                                             // 85\n        self.diff = serverStartTime - clientStartTime;                                              // 86\n        self.synced = true;                                                                         // 87\n        // we need to send 1 into retryLater.                                                       // 88\n        self.reSync.retryLater(self.reSyncCount++, function () {                                    // 89\n          var args = [].slice.call(arguments);                                                      // 90\n          self.sync.apply(self, args);                                                              // 91\n        });                                                                                         // 92\n        logger('successfully updated diff value', self.diff);                                       // 93\n      } else {                                                                                      // 94\n        syncTime();                                                                                 // 95\n      }                                                                                             // 96\n    });                                                                                             // 97\n  }                                                                                                 // 98\n}                                                                                                   // 99\n                                                                                                    // 100\nNtp.prototype.getServerTime = function(callback) {                                                  // 101\n  var self = this;                                                                                  // 102\n                                                                                                    // 103\n  if(Meteor.isServer) {                                                                             // 104\n    var Fiber = Npm.require('fibers');                                                              // 105\n    new Fiber(function() {                                                                          // 106\n      HTTP.get(self.endpoint, function (err, res) {                                                 // 107\n        if(err) {                                                                                   // 108\n          callback(err);                                                                            // 109\n        } else {                                                                                    // 110\n          var serverTime = parseInt(res.content)                                                    // 111\n          callback(null, serverTime);                                                               // 112\n        }                                                                                           // 113\n      });                                                                                           // 114\n    }).run();                                                                                       // 115\n  } else {                                                                                          // 116\n    $.ajax({                                                                                        // 117\n      type: 'GET',                                                                                  // 118\n      url: self.endpoint,                                                                           // 119\n      success: function(serverTime) {                                                               // 120\n        callback(null, parseInt(serverTime));                                                       // 121\n      },                                                                                            // 122\n      error: function(err) {                                                                        // 123\n        callback(err);                                                                              // 124\n      }                                                                                             // 125\n    });                                                                                             // 126\n  }                                                                                                 // 127\n};                                                                                                  // 128\n                                                                                                    // 129\nfunction getLogger() {                                                                              // 130\n  if(Meteor.isServer) {                                                                             // 131\n    return Npm.require('debug')(\"kadira:ntp\");                                                      // 132\n  } else {                                                                                          // 133\n    return function(message) {                                                                      // 134\n      var canLogKadira =                                                                            // 135\n        Meteor._localStorage.getItem('LOG_KADIRA') !== null                                         // 136\n        && typeof console !== 'undefined';                                                          // 137\n                                                                                                    // 138\n      if(canLogKadira) {                                                                            // 139\n        if(message) {                                                                               // 140\n          message = \"kadira:ntp \" + message;                                                        // 141\n          arguments[0] = message;                                                                   // 142\n        }                                                                                           // 143\n        console.log.apply(console, arguments);                                                      // 144\n      }                                                                                             // 145\n    }                                                                                               // 146\n  }                                                                                                 // 147\n}                                                                                                   // 148\n                                                                                                    // 149\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                  //\n// packages/meteorhacks_kadira/lib/client/utils.js                                                  //\n//                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                    //\ngetBrowserInfo = function () {                                                                      // 1\n  return {                                                                                          // 2\n    browser: window.navigator.userAgent,                                                            // 3\n    userId: Meteor.userId && Meteor.userId(),                                                       // 4\n    url: location.href,                                                                             // 5\n    resolution: getResolution()                                                                     // 6\n  };                                                                                                // 7\n}                                                                                                   // 8\n                                                                                                    // 9\ngetResolution = function () {                                                                       // 10\n  if(screen && screen.width && screen.height) {                                                     // 11\n    var resolution = screen.width + 'x' + screen.height;                                            // 12\n    return resolution;                                                                              // 13\n  }                                                                                                 // 14\n}                                                                                                   // 15\n                                                                                                    // 16\ngetErrorStack = function (zone, callback) {                                                         // 17\n  var trace = [];                                                                                   // 18\n  var eventMap = zone.eventMap || {};                                                               // 19\n  var infoMap = zone.infoMap || {};                                                                 // 20\n                                                                                                    // 21\n  trace.push({                                                                                      // 22\n    at: (new Date().getTime()),                                                                     // 23\n    stack: zone.erroredStack.get()                                                                  // 24\n  });                                                                                               // 25\n                                                                                                    // 26\n  processZone();                                                                                    // 27\n  function processZone() {                                                                          // 28\n    // we assume, first two zones are not interesting                                               // 29\n    // bacause, they are some internal meteor loading stuffs                                        // 30\n    if(zone && zone.depth > 2) {                                                                    // 31\n      var stack = \"\";                                                                               // 32\n      if(zone.currentStack) {                                                                       // 33\n        stack = zone.currentStack.get();                                                            // 34\n      }                                                                                             // 35\n                                                                                                    // 36\n      var events = eventMap[zone.id];                                                               // 37\n      var info = getInfoArray(infoMap[zone.id]);                                                    // 38\n      var ownerArgsEvent = events && events[0] && events[0].type == 'owner-args' && events.shift();\n      var runAt = (ownerArgsEvent)? ownerArgsEvent.at : zone.runAt;                                 // 40\n      var ownerArgs = (ownerArgsEvent)? _.toArray(ownerArgsEvent.args) : [];                        // 41\n                                                                                                    // 42\n      // limiting                                                                                   // 43\n      events = _.map(_.last(events, 5), checkSizeAndPickFields(100));                               // 44\n      info = _.map(_.last(info, 5), checkSizeAndPickFields(100));                                   // 45\n      ownerArgs = checkSizeAndPickFields(200)(_.first(ownerArgs, 5));                               // 46\n                                                                                                    // 47\n      zone.owner && delete zone.owner.zoneId;                                                       // 48\n                                                                                                    // 49\n      trace.push({                                                                                  // 50\n        createdAt: zone.createdAt,                                                                  // 51\n        runAt: runAt,                                                                               // 52\n        stack: stack,                                                                               // 53\n        owner: zone.owner,                                                                          // 54\n        ownerArgs: ownerArgs,                                                                       // 55\n        events: events,                                                                             // 56\n        info: info,                                                                                 // 57\n        zoneId: zone.id                                                                             // 58\n      });                                                                                           // 59\n      zone = zone.parent;                                                                           // 60\n                                                                                                    // 61\n      setTimeout(processZone, 0);                                                                   // 62\n    } else {                                                                                        // 63\n      callback(trace);                                                                              // 64\n    }                                                                                               // 65\n  }                                                                                                 // 66\n}                                                                                                   // 67\n                                                                                                    // 68\ngetInfoArray = function (info) {                                                                    // 69\n  return _(info || {}).map(function (value, type) {                                                 // 70\n    value.type = type;                                                                              // 71\n    return value;                                                                                   // 72\n  })                                                                                                // 73\n}                                                                                                   // 74\n                                                                                                    // 75\ngetTime = function () {                                                                             // 76\n  if(Kadira && Kadira.syncedDate) {                                                                 // 77\n    return Kadira.syncedDate.getTime();                                                             // 78\n  } else {                                                                                          // 79\n    return (new Date().getTime());                                                                  // 80\n  }                                                                                                 // 81\n}                                                                                                   // 82\n                                                                                                    // 83\ncheckSizeAndPickFields = function(maxFieldSize) {                                                   // 84\n  return function(obj) {                                                                            // 85\n    maxFieldSize = maxFieldSize || 100;                                                             // 86\n    for(var key in obj) {                                                                           // 87\n      var value = obj[key];                                                                         // 88\n      try {                                                                                         // 89\n        var valueStringified = JSON.stringify(value);                                               // 90\n        if(valueStringified.length > maxFieldSize) {                                                // 91\n          obj[key] = valueStringified.substr(0, maxFieldSize) + \" ...\";                             // 92\n        } else {                                                                                    // 93\n          obj[key] = value;                                                                         // 94\n        }                                                                                           // 95\n      } catch(ex) {                                                                                 // 96\n        obj[key] = 'Error: cannot stringify value';                                                 // 97\n      }                                                                                             // 98\n    }                                                                                               // 99\n    return obj;                                                                                     // 100\n  }                                                                                                 // 101\n}                                                                                                   // 102\n                                                                                                    // 103\n/**                                                                                                 // 104\n * IE8 and IE9 does not support CORS with the usual XMLHttpRequest object                           // 105\n * If XDomainRequest exists, use it to send errors.                                                 // 106\n * XDR can POST data to HTTPS endpoints only if current page uses HTTPS                             // 107\n */                                                                                                 // 108\nfixInternetExplorerXDR = function () {                                                              // 109\n  if (window.XDomainRequest) {                                                                      // 110\n    $.ajaxTransport(function(s) {                                                                   // 111\n      return {                                                                                      // 112\n        send: function (headers, callback) {                                                        // 113\n          var xdr = new XDomainRequest();                                                           // 114\n          var data = s.data || null;                                                                // 115\n          var url = matchPageProtocol(s.url);                                                       // 116\n                                                                                                    // 117\n          xdr.onload = function () {                                                                // 118\n            var headers = {'Content-Type': xdr.contentType};                                        // 119\n            callback(200, 'OK', {text: xdr.responseText}, headers);                                 // 120\n          }                                                                                         // 121\n                                                                                                    // 122\n          xdr.onerror = function () {                                                               // 123\n            callback(404);                                                                          // 124\n          }                                                                                         // 125\n                                                                                                    // 126\n          xdr.open(s.type, url);                                                                    // 127\n          xdr.send(data);                                                                           // 128\n        }                                                                                           // 129\n      };                                                                                            // 130\n    });                                                                                             // 131\n  }                                                                                                 // 132\n                                                                                                    // 133\n  function matchPageProtocol (endpoint) {                                                           // 134\n    var withoutProtocol = endpoint.substr(endpoint.indexOf(':') + 1);                               // 135\n    return window.location.protocol + withoutProtocol;                                              // 136\n  }                                                                                                 // 137\n}                                                                                                   // 138\n                                                                                                    // 139\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                  //\n// packages/meteorhacks_kadira/lib/client/models/error.js                                           //\n//                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                    //\nErrorModel = function(options) {                                                                    // 1\n  BaseErrorModel.call(this);                                                                        // 2\n  options = options || {};                                                                          // 3\n  options.maxErrorsPerInterval = options.maxErrorsPerInterval || 10;                                // 4\n  options.intervalInMillis = options.intervalInMillis || 1000 * 60 *2; //2 mins                     // 5\n  options.waitForNtpSyncInterval = options.waitForNtpSyncInterval || 0;                             // 6\n  var self = this;                                                                                  // 7\n                                                                                                    // 8\n  self.options = options;                                                                           // 9\n                                                                                                    // 10\n  // errorsSentCount will be reseted at the start of the interval                                   // 11\n  self.errorsSentCount = 0;                                                                         // 12\n  self.errorsSent = {};                                                                             // 13\n  self.intervalTimeoutHandler = setInterval(function() {                                            // 14\n    self.errorsSentCount = 0;                                                                       // 15\n    self._flushErrors();                                                                            // 16\n  }, self.options.intervalInMillis);                                                                // 17\n};                                                                                                  // 18\n                                                                                                    // 19\n_.extend(ErrorModel.prototype, BaseErrorModel.prototype);                                           // 20\n                                                                                                    // 21\nErrorModel.prototype.sendError = function(errorDef, err, force) {                                   // 22\n  var self = this;                                                                                  // 23\n  if(!this.applyFilters('client', errorDef.name, err, errorDef.subType)) {                          // 24\n    return;                                                                                         // 25\n  };                                                                                                // 26\n                                                                                                    // 27\n  if(!this.canSendErrors()) {                                                                       // 28\n    // reached maximum error count for this interval (1 min)                                        // 29\n    return;                                                                                         // 30\n  }                                                                                                 // 31\n                                                                                                    // 32\n  if(force) {                                                                                       // 33\n    sendError();                                                                                    // 34\n  } else {                                                                                          // 35\n    if(Kadira.syncedDate.synced || self.options.waitForNtpSyncInterval == 0) {                      // 36\n      sendError();                                                                                  // 37\n    } else {                                                                                        // 38\n      setTimeout(forceSendError, self.options.waitForNtpSyncInterval);                              // 39\n    }                                                                                               // 40\n  }                                                                                                 // 41\n                                                                                                    // 42\n  function forceSendError() {                                                                       // 43\n    self.sendError(errorDef, err, true);                                                            // 44\n  }                                                                                                 // 45\n                                                                                                    // 46\n  function sendError() {                                                                            // 47\n    if(!self.errorsSent[errorDef.name]) {                                                           // 48\n      // sync time with the server                                                                  // 49\n      if(errorDef.startTime) {                                                                      // 50\n        errorDef.startTime = Kadira.syncedDate.syncTime(errorDef.startTime);                        // 51\n      }                                                                                             // 52\n      errorDef.count = 1;                                                                           // 53\n      var payload = {host: Kadira.options.hostname, errors: [errorDef]}                             // 54\n      Kadira.send(payload, '/errors');                                                              // 55\n                                                                                                    // 56\n      self.errorsSent[errorDef.name] = _.clone(errorDef);                                           // 57\n      self.errorsSent[errorDef.name].count = 0;                                                     // 58\n      self.errorsSentCount++;                                                                       // 59\n    } else {                                                                                        // 60\n      self.increamentErrorCount(errorDef.name);                                                     // 61\n    }                                                                                               // 62\n  }                                                                                                 // 63\n};                                                                                                  // 64\n                                                                                                    // 65\nErrorModel.prototype._flushErrors = function() {                                                    // 66\n  var self = this;                                                                                  // 67\n  var errors = _.values(self.errorsSent);                                                           // 68\n  errors = _.filter(errors, function(error) {                                                       // 69\n    return error.count > 0;                                                                         // 70\n  });                                                                                               // 71\n                                                                                                    // 72\n  if(errors.length > 0) {                                                                           // 73\n    Kadira.send({errors: errors}, '/errors');                                                       // 74\n  }                                                                                                 // 75\n  self.errorsSent = {};                                                                             // 76\n};                                                                                                  // 77\n                                                                                                    // 78\nErrorModel.prototype.isErrorExists = function(name) {                                               // 79\n  return !!this.errorsSent[name];                                                                   // 80\n};                                                                                                  // 81\n                                                                                                    // 82\nErrorModel.prototype.increamentErrorCount = function(name) {                                        // 83\n  var error = this.errorsSent[name];                                                                // 84\n  if(error) {                                                                                       // 85\n    error.count++;                                                                                  // 86\n  }                                                                                                 // 87\n};                                                                                                  // 88\n                                                                                                    // 89\nErrorModel.prototype.canSendErrors = function() {                                                   // 90\n  return this.errorsSentCount < this.options.maxErrorsPerInterval;                                  // 91\n};                                                                                                  // 92\n                                                                                                    // 93\nErrorModel.prototype.close = function() {                                                           // 94\n  clearTimeout(this.intervalTimeoutHandler);                                                        // 95\n};                                                                                                  // 96\n                                                                                                    // 97\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                  //\n// packages/meteorhacks_kadira/lib/client/error_reporters/zone.js                                   //\n//                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                    //\nif(window.Zone && Zone.inited) {                                                                    // 1\n  Zone.Reporters.add('kadira', kadiraZoneReporter);                                                 // 2\n}                                                                                                   // 3\n                                                                                                    // 4\nfunction kadiraZoneReporter(zone) {                                                                 // 5\n  // track only if error tracking is enabled                                                        // 6\n  if(!Kadira.options.enableErrorTracking) {                                                         // 7\n    return;                                                                                         // 8\n  }                                                                                                 // 9\n                                                                                                    // 10\n  var errorName = Zone.Reporters.getErrorMessage(zone.erroredStack._e);                             // 11\n  if(Kadira.errors.isErrorExists(errorName)) {                                                      // 12\n    Kadira.errors.increamentErrorCount(errorName);                                                  // 13\n  } else if(Kadira.errors.canSendErrors()) {                                                        // 14\n    getErrorStack(zone, function(stacks) {                                                          // 15\n      Kadira.errors.sendError({                                                                     // 16\n        appId : Kadira.options.appId,                                                               // 17\n        name : errorName,                                                                           // 18\n        type : 'client',                                                                            // 19\n        startTime : zone.runAt,                                                                     // 20\n        subType : 'zone',                                                                           // 21\n        info : getBrowserInfo(),                                                                    // 22\n        stacks : JSON.stringify(stacks),                                                            // 23\n      });                                                                                           // 24\n    });                                                                                             // 25\n  }                                                                                                 // 26\n}                                                                                                   // 27\n                                                                                                    // 28\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                  //\n// packages/meteorhacks_kadira/lib/client/error_reporters/window_error.js                           //\n//                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                    //\nvar prevWindowOnError = window.onerror || Function.prototype;                                       // 1\n                                                                                                    // 2\nwindow.onerror = function(message, url, line, col, error) {                                         // 3\n  // track only if error tracking is enabled                                                        // 4\n  if(!Kadira.options.enableErrorTracking) {                                                         // 5\n    return prevWindowOnError(message, url, line, col, error);                                       // 6\n  }                                                                                                 // 7\n                                                                                                    // 8\n  url = url || '<anonymous>';                                                                       // 9\n  line = line || 0;                                                                                 // 10\n  col = col || 0;                                                                                   // 11\n                                                                                                    // 12\n  if(error) {                                                                                       // 13\n    var stack = error.stack;                                                                        // 14\n  } else {                                                                                          // 15\n    var stack = 'Error:\\n    at window.onerror ('+url+':'+line+':'+col+')';                         // 16\n  }                                                                                                 // 17\n                                                                                                    // 18\n  var now = (new Date().getTime());                                                                 // 19\n  Kadira.errors.sendError({                                                                         // 20\n    appId : Kadira.options.appId,                                                                   // 21\n    name : message,                                                                                 // 22\n    type : 'client',                                                                                // 23\n    startTime : now,                                                                                // 24\n    subType : 'window.onerror',                                                                     // 25\n    info : getBrowserInfo(),                                                                        // 26\n    stacks : JSON.stringify([{at: now, events: [], stack: stack}]),                                 // 27\n  });                                                                                               // 28\n                                                                                                    // 29\n  return prevWindowOnError(message, url, line, col, error);;                                        // 30\n}                                                                                                   // 31\n                                                                                                    // 32\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                  //\n// packages/meteorhacks_kadira/lib/client/error_reporters/meteor_debug.js                           //\n//                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                    //\nvar originalMeteorDebug = Meteor._debug;                                                            // 1\n                                                                                                    // 2\nMeteor._debug = function(m, s) {                                                                    // 3\n  // We need to asign variables like this. Otherwise,                                               // 4\n  // we can't see proper error messages.                                                            // 5\n  // See: https://github.com/meteorhacks/kadira/issues/193                                          // 6\n  var message = m;                                                                                  // 7\n  var stack = s;                                                                                    // 8\n                                                                                                    // 9\n  // track only if error tracking is enabled                                                        // 10\n  if(!Kadira.options.enableErrorTracking) {                                                         // 11\n    return originalMeteorDebug(message, stack);                                                     // 12\n  }                                                                                                 // 13\n                                                                                                    // 14\n  // do not track if a zone is available (let zone handle the error)                                // 15\n  if(window.zone) {                                                                                 // 16\n    return originalMeteorDebug(message, stack);                                                     // 17\n  }                                                                                                 // 18\n                                                                                                    // 19\n  // We hate Meteor._debug (no single usage pattern)                                                // 20\n  if(message instanceof Error) {                                                                    // 21\n    stack = message.stack;                                                                          // 22\n    message = message.message                                                                       // 23\n  } else if(typeof message == 'string' && stack === undefined) {                                    // 24\n    stack = getStackFromMessage(message);                                                           // 25\n    message = firstLine(message);                                                                   // 26\n  }                                                                                                 // 27\n                                                                                                    // 28\n  // sometimes Meteor._debug is called with the stack concat to the message                         // 29\n  // FIXME Meteor._debug can be called in many ways                                                 // 30\n  if(message && stack === undefined) {                                                              // 31\n    stack = getStackFromMessage(message);                                                           // 32\n    message = firstLine(message);                                                                   // 33\n  }                                                                                                 // 34\n                                                                                                    // 35\n  var now = (new Date().getTime());                                                                 // 36\n  Kadira.errors.sendError({                                                                         // 37\n    appId : Kadira.options.appId,                                                                   // 38\n    name : message,                                                                                 // 39\n    type : 'client',                                                                                // 40\n    startTime : now,                                                                                // 41\n    subType : 'meteor._debug',                                                                      // 42\n    info : getBrowserInfo(),                                                                        // 43\n    stacks : JSON.stringify([{at: now, events: [], stack: stack}]),                                 // 44\n  });                                                                                               // 45\n                                                                                                    // 46\n  return originalMeteorDebug.apply(this, arguments);                                                // 47\n};                                                                                                  // 48\n                                                                                                    // 49\nvar stackRegex = /^\\s+at\\s.+$/gm;                                                                   // 50\nfunction getStackFromMessage (message) {                                                            // 51\n  // add empty string to add the empty line at start                                                // 52\n  var stack = [''];                                                                                 // 53\n  var match;                                                                                        // 54\n  while(match = stackRegex.exec(message)) {                                                         // 55\n    stack.push(match[0]);                                                                           // 56\n  }                                                                                                 // 57\n  return stack.join('\\n');                                                                          // 58\n}                                                                                                   // 59\n                                                                                                    // 60\nfunction firstLine (message) {                                                                      // 61\n  return message.split('\\n')[0];                                                                    // 62\n}                                                                                                   // 63\n                                                                                                    // 64\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                  //\n// packages/meteorhacks_kadira/lib/client/kadira.js                                                 //\n//                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                    //\nKadira.enableErrorTracking = function () {                                                          // 1\n  Kadira.options.enableErrorTracking = true;                                                        // 2\n};                                                                                                  // 3\n                                                                                                    // 4\nKadira.disableErrorTracking = function () {                                                         // 5\n  Kadira.options.enableErrorTracking = false;                                                       // 6\n};                                                                                                  // 7\n                                                                                                    // 8\nKadira.trackError = function (type, message, options) {                                             // 9\n  if(Kadira.options.enableErrorTracking && type && message) {                                       // 10\n    var now = (new Date()).getTime();                                                               // 11\n    options = options || {};                                                                        // 12\n    _.defaults(options, {subType: 'client', stacks: ''});                                           // 13\n    Kadira.errors.sendError({                                                                       // 14\n      appId : Kadira.options.appId,                                                                 // 15\n      name : message,                                                                               // 16\n      source : 'client',                                                                            // 17\n      startTime : now,                                                                              // 18\n      type : type,                                                                                  // 19\n      subType : options.subType,                                                                    // 20\n      info : getBrowserInfo(),                                                                      // 21\n      stacks : JSON.stringify([{at: now, events: [], stack: options.stacks}]),                      // 22\n    });                                                                                             // 23\n  }                                                                                                 // 24\n};                                                                                                  // 25\n                                                                                                    // 26\n// Create new NTP object and error model immediately so it can be used                              // 27\n// endpoints is set later using __meteor_runtime_config__ or publication                            // 28\nKadira.syncedDate = new Ntp(null);                                                                  // 29\nKadira.errors = new ErrorModel({                                                                    // 30\n  waitForNtpSyncInterval: 1000 * 5, // 5 secs                                                       // 31\n  intervalInMillis: 1000 * 60 * 1, // 1minutes                                                      // 32\n  maxErrorsPerInterval: 5                                                                           // 33\n});                                                                                                 // 34\n                                                                                                    // 35\n// __meteor_runtime_config__ cannot be dynamically set for cordova apps                             // 36\n// using a null subscription to send required options to client                                     // 37\nif(Meteor.isCordova) {                                                                              // 38\n  var SettingsCollection = new Meteor.Collection('kadira_settings');                                // 39\n  SettingsCollection.find().observe({added: _.once(initialize)});                                   // 40\n} else {                                                                                            // 41\n  initialize(__meteor_runtime_config__.kadira);                                                     // 42\n}                                                                                                   // 43\n                                                                                                    // 44\nfunction initialize (options) {                                                                     // 45\n  Kadira.options = options || {};                                                                   // 46\n  _.defaults(Kadira.options, {                                                                      // 47\n    errorDumpInterval: 1000*60,                                                                     // 48\n    maxErrorsPerInterval: 10,                                                                       // 49\n    collectAllStacks: false,                                                                        // 50\n    enableErrorTracking: false,                                                                     // 51\n  });                                                                                               // 52\n                                                                                                    // 53\n  if(Kadira.options.appId && Kadira.options.endpoint) {                                             // 54\n    // update endpoint after receiving correct data                                                 // 55\n    Kadira.syncedDate.setEndpoint(Kadira.options.endpoint);                                         // 56\n    Kadira.connected = true;                                                                        // 57\n    Meteor.startup(function () {                                                                    // 58\n      // if we don't do this this might block the initial rendering                                 // 59\n      // or, it will show up bottom of the page, which is not cool                                  // 60\n      setTimeout(function() {                                                                       // 61\n        Kadira.syncedDate.sync();                                                                   // 62\n      }, Kadira.options.clientEngineSyncDelay);                                                     // 63\n    });                                                                                             // 64\n  }                                                                                                 // 65\n                                                                                                    // 66\n  if(Kadira.connected && Kadira.options.enableErrorTracking) {                                      // 67\n    Kadira.enableErrorTracking();                                                                   // 68\n  }                                                                                                 // 69\n                                                                                                    // 70\n  if(window.Zone && Zone.inited) {                                                                  // 71\n    Zone.collectAllStacks = Kadira.options.collectAllStacks;                                        // 72\n  }                                                                                                 // 73\n}                                                                                                   // 74\n                                                                                                    // 75\n// patch jQuery ajax transport to use IE8/IE9 XDR if necessary                                      // 76\nif(window.XDomainRequest) {                                                                         // 77\n  fixInternetExplorerXDR();                                                                         // 78\n}                                                                                                   // 79\n                                                                                                    // 80\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                  //\n// packages/meteorhacks_kadira/lib/profiler/client.js                                               //\n//                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                    //\n// For just making a notice                                                                         // 1\n// meteorhacks:kadira-profiler will override this method to add                                     // 2\n// actual functionality                                                                             // 3\nKadira.profileCpu = function profileCpu() {                                                         // 4\n  var message =                                                                                     // 5\n    \"Please install meteorhacks:kadira-profiler\" +                                                  // 6\n    \" to take a CPU profile.\";                                                                      // 7\n  console.log(message);                                                                             // 8\n};                                                                                                  // 9\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                  //\n// packages/meteorhacks_kadira/lib/common/default_error_filters.js                                  //\n//                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                    //\nvar commonErrRegExps = [                                                                            // 1\n  /connection timeout\\. no (\\w*) heartbeat received/i,                                              // 2\n  /INVALID_STATE_ERR/i,                                                                             // 3\n];                                                                                                  // 4\n                                                                                                    // 5\nKadira.errorFilters = {                                                                             // 6\n  filterValidationErrors: function(type, message, err) {                                            // 7\n    if(err && err instanceof Meteor.Error) {                                                        // 8\n      return false;                                                                                 // 9\n    } else {                                                                                        // 10\n      return true;                                                                                  // 11\n    }                                                                                               // 12\n  },                                                                                                // 13\n                                                                                                    // 14\n  filterCommonMeteorErrors: function(type, message) {                                               // 15\n    for(var lc=0; lc<commonErrRegExps.length; lc++) {                                               // 16\n      var regExp = commonErrRegExps[lc];                                                            // 17\n      if(regExp.test(message)) {                                                                    // 18\n        return false;                                                                               // 19\n      }                                                                                             // 20\n    }                                                                                               // 21\n    return true;                                                                                    // 22\n  }                                                                                                 // 23\n};                                                                                                  // 24\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                  //\n// packages/meteorhacks_kadira/lib/common/send.js                                                   //\n//                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                    //\nKadira.send = function (payload, path, callback) {                                                  // 1\n  if(!Kadira.connected)  {                                                                          // 2\n    throw new Error(\"You need to connect with Kadira first, before sending messages!\");             // 3\n  }                                                                                                 // 4\n                                                                                                    // 5\n  path = (path.substr(0, 1) != '/')? \"/\" + path : path;                                             // 6\n  var endpoint = Kadira.options.endpoint + path;                                                    // 7\n  var retryCount = 0;                                                                               // 8\n  var retry = new Retry({                                                                           // 9\n    minCount: 1,                                                                                    // 10\n    minTimeout: 0,                                                                                  // 11\n    baseTimeout: 1000*5,                                                                            // 12\n    maxTimeout: 1000*60,                                                                            // 13\n  });                                                                                               // 14\n                                                                                                    // 15\n  var sendFunction = Kadira._getSendFunction();                                                     // 16\n  tryToSend();                                                                                      // 17\n                                                                                                    // 18\n  function tryToSend(err) {                                                                         // 19\n    if(retryCount < 5) {                                                                            // 20\n      retry.retryLater(retryCount++, send);                                                         // 21\n    } else {                                                                                        // 22\n      console.warn('Error sending error traces to kadira server');                                  // 23\n      if(callback) callback(err);                                                                   // 24\n    }                                                                                               // 25\n  }                                                                                                 // 26\n                                                                                                    // 27\n  function send() {                                                                                 // 28\n    sendFunction(endpoint, payload, function(err, content, statusCode) {                            // 29\n      if(err) {                                                                                     // 30\n        tryToSend(err);                                                                             // 31\n      } else if(statusCode == 200){                                                                 // 32\n        if(callback) callback(null, content);                                                       // 33\n      } else {                                                                                      // 34\n        if(callback) callback(new Meteor.Error(statusCode, content));                               // 35\n      }                                                                                             // 36\n    });                                                                                             // 37\n  }                                                                                                 // 38\n};                                                                                                  // 39\n                                                                                                    // 40\nKadira._getSendFunction = function() {                                                              // 41\n  return (Meteor.isServer)? Kadira._serverSend : Kadira._clientSend;                                // 42\n};                                                                                                  // 43\n                                                                                                    // 44\nKadira._clientSend = function (endpoint, payload, callback) {                                       // 45\n  $.ajax({                                                                                          // 46\n    type: 'POST',                                                                                   // 47\n    url: endpoint,                                                                                  // 48\n    contentType: 'application/json',                                                                // 49\n    data: JSON.stringify(payload),                                                                  // 50\n    error: function(err) {                                                                          // 51\n      callback(err);                                                                                // 52\n    },                                                                                              // 53\n    success: function(data) {                                                                       // 54\n      callback(null, data, 200);                                                                    // 55\n    }                                                                                               // 56\n  });                                                                                               // 57\n}                                                                                                   // 58\n                                                                                                    // 59\nKadira._serverSend = function (endpoint, payload, callback) {                                       // 60\n  callback = callback || function() {};                                                             // 61\n  var Fiber = Npm.require('fibers');                                                                // 62\n  new Fiber(function() {                                                                            // 63\n    var httpOptions = {                                                                             // 64\n      data: payload,                                                                                // 65\n      headers: Kadira.options.authHeaders                                                           // 66\n    };                                                                                              // 67\n                                                                                                    // 68\n    HTTP.call('POST', endpoint, httpOptions, function(err, res) {                                   // 69\n      if(res) {                                                                                     // 70\n        var content = (res.statusCode == 200)? res.data : res.content;                              // 71\n        callback(null, content, res.statusCode);                                                    // 72\n      } else {                                                                                      // 73\n        callback(err);                                                                              // 74\n      }                                                                                             // 75\n    });                                                                                             // 76\n  }).run();                                                                                         // 77\n}                                                                                                   // 78\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['meteorhacks:kadira'] = {\n  Kadira: Kadira\n};\n\n})();\n","servePath":"/packages/meteorhacks_kadira.js","sourceMap":{"version":3,"sources":["/packages/meteorhacks_kadira/lib/common/unify.js","/packages/meteorhacks_kadira/lib/models/base_error.js","/packages/meteorhacks_kadira/lib/retry.js","/packages/meteorhacks_kadira/lib/ntp.js","/packages/meteorhacks_kadira/lib/client/utils.js","/packages/meteorhacks_kadira/lib/client/models/error.js","/packages/meteorhacks_kadira/lib/client/error_reporters/zone.js","/packages/meteorhacks_kadira/lib/client/error_reporters/window_error.js","/packages/meteorhacks_kadira/lib/client/error_reporters/meteor_debug.js","/packages/meteorhacks_kadira/lib/client/kadira.js","/packages/meteorhacks_kadira/lib/profiler/client.js","/packages/meteorhacks_kadira/lib/common/default_error_filters.js","/packages/meteorhacks_kadira/lib/common/send.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yG;;;;;;;;;;;;;;;;;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yG;;;;;;;;;;;;;;;;;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yG;;;;;;;;;;;;;;;;;;ACnpJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0G;;;;;;;;;;;;;;;;;;AC1IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yG;;;;;;;;;;;;;;;;;;AChGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yG;;;;;;;;;;;;;;;;;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yG;;;;;;;;;;;;;;;;;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yG;;;;;;;;;;;;;;;;;;AC/DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yG;;;;;;;;;;;;;;;;;;AC/EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wG;;;;;;;;;;;;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yG;;;;;;;;;;;;;;;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yG","file":"/packages/meteorhacks_kadira.js","sourcesContent":["Kadira = {};\nKadira.options = {};\n\nif(Meteor.wrapAsync) {\n  Kadira._wrapAsync = Meteor.wrapAsync;\n} else {\n  Kadira._wrapAsync = Meteor._wrapAsync;\n}\n\nif(Meteor.isServer) {\n  var EventEmitter = Npm.require('events').EventEmitter;\n  var eventBus = new EventEmitter();\n  eventBus.setMaxListeners(0);\n\n  var buildArgs = function(args) {\n    args = _.toArray(args);\n    var eventName = args[0] + '-' + args[1];\n    var args = args.slice(2);\n    args.unshift(eventName);\n    return args;\n  };\n  \n  Kadira.EventBus = {};\n  _.each(['on', 'emit', 'removeListener', 'removeAllListeners'], function(m) {\n    Kadira.EventBus[m] = function() {\n      var args = buildArgs(arguments);\n      return eventBus[m].apply(eventBus, args);\n    };\n  });\n}","BaseErrorModel = function(options) {\n  this._filters = [];\n};\n\nBaseErrorModel.prototype.addFilter = function(filter) {\n  if(typeof filter === 'function') {\n    this._filters.push(filter);\n  } else {\n    throw new Error(\"Error filter must be a function\");\n  }\n};\n\nBaseErrorModel.prototype.removeFilter = function(filter) {\n  var index = this._filters.indexOf(filter);\n  if(index >= 0) {\n    this._filters.splice(index, 1);\n  }\n};\n\nBaseErrorModel.prototype.applyFilters = function(type, message, error, subType) {\n  for(var lc=0; lc<this._filters.length; lc++) {\n    var filter = this._filters[lc];\n    try {\n      var validated = filter(type, message, error, subType);\n      if(!validated) return false;\n    } catch (ex) {\n      // we need to remove this filter\n      // we may ended up in a error cycle\n      this._filters.splice(lc, 1);\n      throw new Error(\"an error thrown from a filter you've suplied\", ex.message);\n    }\n  }\n\n  return true;\n};","// Retry logic with an exponential backoff.\n//\n// options:\n//  baseTimeout: time for initial reconnect attempt (ms).\n//  exponent: exponential factor to increase timeout each attempt.\n//  maxTimeout: maximum time between retries (ms).\n//  minCount: how many times to reconnect \"instantly\".\n//  minTimeout: time to wait for the first `minCount` retries (ms).\n//  fuzz: factor to randomize retry times by (to avoid retry storms).\n\n//TODO: remove this class and use Meteor Retry in a later version of meteor.\n\nRetry = function (options) {\n  var self = this;\n  _.extend(self, _.defaults(_.clone(options || {}), {\n    baseTimeout: 1000, // 1 second\n    exponent: 2.2,\n    // The default is high-ish to ensure a server can recover from a\n    // failure caused by load.\n    maxTimeout: 5 * 60000, // 5 minutes\n    minTimeout: 10,\n    minCount: 2,\n    fuzz: 0.5 // +- 25%\n  }));\n  self.retryTimer = null;\n};\n\n_.extend(Retry.prototype, {\n\n  // Reset a pending retry, if any.\n  clear: function () {\n    var self = this;\n    if(self.retryTimer)\n      clearTimeout(self.retryTimer);\n    self.retryTimer = null;\n  },\n\n  // Calculate how long to wait in milliseconds to retry, based on the\n  // `count` of which retry this is.\n  _timeout: function (count) {\n    var self = this;\n\n    if(count < self.minCount)\n      return self.minTimeout;\n\n    var timeout = Math.min(\n      self.maxTimeout,\n      self.baseTimeout * Math.pow(self.exponent, count));\n    // fuzz the timeout randomly, to avoid reconnect storms when a\n    // server goes down.\n    timeout = timeout * ((Random.fraction() * self.fuzz) +\n                         (1 - self.fuzz/2));\n    return Math.ceil(timeout);\n  },\n\n  // Call `fn` after a delay, based on the `count` of which retry this is.\n  retryLater: function (count, fn) {\n    var self = this;\n    var timeout = self._timeout(count);\n    if(self.retryTimer)\n      clearTimeout(self.retryTimer);\n\n    self.retryTimer = setTimeout(fn, timeout);\n    return timeout;\n  }\n\n});\n","var logger = getLogger();\n\nNtp = function (endpoint) {\n  this.setEndpoint(endpoint);\n  this.diff = 0;\n  this.synced = false;\n  this.reSyncCount = 0;\n  this.reSync = new Retry({\n    baseTimeout: 1000*60,\n    maxTimeout: 1000*60*10,\n    minCount: 0\n  });\n}\n\nNtp._now = function() {\n  var now = Date.now();\n  if(typeof now == 'number') {\n    return now;\n  } else if(now instanceof Date) {\n    // some extenal JS libraries override Date.now and returns a Date object\n    // which directly affect us. So we need to prepare for that\n    return now.getTime();\n  } else {\n    // trust me. I've seen now === undefined\n    return (new Date()).getTime();\n  }\n};\n\nNtp.prototype.setEndpoint = function(endpoint) {\n  this.endpoint = endpoint + '/simplentp/sync';\n};\n\nNtp.prototype.getTime = function() {\n  return Ntp._now() + Math.round(this.diff);\n};\n\nNtp.prototype.syncTime = function(localTime) {\n  return localTime + Math.ceil(this.diff);\n};\n\nNtp.prototype.sync = function() {\n  logger('init sync');\n  var self = this;\n  var retryCount = 0;\n  var retry = new Retry({\n    baseTimeout: 1000*20,\n    maxTimeout: 1000*60,\n    minCount: 1,\n    minTimeout: 0\n  });\n  syncTime();\n\n  function syncTime () {\n    if(retryCount<5) {\n      logger('attempt time sync with server', retryCount);\n      // if we send 0 to the retryLater, cacheDns will run immediately\n      retry.retryLater(retryCount++, cacheDns);\n    } else {\n      logger('maximum retries reached');\n      self.reSync.retryLater(self.reSyncCount++, function () {\n        var args = [].slice.call(arguments);\n        self.sync.apply(self, args);\n      });\n    }\n  }\n\n  // first attempt is to cache dns. So, calculation does not\n  // include DNS resolution time\n  function cacheDns () {\n    self.getServerTime(function(err) {\n      if(!err) {\n        calculateTimeDiff();\n      } else {\n        syncTime();\n      }\n    });\n  }\n\n  function calculateTimeDiff () {\n    var clientStartTime = (new Date()).getTime();\n    self.getServerTime(function(err, serverTime) {\n      if(!err && serverTime) {\n        // (Date.now() + clientStartTime)/2 : Midpoint between req and res\n        var networkTime = ((new Date()).getTime() - clientStartTime)/2\n        var serverStartTime = serverTime - networkTime;\n        self.diff = serverStartTime - clientStartTime;\n        self.synced = true;\n        // we need to send 1 into retryLater.\n        self.reSync.retryLater(self.reSyncCount++, function () {\n          var args = [].slice.call(arguments);\n          self.sync.apply(self, args);\n        });\n        logger('successfully updated diff value', self.diff);\n      } else {\n        syncTime();\n      }\n    });\n  }\n}\n\nNtp.prototype.getServerTime = function(callback) {\n  var self = this;\n\n  if(Meteor.isServer) {\n    var Fiber = Npm.require('fibers');\n    new Fiber(function() {\n      HTTP.get(self.endpoint, function (err, res) {\n        if(err) {\n          callback(err);\n        } else {\n          var serverTime = parseInt(res.content)\n          callback(null, serverTime);\n        }\n      });\n    }).run();\n  } else {\n    $.ajax({\n      type: 'GET',\n      url: self.endpoint,\n      success: function(serverTime) {\n        callback(null, parseInt(serverTime));\n      },\n      error: function(err) {\n        callback(err);\n      }\n    });\n  }\n};\n\nfunction getLogger() {\n  if(Meteor.isServer) {\n    return Npm.require('debug')(\"kadira:ntp\");\n  } else {\n    return function(message) {\n      var canLogKadira =\n        Meteor._localStorage.getItem('LOG_KADIRA') !== null\n        && typeof console !== 'undefined';\n\n      if(canLogKadira) {\n        if(message) {\n          message = \"kadira:ntp \" + message;\n          arguments[0] = message;\n        }\n        console.log.apply(console, arguments);\n      }\n    }\n  }\n}\n","getBrowserInfo = function () {\n  return {\n    browser: window.navigator.userAgent,\n    userId: Meteor.userId && Meteor.userId(),\n    url: location.href,\n    resolution: getResolution()\n  };\n}\n\ngetResolution = function () {\n  if(screen && screen.width && screen.height) {\n    var resolution = screen.width + 'x' + screen.height;\n    return resolution;\n  }\n}\n\ngetErrorStack = function (zone, callback) {\n  var trace = [];\n  var eventMap = zone.eventMap || {};\n  var infoMap = zone.infoMap || {};\n\n  trace.push({\n    at: (new Date().getTime()),\n    stack: zone.erroredStack.get()\n  });\n\n  processZone();\n  function processZone() {\n    // we assume, first two zones are not interesting\n    // bacause, they are some internal meteor loading stuffs\n    if(zone && zone.depth > 2) {\n      var stack = \"\";\n      if(zone.currentStack) {\n        stack = zone.currentStack.get();\n      }\n\n      var events = eventMap[zone.id];\n      var info = getInfoArray(infoMap[zone.id]);\n      var ownerArgsEvent = events && events[0] && events[0].type == 'owner-args' && events.shift();\n      var runAt = (ownerArgsEvent)? ownerArgsEvent.at : zone.runAt;\n      var ownerArgs = (ownerArgsEvent)? _.toArray(ownerArgsEvent.args) : [];\n\n      // limiting\n      events = _.map(_.last(events, 5), checkSizeAndPickFields(100));\n      info = _.map(_.last(info, 5), checkSizeAndPickFields(100));\n      ownerArgs = checkSizeAndPickFields(200)(_.first(ownerArgs, 5));\n\n      zone.owner && delete zone.owner.zoneId;\n\n      trace.push({\n        createdAt: zone.createdAt,\n        runAt: runAt,\n        stack: stack,\n        owner: zone.owner,\n        ownerArgs: ownerArgs,\n        events: events,\n        info: info,\n        zoneId: zone.id\n      });\n      zone = zone.parent;\n\n      setTimeout(processZone, 0);\n    } else {\n      callback(trace);\n    }\n  }\n}\n\ngetInfoArray = function (info) {\n  return _(info || {}).map(function (value, type) {\n    value.type = type;\n    return value;\n  })\n}\n\ngetTime = function () {\n  if(Kadira && Kadira.syncedDate) {\n    return Kadira.syncedDate.getTime();\n  } else {\n    return (new Date().getTime());\n  }\n}\n\ncheckSizeAndPickFields = function(maxFieldSize) {\n  return function(obj) {\n    maxFieldSize = maxFieldSize || 100;\n    for(var key in obj) {\n      var value = obj[key];\n      try {\n        var valueStringified = JSON.stringify(value);\n        if(valueStringified.length > maxFieldSize) {\n          obj[key] = valueStringified.substr(0, maxFieldSize) + \" ...\";\n        } else {\n          obj[key] = value;\n        }\n      } catch(ex) {\n        obj[key] = 'Error: cannot stringify value';\n      }\n    }\n    return obj;\n  }\n}\n\n/**\n * IE8 and IE9 does not support CORS with the usual XMLHttpRequest object\n * If XDomainRequest exists, use it to send errors.\n * XDR can POST data to HTTPS endpoints only if current page uses HTTPS\n */\nfixInternetExplorerXDR = function () {\n  if (window.XDomainRequest) {\n    $.ajaxTransport(function(s) {\n      return {\n        send: function (headers, callback) {\n          var xdr = new XDomainRequest();\n          var data = s.data || null;\n          var url = matchPageProtocol(s.url);\n\n          xdr.onload = function () {\n            var headers = {'Content-Type': xdr.contentType};\n            callback(200, 'OK', {text: xdr.responseText}, headers);\n          }\n\n          xdr.onerror = function () {\n            callback(404);\n          }\n\n          xdr.open(s.type, url);\n          xdr.send(data);\n        }\n      };\n    });\n  }\n\n  function matchPageProtocol (endpoint) {\n    var withoutProtocol = endpoint.substr(endpoint.indexOf(':') + 1);\n    return window.location.protocol + withoutProtocol;\n  }\n}\n","ErrorModel = function(options) {\n  BaseErrorModel.call(this);\n  options = options || {};\n  options.maxErrorsPerInterval = options.maxErrorsPerInterval || 10;\n  options.intervalInMillis = options.intervalInMillis || 1000 * 60 *2; //2 mins\n  options.waitForNtpSyncInterval = options.waitForNtpSyncInterval || 0;\n  var self = this;\n\n  self.options = options;\n\n  // errorsSentCount will be reseted at the start of the interval\n  self.errorsSentCount = 0;\n  self.errorsSent = {};\n  self.intervalTimeoutHandler = setInterval(function() {\n    self.errorsSentCount = 0;\n    self._flushErrors();\n  }, self.options.intervalInMillis);\n};\n\n_.extend(ErrorModel.prototype, BaseErrorModel.prototype);\n\nErrorModel.prototype.sendError = function(errorDef, err, force) {\n  var self = this;\n  if(!this.applyFilters('client', errorDef.name, err, errorDef.subType)) {\n    return;\n  };\n\n  if(!this.canSendErrors()) {\n    // reached maximum error count for this interval (1 min)\n    return;\n  }\n\n  if(force) {\n    sendError();\n  } else {\n    if(Kadira.syncedDate.synced || self.options.waitForNtpSyncInterval == 0) {\n      sendError();\n    } else {\n      setTimeout(forceSendError, self.options.waitForNtpSyncInterval);\n    }\n  }\n\n  function forceSendError() {\n    self.sendError(errorDef, err, true);\n  }\n\n  function sendError() {\n    if(!self.errorsSent[errorDef.name]) {\n      // sync time with the server\n      if(errorDef.startTime) {\n        errorDef.startTime = Kadira.syncedDate.syncTime(errorDef.startTime);\n      }\n      errorDef.count = 1;\n      var payload = {host: Kadira.options.hostname, errors: [errorDef]}\n      Kadira.send(payload, '/errors');\n\n      self.errorsSent[errorDef.name] = _.clone(errorDef);\n      self.errorsSent[errorDef.name].count = 0;\n      self.errorsSentCount++;\n    } else {\n      self.increamentErrorCount(errorDef.name);\n    }\n  }\n};\n\nErrorModel.prototype._flushErrors = function() {\n  var self = this;\n  var errors = _.values(self.errorsSent);\n  errors = _.filter(errors, function(error) {\n    return error.count > 0;\n  });\n\n  if(errors.length > 0) {\n    Kadira.send({errors: errors}, '/errors');\n  }\n  self.errorsSent = {};\n};\n\nErrorModel.prototype.isErrorExists = function(name) {\n  return !!this.errorsSent[name];\n};\n\nErrorModel.prototype.increamentErrorCount = function(name) {\n  var error = this.errorsSent[name];\n  if(error) {\n    error.count++;\n  }\n};\n\nErrorModel.prototype.canSendErrors = function() {\n  return this.errorsSentCount < this.options.maxErrorsPerInterval;\n};\n\nErrorModel.prototype.close = function() {\n  clearTimeout(this.intervalTimeoutHandler);\n};\n","if(window.Zone && Zone.inited) {\n  Zone.Reporters.add('kadira', kadiraZoneReporter);\n}\n\nfunction kadiraZoneReporter(zone) {\n  // track only if error tracking is enabled\n  if(!Kadira.options.enableErrorTracking) {\n    return;\n  }\n\n  var errorName = Zone.Reporters.getErrorMessage(zone.erroredStack._e);\n  if(Kadira.errors.isErrorExists(errorName)) {\n    Kadira.errors.increamentErrorCount(errorName);\n  } else if(Kadira.errors.canSendErrors()) {\n    getErrorStack(zone, function(stacks) {\n      Kadira.errors.sendError({\n        appId : Kadira.options.appId,\n        name : errorName,\n        type : 'client',\n        startTime : zone.runAt,\n        subType : 'zone',\n        info : getBrowserInfo(),\n        stacks : JSON.stringify(stacks),\n      });\n    });\n  }\n}\n","var prevWindowOnError = window.onerror || Function.prototype;\n\nwindow.onerror = function(message, url, line, col, error) {\n  // track only if error tracking is enabled\n  if(!Kadira.options.enableErrorTracking) {\n    return prevWindowOnError(message, url, line, col, error);\n  }\n\n  url = url || '<anonymous>';\n  line = line || 0;\n  col = col || 0;\n\n  if(error) {\n    var stack = error.stack;\n  } else {\n    var stack = 'Error:\\n    at window.onerror ('+url+':'+line+':'+col+')';\n  }\n\n  var now = (new Date().getTime());\n  Kadira.errors.sendError({\n    appId : Kadira.options.appId,\n    name : message,\n    type : 'client',\n    startTime : now,\n    subType : 'window.onerror',\n    info : getBrowserInfo(),\n    stacks : JSON.stringify([{at: now, events: [], stack: stack}]),\n  });\n\n  return prevWindowOnError(message, url, line, col, error);;\n}\n","var originalMeteorDebug = Meteor._debug;\n\nMeteor._debug = function(m, s) {\n  // We need to asign variables like this. Otherwise, \n  // we can't see proper error messages.\n  // See: https://github.com/meteorhacks/kadira/issues/193\n  var message = m;\n  var stack = s;\n  \n  // track only if error tracking is enabled\n  if(!Kadira.options.enableErrorTracking) {\n    return originalMeteorDebug(message, stack);\n  }\n\n  // do not track if a zone is available (let zone handle the error)\n  if(window.zone) {\n    return originalMeteorDebug(message, stack);\n  }\n\n  // We hate Meteor._debug (no single usage pattern)\n  if(message instanceof Error) {\n    stack = message.stack;\n    message = message.message\n  } else if(typeof message == 'string' && stack === undefined) {\n    stack = getStackFromMessage(message);\n    message = firstLine(message);\n  }\n\n  // sometimes Meteor._debug is called with the stack concat to the message\n  // FIXME Meteor._debug can be called in many ways\n  if(message && stack === undefined) {\n    stack = getStackFromMessage(message);\n    message = firstLine(message);\n  }\n\n  var now = (new Date().getTime());\n  Kadira.errors.sendError({\n    appId : Kadira.options.appId,\n    name : message,\n    type : 'client',\n    startTime : now,\n    subType : 'meteor._debug',\n    info : getBrowserInfo(),\n    stacks : JSON.stringify([{at: now, events: [], stack: stack}]),\n  });\n\n  return originalMeteorDebug.apply(this, arguments);\n};\n\nvar stackRegex = /^\\s+at\\s.+$/gm;\nfunction getStackFromMessage (message) {\n  // add empty string to add the empty line at start\n  var stack = [''];\n  var match;\n  while(match = stackRegex.exec(message)) {\n    stack.push(match[0]);\n  }\n  return stack.join('\\n');\n}\n\nfunction firstLine (message) {\n  return message.split('\\n')[0];\n}\n","Kadira.enableErrorTracking = function () {\n  Kadira.options.enableErrorTracking = true;\n};\n\nKadira.disableErrorTracking = function () {\n  Kadira.options.enableErrorTracking = false;\n};\n\nKadira.trackError = function (type, message, options) {\n  if(Kadira.options.enableErrorTracking && type && message) {\n    var now = (new Date()).getTime();\n    options = options || {};\n    _.defaults(options, {subType: 'client', stacks: ''});\n    Kadira.errors.sendError({\n      appId : Kadira.options.appId,\n      name : message,\n      source : 'client',\n      startTime : now,\n      type : type,\n      subType : options.subType,\n      info : getBrowserInfo(),\n      stacks : JSON.stringify([{at: now, events: [], stack: options.stacks}]),\n    });\n  }\n};\n\n// Create new NTP object and error model immediately so it can be used\n// endpoints is set later using __meteor_runtime_config__ or publication\nKadira.syncedDate = new Ntp(null);\nKadira.errors = new ErrorModel({\n  waitForNtpSyncInterval: 1000 * 5, // 5 secs\n  intervalInMillis: 1000 * 60 * 1, // 1minutes\n  maxErrorsPerInterval: 5\n});\n\n// __meteor_runtime_config__ cannot be dynamically set for cordova apps\n// using a null subscription to send required options to client\nif(Meteor.isCordova) {\n  var SettingsCollection = new Meteor.Collection('kadira_settings');\n  SettingsCollection.find().observe({added: _.once(initialize)});\n} else {\n  initialize(__meteor_runtime_config__.kadira);\n}\n\nfunction initialize (options) {\n  Kadira.options = options || {};\n  _.defaults(Kadira.options, {\n    errorDumpInterval: 1000*60,\n    maxErrorsPerInterval: 10,\n    collectAllStacks: false,\n    enableErrorTracking: false,\n  });\n\n  if(Kadira.options.appId && Kadira.options.endpoint) {\n    // update endpoint after receiving correct data\n    Kadira.syncedDate.setEndpoint(Kadira.options.endpoint);\n    Kadira.connected = true;\n    Meteor.startup(function () {\n      // if we don't do this this might block the initial rendering\n      // or, it will show up bottom of the page, which is not cool\n      setTimeout(function() {\n        Kadira.syncedDate.sync();\n      }, Kadira.options.clientEngineSyncDelay);\n    });\n  }\n\n  if(Kadira.connected && Kadira.options.enableErrorTracking) {\n    Kadira.enableErrorTracking();\n  }\n\n  if(window.Zone && Zone.inited) {\n    Zone.collectAllStacks = Kadira.options.collectAllStacks;\n  }\n}\n\n// patch jQuery ajax transport to use IE8/IE9 XDR if necessary\nif(window.XDomainRequest) {\n  fixInternetExplorerXDR();\n}\n","// For just making a notice\n// meteorhacks:kadira-profiler will override this method to add\n// actual functionality\nKadira.profileCpu = function profileCpu() {\n  var message =\n    \"Please install meteorhacks:kadira-profiler\" +\n    \" to take a CPU profile.\";\n  console.log(message);\n};","var commonErrRegExps = [\n  /connection timeout\\. no (\\w*) heartbeat received/i,\n  /INVALID_STATE_ERR/i,\n];\n\nKadira.errorFilters = {\n  filterValidationErrors: function(type, message, err) {\n    if(err && err instanceof Meteor.Error) {\n      return false;\n    } else {\n      return true;\n    }\n  },\n\n  filterCommonMeteorErrors: function(type, message) {\n    for(var lc=0; lc<commonErrRegExps.length; lc++) {\n      var regExp = commonErrRegExps[lc];\n      if(regExp.test(message)) {\n        return false;\n      }\n    }\n    return true;\n  }\n};","Kadira.send = function (payload, path, callback) {\n  if(!Kadira.connected)  {\n    throw new Error(\"You need to connect with Kadira first, before sending messages!\");\n  }\n\n  path = (path.substr(0, 1) != '/')? \"/\" + path : path;\n  var endpoint = Kadira.options.endpoint + path;\n  var retryCount = 0;\n  var retry = new Retry({\n    minCount: 1,\n    minTimeout: 0,\n    baseTimeout: 1000*5,\n    maxTimeout: 1000*60,\n  });\n\n  var sendFunction = Kadira._getSendFunction();\n  tryToSend();\n\n  function tryToSend(err) {\n    if(retryCount < 5) {\n      retry.retryLater(retryCount++, send);\n    } else {\n      console.warn('Error sending error traces to kadira server');\n      if(callback) callback(err);\n    }\n  }\n\n  function send() {\n    sendFunction(endpoint, payload, function(err, content, statusCode) {\n      if(err) {\n        tryToSend(err);\n      } else if(statusCode == 200){\n        if(callback) callback(null, content);\n      } else {\n        if(callback) callback(new Meteor.Error(statusCode, content));\n      }\n    });\n  }\n};\n\nKadira._getSendFunction = function() {\n  return (Meteor.isServer)? Kadira._serverSend : Kadira._clientSend;\n};\n\nKadira._clientSend = function (endpoint, payload, callback) {\n  $.ajax({\n    type: 'POST',\n    url: endpoint,\n    contentType: 'application/json',\n    data: JSON.stringify(payload),\n    error: function(err) {\n      callback(err);\n    },\n    success: function(data) {\n      callback(null, data, 200);\n    }\n  }); \n}\n\nKadira._serverSend = function (endpoint, payload, callback) {\n  callback = callback || function() {};\n  var Fiber = Npm.require('fibers');\n  new Fiber(function() {\n    var httpOptions = {\n      data: payload,\n      headers: Kadira.options.authHeaders\n    };\n\n    HTTP.call('POST', endpoint, httpOptions, function(err, res) {\n      if(res) {\n        var content = (res.statusCode == 200)? res.data : res.content;\n        callback(null, content, res.statusCode);\n      } else {\n        callback(err);\n      }  \n    });\n  }).run();\n}"]}}]