[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar moment = Package['momentjs:moment'].moment;\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                //\n// packages/momentjs_twix/dist/twix.js                                                                            //\n//                                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                  //\n// Generated by CoffeeScript 1.10.0                                                                               // 1\n(function() {                                                                                                     // 2\n  var hasModule, isArray, makeTwix,                                                                               // 3\n    slice = [].slice;                                                                                             // 4\n                                                                                                                  // 5\n  hasModule = (typeof module !== \"undefined\" && module !== null) && (module.exports != null);                     // 6\n                                                                                                                  // 7\n  isArray = function(input) {                                                                                     // 8\n    return Object.prototype.toString.call(input) === '[object Array]';                                            // 9\n  };                                                                                                              // 10\n                                                                                                                  // 11\n  makeTwix = function(moment) {                                                                                   // 12\n    var Twix;                                                                                                     // 13\n    if (moment == null) {                                                                                         // 14\n      throw new Error(\"Can't find moment\");                                                                       // 15\n    }                                                                                                             // 16\n    Twix = (function() {                                                                                          // 17\n      function Twix(start, end, parseFormat, options) {                                                           // 18\n        var ref;                                                                                                  // 19\n        if (options == null) {                                                                                    // 20\n          options = {};                                                                                           // 21\n        }                                                                                                         // 22\n        if (typeof parseFormat !== 'string') {                                                                    // 23\n          options = parseFormat != null ? parseFormat : {};                                                       // 24\n          parseFormat = null;                                                                                     // 25\n        }                                                                                                         // 26\n        if (typeof options === 'boolean') {                                                                       // 27\n          options = {                                                                                             // 28\n            allDay: options                                                                                       // 29\n          };                                                                                                      // 30\n        }                                                                                                         // 31\n        this._oStart = moment(start, parseFormat, options.parseStrict);                                           // 32\n        this._oEnd = moment(end, parseFormat, options.parseStrict);                                               // 33\n        this.allDay = (ref = options.allDay) != null ? ref : false;                                               // 34\n        this._mutated();                                                                                          // 35\n      }                                                                                                           // 36\n                                                                                                                  // 37\n      Twix._extend = function() {                                                                                 // 38\n        var attr, first, j, len, other, others;                                                                   // 39\n        first = arguments[0], others = 2 <= arguments.length ? slice.call(arguments, 1) : [];                     // 40\n        for (j = 0, len = others.length; j < len; j++) {                                                          // 41\n          other = others[j];                                                                                      // 42\n          for (attr in other) {                                                                                   // 43\n            if (typeof other[attr] !== 'undefined') {                                                             // 44\n              first[attr] = other[attr];                                                                          // 45\n            }                                                                                                     // 46\n          }                                                                                                       // 47\n        }                                                                                                         // 48\n        return first;                                                                                             // 49\n      };                                                                                                          // 50\n                                                                                                                  // 51\n      Twix.prototype.start = function() {                                                                         // 52\n        return this._start.clone();                                                                               // 53\n      };                                                                                                          // 54\n                                                                                                                  // 55\n      Twix.prototype.end = function() {                                                                           // 56\n        return this._end.clone();                                                                                 // 57\n      };                                                                                                          // 58\n                                                                                                                  // 59\n      Twix.prototype.isSame = function(period) {                                                                  // 60\n        return this._start.isSame(this._end, period);                                                             // 61\n      };                                                                                                          // 62\n                                                                                                                  // 63\n      Twix.prototype.length = function(period) {                                                                  // 64\n        return this._displayEnd.diff(this._start, period);                                                        // 65\n      };                                                                                                          // 66\n                                                                                                                  // 67\n      Twix.prototype.count = function(period) {                                                                   // 68\n        var end, start;                                                                                           // 69\n        start = this.start().startOf(period);                                                                     // 70\n        end = this.end().startOf(period);                                                                         // 71\n        return end.diff(start, period) + 1;                                                                       // 72\n      };                                                                                                          // 73\n                                                                                                                  // 74\n      Twix.prototype.countInner = function(period) {                                                              // 75\n        var end, ref, start;                                                                                      // 76\n        ref = this._inner(period), start = ref[0], end = ref[1];                                                  // 77\n        if (start >= end) {                                                                                       // 78\n          return 0;                                                                                               // 79\n        }                                                                                                         // 80\n        return end.diff(start, period);                                                                           // 81\n      };                                                                                                          // 82\n                                                                                                                  // 83\n      Twix.prototype.iterate = function(intervalAmount, period, minHours) {                                       // 84\n        var end, hasNext, ref, start;                                                                             // 85\n        ref = this._prepIterateInputs(intervalAmount, period, minHours), intervalAmount = ref[0], period = ref[1], minHours = ref[2];\n        start = this.start().startOf(period);                                                                     // 87\n        end = this.end().startOf(period);                                                                         // 88\n        if (this.allDay) {                                                                                        // 89\n          end = end.add(1, 'd');                                                                                  // 90\n        }                                                                                                         // 91\n        hasNext = (function(_this) {                                                                              // 92\n          return function() {                                                                                     // 93\n            return (!_this.allDay && start <= end && (!minHours || !start.isSame(end) || _this._end.hours() > minHours)) || (_this.allDay && start < end);\n          };                                                                                                      // 95\n        })(this);                                                                                                 // 96\n        return this._iterateHelper(period, start, hasNext, intervalAmount);                                       // 97\n      };                                                                                                          // 98\n                                                                                                                  // 99\n      Twix.prototype.iterateInner = function(intervalAmount, period) {                                            // 100\n        var end, hasNext, ref, ref1, start;                                                                       // 101\n        ref = this._prepIterateInputs(intervalAmount, period), intervalAmount = ref[0], period = ref[1];          // 102\n        ref1 = this._inner(period, intervalAmount), start = ref1[0], end = ref1[1];                               // 103\n        hasNext = function() {                                                                                    // 104\n          return start < end;                                                                                     // 105\n        };                                                                                                        // 106\n        return this._iterateHelper(period, start, hasNext, intervalAmount);                                       // 107\n      };                                                                                                          // 108\n                                                                                                                  // 109\n      Twix.prototype.humanizeLength = function() {                                                                // 110\n        if (this.allDay) {                                                                                        // 111\n          if (this.isSame('d')) {                                                                                 // 112\n            return 'all day';                                                                                     // 113\n          } else {                                                                                                // 114\n            return this._start.from(this.end().add(1, 'd'), true);                                                // 115\n          }                                                                                                       // 116\n        } else {                                                                                                  // 117\n          return this._start.from(this._end, true);                                                               // 118\n        }                                                                                                         // 119\n      };                                                                                                          // 120\n                                                                                                                  // 121\n      Twix.prototype.asDuration = function(units) {                                                               // 122\n        var diff;                                                                                                 // 123\n        diff = this._end.diff(this._start);                                                                       // 124\n        return moment.duration(diff);                                                                             // 125\n      };                                                                                                          // 126\n                                                                                                                  // 127\n      Twix.prototype.isPast = function() {                                                                        // 128\n        return this._lastMilli < moment();                                                                        // 129\n      };                                                                                                          // 130\n                                                                                                                  // 131\n      Twix.prototype.isFuture = function() {                                                                      // 132\n        return this._start > moment();                                                                            // 133\n      };                                                                                                          // 134\n                                                                                                                  // 135\n      Twix.prototype.isCurrent = function() {                                                                     // 136\n        return !this.isPast() && !this.isFuture();                                                                // 137\n      };                                                                                                          // 138\n                                                                                                                  // 139\n      Twix.prototype.contains = function(mom) {                                                                   // 140\n        if (!moment.isMoment(mom)) {                                                                              // 141\n          mom = moment(mom);                                                                                      // 142\n        }                                                                                                         // 143\n        return this._start <= mom && this._lastMilli >= mom;                                                      // 144\n      };                                                                                                          // 145\n                                                                                                                  // 146\n      Twix.prototype.isEmpty = function() {                                                                       // 147\n        return this._start.isSame(this._displayEnd);                                                              // 148\n      };                                                                                                          // 149\n                                                                                                                  // 150\n      Twix.prototype.overlaps = function(other) {                                                                 // 151\n        return this._displayEnd.isAfter(other._start) && this._start.isBefore(other._displayEnd);                 // 152\n      };                                                                                                          // 153\n                                                                                                                  // 154\n      Twix.prototype.engulfs = function(other) {                                                                  // 155\n        return this._start <= other._start && this._displayEnd >= other._displayEnd;                              // 156\n      };                                                                                                          // 157\n                                                                                                                  // 158\n      Twix.prototype.union = function(other) {                                                                    // 159\n        var allDay, newEnd, newStart;                                                                             // 160\n        allDay = this.allDay && other.allDay;                                                                     // 161\n        newStart = this._start < other._start ? this._start : other._start;                                       // 162\n        newEnd = this._lastMilli > other._lastMilli ? (allDay ? this._end : this._displayEnd) : (allDay ? other._end : other._displayEnd);\n        return new Twix(newStart, newEnd, allDay);                                                                // 164\n      };                                                                                                          // 165\n                                                                                                                  // 166\n      Twix.prototype.intersection = function(other) {                                                             // 167\n        var allDay, newEnd, newStart;                                                                             // 168\n        allDay = this.allDay && other.allDay;                                                                     // 169\n        newStart = this._start > other._start ? this._start : other._start;                                       // 170\n        newEnd = this._lastMilli < other._lastMilli ? (allDay ? this._end : this._displayEnd) : (allDay ? other._end : other._displayEnd);\n        return new Twix(newStart, newEnd, allDay);                                                                // 172\n      };                                                                                                          // 173\n                                                                                                                  // 174\n      Twix.prototype.xor = function() {                                                                           // 175\n        var allDay, arr, endTime, i, item, j, k, last, len, len1, o, open, other, others, ref, results, start, t;\n        others = 1 <= arguments.length ? slice.call(arguments, 0) : [];                                           // 177\n        open = 0;                                                                                                 // 178\n        start = null;                                                                                             // 179\n        results = [];                                                                                             // 180\n        allDay = ((function() {                                                                                   // 181\n          var j, len, results1;                                                                                   // 182\n          results1 = [];                                                                                          // 183\n          for (j = 0, len = others.length; j < len; j++) {                                                        // 184\n            o = others[j];                                                                                        // 185\n            if (o.allDay) {                                                                                       // 186\n              results1.push(o);                                                                                   // 187\n            }                                                                                                     // 188\n          }                                                                                                       // 189\n          return results1;                                                                                        // 190\n        })()).length === others.length;                                                                           // 191\n        arr = [];                                                                                                 // 192\n        ref = [this].concat(others);                                                                              // 193\n        for (i = j = 0, len = ref.length; j < len; i = ++j) {                                                     // 194\n          item = ref[i];                                                                                          // 195\n          arr.push({                                                                                              // 196\n            time: item._start,                                                                                    // 197\n            i: i,                                                                                                 // 198\n            type: 0                                                                                               // 199\n          });                                                                                                     // 200\n          arr.push({                                                                                              // 201\n            time: item._displayEnd,                                                                               // 202\n            i: i,                                                                                                 // 203\n            type: 1                                                                                               // 204\n          });                                                                                                     // 205\n        }                                                                                                         // 206\n        arr = arr.sort(function(a, b) {                                                                           // 207\n          return a.time - b.time;                                                                                 // 208\n        });                                                                                                       // 209\n        for (k = 0, len1 = arr.length; k < len1; k++) {                                                           // 210\n          other = arr[k];                                                                                         // 211\n          if (other.type === 1) {                                                                                 // 212\n            open -= 1;                                                                                            // 213\n          }                                                                                                       // 214\n          if (open === other.type) {                                                                              // 215\n            start = other.time;                                                                                   // 216\n          }                                                                                                       // 217\n          if (open === (other.type + 1) % 2) {                                                                    // 218\n            if (start) {                                                                                          // 219\n              last = results[results.length - 1];                                                                 // 220\n              if (last && last._end.isSame(start)) {                                                              // 221\n                last._oEnd = other.time;                                                                          // 222\n                last._mutated();                                                                                  // 223\n              } else {                                                                                            // 224\n                endTime = allDay ? other.time.clone().subtract(1, 'd') : other.time;                              // 225\n                t = new Twix(start, endTime, allDay);                                                             // 226\n                if (!t.isEmpty()) {                                                                               // 227\n                  results.push(t);                                                                                // 228\n                }                                                                                                 // 229\n              }                                                                                                   // 230\n            }                                                                                                     // 231\n            start = null;                                                                                         // 232\n          }                                                                                                       // 233\n          if (other.type === 0) {                                                                                 // 234\n            open += 1;                                                                                            // 235\n          }                                                                                                       // 236\n        }                                                                                                         // 237\n        return results;                                                                                           // 238\n      };                                                                                                          // 239\n                                                                                                                  // 240\n      Twix.prototype.difference = function() {                                                                    // 241\n        var j, len, others, ref, results1, t;                                                                     // 242\n        others = 1 <= arguments.length ? slice.call(arguments, 0) : [];                                           // 243\n        ref = this.xor.apply(this, others).map((function(_this) {                                                 // 244\n          return function(i) {                                                                                    // 245\n            return _this.intersection(i);                                                                         // 246\n          };                                                                                                      // 247\n        })(this));                                                                                                // 248\n        results1 = [];                                                                                            // 249\n        for (j = 0, len = ref.length; j < len; j++) {                                                             // 250\n          t = ref[j];                                                                                             // 251\n          if (!t.isEmpty() && t.isValid()) {                                                                      // 252\n            results1.push(t);                                                                                     // 253\n          }                                                                                                       // 254\n        }                                                                                                         // 255\n        return results1;                                                                                          // 256\n      };                                                                                                          // 257\n                                                                                                                  // 258\n      Twix.prototype.split = function() {                                                                         // 259\n        var args, dur, end, final, i, mom, start, time, times, vals;                                              // 260\n        args = 1 <= arguments.length ? slice.call(arguments, 0) : [];                                             // 261\n        end = start = this.start();                                                                               // 262\n        if (moment.isDuration(args[0])) {                                                                         // 263\n          dur = args[0];                                                                                          // 264\n        } else if ((!moment.isMoment(args[0]) && !isArray(args[0]) && typeof args[0] === 'object') || (typeof args[0] === 'number' && typeof args[1] === 'string')) {\n          dur = moment.duration(args[0], args[1]);                                                                // 266\n        } else if (isArray(args[0])) {                                                                            // 267\n          times = args[0];                                                                                        // 268\n        } else {                                                                                                  // 269\n          times = args;                                                                                           // 270\n        }                                                                                                         // 271\n        if (times) {                                                                                              // 272\n          times = (function() {                                                                                   // 273\n            var j, len, results1;                                                                                 // 274\n            results1 = [];                                                                                        // 275\n            for (j = 0, len = times.length; j < len; j++) {                                                       // 276\n              time = times[j];                                                                                    // 277\n              results1.push(moment(time));                                                                        // 278\n            }                                                                                                     // 279\n            return results1;                                                                                      // 280\n          })();                                                                                                   // 281\n          times = ((function() {                                                                                  // 282\n            var j, len, results1;                                                                                 // 283\n            results1 = [];                                                                                        // 284\n            for (j = 0, len = times.length; j < len; j++) {                                                       // 285\n              mom = times[j];                                                                                     // 286\n              if (mom.isValid() && mom >= start) {                                                                // 287\n                results1.push(mom);                                                                               // 288\n              }                                                                                                   // 289\n            }                                                                                                     // 290\n            return results1;                                                                                      // 291\n          })()).sort();                                                                                           // 292\n        }                                                                                                         // 293\n        if ((dur && dur.asMilliseconds() === 0) || (times && times.length === 0)) {                               // 294\n          return [this];                                                                                          // 295\n        }                                                                                                         // 296\n        vals = [];                                                                                                // 297\n        i = 0;                                                                                                    // 298\n        final = this._displayEnd;                                                                                 // 299\n        while (start < final && ((times == null) || times[i])) {                                                  // 300\n          end = dur ? start.clone().add(dur) : times[i].clone();                                                  // 301\n          end = moment.min(final, end);                                                                           // 302\n          if (!start.isSame(end)) {                                                                               // 303\n            vals.push(moment.twix(start, end));                                                                   // 304\n          }                                                                                                       // 305\n          start = end;                                                                                            // 306\n          i += 1;                                                                                                 // 307\n        }                                                                                                         // 308\n        if (!end.isSame(this._displayEnd) && times) {                                                             // 309\n          vals.push(moment.twix(end, this._displayEnd));                                                          // 310\n        }                                                                                                         // 311\n        return vals;                                                                                              // 312\n      };                                                                                                          // 313\n                                                                                                                  // 314\n      Twix.prototype.isValid = function() {                                                                       // 315\n        return this._start.isValid() && this._end.isValid() && this._start <= this._displayEnd;                   // 316\n      };                                                                                                          // 317\n                                                                                                                  // 318\n      Twix.prototype.equals = function(other) {                                                                   // 319\n        return (other instanceof Twix) && this.allDay === other.allDay && this._start.valueOf() === other._start.valueOf() && this._end.valueOf() === other._end.valueOf();\n      };                                                                                                          // 321\n                                                                                                                  // 322\n      Twix.prototype.toString = function() {                                                                      // 323\n        return \"{start: \" + (this._start.format()) + \", end: \" + (this._end.format()) + \", allDay: \" + (this.allDay ? 'true' : 'false') + \"}\";\n      };                                                                                                          // 325\n                                                                                                                  // 326\n      Twix.prototype.simpleFormat = function(momentOpts, inopts) {                                                // 327\n        var options, s;                                                                                           // 328\n        options = {                                                                                               // 329\n          allDay: '(all day)',                                                                                    // 330\n          template: Twix.formatTemplate                                                                           // 331\n        };                                                                                                        // 332\n        Twix._extend(options, inopts || {});                                                                      // 333\n        s = options.template(this._start.format(momentOpts), this._end.format(momentOpts));                       // 334\n        if (this.allDay && options.allDay) {                                                                      // 335\n          s += \" \" + options.allDay;                                                                              // 336\n        }                                                                                                         // 337\n        return s;                                                                                                 // 338\n      };                                                                                                          // 339\n                                                                                                                  // 340\n      Twix.prototype.format = function(inopts) {                                                                  // 341\n        var common_bucket, end_bucket, fold, format, fs, global_first, goesIntoTheMorning, j, len, momentHourFormat, needDate, needsMeridiem, options, process, start_bucket, together;\n        if (this.isEmpty()) {                                                                                     // 343\n          return '';                                                                                              // 344\n        }                                                                                                         // 345\n        momentHourFormat = this._start.localeData()._longDateFormat['LT'][0];                                     // 346\n        options = {                                                                                               // 347\n          groupMeridiems: true,                                                                                   // 348\n          spaceBeforeMeridiem: true,                                                                              // 349\n          showDate: true,                                                                                         // 350\n          showDayOfWeek: false,                                                                                   // 351\n          implicitMinutes: true,                                                                                  // 352\n          implicitYear: true,                                                                                     // 353\n          yearFormat: 'YYYY',                                                                                     // 354\n          monthFormat: 'MMM',                                                                                     // 355\n          weekdayFormat: 'ddd',                                                                                   // 356\n          dayFormat: 'D',                                                                                         // 357\n          meridiemFormat: 'A',                                                                                    // 358\n          hourFormat: momentHourFormat,                                                                           // 359\n          minuteFormat: 'mm',                                                                                     // 360\n          allDay: 'all day',                                                                                      // 361\n          explicitAllDay: false,                                                                                  // 362\n          lastNightEndsAt: 0,                                                                                     // 363\n          template: Twix.formatTemplate                                                                           // 364\n        };                                                                                                        // 365\n        Twix._extend(options, inopts || {});                                                                      // 366\n        fs = [];                                                                                                  // 367\n        if (inopts && (inopts.twentyFourHour != null)) {                                                          // 368\n          options.hourFormat = inopts.twentyFourHour ? options.hourFormat.replace('h', 'H') : options.hourFormat.replace('H', 'h');\n        }                                                                                                         // 370\n        needsMeridiem = options.hourFormat && options.hourFormat[0] === 'h';                                      // 371\n        goesIntoTheMorning = options.lastNightEndsAt > 0 && !this.allDay && this.end().startOf('d').valueOf() === this.start().add(1, 'd').startOf('d').valueOf() && this._start.hours() > 12 && this._end.hours() < options.lastNightEndsAt;\n        needDate = options.showDate || (!this.isSame('d') && !goesIntoTheMorning);                                // 373\n        if (this.allDay && this.isSame('d') && (!options.showDate || options.explicitAllDay)) {                   // 374\n          fs.push({                                                                                               // 375\n            name: 'all day simple',                                                                               // 376\n            fn: function() {                                                                                      // 377\n              return options.allDay;                                                                              // 378\n            },                                                                                                    // 379\n            pre: ' ',                                                                                             // 380\n            slot: 0                                                                                               // 381\n          });                                                                                                     // 382\n        }                                                                                                         // 383\n        if (needDate && (!options.implicitYear || this._start.year() !== moment().year() || !this.isSame('y'))) {\n          fs.push({                                                                                               // 385\n            name: 'year',                                                                                         // 386\n            fn: function(date) {                                                                                  // 387\n              return date.format(options.yearFormat);                                                             // 388\n            },                                                                                                    // 389\n            pre: ', ',                                                                                            // 390\n            slot: 4                                                                                               // 391\n          });                                                                                                     // 392\n        }                                                                                                         // 393\n        if (!this.allDay && needDate) {                                                                           // 394\n          fs.push({                                                                                               // 395\n            name: 'all day month',                                                                                // 396\n            fn: function(date) {                                                                                  // 397\n              return date.format(options.monthFormat + \" \" + options.dayFormat);                                  // 398\n            },                                                                                                    // 399\n            ignoreEnd: function() {                                                                               // 400\n              return goesIntoTheMorning;                                                                          // 401\n            },                                                                                                    // 402\n            pre: ' ',                                                                                             // 403\n            slot: 2                                                                                               // 404\n          });                                                                                                     // 405\n        }                                                                                                         // 406\n        if (this.allDay && needDate) {                                                                            // 407\n          fs.push({                                                                                               // 408\n            name: 'month',                                                                                        // 409\n            fn: function(date) {                                                                                  // 410\n              return date.format(options.monthFormat);                                                            // 411\n            },                                                                                                    // 412\n            pre: ' ',                                                                                             // 413\n            slot: 2                                                                                               // 414\n          });                                                                                                     // 415\n        }                                                                                                         // 416\n        if (this.allDay && needDate) {                                                                            // 417\n          fs.push({                                                                                               // 418\n            name: 'date',                                                                                         // 419\n            fn: function(date) {                                                                                  // 420\n              return date.format(options.dayFormat);                                                              // 421\n            },                                                                                                    // 422\n            pre: ' ',                                                                                             // 423\n            slot: 3                                                                                               // 424\n          });                                                                                                     // 425\n        }                                                                                                         // 426\n        if (needDate && options.showDayOfWeek) {                                                                  // 427\n          fs.push({                                                                                               // 428\n            name: 'day of week',                                                                                  // 429\n            fn: function(date) {                                                                                  // 430\n              return date.format(options.weekdayFormat);                                                          // 431\n            },                                                                                                    // 432\n            pre: ' ',                                                                                             // 433\n            slot: 1                                                                                               // 434\n          });                                                                                                     // 435\n        }                                                                                                         // 436\n        if (options.groupMeridiems && needsMeridiem && !this.allDay) {                                            // 437\n          fs.push({                                                                                               // 438\n            name: 'meridiem',                                                                                     // 439\n            fn: function(t) {                                                                                     // 440\n              return t.format(options.meridiemFormat);                                                            // 441\n            },                                                                                                    // 442\n            slot: 6,                                                                                              // 443\n            pre: options.spaceBeforeMeridiem ? ' ' : ''                                                           // 444\n          });                                                                                                     // 445\n        }                                                                                                         // 446\n        if (!this.allDay) {                                                                                       // 447\n          fs.push({                                                                                               // 448\n            name: 'time',                                                                                         // 449\n            fn: function(date) {                                                                                  // 450\n              var str;                                                                                            // 451\n              str = date.minutes() === 0 && options.implicitMinutes && needsMeridiem ? date.format(options.hourFormat) : date.format(options.hourFormat + \":\" + options.minuteFormat);\n              if (!options.groupMeridiems && needsMeridiem) {                                                     // 453\n                if (options.spaceBeforeMeridiem) {                                                                // 454\n                  str += ' ';                                                                                     // 455\n                }                                                                                                 // 456\n                str += date.format(options.meridiemFormat);                                                       // 457\n              }                                                                                                   // 458\n              return str;                                                                                         // 459\n            },                                                                                                    // 460\n            slot: 5,                                                                                              // 461\n            pre: ', '                                                                                             // 462\n          });                                                                                                     // 463\n        }                                                                                                         // 464\n        start_bucket = [];                                                                                        // 465\n        end_bucket = [];                                                                                          // 466\n        common_bucket = [];                                                                                       // 467\n        together = true;                                                                                          // 468\n        process = (function(_this) {                                                                              // 469\n          return function(format) {                                                                               // 470\n            var end_str, start_group, start_str;                                                                  // 471\n            start_str = format.fn(_this._start);                                                                  // 472\n            end_str = format.ignoreEnd && format.ignoreEnd() ? start_str : format.fn(_this._end);                 // 473\n            start_group = {                                                                                       // 474\n              format: format,                                                                                     // 475\n              value: function() {                                                                                 // 476\n                return start_str;                                                                                 // 477\n              }                                                                                                   // 478\n            };                                                                                                    // 479\n            if (end_str === start_str && together) {                                                              // 480\n              return common_bucket.push(start_group);                                                             // 481\n            } else {                                                                                              // 482\n              if (together) {                                                                                     // 483\n                together = false;                                                                                 // 484\n                common_bucket.push({                                                                              // 485\n                  format: {                                                                                       // 486\n                    slot: format.slot,                                                                            // 487\n                    pre: ''                                                                                       // 488\n                  },                                                                                              // 489\n                  value: function() {                                                                             // 490\n                    return options.template(fold(start_bucket), fold(end_bucket, true).trim());                   // 491\n                  }                                                                                               // 492\n                });                                                                                               // 493\n              }                                                                                                   // 494\n              start_bucket.push(start_group);                                                                     // 495\n              return end_bucket.push({                                                                            // 496\n                format: format,                                                                                   // 497\n                value: function() {                                                                               // 498\n                  return end_str;                                                                                 // 499\n                }                                                                                                 // 500\n              });                                                                                                 // 501\n            }                                                                                                     // 502\n          };                                                                                                      // 503\n        })(this);                                                                                                 // 504\n        for (j = 0, len = fs.length; j < len; j++) {                                                              // 505\n          format = fs[j];                                                                                         // 506\n          process(format);                                                                                        // 507\n        }                                                                                                         // 508\n        global_first = true;                                                                                      // 509\n        fold = function(array, skip_pre) {                                                                        // 510\n          var k, len1, local_first, ref, section, str;                                                            // 511\n          local_first = true;                                                                                     // 512\n          str = '';                                                                                               // 513\n          ref = array.sort(function(a, b) {                                                                       // 514\n            return a.format.slot - b.format.slot;                                                                 // 515\n          });                                                                                                     // 516\n          for (k = 0, len1 = ref.length; k < len1; k++) {                                                         // 517\n            section = ref[k];                                                                                     // 518\n            if (!global_first) {                                                                                  // 519\n              if (local_first && skip_pre) {                                                                      // 520\n                str += ' ';                                                                                       // 521\n              } else {                                                                                            // 522\n                str += section.format.pre;                                                                        // 523\n              }                                                                                                   // 524\n            }                                                                                                     // 525\n            str += section.value();                                                                               // 526\n            global_first = false;                                                                                 // 527\n            local_first = false;                                                                                  // 528\n          }                                                                                                       // 529\n          return str;                                                                                             // 530\n        };                                                                                                        // 531\n        return fold(common_bucket);                                                                               // 532\n      };                                                                                                          // 533\n                                                                                                                  // 534\n      Twix.prototype._iterateHelper = function(period, iter, hasNext, intervalAmount) {                           // 535\n        return {                                                                                                  // 536\n          next: function() {                                                                                      // 537\n            var val;                                                                                              // 538\n            if (!hasNext()) {                                                                                     // 539\n              return null;                                                                                        // 540\n            } else {                                                                                              // 541\n              val = iter.clone();                                                                                 // 542\n              iter.add(intervalAmount, period);                                                                   // 543\n              return val;                                                                                         // 544\n            }                                                                                                     // 545\n          },                                                                                                      // 546\n          hasNext: hasNext                                                                                        // 547\n        };                                                                                                        // 548\n      };                                                                                                          // 549\n                                                                                                                  // 550\n      Twix.prototype._prepIterateInputs = function() {                                                            // 551\n        var inputs, intervalAmount, minHours, period, ref, ref1;                                                  // 552\n        inputs = 1 <= arguments.length ? slice.call(arguments, 0) : [];                                           // 553\n        if (typeof inputs[0] === 'number') {                                                                      // 554\n          return inputs;                                                                                          // 555\n        }                                                                                                         // 556\n        if (typeof inputs[0] === 'string') {                                                                      // 557\n          period = inputs.shift();                                                                                // 558\n          intervalAmount = (ref = inputs.pop()) != null ? ref : 1;                                                // 559\n          if (inputs.length) {                                                                                    // 560\n            minHours = (ref1 = inputs[0]) != null ? ref1 : false;                                                 // 561\n          }                                                                                                       // 562\n        }                                                                                                         // 563\n        if (moment.isDuration(inputs[0])) {                                                                       // 564\n          period = 'ms';                                                                                          // 565\n          intervalAmount = inputs[0].as(period);                                                                  // 566\n        }                                                                                                         // 567\n        return [intervalAmount, period, minHours];                                                                // 568\n      };                                                                                                          // 569\n                                                                                                                  // 570\n      Twix.prototype._inner = function(period, intervalAmount) {                                                  // 571\n        var durationCount, durationPeriod, end, modulus, start;                                                   // 572\n        if (period == null) {                                                                                     // 573\n          period = 'ms';                                                                                          // 574\n        }                                                                                                         // 575\n        if (intervalAmount == null) {                                                                             // 576\n          intervalAmount = 1;                                                                                     // 577\n        }                                                                                                         // 578\n        start = this.start();                                                                                     // 579\n        end = this._displayEnd.clone();                                                                           // 580\n        if (start > start.clone().startOf(period)) {                                                              // 581\n          start.startOf(period).add(intervalAmount, period);                                                      // 582\n        }                                                                                                         // 583\n        if (end < end.clone().endOf(period)) {                                                                    // 584\n          end.startOf(period);                                                                                    // 585\n        }                                                                                                         // 586\n        durationPeriod = start.twix(end).asDuration(period);                                                      // 587\n        durationCount = durationPeriod.get(period);                                                               // 588\n        modulus = durationCount % intervalAmount;                                                                 // 589\n        end.subtract(modulus, period);                                                                            // 590\n        return [start, end];                                                                                      // 591\n      };                                                                                                          // 592\n                                                                                                                  // 593\n      Twix.prototype._mutated = function() {                                                                      // 594\n        this._start = this.allDay ? this._oStart.clone().startOf('d') : this._oStart;                             // 595\n        this._lastMilli = this.allDay ? this._oEnd.clone().endOf('d') : this._oEnd;                               // 596\n        this._end = this.allDay ? this._oEnd.clone().startOf('d') : this._oEnd;                                   // 597\n        return this._displayEnd = this.allDay ? this._end.clone().add(1, 'd') : this._end;                        // 598\n      };                                                                                                          // 599\n                                                                                                                  // 600\n      return Twix;                                                                                                // 601\n                                                                                                                  // 602\n    })();                                                                                                         // 603\n    Twix._extend(moment.locale(), {                                                                               // 604\n      _twix: Twix.defaults                                                                                        // 605\n    });                                                                                                           // 606\n    Twix.formatTemplate = function(leftSide, rightSide) {                                                         // 607\n      return leftSide + \" - \" + rightSide;                                                                        // 608\n    };                                                                                                            // 609\n    moment.twix = function() {                                                                                    // 610\n      return (function(func, args, ctor) {                                                                        // 611\n        ctor.prototype = func.prototype;                                                                          // 612\n        var child = new ctor, result = func.apply(child, args);                                                   // 613\n        return Object(result) === result ? result : child;                                                        // 614\n      })(Twix, arguments, function(){});                                                                          // 615\n    };                                                                                                            // 616\n    moment.fn.twix = function() {                                                                                 // 617\n      return (function(func, args, ctor) {                                                                        // 618\n        ctor.prototype = func.prototype;                                                                          // 619\n        var child = new ctor, result = func.apply(child, args);                                                   // 620\n        return Object(result) === result ? result : child;                                                        // 621\n      })(Twix, [this].concat(slice.call(arguments)), function(){});                                               // 622\n    };                                                                                                            // 623\n    moment.fn.forDuration = function(duration, allDay) {                                                          // 624\n      return new Twix(this, this.clone().add(duration), allDay);                                                  // 625\n    };                                                                                                            // 626\n    if (moment.duration.fn) {                                                                                     // 627\n      moment.duration.fn.afterMoment = function(startingTime, allDay) {                                           // 628\n        return new Twix(startingTime, moment(startingTime).clone().add(this), allDay);                            // 629\n      };                                                                                                          // 630\n      moment.duration.fn.beforeMoment = function(startingTime, allDay) {                                          // 631\n        return new Twix(moment(startingTime).clone().subtract(this), startingTime, allDay);                       // 632\n      };                                                                                                          // 633\n    }                                                                                                             // 634\n    moment.twixClass = Twix;                                                                                      // 635\n    return Twix;                                                                                                  // 636\n  };                                                                                                              // 637\n                                                                                                                  // 638\n  if (hasModule) {                                                                                                // 639\n    return module.exports = makeTwix(require('moment'));                                                          // 640\n  }                                                                                                               // 641\n                                                                                                                  // 642\n  if (typeof define === 'function') {                                                                             // 643\n    define('twix', ['moment'], function(moment) {                                                                 // 644\n      return makeTwix(moment);                                                                                    // 645\n    });                                                                                                           // 646\n  }                                                                                                               // 647\n                                                                                                                  // 648\n  if (this.moment) {                                                                                              // 649\n    this.Twix = makeTwix(this.moment);                                                                            // 650\n  } else if (typeof moment !== \"undefined\" && moment !== null) {                                                  // 651\n    this.Twix = makeTwix(moment);                                                                                 // 652\n  }                                                                                                               // 653\n                                                                                                                  // 654\n}).call(this);                                                                                                    // 655\n                                                                                                                  // 656\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['momentjs:twix'] = {};\n\n})();\n","servePath":"/packages/momentjs_twix.js","sourceMap":{"version":3,"sources":["/packages/momentjs_twix/dist/twix.js"],"names":[],"mappingswH","file":"/packages/momentjs_twix.js","sourcesContent":["// Generated by CoffeeScript 1.10.0\n(function() {\n  var hasModule, isArray, makeTwix,\n    slice = [].slice;\n\n  hasModule = (typeof module !== \"undefined\" && module !== null) && (module.exports != null);\n\n  isArray = function(input) {\n    return Object.prototype.toString.call(input) === '[object Array]';\n  };\n\n  makeTwix = function(moment) {\n    var Twix;\n    if (moment == null) {\n      throw new Error(\"Can't find moment\");\n    }\n    Twix = (function() {\n      function Twix(start, end, parseFormat, options) {\n        var ref;\n        if (options == null) {\n          options = {};\n        }\n        if (typeof parseFormat !== 'string') {\n          options = parseFormat != null ? parseFormat : {};\n          parseFormat = null;\n        }\n        if (typeof options === 'boolean') {\n          options = {\n            allDay: options\n          };\n        }\n        this._oStart = moment(start, parseFormat, options.parseStrict);\n        this._oEnd = moment(end, parseFormat, options.parseStrict);\n        this.allDay = (ref = options.allDay) != null ? ref : false;\n        this._mutated();\n      }\n\n      Twix._extend = function() {\n        var attr, first, j, len, other, others;\n        first = arguments[0], others = 2 <= arguments.length ? slice.call(arguments, 1) : [];\n        for (j = 0, len = others.length; j < len; j++) {\n          other = others[j];\n          for (attr in other) {\n            if (typeof other[attr] !== 'undefined') {\n              first[attr] = other[attr];\n            }\n          }\n        }\n        return first;\n      };\n\n      Twix.prototype.start = function() {\n        return this._start.clone();\n      };\n\n      Twix.prototype.end = function() {\n        return this._end.clone();\n      };\n\n      Twix.prototype.isSame = function(period) {\n        return this._start.isSame(this._end, period);\n      };\n\n      Twix.prototype.length = function(period) {\n        return this._displayEnd.diff(this._start, period);\n      };\n\n      Twix.prototype.count = function(period) {\n        var end, start;\n        start = this.start().startOf(period);\n        end = this.end().startOf(period);\n        return end.diff(start, period) + 1;\n      };\n\n      Twix.prototype.countInner = function(period) {\n        var end, ref, start;\n        ref = this._inner(period), start = ref[0], end = ref[1];\n        if (start >= end) {\n          return 0;\n        }\n        return end.diff(start, period);\n      };\n\n      Twix.prototype.iterate = function(intervalAmount, period, minHours) {\n        var end, hasNext, ref, start;\n        ref = this._prepIterateInputs(intervalAmount, period, minHours), intervalAmount = ref[0], period = ref[1], minHours = ref[2];\n        start = this.start().startOf(period);\n        end = this.end().startOf(period);\n        if (this.allDay) {\n          end = end.add(1, 'd');\n        }\n        hasNext = (function(_this) {\n          return function() {\n            return (!_this.allDay && start <= end && (!minHours || !start.isSame(end) || _this._end.hours() > minHours)) || (_this.allDay && start < end);\n          };\n        })(this);\n        return this._iterateHelper(period, start, hasNext, intervalAmount);\n      };\n\n      Twix.prototype.iterateInner = function(intervalAmount, period) {\n        var end, hasNext, ref, ref1, start;\n        ref = this._prepIterateInputs(intervalAmount, period), intervalAmount = ref[0], period = ref[1];\n        ref1 = this._inner(period, intervalAmount), start = ref1[0], end = ref1[1];\n        hasNext = function() {\n          return start < end;\n        };\n        return this._iterateHelper(period, start, hasNext, intervalAmount);\n      };\n\n      Twix.prototype.humanizeLength = function() {\n        if (this.allDay) {\n          if (this.isSame('d')) {\n            return 'all day';\n          } else {\n            return this._start.from(this.end().add(1, 'd'), true);\n          }\n        } else {\n          return this._start.from(this._end, true);\n        }\n      };\n\n      Twix.prototype.asDuration = function(units) {\n        var diff;\n        diff = this._end.diff(this._start);\n        return moment.duration(diff);\n      };\n\n      Twix.prototype.isPast = function() {\n        return this._lastMilli < moment();\n      };\n\n      Twix.prototype.isFuture = function() {\n        return this._start > moment();\n      };\n\n      Twix.prototype.isCurrent = function() {\n        return !this.isPast() && !this.isFuture();\n      };\n\n      Twix.prototype.contains = function(mom) {\n        if (!moment.isMoment(mom)) {\n          mom = moment(mom);\n        }\n        return this._start <= mom && this._lastMilli >= mom;\n      };\n\n      Twix.prototype.isEmpty = function() {\n        return this._start.isSame(this._displayEnd);\n      };\n\n      Twix.prototype.overlaps = function(other) {\n        return this._displayEnd.isAfter(other._start) && this._start.isBefore(other._displayEnd);\n      };\n\n      Twix.prototype.engulfs = function(other) {\n        return this._start <= other._start && this._displayEnd >= other._displayEnd;\n      };\n\n      Twix.prototype.union = function(other) {\n        var allDay, newEnd, newStart;\n        allDay = this.allDay && other.allDay;\n        newStart = this._start < other._start ? this._start : other._start;\n        newEnd = this._lastMilli > other._lastMilli ? (allDay ? this._end : this._displayEnd) : (allDay ? other._end : other._displayEnd);\n        return new Twix(newStart, newEnd, allDay);\n      };\n\n      Twix.prototype.intersection = function(other) {\n        var allDay, newEnd, newStart;\n        allDay = this.allDay && other.allDay;\n        newStart = this._start > other._start ? this._start : other._start;\n        newEnd = this._lastMilli < other._lastMilli ? (allDay ? this._end : this._displayEnd) : (allDay ? other._end : other._displayEnd);\n        return new Twix(newStart, newEnd, allDay);\n      };\n\n      Twix.prototype.xor = function() {\n        var allDay, arr, endTime, i, item, j, k, last, len, len1, o, open, other, others, ref, results, start, t;\n        others = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n        open = 0;\n        start = null;\n        results = [];\n        allDay = ((function() {\n          var j, len, results1;\n          results1 = [];\n          for (j = 0, len = others.length; j < len; j++) {\n            o = others[j];\n            if (o.allDay) {\n              results1.push(o);\n            }\n          }\n          return results1;\n        })()).length === others.length;\n        arr = [];\n        ref = [this].concat(others);\n        for (i = j = 0, len = ref.length; j < len; i = ++j) {\n          item = ref[i];\n          arr.push({\n            time: item._start,\n            i: i,\n            type: 0\n          });\n          arr.push({\n            time: item._displayEnd,\n            i: i,\n            type: 1\n          });\n        }\n        arr = arr.sort(function(a, b) {\n          return a.time - b.time;\n        });\n        for (k = 0, len1 = arr.length; k < len1; k++) {\n          other = arr[k];\n          if (other.type === 1) {\n            open -= 1;\n          }\n          if (open === other.type) {\n            start = other.time;\n          }\n          if (open === (other.type + 1) % 2) {\n            if (start) {\n              last = results[results.length - 1];\n              if (last && last._end.isSame(start)) {\n                last._oEnd = other.time;\n                last._mutated();\n              } else {\n                endTime = allDay ? other.time.clone().subtract(1, 'd') : other.time;\n                t = new Twix(start, endTime, allDay);\n                if (!t.isEmpty()) {\n                  results.push(t);\n                }\n              }\n            }\n            start = null;\n          }\n          if (other.type === 0) {\n            open += 1;\n          }\n        }\n        return results;\n      };\n\n      Twix.prototype.difference = function() {\n        var j, len, others, ref, results1, t;\n        others = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n        ref = this.xor.apply(this, others).map((function(_this) {\n          return function(i) {\n            return _this.intersection(i);\n          };\n        })(this));\n        results1 = [];\n        for (j = 0, len = ref.length; j < len; j++) {\n          t = ref[j];\n          if (!t.isEmpty() && t.isValid()) {\n            results1.push(t);\n          }\n        }\n        return results1;\n      };\n\n      Twix.prototype.split = function() {\n        var args, dur, end, final, i, mom, start, time, times, vals;\n        args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n        end = start = this.start();\n        if (moment.isDuration(args[0])) {\n          dur = args[0];\n        } else if ((!moment.isMoment(args[0]) && !isArray(args[0]) && typeof args[0] === 'object') || (typeof args[0] === 'number' && typeof args[1] === 'string')) {\n          dur = moment.duration(args[0], args[1]);\n        } else if (isArray(args[0])) {\n          times = args[0];\n        } else {\n          times = args;\n        }\n        if (times) {\n          times = (function() {\n            var j, len, results1;\n            results1 = [];\n            for (j = 0, len = times.length; j < len; j++) {\n              time = times[j];\n              results1.push(moment(time));\n            }\n            return results1;\n          })();\n          times = ((function() {\n            var j, len, results1;\n            results1 = [];\n            for (j = 0, len = times.length; j < len; j++) {\n              mom = times[j];\n              if (mom.isValid() && mom >= start) {\n                results1.push(mom);\n              }\n            }\n            return results1;\n          })()).sort();\n        }\n        if ((dur && dur.asMilliseconds() === 0) || (times && times.length === 0)) {\n          return [this];\n        }\n        vals = [];\n        i = 0;\n        final = this._displayEnd;\n        while (start < final && ((times == null) || times[i])) {\n          end = dur ? start.clone().add(dur) : times[i].clone();\n          end = moment.min(final, end);\n          if (!start.isSame(end)) {\n            vals.push(moment.twix(start, end));\n          }\n          start = end;\n          i += 1;\n        }\n        if (!end.isSame(this._displayEnd) && times) {\n          vals.push(moment.twix(end, this._displayEnd));\n        }\n        return vals;\n      };\n\n      Twix.prototype.isValid = function() {\n        return this._start.isValid() && this._end.isValid() && this._start <= this._displayEnd;\n      };\n\n      Twix.prototype.equals = function(other) {\n        return (other instanceof Twix) && this.allDay === other.allDay && this._start.valueOf() === other._start.valueOf() && this._end.valueOf() === other._end.valueOf();\n      };\n\n      Twix.prototype.toString = function() {\n        return \"{start: \" + (this._start.format()) + \", end: \" + (this._end.format()) + \", allDay: \" + (this.allDay ? 'true' : 'false') + \"}\";\n      };\n\n      Twix.prototype.simpleFormat = function(momentOpts, inopts) {\n        var options, s;\n        options = {\n          allDay: '(all day)',\n          template: Twix.formatTemplate\n        };\n        Twix._extend(options, inopts || {});\n        s = options.template(this._start.format(momentOpts), this._end.format(momentOpts));\n        if (this.allDay && options.allDay) {\n          s += \" \" + options.allDay;\n        }\n        return s;\n      };\n\n      Twix.prototype.format = function(inopts) {\n        var common_bucket, end_bucket, fold, format, fs, global_first, goesIntoTheMorning, j, len, momentHourFormat, needDate, needsMeridiem, options, process, start_bucket, together;\n        if (this.isEmpty()) {\n          return '';\n        }\n        momentHourFormat = this._start.localeData()._longDateFormat['LT'][0];\n        options = {\n          groupMeridiems: true,\n          spaceBeforeMeridiem: true,\n          showDate: true,\n          showDayOfWeek: false,\n          implicitMinutes: true,\n          implicitYear: true,\n          yearFormat: 'YYYY',\n          monthFormat: 'MMM',\n          weekdayFormat: 'ddd',\n          dayFormat: 'D',\n          meridiemFormat: 'A',\n          hourFormat: momentHourFormat,\n          minuteFormat: 'mm',\n          allDay: 'all day',\n          explicitAllDay: false,\n          lastNightEndsAt: 0,\n          template: Twix.formatTemplate\n        };\n        Twix._extend(options, inopts || {});\n        fs = [];\n        if (inopts && (inopts.twentyFourHour != null)) {\n          options.hourFormat = inopts.twentyFourHour ? options.hourFormat.replace('h', 'H') : options.hourFormat.replace('H', 'h');\n        }\n        needsMeridiem = options.hourFormat && options.hourFormat[0] === 'h';\n        goesIntoTheMorning = options.lastNightEndsAt > 0 && !this.allDay && this.end().startOf('d').valueOf() === this.start().add(1, 'd').startOf('d').valueOf() && this._start.hours() > 12 && this._end.hours() < options.lastNightEndsAt;\n        needDate = options.showDate || (!this.isSame('d') && !goesIntoTheMorning);\n        if (this.allDay && this.isSame('d') && (!options.showDate || options.explicitAllDay)) {\n          fs.push({\n            name: 'all day simple',\n            fn: function() {\n              return options.allDay;\n            },\n            pre: ' ',\n            slot: 0\n          });\n        }\n        if (needDate && (!options.implicitYear || this._start.year() !== moment().year() || !this.isSame('y'))) {\n          fs.push({\n            name: 'year',\n            fn: function(date) {\n              return date.format(options.yearFormat);\n            },\n            pre: ', ',\n            slot: 4\n          });\n        }\n        if (!this.allDay && needDate) {\n          fs.push({\n            name: 'all day month',\n            fn: function(date) {\n              return date.format(options.monthFormat + \" \" + options.dayFormat);\n            },\n            ignoreEnd: function() {\n              return goesIntoTheMorning;\n            },\n            pre: ' ',\n            slot: 2\n          });\n        }\n        if (this.allDay && needDate) {\n          fs.push({\n            name: 'month',\n            fn: function(date) {\n              return date.format(options.monthFormat);\n            },\n            pre: ' ',\n            slot: 2\n          });\n        }\n        if (this.allDay && needDate) {\n          fs.push({\n            name: 'date',\n            fn: function(date) {\n              return date.format(options.dayFormat);\n            },\n            pre: ' ',\n            slot: 3\n          });\n        }\n        if (needDate && options.showDayOfWeek) {\n          fs.push({\n            name: 'day of week',\n            fn: function(date) {\n              return date.format(options.weekdayFormat);\n            },\n            pre: ' ',\n            slot: 1\n          });\n        }\n        if (options.groupMeridiems && needsMeridiem && !this.allDay) {\n          fs.push({\n            name: 'meridiem',\n            fn: function(t) {\n              return t.format(options.meridiemFormat);\n            },\n            slot: 6,\n            pre: options.spaceBeforeMeridiem ? ' ' : ''\n          });\n        }\n        if (!this.allDay) {\n          fs.push({\n            name: 'time',\n            fn: function(date) {\n              var str;\n              str = date.minutes() === 0 && options.implicitMinutes && needsMeridiem ? date.format(options.hourFormat) : date.format(options.hourFormat + \":\" + options.minuteFormat);\n              if (!options.groupMeridiems && needsMeridiem) {\n                if (options.spaceBeforeMeridiem) {\n                  str += ' ';\n                }\n                str += date.format(options.meridiemFormat);\n              }\n              return str;\n            },\n            slot: 5,\n            pre: ', '\n          });\n        }\n        start_bucket = [];\n        end_bucket = [];\n        common_bucket = [];\n        together = true;\n        process = (function(_this) {\n          return function(format) {\n            var end_str, start_group, start_str;\n            start_str = format.fn(_this._start);\n            end_str = format.ignoreEnd && format.ignoreEnd() ? start_str : format.fn(_this._end);\n            start_group = {\n              format: format,\n              value: function() {\n                return start_str;\n              }\n            };\n            if (end_str === start_str && together) {\n              return common_bucket.push(start_group);\n            } else {\n              if (together) {\n                together = false;\n                common_bucket.push({\n                  format: {\n                    slot: format.slot,\n                    pre: ''\n                  },\n                  value: function() {\n                    return options.template(fold(start_bucket), fold(end_bucket, true).trim());\n                  }\n                });\n              }\n              start_bucket.push(start_group);\n              return end_bucket.push({\n                format: format,\n                value: function() {\n                  return end_str;\n                }\n              });\n            }\n          };\n        })(this);\n        for (j = 0, len = fs.length; j < len; j++) {\n          format = fs[j];\n          process(format);\n        }\n        global_first = true;\n        fold = function(array, skip_pre) {\n          var k, len1, local_first, ref, section, str;\n          local_first = true;\n          str = '';\n          ref = array.sort(function(a, b) {\n            return a.format.slot - b.format.slot;\n          });\n          for (k = 0, len1 = ref.length; k < len1; k++) {\n            section = ref[k];\n            if (!global_first) {\n              if (local_first && skip_pre) {\n                str += ' ';\n              } else {\n                str += section.format.pre;\n              }\n            }\n            str += section.value();\n            global_first = false;\n            local_first = false;\n          }\n          return str;\n        };\n        return fold(common_bucket);\n      };\n\n      Twix.prototype._iterateHelper = function(period, iter, hasNext, intervalAmount) {\n        return {\n          next: function() {\n            var val;\n            if (!hasNext()) {\n              return null;\n            } else {\n              val = iter.clone();\n              iter.add(intervalAmount, period);\n              return val;\n            }\n          },\n          hasNext: hasNext\n        };\n      };\n\n      Twix.prototype._prepIterateInputs = function() {\n        var inputs, intervalAmount, minHours, period, ref, ref1;\n        inputs = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n        if (typeof inputs[0] === 'number') {\n          return inputs;\n        }\n        if (typeof inputs[0] === 'string') {\n          period = inputs.shift();\n          intervalAmount = (ref = inputs.pop()) != null ? ref : 1;\n          if (inputs.length) {\n            minHours = (ref1 = inputs[0]) != null ? ref1 : false;\n          }\n        }\n        if (moment.isDuration(inputs[0])) {\n          period = 'ms';\n          intervalAmount = inputs[0].as(period);\n        }\n        return [intervalAmount, period, minHours];\n      };\n\n      Twix.prototype._inner = function(period, intervalAmount) {\n        var durationCount, durationPeriod, end, modulus, start;\n        if (period == null) {\n          period = 'ms';\n        }\n        if (intervalAmount == null) {\n          intervalAmount = 1;\n        }\n        start = this.start();\n        end = this._displayEnd.clone();\n        if (start > start.clone().startOf(period)) {\n          start.startOf(period).add(intervalAmount, period);\n        }\n        if (end < end.clone().endOf(period)) {\n          end.startOf(period);\n        }\n        durationPeriod = start.twix(end).asDuration(period);\n        durationCount = durationPeriod.get(period);\n        modulus = durationCount % intervalAmount;\n        end.subtract(modulus, period);\n        return [start, end];\n      };\n\n      Twix.prototype._mutated = function() {\n        this._start = this.allDay ? this._oStart.clone().startOf('d') : this._oStart;\n        this._lastMilli = this.allDay ? this._oEnd.clone().endOf('d') : this._oEnd;\n        this._end = this.allDay ? this._oEnd.clone().startOf('d') : this._oEnd;\n        return this._displayEnd = this.allDay ? this._end.clone().add(1, 'd') : this._end;\n      };\n\n      return Twix;\n\n    })();\n    Twix._extend(moment.locale(), {\n      _twix: Twix.defaults\n    });\n    Twix.formatTemplate = function(leftSide, rightSide) {\n      return leftSide + \" - \" + rightSide;\n    };\n    moment.twix = function() {\n      return (function(func, args, ctor) {\n        ctor.prototype = func.prototype;\n        var child = new ctor, result = func.apply(child, args);\n        return Object(result) === result ? result : child;\n      })(Twix, arguments, function(){});\n    };\n    moment.fn.twix = function() {\n      return (function(func, args, ctor) {\n        ctor.prototype = func.prototype;\n        var child = new ctor, result = func.apply(child, args);\n        return Object(result) === result ? result : child;\n      })(Twix, [this].concat(slice.call(arguments)), function(){});\n    };\n    moment.fn.forDuration = function(duration, allDay) {\n      return new Twix(this, this.clone().add(duration), allDay);\n    };\n    if (moment.duration.fn) {\n      moment.duration.fn.afterMoment = function(startingTime, allDay) {\n        return new Twix(startingTime, moment(startingTime).clone().add(this), allDay);\n      };\n      moment.duration.fn.beforeMoment = function(startingTime, allDay) {\n        return new Twix(moment(startingTime).clone().subtract(this), startingTime, allDay);\n      };\n    }\n    moment.twixClass = Twix;\n    return Twix;\n  };\n\n  if (hasModule) {\n    return module.exports = makeTwix(require('moment'));\n  }\n\n  if (typeof define === 'function') {\n    define('twix', ['moment'], function(moment) {\n      return makeTwix(moment);\n    });\n  }\n\n  if (this.moment) {\n    this.Twix = makeTwix(this.moment);\n  } else if (typeof moment !== \"undefined\" && moment !== null) {\n    this.Twix = makeTwix(moment);\n  }\n\n}).call(this);\n"]}}]