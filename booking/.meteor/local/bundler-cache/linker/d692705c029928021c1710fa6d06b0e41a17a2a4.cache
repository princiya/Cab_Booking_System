[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar moment = Package['momentjs:moment'].moment;\nvar Template = Package.templating.Template;\nvar Blaze = Package.blaze.Blaze;\nvar UI = Package.blaze.UI;\nvar Handlebars = Package.blaze.Handlebars;\nvar Spacebars = Package.spacebars.Spacebars;\nvar HTML = Package.htmljs.HTML;\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/rzymek_fullcalendar/fullcalendar/dist/fullcalendar.js                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/*!                                                                                                                    // 1\n * FullCalendar v2.5.0                                                                                                 // 2\n * Docs & License: http://fullcalendar.io/                                                                             // 3\n * (c) 2015 Adam Shaw                                                                                                  // 4\n */                                                                                                                    // 5\n                                                                                                                       // 6\n(function(factory) {                                                                                                   // 7\n\tif (typeof define === 'function' && define.amd) {                                                                     // 8\n\t\tdefine([ 'jquery', 'moment' ], factory);                                                                             // 9\n\t}                                                                                                                     // 10\n\telse if (typeof exports === 'object') { // Node/CommonJS                                                              // 11\n\t\tmodule.exports = factory(require('jquery'), require('moment'));                                                      // 12\n\t}                                                                                                                     // 13\n\telse {                                                                                                                // 14\n\t\tfactory(jQuery, moment);                                                                                             // 15\n\t}                                                                                                                     // 16\n})(function($, moment) {                                                                                               // 17\n                                                                                                                       // 18\n;;                                                                                                                     // 19\n                                                                                                                       // 20\nvar FC = $.fullCalendar = {                                                                                            // 21\n\tversion: \"2.5.0\",                                                                                                     // 22\n\tinternalApiVersion: 1                                                                                                 // 23\n};                                                                                                                     // 24\nvar fcViews = FC.views = {};                                                                                           // 25\n                                                                                                                       // 26\n                                                                                                                       // 27\n$.fn.fullCalendar = function(options) {                                                                                // 28\n\tvar args = Array.prototype.slice.call(arguments, 1); // for a possible method call                                    // 29\n\tvar res = this; // what this function will return (this jQuery object by default)                                     // 30\n                                                                                                                       // 31\n\tthis.each(function(i, _element) { // loop each DOM element involved                                                   // 32\n\t\tvar element = $(_element);                                                                                           // 33\n\t\tvar calendar = element.data('fullCalendar'); // get the existing calendar object (if any)                            // 34\n\t\tvar singleRes; // the returned value of this single method call                                                      // 35\n                                                                                                                       // 36\n\t\t// a method call                                                                                                     // 37\n\t\tif (typeof options === 'string') {                                                                                   // 38\n\t\t\tif (calendar && $.isFunction(calendar[options])) {                                                                  // 39\n\t\t\t\tsingleRes = calendar[options].apply(calendar, args);                                                               // 40\n\t\t\t\tif (!i) {                                                                                                          // 41\n\t\t\t\t\tres = singleRes; // record the first method call result                                                           // 42\n\t\t\t\t}                                                                                                                  // 43\n\t\t\t\tif (options === 'destroy') { // for the destroy method, must remove Calendar object data                           // 44\n\t\t\t\t\telement.removeData('fullCalendar');                                                                               // 45\n\t\t\t\t}                                                                                                                  // 46\n\t\t\t}                                                                                                                   // 47\n\t\t}                                                                                                                    // 48\n\t\t// a new calendar initialization                                                                                     // 49\n\t\telse if (!calendar) { // don't initialize twice                                                                      // 50\n\t\t\tcalendar = new Calendar(element, options);                                                                          // 51\n\t\t\telement.data('fullCalendar', calendar);                                                                             // 52\n\t\t\tcalendar.render();                                                                                                  // 53\n\t\t}                                                                                                                    // 54\n\t});                                                                                                                   // 55\n\t                                                                                                                      // 56\n\treturn res;                                                                                                           // 57\n};                                                                                                                     // 58\n                                                                                                                       // 59\n                                                                                                                       // 60\nvar complexOptions = [ // names of options that are objects whose properties should be combined                        // 61\n\t'header',                                                                                                             // 62\n\t'buttonText',                                                                                                         // 63\n\t'buttonIcons',                                                                                                        // 64\n\t'themeButtonIcons'                                                                                                    // 65\n];                                                                                                                     // 66\n                                                                                                                       // 67\n                                                                                                                       // 68\n// Merges an array of option objects into a single object                                                              // 69\nfunction mergeOptions(optionObjs) {                                                                                    // 70\n\treturn mergeProps(optionObjs, complexOptions);                                                                        // 71\n}                                                                                                                      // 72\n                                                                                                                       // 73\n                                                                                                                       // 74\n// Given options specified for the calendar's constructor, massages any legacy options into a non-legacy form.         // 75\n// Converts View-Option-Hashes into the View-Specific-Options format.                                                  // 76\nfunction massageOverrides(input) {                                                                                     // 77\n\tvar overrides = { views: input.views || {} }; // the output. ensure a `views` hash                                    // 78\n\tvar subObj;                                                                                                           // 79\n                                                                                                                       // 80\n\t// iterate through all option override properties (except `views`)                                                    // 81\n\t$.each(input, function(name, val) {                                                                                   // 82\n\t\tif (name != 'views') {                                                                                               // 83\n                                                                                                                       // 84\n\t\t\t// could the value be a legacy View-Option-Hash?                                                                    // 85\n\t\t\tif (                                                                                                                // 86\n\t\t\t\t$.isPlainObject(val) &&                                                                                            // 87\n\t\t\t\t!/(time|duration|interval)$/i.test(name) && // exclude duration options. might be given as objects                 // 88\n\t\t\t\t$.inArray(name, complexOptions) == -1 // complex options aren't allowed to be View-Option-Hashes                   // 89\n\t\t\t) {                                                                                                                 // 90\n\t\t\t\tsubObj = null;                                                                                                     // 91\n                                                                                                                       // 92\n\t\t\t\t// iterate through the properties of this possible View-Option-Hash value                                          // 93\n\t\t\t\t$.each(val, function(subName, subVal) {                                                                            // 94\n                                                                                                                       // 95\n\t\t\t\t\t// is the property targeting a view?                                                                              // 96\n\t\t\t\t\tif (/^(month|week|day|default|basic(Week|Day)?|agenda(Week|Day)?)$/.test(subName)) {                              // 97\n\t\t\t\t\t\tif (!overrides.views[subName]) { // ensure the view-target entry exists                                          // 98\n\t\t\t\t\t\t\toverrides.views[subName] = {};                                                                                  // 99\n\t\t\t\t\t\t}                                                                                                                // 100\n\t\t\t\t\t\toverrides.views[subName][name] = subVal; // record the value in the `views` object                               // 101\n\t\t\t\t\t}                                                                                                                 // 102\n\t\t\t\t\telse { // a non-View-Option-Hash property                                                                         // 103\n\t\t\t\t\t\tif (!subObj) {                                                                                                   // 104\n\t\t\t\t\t\t\tsubObj = {};                                                                                                    // 105\n\t\t\t\t\t\t}                                                                                                                // 106\n\t\t\t\t\t\tsubObj[subName] = subVal; // accumulate these unrelated values for later                                         // 107\n\t\t\t\t\t}                                                                                                                 // 108\n\t\t\t\t});                                                                                                                // 109\n                                                                                                                       // 110\n\t\t\t\tif (subObj) { // non-View-Option-Hash properties? transfer them as-is                                              // 111\n\t\t\t\t\toverrides[name] = subObj;                                                                                         // 112\n\t\t\t\t}                                                                                                                  // 113\n\t\t\t}                                                                                                                   // 114\n\t\t\telse {                                                                                                              // 115\n\t\t\t\toverrides[name] = val; // transfer normal options as-is                                                            // 116\n\t\t\t}                                                                                                                   // 117\n\t\t}                                                                                                                    // 118\n\t});                                                                                                                   // 119\n                                                                                                                       // 120\n\treturn overrides;                                                                                                     // 121\n}                                                                                                                      // 122\n                                                                                                                       // 123\n;;                                                                                                                     // 124\n                                                                                                                       // 125\n// exports                                                                                                             // 126\nFC.intersectRanges = intersectRanges;                                                                                  // 127\nFC.applyAll = applyAll;                                                                                                // 128\nFC.debounce = debounce;                                                                                                // 129\nFC.isInt = isInt;                                                                                                      // 130\nFC.htmlEscape = htmlEscape;                                                                                            // 131\nFC.cssToStr = cssToStr;                                                                                                // 132\nFC.proxy = proxy;                                                                                                      // 133\nFC.capitaliseFirstLetter = capitaliseFirstLetter;                                                                      // 134\n                                                                                                                       // 135\n                                                                                                                       // 136\n/* FullCalendar-specific DOM Utilities                                                                                 // 137\n----------------------------------------------------------------------------------------------------------------------*/\n                                                                                                                       // 139\n                                                                                                                       // 140\n// Given the scrollbar widths of some other container, create borders/margins on rowEls in order to match the left     // 141\n// and right space that was offset by the scrollbars. A 1-pixel border first, then margin beyond that.                 // 142\nfunction compensateScroll(rowEls, scrollbarWidths) {                                                                   // 143\n\tif (scrollbarWidths.left) {                                                                                           // 144\n\t\trowEls.css({                                                                                                         // 145\n\t\t\t'border-left-width': 1,                                                                                             // 146\n\t\t\t'margin-left': scrollbarWidths.left - 1                                                                             // 147\n\t\t});                                                                                                                  // 148\n\t}                                                                                                                     // 149\n\tif (scrollbarWidths.right) {                                                                                          // 150\n\t\trowEls.css({                                                                                                         // 151\n\t\t\t'border-right-width': 1,                                                                                            // 152\n\t\t\t'margin-right': scrollbarWidths.right - 1                                                                           // 153\n\t\t});                                                                                                                  // 154\n\t}                                                                                                                     // 155\n}                                                                                                                      // 156\n                                                                                                                       // 157\n                                                                                                                       // 158\n// Undoes compensateScroll and restores all borders/margins                                                            // 159\nfunction uncompensateScroll(rowEls) {                                                                                  // 160\n\trowEls.css({                                                                                                          // 161\n\t\t'margin-left': '',                                                                                                   // 162\n\t\t'margin-right': '',                                                                                                  // 163\n\t\t'border-left-width': '',                                                                                             // 164\n\t\t'border-right-width': ''                                                                                             // 165\n\t});                                                                                                                   // 166\n}                                                                                                                      // 167\n                                                                                                                       // 168\n                                                                                                                       // 169\n// Make the mouse cursor express that an event is not allowed in the current area                                      // 170\nfunction disableCursor() {                                                                                             // 171\n\t$('body').addClass('fc-not-allowed');                                                                                 // 172\n}                                                                                                                      // 173\n                                                                                                                       // 174\n                                                                                                                       // 175\n// Returns the mouse cursor to its original look                                                                       // 176\nfunction enableCursor() {                                                                                              // 177\n\t$('body').removeClass('fc-not-allowed');                                                                              // 178\n}                                                                                                                      // 179\n                                                                                                                       // 180\n                                                                                                                       // 181\n// Given a total available height to fill, have `els` (essentially child rows) expand to accomodate.                   // 182\n// By default, all elements that are shorter than the recommended height are expanded uniformly, not considering       // 183\n// any other els that are already too tall. if `shouldRedistribute` is on, it considers these tall rows and            // 184\n// reduces the available height.                                                                                       // 185\nfunction distributeHeight(els, availableHeight, shouldRedistribute) {                                                  // 186\n                                                                                                                       // 187\n\t// *FLOORING NOTE*: we floor in certain places because zoom can give inaccurate floating-point dimensions,            // 188\n\t// and it is better to be shorter than taller, to avoid creating unnecessary scrollbars.                              // 189\n                                                                                                                       // 190\n\tvar minOffset1 = Math.floor(availableHeight / els.length); // for non-last element                                    // 191\n\tvar minOffset2 = Math.floor(availableHeight - minOffset1 * (els.length - 1)); // for last element *FLOORING NOTE*     // 192\n\tvar flexEls = []; // elements that are allowed to expand. array of DOM nodes                                          // 193\n\tvar flexOffsets = []; // amount of vertical space it takes up                                                         // 194\n\tvar flexHeights = []; // actual css height                                                                            // 195\n\tvar usedHeight = 0;                                                                                                   // 196\n                                                                                                                       // 197\n\tundistributeHeight(els); // give all elements their natural height                                                    // 198\n                                                                                                                       // 199\n\t// find elements that are below the recommended height (expandable).                                                  // 200\n\t// important to query for heights in a single first pass (to avoid reflow oscillation).                               // 201\n\tels.each(function(i, el) {                                                                                            // 202\n\t\tvar minOffset = i === els.length - 1 ? minOffset2 : minOffset1;                                                      // 203\n\t\tvar naturalOffset = $(el).outerHeight(true);                                                                         // 204\n                                                                                                                       // 205\n\t\tif (naturalOffset < minOffset) {                                                                                     // 206\n\t\t\tflexEls.push(el);                                                                                                   // 207\n\t\t\tflexOffsets.push(naturalOffset);                                                                                    // 208\n\t\t\tflexHeights.push($(el).height());                                                                                   // 209\n\t\t}                                                                                                                    // 210\n\t\telse {                                                                                                               // 211\n\t\t\t// this element stretches past recommended height (non-expandable). mark the space as occupied.                     // 212\n\t\t\tusedHeight += naturalOffset;                                                                                        // 213\n\t\t}                                                                                                                    // 214\n\t});                                                                                                                   // 215\n                                                                                                                       // 216\n\t// readjust the recommended height to only consider the height available to non-maxed-out rows.                       // 217\n\tif (shouldRedistribute) {                                                                                             // 218\n\t\tavailableHeight -= usedHeight;                                                                                       // 219\n\t\tminOffset1 = Math.floor(availableHeight / flexEls.length);                                                           // 220\n\t\tminOffset2 = Math.floor(availableHeight - minOffset1 * (flexEls.length - 1)); // *FLOORING NOTE*                     // 221\n\t}                                                                                                                     // 222\n                                                                                                                       // 223\n\t// assign heights to all expandable elements                                                                          // 224\n\t$(flexEls).each(function(i, el) {                                                                                     // 225\n\t\tvar minOffset = i === flexEls.length - 1 ? minOffset2 : minOffset1;                                                  // 226\n\t\tvar naturalOffset = flexOffsets[i];                                                                                  // 227\n\t\tvar naturalHeight = flexHeights[i];                                                                                  // 228\n\t\tvar newHeight = minOffset - (naturalOffset - naturalHeight); // subtract the margin/padding                          // 229\n                                                                                                                       // 230\n\t\tif (naturalOffset < minOffset) { // we check this again because redistribution might have changed things             // 231\n\t\t\t$(el).height(newHeight);                                                                                            // 232\n\t\t}                                                                                                                    // 233\n\t});                                                                                                                   // 234\n}                                                                                                                      // 235\n                                                                                                                       // 236\n                                                                                                                       // 237\n// Undoes distrubuteHeight, restoring all els to their natural height                                                  // 238\nfunction undistributeHeight(els) {                                                                                     // 239\n\tels.height('');                                                                                                       // 240\n}                                                                                                                      // 241\n                                                                                                                       // 242\n                                                                                                                       // 243\n// Given `els`, a jQuery set of <td> cells, find the cell with the largest natural width and set the widths of all the\n// cells to be that width.                                                                                             // 245\n// PREREQUISITE: if you want a cell to take up width, it needs to have a single inner element w/ display:inline        // 246\nfunction matchCellWidths(els) {                                                                                        // 247\n\tvar maxInnerWidth = 0;                                                                                                // 248\n                                                                                                                       // 249\n\tels.find('> *').each(function(i, innerEl) {                                                                           // 250\n\t\tvar innerWidth = $(innerEl).outerWidth();                                                                            // 251\n\t\tif (innerWidth > maxInnerWidth) {                                                                                    // 252\n\t\t\tmaxInnerWidth = innerWidth;                                                                                         // 253\n\t\t}                                                                                                                    // 254\n\t});                                                                                                                   // 255\n                                                                                                                       // 256\n\tmaxInnerWidth++; // sometimes not accurate of width the text needs to stay on one line. insurance                     // 257\n                                                                                                                       // 258\n\tels.width(maxInnerWidth);                                                                                             // 259\n                                                                                                                       // 260\n\treturn maxInnerWidth;                                                                                                 // 261\n}                                                                                                                      // 262\n                                                                                                                       // 263\n                                                                                                                       // 264\n// Turns a container element into a scroller if its contents is taller than the allotted height.                       // 265\n// Returns true if the element is now a scroller, false otherwise.                                                     // 266\n// NOTE: this method is best because it takes weird zooming dimensions into account                                    // 267\nfunction setPotentialScroller(containerEl, height) {                                                                   // 268\n\tcontainerEl.height(height).addClass('fc-scroller');                                                                   // 269\n                                                                                                                       // 270\n\t// are scrollbars needed?                                                                                             // 271\n\tif (containerEl[0].scrollHeight - 1 > containerEl[0].clientHeight) { // !!! -1 because IE is often off-by-one :(      // 272\n\t\treturn true;                                                                                                         // 273\n\t}                                                                                                                     // 274\n                                                                                                                       // 275\n\tunsetScroller(containerEl); // undo                                                                                   // 276\n\treturn false;                                                                                                         // 277\n}                                                                                                                      // 278\n                                                                                                                       // 279\n                                                                                                                       // 280\n// Takes an element that might have been a scroller, and turns it back into a normal element.                          // 281\nfunction unsetScroller(containerEl) {                                                                                  // 282\n\tcontainerEl.height('').removeClass('fc-scroller');                                                                    // 283\n}                                                                                                                      // 284\n                                                                                                                       // 285\n                                                                                                                       // 286\n/* General DOM Utilities                                                                                               // 287\n----------------------------------------------------------------------------------------------------------------------*/\n                                                                                                                       // 289\nFC.getOuterRect = getOuterRect;                                                                                        // 290\nFC.getClientRect = getClientRect;                                                                                      // 291\nFC.getContentRect = getContentRect;                                                                                    // 292\nFC.getScrollbarWidths = getScrollbarWidths;                                                                            // 293\n                                                                                                                       // 294\n                                                                                                                       // 295\n// borrowed from https://github.com/jquery/jquery-ui/blob/1.11.0/ui/core.js#L51                                        // 296\nfunction getScrollParent(el) {                                                                                         // 297\n\tvar position = el.css('position'),                                                                                    // 298\n\t\tscrollParent = el.parents().filter(function() {                                                                      // 299\n\t\t\tvar parent = $(this);                                                                                               // 300\n\t\t\treturn (/(auto|scroll)/).test(                                                                                      // 301\n\t\t\t\tparent.css('overflow') + parent.css('overflow-y') + parent.css('overflow-x')                                       // 302\n\t\t\t);                                                                                                                  // 303\n\t\t}).eq(0);                                                                                                            // 304\n                                                                                                                       // 305\n\treturn position === 'fixed' || !scrollParent.length ? $(el[0].ownerDocument || document) : scrollParent;              // 306\n}                                                                                                                      // 307\n                                                                                                                       // 308\n                                                                                                                       // 309\n// Queries the outer bounding area of a jQuery element.                                                                // 310\n// Returns a rectangle with absolute coordinates: left, right (exclusive), top, bottom (exclusive).                    // 311\nfunction getOuterRect(el) {                                                                                            // 312\n\tvar offset = el.offset();                                                                                             // 313\n                                                                                                                       // 314\n\treturn {                                                                                                              // 315\n\t\tleft: offset.left,                                                                                                   // 316\n\t\tright: offset.left + el.outerWidth(),                                                                                // 317\n\t\ttop: offset.top,                                                                                                     // 318\n\t\tbottom: offset.top + el.outerHeight()                                                                                // 319\n\t};                                                                                                                    // 320\n}                                                                                                                      // 321\n                                                                                                                       // 322\n                                                                                                                       // 323\n// Queries the area within the margin/border/scrollbars of a jQuery element. Does not go within the padding.           // 324\n// Returns a rectangle with absolute coordinates: left, right (exclusive), top, bottom (exclusive).                    // 325\n// NOTE: should use clientLeft/clientTop, but very unreliable cross-browser.                                           // 326\nfunction getClientRect(el) {                                                                                           // 327\n\tvar offset = el.offset();                                                                                             // 328\n\tvar scrollbarWidths = getScrollbarWidths(el);                                                                         // 329\n\tvar left = offset.left + getCssFloat(el, 'border-left-width') + scrollbarWidths.left;                                 // 330\n\tvar top = offset.top + getCssFloat(el, 'border-top-width') + scrollbarWidths.top;                                     // 331\n                                                                                                                       // 332\n\treturn {                                                                                                              // 333\n\t\tleft: left,                                                                                                          // 334\n\t\tright: left + el[0].clientWidth, // clientWidth includes padding but NOT scrollbars                                  // 335\n\t\ttop: top,                                                                                                            // 336\n\t\tbottom: top + el[0].clientHeight // clientHeight includes padding but NOT scrollbars                                 // 337\n\t};                                                                                                                    // 338\n}                                                                                                                      // 339\n                                                                                                                       // 340\n                                                                                                                       // 341\n// Queries the area within the margin/border/padding of a jQuery element. Assumed not to have scrollbars.              // 342\n// Returns a rectangle with absolute coordinates: left, right (exclusive), top, bottom (exclusive).                    // 343\nfunction getContentRect(el) {                                                                                          // 344\n\tvar offset = el.offset(); // just outside of border, margin not included                                              // 345\n\tvar left = offset.left + getCssFloat(el, 'border-left-width') + getCssFloat(el, 'padding-left');                      // 346\n\tvar top = offset.top + getCssFloat(el, 'border-top-width') + getCssFloat(el, 'padding-top');                          // 347\n                                                                                                                       // 348\n\treturn {                                                                                                              // 349\n\t\tleft: left,                                                                                                          // 350\n\t\tright: left + el.width(),                                                                                            // 351\n\t\ttop: top,                                                                                                            // 352\n\t\tbottom: top + el.height()                                                                                            // 353\n\t};                                                                                                                    // 354\n}                                                                                                                      // 355\n                                                                                                                       // 356\n                                                                                                                       // 357\n// Returns the computed left/right/top/bottom scrollbar widths for the given jQuery element.                           // 358\n// NOTE: should use clientLeft/clientTop, but very unreliable cross-browser.                                           // 359\nfunction getScrollbarWidths(el) {                                                                                      // 360\n\tvar leftRightWidth = el.innerWidth() - el[0].clientWidth; // the paddings cancel out, leaving the scrollbars          // 361\n\tvar widths = {                                                                                                        // 362\n\t\tleft: 0,                                                                                                             // 363\n\t\tright: 0,                                                                                                            // 364\n\t\ttop: 0,                                                                                                              // 365\n\t\tbottom: el.innerHeight() - el[0].clientHeight // the paddings cancel out, leaving the bottom scrollbar               // 366\n\t};                                                                                                                    // 367\n                                                                                                                       // 368\n\tif (getIsLeftRtlScrollbars() && el.css('direction') == 'rtl') { // is the scrollbar on the left side?                 // 369\n\t\twidths.left = leftRightWidth;                                                                                        // 370\n\t}                                                                                                                     // 371\n\telse {                                                                                                                // 372\n\t\twidths.right = leftRightWidth;                                                                                       // 373\n\t}                                                                                                                     // 374\n                                                                                                                       // 375\n\treturn widths;                                                                                                        // 376\n}                                                                                                                      // 377\n                                                                                                                       // 378\n                                                                                                                       // 379\n// Logic for determining if, when the element is right-to-left, the scrollbar appears on the left side                 // 380\n                                                                                                                       // 381\nvar _isLeftRtlScrollbars = null;                                                                                       // 382\n                                                                                                                       // 383\nfunction getIsLeftRtlScrollbars() { // responsible for caching the computation                                         // 384\n\tif (_isLeftRtlScrollbars === null) {                                                                                  // 385\n\t\t_isLeftRtlScrollbars = computeIsLeftRtlScrollbars();                                                                 // 386\n\t}                                                                                                                     // 387\n\treturn _isLeftRtlScrollbars;                                                                                          // 388\n}                                                                                                                      // 389\n                                                                                                                       // 390\nfunction computeIsLeftRtlScrollbars() { // creates an offscreen test element, then removes it                          // 391\n\tvar el = $('<div><div/></div>')                                                                                       // 392\n\t\t.css({                                                                                                               // 393\n\t\t\tposition: 'absolute',                                                                                               // 394\n\t\t\ttop: -1000,                                                                                                         // 395\n\t\t\tleft: 0,                                                                                                            // 396\n\t\t\tborder: 0,                                                                                                          // 397\n\t\t\tpadding: 0,                                                                                                         // 398\n\t\t\toverflow: 'scroll',                                                                                                 // 399\n\t\t\tdirection: 'rtl'                                                                                                    // 400\n\t\t})                                                                                                                   // 401\n\t\t.appendTo('body');                                                                                                   // 402\n\tvar innerEl = el.children();                                                                                          // 403\n\tvar res = innerEl.offset().left > el.offset().left; // is the inner div shifted to accommodate a left scrollbar?      // 404\n\tel.remove();                                                                                                          // 405\n\treturn res;                                                                                                           // 406\n}                                                                                                                      // 407\n                                                                                                                       // 408\n                                                                                                                       // 409\n// Retrieves a jQuery element's computed CSS value as a floating-point number.                                         // 410\n// If the queried value is non-numeric (ex: IE can return \"medium\" for border width), will just return zero.           // 411\nfunction getCssFloat(el, prop) {                                                                                       // 412\n\treturn parseFloat(el.css(prop)) || 0;                                                                                 // 413\n}                                                                                                                      // 414\n                                                                                                                       // 415\n                                                                                                                       // 416\n// Returns a boolean whether this was a left mouse click and no ctrl key (which means right click on Mac)              // 417\nfunction isPrimaryMouseButton(ev) {                                                                                    // 418\n\treturn ev.which == 1 && !ev.ctrlKey;                                                                                  // 419\n}                                                                                                                      // 420\n                                                                                                                       // 421\n                                                                                                                       // 422\n/* Geometry                                                                                                            // 423\n----------------------------------------------------------------------------------------------------------------------*/\n                                                                                                                       // 425\nFC.intersectRects = intersectRects;                                                                                    // 426\n                                                                                                                       // 427\n// Returns a new rectangle that is the intersection of the two rectangles. If they don't intersect, returns false      // 428\nfunction intersectRects(rect1, rect2) {                                                                                // 429\n\tvar res = {                                                                                                           // 430\n\t\tleft: Math.max(rect1.left, rect2.left),                                                                              // 431\n\t\tright: Math.min(rect1.right, rect2.right),                                                                           // 432\n\t\ttop: Math.max(rect1.top, rect2.top),                                                                                 // 433\n\t\tbottom: Math.min(rect1.bottom, rect2.bottom)                                                                         // 434\n\t};                                                                                                                    // 435\n                                                                                                                       // 436\n\tif (res.left < res.right && res.top < res.bottom) {                                                                   // 437\n\t\treturn res;                                                                                                          // 438\n\t}                                                                                                                     // 439\n\treturn false;                                                                                                         // 440\n}                                                                                                                      // 441\n                                                                                                                       // 442\n                                                                                                                       // 443\n// Returns a new point that will have been moved to reside within the given rectangle                                  // 444\nfunction constrainPoint(point, rect) {                                                                                 // 445\n\treturn {                                                                                                              // 446\n\t\tleft: Math.min(Math.max(point.left, rect.left), rect.right),                                                         // 447\n\t\ttop: Math.min(Math.max(point.top, rect.top), rect.bottom)                                                            // 448\n\t};                                                                                                                    // 449\n}                                                                                                                      // 450\n                                                                                                                       // 451\n                                                                                                                       // 452\n// Returns a point that is the center of the given rectangle                                                           // 453\nfunction getRectCenter(rect) {                                                                                         // 454\n\treturn {                                                                                                              // 455\n\t\tleft: (rect.left + rect.right) / 2,                                                                                  // 456\n\t\ttop: (rect.top + rect.bottom) / 2                                                                                    // 457\n\t};                                                                                                                    // 458\n}                                                                                                                      // 459\n                                                                                                                       // 460\n                                                                                                                       // 461\n// Subtracts point2's coordinates from point1's coordinates, returning a delta                                         // 462\nfunction diffPoints(point1, point2) {                                                                                  // 463\n\treturn {                                                                                                              // 464\n\t\tleft: point1.left - point2.left,                                                                                     // 465\n\t\ttop: point1.top - point2.top                                                                                         // 466\n\t};                                                                                                                    // 467\n}                                                                                                                      // 468\n                                                                                                                       // 469\n                                                                                                                       // 470\n/* Object Ordering by Field                                                                                            // 471\n----------------------------------------------------------------------------------------------------------------------*/\n                                                                                                                       // 473\nFC.parseFieldSpecs = parseFieldSpecs;                                                                                  // 474\nFC.compareByFieldSpecs = compareByFieldSpecs;                                                                          // 475\nFC.compareByFieldSpec = compareByFieldSpec;                                                                            // 476\nFC.flexibleCompare = flexibleCompare;                                                                                  // 477\n                                                                                                                       // 478\n                                                                                                                       // 479\nfunction parseFieldSpecs(input) {                                                                                      // 480\n\tvar specs = [];                                                                                                       // 481\n\tvar tokens = [];                                                                                                      // 482\n\tvar i, token;                                                                                                         // 483\n                                                                                                                       // 484\n\tif (typeof input === 'string') {                                                                                      // 485\n\t\ttokens = input.split(/\\s*,\\s*/);                                                                                     // 486\n\t}                                                                                                                     // 487\n\telse if (typeof input === 'function') {                                                                               // 488\n\t\ttokens = [ input ];                                                                                                  // 489\n\t}                                                                                                                     // 490\n\telse if ($.isArray(input)) {                                                                                          // 491\n\t\ttokens = input;                                                                                                      // 492\n\t}                                                                                                                     // 493\n                                                                                                                       // 494\n\tfor (i = 0; i < tokens.length; i++) {                                                                                 // 495\n\t\ttoken = tokens[i];                                                                                                   // 496\n                                                                                                                       // 497\n\t\tif (typeof token === 'string') {                                                                                     // 498\n\t\t\tspecs.push(                                                                                                         // 499\n\t\t\t\ttoken.charAt(0) == '-' ?                                                                                           // 500\n\t\t\t\t\t{ field: token.substring(1), order: -1 } :                                                                        // 501\n\t\t\t\t\t{ field: token, order: 1 }                                                                                        // 502\n\t\t\t);                                                                                                                  // 503\n\t\t}                                                                                                                    // 504\n\t\telse if (typeof token === 'function') {                                                                              // 505\n\t\t\tspecs.push({ func: token });                                                                                        // 506\n\t\t}                                                                                                                    // 507\n\t}                                                                                                                     // 508\n                                                                                                                       // 509\n\treturn specs;                                                                                                         // 510\n}                                                                                                                      // 511\n                                                                                                                       // 512\n                                                                                                                       // 513\nfunction compareByFieldSpecs(obj1, obj2, fieldSpecs) {                                                                 // 514\n\tvar i;                                                                                                                // 515\n\tvar cmp;                                                                                                              // 516\n                                                                                                                       // 517\n\tfor (i = 0; i < fieldSpecs.length; i++) {                                                                             // 518\n\t\tcmp = compareByFieldSpec(obj1, obj2, fieldSpecs[i]);                                                                 // 519\n\t\tif (cmp) {                                                                                                           // 520\n\t\t\treturn cmp;                                                                                                         // 521\n\t\t}                                                                                                                    // 522\n\t}                                                                                                                     // 523\n                                                                                                                       // 524\n\treturn 0;                                                                                                             // 525\n}                                                                                                                      // 526\n                                                                                                                       // 527\n                                                                                                                       // 528\nfunction compareByFieldSpec(obj1, obj2, fieldSpec) {                                                                   // 529\n\tif (fieldSpec.func) {                                                                                                 // 530\n\t\treturn fieldSpec.func(obj1, obj2);                                                                                   // 531\n\t}                                                                                                                     // 532\n\treturn flexibleCompare(obj1[fieldSpec.field], obj2[fieldSpec.field]) *                                                // 533\n\t\t(fieldSpec.order || 1);                                                                                              // 534\n}                                                                                                                      // 535\n                                                                                                                       // 536\n                                                                                                                       // 537\nfunction flexibleCompare(a, b) {                                                                                       // 538\n\tif (!a && !b) {                                                                                                       // 539\n\t\treturn 0;                                                                                                            // 540\n\t}                                                                                                                     // 541\n\tif (b == null) {                                                                                                      // 542\n\t\treturn -1;                                                                                                           // 543\n\t}                                                                                                                     // 544\n\tif (a == null) {                                                                                                      // 545\n\t\treturn 1;                                                                                                            // 546\n\t}                                                                                                                     // 547\n\tif ($.type(a) === 'string' || $.type(b) === 'string') {                                                               // 548\n\t\treturn String(a).localeCompare(String(b));                                                                           // 549\n\t}                                                                                                                     // 550\n\treturn a - b;                                                                                                         // 551\n}                                                                                                                      // 552\n                                                                                                                       // 553\n                                                                                                                       // 554\n/* FullCalendar-specific Misc Utilities                                                                                // 555\n----------------------------------------------------------------------------------------------------------------------*/\n                                                                                                                       // 557\n                                                                                                                       // 558\n// Computes the intersection of the two ranges. Returns undefined if no intersection.                                  // 559\n// Expects all dates to be normalized to the same timezone beforehand.                                                 // 560\n// TODO: move to date section?                                                                                         // 561\nfunction intersectRanges(subjectRange, constraintRange) {                                                              // 562\n\tvar subjectStart = subjectRange.start;                                                                                // 563\n\tvar subjectEnd = subjectRange.end;                                                                                    // 564\n\tvar constraintStart = constraintRange.start;                                                                          // 565\n\tvar constraintEnd = constraintRange.end;                                                                              // 566\n\tvar segStart, segEnd;                                                                                                 // 567\n\tvar isStart, isEnd;                                                                                                   // 568\n                                                                                                                       // 569\n\tif (subjectEnd > constraintStart && subjectStart < constraintEnd) { // in bounds at all?                              // 570\n                                                                                                                       // 571\n\t\tif (subjectStart >= constraintStart) {                                                                               // 572\n\t\t\tsegStart = subjectStart.clone();                                                                                    // 573\n\t\t\tisStart = true;                                                                                                     // 574\n\t\t}                                                                                                                    // 575\n\t\telse {                                                                                                               // 576\n\t\t\tsegStart = constraintStart.clone();                                                                                 // 577\n\t\t\tisStart =  false;                                                                                                   // 578\n\t\t}                                                                                                                    // 579\n                                                                                                                       // 580\n\t\tif (subjectEnd <= constraintEnd) {                                                                                   // 581\n\t\t\tsegEnd = subjectEnd.clone();                                                                                        // 582\n\t\t\tisEnd = true;                                                                                                       // 583\n\t\t}                                                                                                                    // 584\n\t\telse {                                                                                                               // 585\n\t\t\tsegEnd = constraintEnd.clone();                                                                                     // 586\n\t\t\tisEnd = false;                                                                                                      // 587\n\t\t}                                                                                                                    // 588\n                                                                                                                       // 589\n\t\treturn {                                                                                                             // 590\n\t\t\tstart: segStart,                                                                                                    // 591\n\t\t\tend: segEnd,                                                                                                        // 592\n\t\t\tisStart: isStart,                                                                                                   // 593\n\t\t\tisEnd: isEnd                                                                                                        // 594\n\t\t};                                                                                                                   // 595\n\t}                                                                                                                     // 596\n}                                                                                                                      // 597\n                                                                                                                       // 598\n                                                                                                                       // 599\n/* Date Utilities                                                                                                      // 600\n----------------------------------------------------------------------------------------------------------------------*/\n                                                                                                                       // 602\nFC.computeIntervalUnit = computeIntervalUnit;                                                                          // 603\nFC.divideRangeByDuration = divideRangeByDuration;                                                                      // 604\nFC.divideDurationByDuration = divideDurationByDuration;                                                                // 605\nFC.multiplyDuration = multiplyDuration;                                                                                // 606\nFC.durationHasTime = durationHasTime;                                                                                  // 607\n                                                                                                                       // 608\nvar dayIDs = [ 'sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat' ];                                                      // 609\nvar intervalUnits = [ 'year', 'month', 'week', 'day', 'hour', 'minute', 'second', 'millisecond' ];                     // 610\n                                                                                                                       // 611\n                                                                                                                       // 612\n// Diffs the two moments into a Duration where full-days are recorded first, then the remaining time.                  // 613\n// Moments will have their timezones normalized.                                                                       // 614\nfunction diffDayTime(a, b) {                                                                                           // 615\n\treturn moment.duration({                                                                                              // 616\n\t\tdays: a.clone().stripTime().diff(b.clone().stripTime(), 'days'),                                                     // 617\n\t\tms: a.time() - b.time() // time-of-day from day start. disregards timezone                                           // 618\n\t});                                                                                                                   // 619\n}                                                                                                                      // 620\n                                                                                                                       // 621\n                                                                                                                       // 622\n// Diffs the two moments via their start-of-day (regardless of timezone). Produces whole-day durations.                // 623\nfunction diffDay(a, b) {                                                                                               // 624\n\treturn moment.duration({                                                                                              // 625\n\t\tdays: a.clone().stripTime().diff(b.clone().stripTime(), 'days')                                                      // 626\n\t});                                                                                                                   // 627\n}                                                                                                                      // 628\n                                                                                                                       // 629\n                                                                                                                       // 630\n// Diffs two moments, producing a duration, made of a whole-unit-increment of the given unit. Uses rounding.           // 631\nfunction diffByUnit(a, b, unit) {                                                                                      // 632\n\treturn moment.duration(                                                                                               // 633\n\t\tMath.round(a.diff(b, unit, true)), // returnFloat=true                                                               // 634\n\t\tunit                                                                                                                 // 635\n\t);                                                                                                                    // 636\n}                                                                                                                      // 637\n                                                                                                                       // 638\n                                                                                                                       // 639\n// Computes the unit name of the largest whole-unit period of time.                                                    // 640\n// For example, 48 hours will be \"days\" whereas 49 hours will be \"hours\".                                              // 641\n// Accepts start/end, a range object, or an original duration object.                                                  // 642\nfunction computeIntervalUnit(start, end) {                                                                             // 643\n\tvar i, unit;                                                                                                          // 644\n\tvar val;                                                                                                              // 645\n                                                                                                                       // 646\n\tfor (i = 0; i < intervalUnits.length; i++) {                                                                          // 647\n\t\tunit = intervalUnits[i];                                                                                             // 648\n\t\tval = computeRangeAs(unit, start, end);                                                                              // 649\n                                                                                                                       // 650\n\t\tif (val >= 1 && isInt(val)) {                                                                                        // 651\n\t\t\tbreak;                                                                                                              // 652\n\t\t}                                                                                                                    // 653\n\t}                                                                                                                     // 654\n                                                                                                                       // 655\n\treturn unit; // will be \"milliseconds\" if nothing else matches                                                        // 656\n}                                                                                                                      // 657\n                                                                                                                       // 658\n                                                                                                                       // 659\n// Computes the number of units (like \"hours\") in the given range.                                                     // 660\n// Range can be a {start,end} object, separate start/end args, or a Duration.                                          // 661\n// Results are based on Moment's .as() and .diff() methods, so results can depend on internal handling                 // 662\n// of month-diffing logic (which tends to vary from version to version).                                               // 663\nfunction computeRangeAs(unit, start, end) {                                                                            // 664\n                                                                                                                       // 665\n\tif (end != null) { // given start, end                                                                                // 666\n\t\treturn end.diff(start, unit, true);                                                                                  // 667\n\t}                                                                                                                     // 668\n\telse if (moment.isDuration(start)) { // given duration                                                                // 669\n\t\treturn start.as(unit);                                                                                               // 670\n\t}                                                                                                                     // 671\n\telse { // given { start, end } range object                                                                           // 672\n\t\treturn start.end.diff(start.start, unit, true);                                                                      // 673\n\t}                                                                                                                     // 674\n}                                                                                                                      // 675\n                                                                                                                       // 676\n                                                                                                                       // 677\n// Intelligently divides a range (specified by a start/end params) by a duration                                       // 678\nfunction divideRangeByDuration(start, end, dur) {                                                                      // 679\n\tvar months;                                                                                                           // 680\n                                                                                                                       // 681\n\tif (durationHasTime(dur)) {                                                                                           // 682\n\t\treturn (end - start) / dur;                                                                                          // 683\n\t}                                                                                                                     // 684\n\tmonths = dur.asMonths();                                                                                              // 685\n\tif (Math.abs(months) >= 1 && isInt(months)) {                                                                         // 686\n\t\treturn end.diff(start, 'months', true) / months;                                                                     // 687\n\t}                                                                                                                     // 688\n\treturn end.diff(start, 'days', true) / dur.asDays();                                                                  // 689\n}                                                                                                                      // 690\n                                                                                                                       // 691\n                                                                                                                       // 692\n// Intelligently divides one duration by another                                                                       // 693\nfunction divideDurationByDuration(dur1, dur2) {                                                                        // 694\n\tvar months1, months2;                                                                                                 // 695\n                                                                                                                       // 696\n\tif (durationHasTime(dur1) || durationHasTime(dur2)) {                                                                 // 697\n\t\treturn dur1 / dur2;                                                                                                  // 698\n\t}                                                                                                                     // 699\n\tmonths1 = dur1.asMonths();                                                                                            // 700\n\tmonths2 = dur2.asMonths();                                                                                            // 701\n\tif (                                                                                                                  // 702\n\t\tMath.abs(months1) >= 1 && isInt(months1) &&                                                                          // 703\n\t\tMath.abs(months2) >= 1 && isInt(months2)                                                                             // 704\n\t) {                                                                                                                   // 705\n\t\treturn months1 / months2;                                                                                            // 706\n\t}                                                                                                                     // 707\n\treturn dur1.asDays() / dur2.asDays();                                                                                 // 708\n}                                                                                                                      // 709\n                                                                                                                       // 710\n                                                                                                                       // 711\n// Intelligently multiplies a duration by a number                                                                     // 712\nfunction multiplyDuration(dur, n) {                                                                                    // 713\n\tvar months;                                                                                                           // 714\n                                                                                                                       // 715\n\tif (durationHasTime(dur)) {                                                                                           // 716\n\t\treturn moment.duration(dur * n);                                                                                     // 717\n\t}                                                                                                                     // 718\n\tmonths = dur.asMonths();                                                                                              // 719\n\tif (Math.abs(months) >= 1 && isInt(months)) {                                                                         // 720\n\t\treturn moment.duration({ months: months * n });                                                                      // 721\n\t}                                                                                                                     // 722\n\treturn moment.duration({ days: dur.asDays() * n });                                                                   // 723\n}                                                                                                                      // 724\n                                                                                                                       // 725\n                                                                                                                       // 726\n// Returns a boolean about whether the given duration has any time parts (hours/minutes/seconds/ms)                    // 727\nfunction durationHasTime(dur) {                                                                                        // 728\n\treturn Boolean(dur.hours() || dur.minutes() || dur.seconds() || dur.milliseconds());                                  // 729\n}                                                                                                                      // 730\n                                                                                                                       // 731\n                                                                                                                       // 732\nfunction isNativeDate(input) {                                                                                         // 733\n\treturn  Object.prototype.toString.call(input) === '[object Date]' || input instanceof Date;                           // 734\n}                                                                                                                      // 735\n                                                                                                                       // 736\n                                                                                                                       // 737\n// Returns a boolean about whether the given input is a time string, like \"06:40:00\" or \"06:00\"                        // 738\nfunction isTimeString(str) {                                                                                           // 739\n\treturn /^\\d+\\:\\d+(?:\\:\\d+\\.?(?:\\d{3})?)?$/.test(str);                                                                 // 740\n}                                                                                                                      // 741\n                                                                                                                       // 742\n                                                                                                                       // 743\n/* Logging and Debug                                                                                                   // 744\n----------------------------------------------------------------------------------------------------------------------*/\n                                                                                                                       // 746\nFC.log = function() {                                                                                                  // 747\n\tvar console = window.console;                                                                                         // 748\n                                                                                                                       // 749\n\tif (console && console.log) {                                                                                         // 750\n\t\treturn console.log.apply(console, arguments);                                                                        // 751\n\t}                                                                                                                     // 752\n};                                                                                                                     // 753\n                                                                                                                       // 754\nFC.warn = function() {                                                                                                 // 755\n\tvar console = window.console;                                                                                         // 756\n                                                                                                                       // 757\n\tif (console && console.warn) {                                                                                        // 758\n\t\treturn console.warn.apply(console, arguments);                                                                       // 759\n\t}                                                                                                                     // 760\n\telse {                                                                                                                // 761\n\t\treturn FC.log.apply(FC, arguments);                                                                                  // 762\n\t}                                                                                                                     // 763\n};                                                                                                                     // 764\n                                                                                                                       // 765\n                                                                                                                       // 766\n/* General Utilities                                                                                                   // 767\n----------------------------------------------------------------------------------------------------------------------*/\n                                                                                                                       // 769\nvar hasOwnPropMethod = {}.hasOwnProperty;                                                                              // 770\n                                                                                                                       // 771\n                                                                                                                       // 772\n// Merges an array of objects into a single object.                                                                    // 773\n// The second argument allows for an array of property names who's object values will be merged together.              // 774\nfunction mergeProps(propObjs, complexProps) {                                                                          // 775\n\tvar dest = {};                                                                                                        // 776\n\tvar i, name;                                                                                                          // 777\n\tvar complexObjs;                                                                                                      // 778\n\tvar j, val;                                                                                                           // 779\n\tvar props;                                                                                                            // 780\n                                                                                                                       // 781\n\tif (complexProps) {                                                                                                   // 782\n\t\tfor (i = 0; i < complexProps.length; i++) {                                                                          // 783\n\t\t\tname = complexProps[i];                                                                                             // 784\n\t\t\tcomplexObjs = [];                                                                                                   // 785\n                                                                                                                       // 786\n\t\t\t// collect the trailing object values, stopping when a non-object is discovered                                     // 787\n\t\t\tfor (j = propObjs.length - 1; j >= 0; j--) {                                                                        // 788\n\t\t\t\tval = propObjs[j][name];                                                                                           // 789\n                                                                                                                       // 790\n\t\t\t\tif (typeof val === 'object') {                                                                                     // 791\n\t\t\t\t\tcomplexObjs.unshift(val);                                                                                         // 792\n\t\t\t\t}                                                                                                                  // 793\n\t\t\t\telse if (val !== undefined) {                                                                                      // 794\n\t\t\t\t\tdest[name] = val; // if there were no objects, this value will be used                                            // 795\n\t\t\t\t\tbreak;                                                                                                            // 796\n\t\t\t\t}                                                                                                                  // 797\n\t\t\t}                                                                                                                   // 798\n                                                                                                                       // 799\n\t\t\t// if the trailing values were objects, use the merged value                                                        // 800\n\t\t\tif (complexObjs.length) {                                                                                           // 801\n\t\t\t\tdest[name] = mergeProps(complexObjs);                                                                              // 802\n\t\t\t}                                                                                                                   // 803\n\t\t}                                                                                                                    // 804\n\t}                                                                                                                     // 805\n                                                                                                                       // 806\n\t// copy values into the destination, going from last to first                                                         // 807\n\tfor (i = propObjs.length - 1; i >= 0; i--) {                                                                          // 808\n\t\tprops = propObjs[i];                                                                                                 // 809\n                                                                                                                       // 810\n\t\tfor (name in props) {                                                                                                // 811\n\t\t\tif (!(name in dest)) { // if already assigned by previous props or complex props, don't reassign                    // 812\n\t\t\t\tdest[name] = props[name];                                                                                          // 813\n\t\t\t}                                                                                                                   // 814\n\t\t}                                                                                                                    // 815\n\t}                                                                                                                     // 816\n                                                                                                                       // 817\n\treturn dest;                                                                                                          // 818\n}                                                                                                                      // 819\n                                                                                                                       // 820\n                                                                                                                       // 821\n// Create an object that has the given prototype. Just like Object.create                                              // 822\nfunction createObject(proto) {                                                                                         // 823\n\tvar f = function() {};                                                                                                // 824\n\tf.prototype = proto;                                                                                                  // 825\n\treturn new f();                                                                                                       // 826\n}                                                                                                                      // 827\n                                                                                                                       // 828\n                                                                                                                       // 829\nfunction copyOwnProps(src, dest) {                                                                                     // 830\n\tfor (var name in src) {                                                                                               // 831\n\t\tif (hasOwnProp(src, name)) {                                                                                         // 832\n\t\t\tdest[name] = src[name];                                                                                             // 833\n\t\t}                                                                                                                    // 834\n\t}                                                                                                                     // 835\n}                                                                                                                      // 836\n                                                                                                                       // 837\n                                                                                                                       // 838\n// Copies over certain methods with the same names as Object.prototype methods. Overcomes an IE<=8 bug:                // 839\n// https://developer.mozilla.org/en-US/docs/ECMAScript_DontEnum_attribute#JScript_DontEnum_Bug                         // 840\nfunction copyNativeMethods(src, dest) {                                                                                // 841\n\tvar names = [ 'constructor', 'toString', 'valueOf' ];                                                                 // 842\n\tvar i, name;                                                                                                          // 843\n                                                                                                                       // 844\n\tfor (i = 0; i < names.length; i++) {                                                                                  // 845\n\t\tname = names[i];                                                                                                     // 846\n                                                                                                                       // 847\n\t\tif (src[name] !== Object.prototype[name]) {                                                                          // 848\n\t\t\tdest[name] = src[name];                                                                                             // 849\n\t\t}                                                                                                                    // 850\n\t}                                                                                                                     // 851\n}                                                                                                                      // 852\n                                                                                                                       // 853\n                                                                                                                       // 854\nfunction hasOwnProp(obj, name) {                                                                                       // 855\n\treturn hasOwnPropMethod.call(obj, name);                                                                              // 856\n}                                                                                                                      // 857\n                                                                                                                       // 858\n                                                                                                                       // 859\n// Is the given value a non-object non-function value?                                                                 // 860\nfunction isAtomic(val) {                                                                                               // 861\n\treturn /undefined|null|boolean|number|string/.test($.type(val));                                                      // 862\n}                                                                                                                      // 863\n                                                                                                                       // 864\n                                                                                                                       // 865\nfunction applyAll(functions, thisObj, args) {                                                                          // 866\n\tif ($.isFunction(functions)) {                                                                                        // 867\n\t\tfunctions = [ functions ];                                                                                           // 868\n\t}                                                                                                                     // 869\n\tif (functions) {                                                                                                      // 870\n\t\tvar i;                                                                                                               // 871\n\t\tvar ret;                                                                                                             // 872\n\t\tfor (i=0; i<functions.length; i++) {                                                                                 // 873\n\t\t\tret = functions[i].apply(thisObj, args) || ret;                                                                     // 874\n\t\t}                                                                                                                    // 875\n\t\treturn ret;                                                                                                          // 876\n\t}                                                                                                                     // 877\n}                                                                                                                      // 878\n                                                                                                                       // 879\n                                                                                                                       // 880\nfunction firstDefined() {                                                                                              // 881\n\tfor (var i=0; i<arguments.length; i++) {                                                                              // 882\n\t\tif (arguments[i] !== undefined) {                                                                                    // 883\n\t\t\treturn arguments[i];                                                                                                // 884\n\t\t}                                                                                                                    // 885\n\t}                                                                                                                     // 886\n}                                                                                                                      // 887\n                                                                                                                       // 888\n                                                                                                                       // 889\nfunction htmlEscape(s) {                                                                                               // 890\n\treturn (s + '').replace(/&/g, '&amp;')                                                                                // 891\n\t\t.replace(/</g, '&lt;')                                                                                               // 892\n\t\t.replace(/>/g, '&gt;')                                                                                               // 893\n\t\t.replace(/'/g, '&#039;')                                                                                             // 894\n\t\t.replace(/\"/g, '&quot;')                                                                                             // 895\n\t\t.replace(/\\n/g, '<br />');                                                                                           // 896\n}                                                                                                                      // 897\n                                                                                                                       // 898\n                                                                                                                       // 899\nfunction stripHtmlEntities(text) {                                                                                     // 900\n\treturn text.replace(/&.*?;/g, '');                                                                                    // 901\n}                                                                                                                      // 902\n                                                                                                                       // 903\n                                                                                                                       // 904\n// Given a hash of CSS properties, returns a string of CSS.                                                            // 905\n// Uses property names as-is (no camel-case conversion). Will not make statements for null/undefined values.           // 906\nfunction cssToStr(cssProps) {                                                                                          // 907\n\tvar statements = [];                                                                                                  // 908\n                                                                                                                       // 909\n\t$.each(cssProps, function(name, val) {                                                                                // 910\n\t\tif (val != null) {                                                                                                   // 911\n\t\t\tstatements.push(name + ':' + val);                                                                                  // 912\n\t\t}                                                                                                                    // 913\n\t});                                                                                                                   // 914\n                                                                                                                       // 915\n\treturn statements.join(';');                                                                                          // 916\n}                                                                                                                      // 917\n                                                                                                                       // 918\n                                                                                                                       // 919\nfunction capitaliseFirstLetter(str) {                                                                                  // 920\n\treturn str.charAt(0).toUpperCase() + str.slice(1);                                                                    // 921\n}                                                                                                                      // 922\n                                                                                                                       // 923\n                                                                                                                       // 924\nfunction compareNumbers(a, b) { // for .sort()                                                                         // 925\n\treturn a - b;                                                                                                         // 926\n}                                                                                                                      // 927\n                                                                                                                       // 928\n                                                                                                                       // 929\nfunction isInt(n) {                                                                                                    // 930\n\treturn n % 1 === 0;                                                                                                   // 931\n}                                                                                                                      // 932\n                                                                                                                       // 933\n                                                                                                                       // 934\n// Returns a method bound to the given object context.                                                                 // 935\n// Just like one of the jQuery.proxy signatures, but without the undesired behavior of treating the same method with   // 936\n// different contexts as identical when binding/unbinding events.                                                      // 937\nfunction proxy(obj, methodName) {                                                                                      // 938\n\tvar method = obj[methodName];                                                                                         // 939\n                                                                                                                       // 940\n\treturn function() {                                                                                                   // 941\n\t\treturn method.apply(obj, arguments);                                                                                 // 942\n\t};                                                                                                                    // 943\n}                                                                                                                      // 944\n                                                                                                                       // 945\n                                                                                                                       // 946\n// Returns a function, that, as long as it continues to be invoked, will not                                           // 947\n// be triggered. The function will be called after it stops being called for                                           // 948\n// N milliseconds.                                                                                                     // 949\n// https://github.com/jashkenas/underscore/blob/1.6.0/underscore.js#L714                                               // 950\nfunction debounce(func, wait) {                                                                                        // 951\n\tvar timeoutId;                                                                                                        // 952\n\tvar args;                                                                                                             // 953\n\tvar context;                                                                                                          // 954\n\tvar timestamp; // of most recent call                                                                                 // 955\n\tvar later = function() {                                                                                              // 956\n\t\tvar last = +new Date() - timestamp;                                                                                  // 957\n\t\tif (last < wait && last > 0) {                                                                                       // 958\n\t\t\ttimeoutId = setTimeout(later, wait - last);                                                                         // 959\n\t\t}                                                                                                                    // 960\n\t\telse {                                                                                                               // 961\n\t\t\ttimeoutId = null;                                                                                                   // 962\n\t\t\tfunc.apply(context, args);                                                                                          // 963\n\t\t\tif (!timeoutId) {                                                                                                   // 964\n\t\t\t\tcontext = args = null;                                                                                             // 965\n\t\t\t}                                                                                                                   // 966\n\t\t}                                                                                                                    // 967\n\t};                                                                                                                    // 968\n                                                                                                                       // 969\n\treturn function() {                                                                                                   // 970\n\t\tcontext = this;                                                                                                      // 971\n\t\targs = arguments;                                                                                                    // 972\n\t\ttimestamp = +new Date();                                                                                             // 973\n\t\tif (!timeoutId) {                                                                                                    // 974\n\t\t\ttimeoutId = setTimeout(later, wait);                                                                                // 975\n\t\t}                                                                                                                    // 976\n\t};                                                                                                                    // 977\n}                                                                                                                      // 978\n                                                                                                                       // 979\n;;                                                                                                                     // 980\n                                                                                                                       // 981\nvar ambigDateOfMonthRegex = /^\\s*\\d{4}-\\d\\d$/;                                                                         // 982\nvar ambigTimeOrZoneRegex =                                                                                             // 983\n\t/^\\s*\\d{4}-(?:(\\d\\d-\\d\\d)|(W\\d\\d$)|(W\\d\\d-\\d)|(\\d\\d\\d))((T| )(\\d\\d(:\\d\\d(:\\d\\d(\\.\\d+)?)?)?)?)?$/;                     // 984\nvar newMomentProto = moment.fn; // where we will attach our new methods                                                // 985\nvar oldMomentProto = $.extend({}, newMomentProto); // copy of original moment methods                                  // 986\nvar allowValueOptimization;                                                                                            // 987\nvar setUTCValues; // function defined below                                                                            // 988\nvar setLocalValues; // function defined below                                                                          // 989\n                                                                                                                       // 990\n                                                                                                                       // 991\n// Creating                                                                                                            // 992\n// -------------------------------------------------------------------------------------------------                   // 993\n                                                                                                                       // 994\n// Creates a new moment, similar to the vanilla moment(...) constructor, but with                                      // 995\n// extra features (ambiguous time, enhanced formatting). When given an existing moment,                                // 996\n// it will function as a clone (and retain the zone of the moment). Anything else will                                 // 997\n// result in a moment in the local zone.                                                                               // 998\nFC.moment = function() {                                                                                               // 999\n\treturn makeMoment(arguments);                                                                                         // 1000\n};                                                                                                                     // 1001\n                                                                                                                       // 1002\n// Sames as FC.moment, but forces the resulting moment to be in the UTC timezone.                                      // 1003\nFC.moment.utc = function() {                                                                                           // 1004\n\tvar mom = makeMoment(arguments, true);                                                                                // 1005\n                                                                                                                       // 1006\n\t// Force it into UTC because makeMoment doesn't guarantee it                                                          // 1007\n\t// (if given a pre-existing moment for example)                                                                       // 1008\n\tif (mom.hasTime()) { // don't give ambiguously-timed moments a UTC zone                                               // 1009\n\t\tmom.utc();                                                                                                           // 1010\n\t}                                                                                                                     // 1011\n                                                                                                                       // 1012\n\treturn mom;                                                                                                           // 1013\n};                                                                                                                     // 1014\n                                                                                                                       // 1015\n// Same as FC.moment, but when given an ISO8601 string, the timezone offset is preserved.                              // 1016\n// ISO8601 strings with no timezone offset will become ambiguously zoned.                                              // 1017\nFC.moment.parseZone = function() {                                                                                     // 1018\n\treturn makeMoment(arguments, true, true);                                                                             // 1019\n};                                                                                                                     // 1020\n                                                                                                                       // 1021\n// Builds an enhanced moment from args. When given an existing moment, it clones. When given a                         // 1022\n// native Date, or called with no arguments (the current time), the resulting moment will be local.                    // 1023\n// Anything else needs to be \"parsed\" (a string or an array), and will be affected by:                                 // 1024\n//    parseAsUTC - if there is no zone information, should we parse the input in UTC?                                  // 1025\n//    parseZone - if there is zone information, should we force the zone of the moment?                                // 1026\nfunction makeMoment(args, parseAsUTC, parseZone) {                                                                     // 1027\n\tvar input = args[0];                                                                                                  // 1028\n\tvar isSingleString = args.length == 1 && typeof input === 'string';                                                   // 1029\n\tvar isAmbigTime;                                                                                                      // 1030\n\tvar isAmbigZone;                                                                                                      // 1031\n\tvar ambigMatch;                                                                                                       // 1032\n\tvar mom;                                                                                                              // 1033\n                                                                                                                       // 1034\n\tif (moment.isMoment(input)) {                                                                                         // 1035\n\t\tmom = moment.apply(null, args); // clone it                                                                          // 1036\n\t\ttransferAmbigs(input, mom); // the ambig flags weren't transfered with the clone                                     // 1037\n\t}                                                                                                                     // 1038\n\telse if (isNativeDate(input) || input === undefined) {                                                                // 1039\n\t\tmom = moment.apply(null, args); // will be local                                                                     // 1040\n\t}                                                                                                                     // 1041\n\telse { // \"parsing\" is required                                                                                       // 1042\n\t\tisAmbigTime = false;                                                                                                 // 1043\n\t\tisAmbigZone = false;                                                                                                 // 1044\n                                                                                                                       // 1045\n\t\tif (isSingleString) {                                                                                                // 1046\n\t\t\tif (ambigDateOfMonthRegex.test(input)) {                                                                            // 1047\n\t\t\t\t// accept strings like '2014-05', but convert to the first of the month                                            // 1048\n\t\t\t\tinput += '-01';                                                                                                    // 1049\n\t\t\t\targs = [ input ]; // for when we pass it on to moment's constructor                                                // 1050\n\t\t\t\tisAmbigTime = true;                                                                                                // 1051\n\t\t\t\tisAmbigZone = true;                                                                                                // 1052\n\t\t\t}                                                                                                                   // 1053\n\t\t\telse if ((ambigMatch = ambigTimeOrZoneRegex.exec(input))) {                                                         // 1054\n\t\t\t\tisAmbigTime = !ambigMatch[5]; // no time part?                                                                     // 1055\n\t\t\t\tisAmbigZone = true;                                                                                                // 1056\n\t\t\t}                                                                                                                   // 1057\n\t\t}                                                                                                                    // 1058\n\t\telse if ($.isArray(input)) {                                                                                         // 1059\n\t\t\t// arrays have no timezone information, so assume ambiguous zone                                                    // 1060\n\t\t\tisAmbigZone = true;                                                                                                 // 1061\n\t\t}                                                                                                                    // 1062\n\t\t// otherwise, probably a string with a format                                                                        // 1063\n                                                                                                                       // 1064\n\t\tif (parseAsUTC || isAmbigTime) {                                                                                     // 1065\n\t\t\tmom = moment.utc.apply(moment, args);                                                                               // 1066\n\t\t}                                                                                                                    // 1067\n\t\telse {                                                                                                               // 1068\n\t\t\tmom = moment.apply(null, args);                                                                                     // 1069\n\t\t}                                                                                                                    // 1070\n                                                                                                                       // 1071\n\t\tif (isAmbigTime) {                                                                                                   // 1072\n\t\t\tmom._ambigTime = true;                                                                                              // 1073\n\t\t\tmom._ambigZone = true; // ambiguous time always means ambiguous zone                                                // 1074\n\t\t}                                                                                                                    // 1075\n\t\telse if (parseZone) { // let's record the inputted zone somehow                                                      // 1076\n\t\t\tif (isAmbigZone) {                                                                                                  // 1077\n\t\t\t\tmom._ambigZone = true;                                                                                             // 1078\n\t\t\t}                                                                                                                   // 1079\n\t\t\telse if (isSingleString) {                                                                                          // 1080\n\t\t\t\tif (mom.utcOffset) {                                                                                               // 1081\n\t\t\t\t\tmom.utcOffset(input); // if not a valid zone, will assign UTC                                                     // 1082\n\t\t\t\t}                                                                                                                  // 1083\n\t\t\t\telse {                                                                                                             // 1084\n\t\t\t\t\tmom.zone(input); // for moment-pre-2.9                                                                            // 1085\n\t\t\t\t}                                                                                                                  // 1086\n\t\t\t}                                                                                                                   // 1087\n\t\t}                                                                                                                    // 1088\n\t}                                                                                                                     // 1089\n                                                                                                                       // 1090\n\tmom._fullCalendar = true; // flag for extended functionality                                                          // 1091\n                                                                                                                       // 1092\n\treturn mom;                                                                                                           // 1093\n}                                                                                                                      // 1094\n                                                                                                                       // 1095\n                                                                                                                       // 1096\n// A clone method that works with the flags related to our enhanced functionality.                                     // 1097\n// In the future, use moment.momentProperties                                                                          // 1098\nnewMomentProto.clone = function() {                                                                                    // 1099\n\tvar mom = oldMomentProto.clone.apply(this, arguments);                                                                // 1100\n                                                                                                                       // 1101\n\t// these flags weren't transfered with the clone                                                                      // 1102\n\ttransferAmbigs(this, mom);                                                                                            // 1103\n\tif (this._fullCalendar) {                                                                                             // 1104\n\t\tmom._fullCalendar = true;                                                                                            // 1105\n\t}                                                                                                                     // 1106\n                                                                                                                       // 1107\n\treturn mom;                                                                                                           // 1108\n};                                                                                                                     // 1109\n                                                                                                                       // 1110\n                                                                                                                       // 1111\n// Week Number                                                                                                         // 1112\n// -------------------------------------------------------------------------------------------------                   // 1113\n                                                                                                                       // 1114\n                                                                                                                       // 1115\n// Returns the week number, considering the locale's custom week number calcuation                                     // 1116\n// `weeks` is an alias for `week`                                                                                      // 1117\nnewMomentProto.week = newMomentProto.weeks = function(input) {                                                         // 1118\n\tvar weekCalc = (this._locale || this._lang) // works pre-moment-2.8                                                   // 1119\n\t\t._fullCalendar_weekCalc;                                                                                             // 1120\n                                                                                                                       // 1121\n\tif (input == null && typeof weekCalc === 'function') { // custom function only works for getter                       // 1122\n\t\treturn weekCalc(this);                                                                                               // 1123\n\t}                                                                                                                     // 1124\n\telse if (weekCalc === 'ISO') {                                                                                        // 1125\n\t\treturn oldMomentProto.isoWeek.apply(this, arguments); // ISO getter/setter                                           // 1126\n\t}                                                                                                                     // 1127\n                                                                                                                       // 1128\n\treturn oldMomentProto.week.apply(this, arguments); // local getter/setter                                             // 1129\n};                                                                                                                     // 1130\n                                                                                                                       // 1131\n                                                                                                                       // 1132\n// Time-of-day                                                                                                         // 1133\n// -------------------------------------------------------------------------------------------------                   // 1134\n                                                                                                                       // 1135\n// GETTER                                                                                                              // 1136\n// Returns a Duration with the hours/minutes/seconds/ms values of the moment.                                          // 1137\n// If the moment has an ambiguous time, a duration of 00:00 will be returned.                                          // 1138\n//                                                                                                                     // 1139\n// SETTER                                                                                                              // 1140\n// You can supply a Duration, a Moment, or a Duration-like argument.                                                   // 1141\n// When setting the time, and the moment has an ambiguous time, it then becomes unambiguous.                           // 1142\nnewMomentProto.time = function(time) {                                                                                 // 1143\n                                                                                                                       // 1144\n\t// Fallback to the original method (if there is one) if this moment wasn't created via FullCalendar.                  // 1145\n\t// `time` is a generic enough method name where this precaution is necessary to avoid collisions w/ other plugins.    // 1146\n\tif (!this._fullCalendar) {                                                                                            // 1147\n\t\treturn oldMomentProto.time.apply(this, arguments);                                                                   // 1148\n\t}                                                                                                                     // 1149\n                                                                                                                       // 1150\n\tif (time == null) { // getter                                                                                         // 1151\n\t\treturn moment.duration({                                                                                             // 1152\n\t\t\thours: this.hours(),                                                                                                // 1153\n\t\t\tminutes: this.minutes(),                                                                                            // 1154\n\t\t\tseconds: this.seconds(),                                                                                            // 1155\n\t\t\tmilliseconds: this.milliseconds()                                                                                   // 1156\n\t\t});                                                                                                                  // 1157\n\t}                                                                                                                     // 1158\n\telse { // setter                                                                                                      // 1159\n                                                                                                                       // 1160\n\t\tthis._ambigTime = false; // mark that the moment now has a time                                                      // 1161\n                                                                                                                       // 1162\n\t\tif (!moment.isDuration(time) && !moment.isMoment(time)) {                                                            // 1163\n\t\t\ttime = moment.duration(time);                                                                                       // 1164\n\t\t}                                                                                                                    // 1165\n                                                                                                                       // 1166\n\t\t// The day value should cause overflow (so 24 hours becomes 00:00:00 of next day).                                   // 1167\n\t\t// Only for Duration times, not Moment times.                                                                        // 1168\n\t\tvar dayHours = 0;                                                                                                    // 1169\n\t\tif (moment.isDuration(time)) {                                                                                       // 1170\n\t\t\tdayHours = Math.floor(time.asDays()) * 24;                                                                          // 1171\n\t\t}                                                                                                                    // 1172\n                                                                                                                       // 1173\n\t\t// We need to set the individual fields.                                                                             // 1174\n\t\t// Can't use startOf('day') then add duration. In case of DST at start of day.                                       // 1175\n\t\treturn this.hours(dayHours + time.hours())                                                                           // 1176\n\t\t\t.minutes(time.minutes())                                                                                            // 1177\n\t\t\t.seconds(time.seconds())                                                                                            // 1178\n\t\t\t.milliseconds(time.milliseconds());                                                                                 // 1179\n\t}                                                                                                                     // 1180\n};                                                                                                                     // 1181\n                                                                                                                       // 1182\n// Converts the moment to UTC, stripping out its time-of-day and timezone offset,                                      // 1183\n// but preserving its YMD. A moment with a stripped time will display no time                                          // 1184\n// nor timezone offset when .format() is called.                                                                       // 1185\nnewMomentProto.stripTime = function() {                                                                                // 1186\n\tvar a;                                                                                                                // 1187\n                                                                                                                       // 1188\n\tif (!this._ambigTime) {                                                                                               // 1189\n                                                                                                                       // 1190\n\t\t// get the values before any conversion happens                                                                      // 1191\n\t\ta = this.toArray(); // array of y/m/d/h/m/s/ms                                                                       // 1192\n                                                                                                                       // 1193\n\t\t// TODO: use keepLocalTime in the future                                                                             // 1194\n\t\tthis.utc(); // set the internal UTC flag (will clear the ambig flags)                                                // 1195\n\t\tsetUTCValues(this, a.slice(0, 3)); // set the year/month/date. time will be zero                                     // 1196\n                                                                                                                       // 1197\n\t\t// Mark the time as ambiguous. This needs to happen after the .utc() call, which might call .utcOffset(),            // 1198\n\t\t// which clears all ambig flags. Same with setUTCValues with moment-timezone.                                        // 1199\n\t\tthis._ambigTime = true;                                                                                              // 1200\n\t\tthis._ambigZone = true; // if ambiguous time, also ambiguous timezone offset                                         // 1201\n\t}                                                                                                                     // 1202\n                                                                                                                       // 1203\n\treturn this; // for chaining                                                                                          // 1204\n};                                                                                                                     // 1205\n                                                                                                                       // 1206\n// Returns if the moment has a non-ambiguous time (boolean)                                                            // 1207\nnewMomentProto.hasTime = function() {                                                                                  // 1208\n\treturn !this._ambigTime;                                                                                              // 1209\n};                                                                                                                     // 1210\n                                                                                                                       // 1211\n                                                                                                                       // 1212\n// Timezone                                                                                                            // 1213\n// -------------------------------------------------------------------------------------------------                   // 1214\n                                                                                                                       // 1215\n// Converts the moment to UTC, stripping out its timezone offset, but preserving its                                   // 1216\n// YMD and time-of-day. A moment with a stripped timezone offset will display no                                       // 1217\n// timezone offset when .format() is called.                                                                           // 1218\n// TODO: look into Moment's keepLocalTime functionality                                                                // 1219\nnewMomentProto.stripZone = function() {                                                                                // 1220\n\tvar a, wasAmbigTime;                                                                                                  // 1221\n                                                                                                                       // 1222\n\tif (!this._ambigZone) {                                                                                               // 1223\n                                                                                                                       // 1224\n\t\t// get the values before any conversion happens                                                                      // 1225\n\t\ta = this.toArray(); // array of y/m/d/h/m/s/ms                                                                       // 1226\n\t\twasAmbigTime = this._ambigTime;                                                                                      // 1227\n                                                                                                                       // 1228\n\t\tthis.utc(); // set the internal UTC flag (might clear the ambig flags, depending on Moment internals)                // 1229\n\t\tsetUTCValues(this, a); // will set the year/month/date/hours/minutes/seconds/ms                                      // 1230\n                                                                                                                       // 1231\n\t\t// the above call to .utc()/.utcOffset() unfortunately might clear the ambig flags, so restore                       // 1232\n\t\tthis._ambigTime = wasAmbigTime || false;                                                                             // 1233\n                                                                                                                       // 1234\n\t\t// Mark the zone as ambiguous. This needs to happen after the .utc() call, which might call .utcOffset(),            // 1235\n\t\t// which clears the ambig flags. Same with setUTCValues with moment-timezone.                                        // 1236\n\t\tthis._ambigZone = true;                                                                                              // 1237\n\t}                                                                                                                     // 1238\n                                                                                                                       // 1239\n\treturn this; // for chaining                                                                                          // 1240\n};                                                                                                                     // 1241\n                                                                                                                       // 1242\n// Returns of the moment has a non-ambiguous timezone offset (boolean)                                                 // 1243\nnewMomentProto.hasZone = function() {                                                                                  // 1244\n\treturn !this._ambigZone;                                                                                              // 1245\n};                                                                                                                     // 1246\n                                                                                                                       // 1247\n                                                                                                                       // 1248\n// this method implicitly marks a zone                                                                                 // 1249\nnewMomentProto.local = function() {                                                                                    // 1250\n\tvar a = this.toArray(); // year,month,date,hours,minutes,seconds,ms as an array                                       // 1251\n\tvar wasAmbigZone = this._ambigZone;                                                                                   // 1252\n                                                                                                                       // 1253\n\toldMomentProto.local.apply(this, arguments);                                                                          // 1254\n                                                                                                                       // 1255\n\t// ensure non-ambiguous                                                                                               // 1256\n\t// this probably already happened via local() -> utcOffset(), but don't rely on Moment's internals                    // 1257\n\tthis._ambigTime = false;                                                                                              // 1258\n\tthis._ambigZone = false;                                                                                              // 1259\n                                                                                                                       // 1260\n\tif (wasAmbigZone) {                                                                                                   // 1261\n\t\t// If the moment was ambiguously zoned, the date fields were stored as UTC.                                          // 1262\n\t\t// We want to preserve these, but in local time.                                                                     // 1263\n\t\t// TODO: look into Moment's keepLocalTime functionality                                                              // 1264\n\t\tsetLocalValues(this, a);                                                                                             // 1265\n\t}                                                                                                                     // 1266\n                                                                                                                       // 1267\n\treturn this; // for chaining                                                                                          // 1268\n};                                                                                                                     // 1269\n                                                                                                                       // 1270\n                                                                                                                       // 1271\n// implicitly marks a zone                                                                                             // 1272\nnewMomentProto.utc = function() {                                                                                      // 1273\n\toldMomentProto.utc.apply(this, arguments);                                                                            // 1274\n                                                                                                                       // 1275\n\t// ensure non-ambiguous                                                                                               // 1276\n\t// this probably already happened via utc() -> utcOffset(), but don't rely on Moment's internals                      // 1277\n\tthis._ambigTime = false;                                                                                              // 1278\n\tthis._ambigZone = false;                                                                                              // 1279\n                                                                                                                       // 1280\n\treturn this;                                                                                                          // 1281\n};                                                                                                                     // 1282\n                                                                                                                       // 1283\n                                                                                                                       // 1284\n// methods for arbitrarily manipulating timezone offset.                                                               // 1285\n// should clear time/zone ambiguity when called.                                                                       // 1286\n$.each([                                                                                                               // 1287\n\t'zone', // only in moment-pre-2.9. deprecated afterwards                                                              // 1288\n\t'utcOffset'                                                                                                           // 1289\n], function(i, name) {                                                                                                 // 1290\n\tif (oldMomentProto[name]) { // original method exists?                                                                // 1291\n                                                                                                                       // 1292\n\t\t// this method implicitly marks a zone (will probably get called upon .utc() and .local())                           // 1293\n\t\tnewMomentProto[name] = function(tzo) {                                                                               // 1294\n                                                                                                                       // 1295\n\t\t\tif (tzo != null) { // setter                                                                                        // 1296\n\t\t\t\t// these assignments needs to happen before the original zone method is called.                                    // 1297\n\t\t\t\t// I forget why, something to do with a browser crash.                                                             // 1298\n\t\t\t\tthis._ambigTime = false;                                                                                           // 1299\n\t\t\t\tthis._ambigZone = false;                                                                                           // 1300\n\t\t\t}                                                                                                                   // 1301\n                                                                                                                       // 1302\n\t\t\treturn oldMomentProto[name].apply(this, arguments);                                                                 // 1303\n\t\t};                                                                                                                   // 1304\n\t}                                                                                                                     // 1305\n});                                                                                                                    // 1306\n                                                                                                                       // 1307\n                                                                                                                       // 1308\n// Formatting                                                                                                          // 1309\n// -------------------------------------------------------------------------------------------------                   // 1310\n                                                                                                                       // 1311\nnewMomentProto.format = function() {                                                                                   // 1312\n\tif (this._fullCalendar && arguments[0]) { // an enhanced moment? and a format string provided?                        // 1313\n\t\treturn formatDate(this, arguments[0]); // our extended formatting                                                    // 1314\n\t}                                                                                                                     // 1315\n\tif (this._ambigTime) {                                                                                                // 1316\n\t\treturn oldMomentFormat(this, 'YYYY-MM-DD');                                                                          // 1317\n\t}                                                                                                                     // 1318\n\tif (this._ambigZone) {                                                                                                // 1319\n\t\treturn oldMomentFormat(this, 'YYYY-MM-DD[T]HH:mm:ss');                                                               // 1320\n\t}                                                                                                                     // 1321\n\treturn oldMomentProto.format.apply(this, arguments);                                                                  // 1322\n};                                                                                                                     // 1323\n                                                                                                                       // 1324\nnewMomentProto.toISOString = function() {                                                                              // 1325\n\tif (this._ambigTime) {                                                                                                // 1326\n\t\treturn oldMomentFormat(this, 'YYYY-MM-DD');                                                                          // 1327\n\t}                                                                                                                     // 1328\n\tif (this._ambigZone) {                                                                                                // 1329\n\t\treturn oldMomentFormat(this, 'YYYY-MM-DD[T]HH:mm:ss');                                                               // 1330\n\t}                                                                                                                     // 1331\n\treturn oldMomentProto.toISOString.apply(this, arguments);                                                             // 1332\n};                                                                                                                     // 1333\n                                                                                                                       // 1334\n                                                                                                                       // 1335\n// Querying                                                                                                            // 1336\n// -------------------------------------------------------------------------------------------------                   // 1337\n                                                                                                                       // 1338\n// Is the moment within the specified range? `end` is exclusive.                                                       // 1339\n// FYI, this method is not a standard Moment method, so always do our enhanced logic.                                  // 1340\nnewMomentProto.isWithin = function(start, end) {                                                                       // 1341\n\tvar a = commonlyAmbiguate([ this, start, end ]);                                                                      // 1342\n\treturn a[0] >= a[1] && a[0] < a[2];                                                                                   // 1343\n};                                                                                                                     // 1344\n                                                                                                                       // 1345\n// When isSame is called with units, timezone ambiguity is normalized before the comparison happens.                   // 1346\n// If no units specified, the two moments must be identically the same, with matching ambig flags.                     // 1347\nnewMomentProto.isSame = function(input, units) {                                                                       // 1348\n\tvar a;                                                                                                                // 1349\n                                                                                                                       // 1350\n\t// only do custom logic if this is an enhanced moment                                                                 // 1351\n\tif (!this._fullCalendar) {                                                                                            // 1352\n\t\treturn oldMomentProto.isSame.apply(this, arguments);                                                                 // 1353\n\t}                                                                                                                     // 1354\n                                                                                                                       // 1355\n\tif (units) {                                                                                                          // 1356\n\t\ta = commonlyAmbiguate([ this, input ], true); // normalize timezones but don't erase times                           // 1357\n\t\treturn oldMomentProto.isSame.call(a[0], a[1], units);                                                                // 1358\n\t}                                                                                                                     // 1359\n\telse {                                                                                                                // 1360\n\t\tinput = FC.moment.parseZone(input); // normalize input                                                               // 1361\n\t\treturn oldMomentProto.isSame.call(this, input) &&                                                                    // 1362\n\t\t\tBoolean(this._ambigTime) === Boolean(input._ambigTime) &&                                                           // 1363\n\t\t\tBoolean(this._ambigZone) === Boolean(input._ambigZone);                                                             // 1364\n\t}                                                                                                                     // 1365\n};                                                                                                                     // 1366\n                                                                                                                       // 1367\n// Make these query methods work with ambiguous moments                                                                // 1368\n$.each([                                                                                                               // 1369\n\t'isBefore',                                                                                                           // 1370\n\t'isAfter'                                                                                                             // 1371\n], function(i, methodName) {                                                                                           // 1372\n\tnewMomentProto[methodName] = function(input, units) {                                                                 // 1373\n\t\tvar a;                                                                                                               // 1374\n                                                                                                                       // 1375\n\t\t// only do custom logic if this is an enhanced moment                                                                // 1376\n\t\tif (!this._fullCalendar) {                                                                                           // 1377\n\t\t\treturn oldMomentProto[methodName].apply(this, arguments);                                                           // 1378\n\t\t}                                                                                                                    // 1379\n                                                                                                                       // 1380\n\t\ta = commonlyAmbiguate([ this, input ]);                                                                              // 1381\n\t\treturn oldMomentProto[methodName].call(a[0], a[1], units);                                                           // 1382\n\t};                                                                                                                    // 1383\n});                                                                                                                    // 1384\n                                                                                                                       // 1385\n                                                                                                                       // 1386\n// Misc Internals                                                                                                      // 1387\n// -------------------------------------------------------------------------------------------------                   // 1388\n                                                                                                                       // 1389\n// given an array of moment-like inputs, return a parallel array w/ moments similarly ambiguated.                      // 1390\n// for example, of one moment has ambig time, but not others, all moments will have their time stripped.               // 1391\n// set `preserveTime` to `true` to keep times, but only normalize zone ambiguity.                                      // 1392\n// returns the original moments if no modifications are necessary.                                                     // 1393\nfunction commonlyAmbiguate(inputs, preserveTime) {                                                                     // 1394\n\tvar anyAmbigTime = false;                                                                                             // 1395\n\tvar anyAmbigZone = false;                                                                                             // 1396\n\tvar len = inputs.length;                                                                                              // 1397\n\tvar moms = [];                                                                                                        // 1398\n\tvar i, mom;                                                                                                           // 1399\n                                                                                                                       // 1400\n\t// parse inputs into real moments and query their ambig flags                                                         // 1401\n\tfor (i = 0; i < len; i++) {                                                                                           // 1402\n\t\tmom = inputs[i];                                                                                                     // 1403\n\t\tif (!moment.isMoment(mom)) {                                                                                         // 1404\n\t\t\tmom = FC.moment.parseZone(mom);                                                                                     // 1405\n\t\t}                                                                                                                    // 1406\n\t\tanyAmbigTime = anyAmbigTime || mom._ambigTime;                                                                       // 1407\n\t\tanyAmbigZone = anyAmbigZone || mom._ambigZone;                                                                       // 1408\n\t\tmoms.push(mom);                                                                                                      // 1409\n\t}                                                                                                                     // 1410\n                                                                                                                       // 1411\n\t// strip each moment down to lowest common ambiguity                                                                  // 1412\n\t// use clones to avoid modifying the original moments                                                                 // 1413\n\tfor (i = 0; i < len; i++) {                                                                                           // 1414\n\t\tmom = moms[i];                                                                                                       // 1415\n\t\tif (!preserveTime && anyAmbigTime && !mom._ambigTime) {                                                              // 1416\n\t\t\tmoms[i] = mom.clone().stripTime();                                                                                  // 1417\n\t\t}                                                                                                                    // 1418\n\t\telse if (anyAmbigZone && !mom._ambigZone) {                                                                          // 1419\n\t\t\tmoms[i] = mom.clone().stripZone();                                                                                  // 1420\n\t\t}                                                                                                                    // 1421\n\t}                                                                                                                     // 1422\n                                                                                                                       // 1423\n\treturn moms;                                                                                                          // 1424\n}                                                                                                                      // 1425\n                                                                                                                       // 1426\n// Transfers all the flags related to ambiguous time/zone from the `src` moment to the `dest` moment                   // 1427\n// TODO: look into moment.momentProperties for this.                                                                   // 1428\nfunction transferAmbigs(src, dest) {                                                                                   // 1429\n\tif (src._ambigTime) {                                                                                                 // 1430\n\t\tdest._ambigTime = true;                                                                                              // 1431\n\t}                                                                                                                     // 1432\n\telse if (dest._ambigTime) {                                                                                           // 1433\n\t\tdest._ambigTime = false;                                                                                             // 1434\n\t}                                                                                                                     // 1435\n                                                                                                                       // 1436\n\tif (src._ambigZone) {                                                                                                 // 1437\n\t\tdest._ambigZone = true;                                                                                              // 1438\n\t}                                                                                                                     // 1439\n\telse if (dest._ambigZone) {                                                                                           // 1440\n\t\tdest._ambigZone = false;                                                                                             // 1441\n\t}                                                                                                                     // 1442\n}                                                                                                                      // 1443\n                                                                                                                       // 1444\n                                                                                                                       // 1445\n// Sets the year/month/date/etc values of the moment from the given array.                                             // 1446\n// Inefficient because it calls each individual setter.                                                                // 1447\nfunction setMomentValues(mom, a) {                                                                                     // 1448\n\tmom.year(a[0] || 0)                                                                                                   // 1449\n\t\t.month(a[1] || 0)                                                                                                    // 1450\n\t\t.date(a[2] || 0)                                                                                                     // 1451\n\t\t.hours(a[3] || 0)                                                                                                    // 1452\n\t\t.minutes(a[4] || 0)                                                                                                  // 1453\n\t\t.seconds(a[5] || 0)                                                                                                  // 1454\n\t\t.milliseconds(a[6] || 0);                                                                                            // 1455\n}                                                                                                                      // 1456\n                                                                                                                       // 1457\n// Can we set the moment's internal date directly?                                                                     // 1458\nallowValueOptimization = '_d' in moment() && 'updateOffset' in moment;                                                 // 1459\n                                                                                                                       // 1460\n// Utility function. Accepts a moment and an array of the UTC year/month/date/etc values to set.                       // 1461\n// Assumes the given moment is already in UTC mode.                                                                    // 1462\nsetUTCValues = allowValueOptimization ? function(mom, a) {                                                             // 1463\n\t// simlate what moment's accessors do                                                                                 // 1464\n\tmom._d.setTime(Date.UTC.apply(Date, a));                                                                              // 1465\n\tmoment.updateOffset(mom, false); // keepTime=false                                                                    // 1466\n} : setMomentValues;                                                                                                   // 1467\n                                                                                                                       // 1468\n// Utility function. Accepts a moment and an array of the local year/month/date/etc values to set.                     // 1469\n// Assumes the given moment is already in local mode.                                                                  // 1470\nsetLocalValues = allowValueOptimization ? function(mom, a) {                                                           // 1471\n\t// simlate what moment's accessors do                                                                                 // 1472\n\tmom._d.setTime(+new Date( // FYI, there is now way to apply an array of args to a constructor                         // 1473\n\t\ta[0] || 0,                                                                                                           // 1474\n\t\ta[1] || 0,                                                                                                           // 1475\n\t\ta[2] || 0,                                                                                                           // 1476\n\t\ta[3] || 0,                                                                                                           // 1477\n\t\ta[4] || 0,                                                                                                           // 1478\n\t\ta[5] || 0,                                                                                                           // 1479\n\t\ta[6] || 0                                                                                                            // 1480\n\t));                                                                                                                   // 1481\n\tmoment.updateOffset(mom, false); // keepTime=false                                                                    // 1482\n} : setMomentValues;                                                                                                   // 1483\n                                                                                                                       // 1484\n;;                                                                                                                     // 1485\n                                                                                                                       // 1486\n// Single Date Formatting                                                                                              // 1487\n// -------------------------------------------------------------------------------------------------                   // 1488\n                                                                                                                       // 1489\n                                                                                                                       // 1490\n// call this if you want Moment's original format method to be used                                                    // 1491\nfunction oldMomentFormat(mom, formatStr) {                                                                             // 1492\n\treturn oldMomentProto.format.call(mom, formatStr); // oldMomentProto defined in moment-ext.js                         // 1493\n}                                                                                                                      // 1494\n                                                                                                                       // 1495\n                                                                                                                       // 1496\n// Formats `date` with a Moment formatting string, but allow our non-zero areas and                                    // 1497\n// additional token.                                                                                                   // 1498\nfunction formatDate(date, formatStr) {                                                                                 // 1499\n\treturn formatDateWithChunks(date, getFormatStringChunks(formatStr));                                                  // 1500\n}                                                                                                                      // 1501\n                                                                                                                       // 1502\n                                                                                                                       // 1503\nfunction formatDateWithChunks(date, chunks) {                                                                          // 1504\n\tvar s = '';                                                                                                           // 1505\n\tvar i;                                                                                                                // 1506\n                                                                                                                       // 1507\n\tfor (i=0; i<chunks.length; i++) {                                                                                     // 1508\n\t\ts += formatDateWithChunk(date, chunks[i]);                                                                           // 1509\n\t}                                                                                                                     // 1510\n                                                                                                                       // 1511\n\treturn s;                                                                                                             // 1512\n}                                                                                                                      // 1513\n                                                                                                                       // 1514\n                                                                                                                       // 1515\n// addition formatting tokens we want recognized                                                                       // 1516\nvar tokenOverrides = {                                                                                                 // 1517\n\tt: function(date) { // \"a\" or \"p\"                                                                                     // 1518\n\t\treturn oldMomentFormat(date, 'a').charAt(0);                                                                         // 1519\n\t},                                                                                                                    // 1520\n\tT: function(date) { // \"A\" or \"P\"                                                                                     // 1521\n\t\treturn oldMomentFormat(date, 'A').charAt(0);                                                                         // 1522\n\t}                                                                                                                     // 1523\n};                                                                                                                     // 1524\n                                                                                                                       // 1525\n                                                                                                                       // 1526\nfunction formatDateWithChunk(date, chunk) {                                                                            // 1527\n\tvar token;                                                                                                            // 1528\n\tvar maybeStr;                                                                                                         // 1529\n                                                                                                                       // 1530\n\tif (typeof chunk === 'string') { // a literal string                                                                  // 1531\n\t\treturn chunk;                                                                                                        // 1532\n\t}                                                                                                                     // 1533\n\telse if ((token = chunk.token)) { // a token, like \"YYYY\"                                                             // 1534\n\t\tif (tokenOverrides[token]) {                                                                                         // 1535\n\t\t\treturn tokenOverrides[token](date); // use our custom token                                                         // 1536\n\t\t}                                                                                                                    // 1537\n\t\treturn oldMomentFormat(date, token);                                                                                 // 1538\n\t}                                                                                                                     // 1539\n\telse if (chunk.maybe) { // a grouping of other chunks that must be non-zero                                           // 1540\n\t\tmaybeStr = formatDateWithChunks(date, chunk.maybe);                                                                  // 1541\n\t\tif (maybeStr.match(/[1-9]/)) {                                                                                       // 1542\n\t\t\treturn maybeStr;                                                                                                    // 1543\n\t\t}                                                                                                                    // 1544\n\t}                                                                                                                     // 1545\n                                                                                                                       // 1546\n\treturn '';                                                                                                            // 1547\n}                                                                                                                      // 1548\n                                                                                                                       // 1549\n                                                                                                                       // 1550\n// Date Range Formatting                                                                                               // 1551\n// -------------------------------------------------------------------------------------------------                   // 1552\n// TODO: make it work with timezone offset                                                                             // 1553\n                                                                                                                       // 1554\n// Using a formatting string meant for a single date, generate a range string, like                                    // 1555\n// \"Sep 2 - 9 2013\", that intelligently inserts a separator where the dates differ.                                    // 1556\n// If the dates are the same as far as the format string is concerned, just return a single                            // 1557\n// rendering of one date, without any separator.                                                                       // 1558\nfunction formatRange(date1, date2, formatStr, separator, isRTL) {                                                      // 1559\n\tvar localeData;                                                                                                       // 1560\n                                                                                                                       // 1561\n\tdate1 = FC.moment.parseZone(date1);                                                                                   // 1562\n\tdate2 = FC.moment.parseZone(date2);                                                                                   // 1563\n                                                                                                                       // 1564\n\tlocaleData = (date1.localeData || date1.lang).call(date1); // works with moment-pre-2.8                               // 1565\n                                                                                                                       // 1566\n\t// Expand localized format strings, like \"LL\" -> \"MMMM D YYYY\"                                                        // 1567\n\tformatStr = localeData.longDateFormat(formatStr) || formatStr;                                                        // 1568\n\t// BTW, this is not important for `formatDate` because it is impossible to put custom tokens                          // 1569\n\t// or non-zero areas in Moment's localized format strings.                                                            // 1570\n                                                                                                                       // 1571\n\tseparator = separator || ' - ';                                                                                       // 1572\n                                                                                                                       // 1573\n\treturn formatRangeWithChunks(                                                                                         // 1574\n\t\tdate1,                                                                                                               // 1575\n\t\tdate2,                                                                                                               // 1576\n\t\tgetFormatStringChunks(formatStr),                                                                                    // 1577\n\t\tseparator,                                                                                                           // 1578\n\t\tisRTL                                                                                                                // 1579\n\t);                                                                                                                    // 1580\n}                                                                                                                      // 1581\nFC.formatRange = formatRange; // expose                                                                                // 1582\n                                                                                                                       // 1583\n                                                                                                                       // 1584\nfunction formatRangeWithChunks(date1, date2, chunks, separator, isRTL) {                                               // 1585\n\tvar unzonedDate1 = date1.clone().stripZone(); // for formatSimilarChunk                                               // 1586\n\tvar unzonedDate2 = date2.clone().stripZone(); // \"                                                                    // 1587\n\tvar chunkStr; // the rendering of the chunk                                                                           // 1588\n\tvar leftI;                                                                                                            // 1589\n\tvar leftStr = '';                                                                                                     // 1590\n\tvar rightI;                                                                                                           // 1591\n\tvar rightStr = '';                                                                                                    // 1592\n\tvar middleI;                                                                                                          // 1593\n\tvar middleStr1 = '';                                                                                                  // 1594\n\tvar middleStr2 = '';                                                                                                  // 1595\n\tvar middleStr = '';                                                                                                   // 1596\n                                                                                                                       // 1597\n\t// Start at the leftmost side of the formatting string and continue until you hit a token                             // 1598\n\t// that is not the same between dates.                                                                                // 1599\n\tfor (leftI=0; leftI<chunks.length; leftI++) {                                                                         // 1600\n\t\tchunkStr = formatSimilarChunk(date1, date2, unzonedDate1, unzonedDate2, chunks[leftI]);                              // 1601\n\t\tif (chunkStr === false) {                                                                                            // 1602\n\t\t\tbreak;                                                                                                              // 1603\n\t\t}                                                                                                                    // 1604\n\t\tleftStr += chunkStr;                                                                                                 // 1605\n\t}                                                                                                                     // 1606\n                                                                                                                       // 1607\n\t// Similarly, start at the rightmost side of the formatting string and move left                                      // 1608\n\tfor (rightI=chunks.length-1; rightI>leftI; rightI--) {                                                                // 1609\n\t\tchunkStr = formatSimilarChunk(date1, date2, unzonedDate1, unzonedDate2,  chunks[rightI]);                            // 1610\n\t\tif (chunkStr === false) {                                                                                            // 1611\n\t\t\tbreak;                                                                                                              // 1612\n\t\t}                                                                                                                    // 1613\n\t\trightStr = chunkStr + rightStr;                                                                                      // 1614\n\t}                                                                                                                     // 1615\n                                                                                                                       // 1616\n\t// The area in the middle is different for both of the dates.                                                         // 1617\n\t// Collect them distinctly so we can jam them together later.                                                         // 1618\n\tfor (middleI=leftI; middleI<=rightI; middleI++) {                                                                     // 1619\n\t\tmiddleStr1 += formatDateWithChunk(date1, chunks[middleI]);                                                           // 1620\n\t\tmiddleStr2 += formatDateWithChunk(date2, chunks[middleI]);                                                           // 1621\n\t}                                                                                                                     // 1622\n                                                                                                                       // 1623\n\tif (middleStr1 || middleStr2) {                                                                                       // 1624\n\t\tif (isRTL) {                                                                                                         // 1625\n\t\t\tmiddleStr = middleStr2 + separator + middleStr1;                                                                    // 1626\n\t\t}                                                                                                                    // 1627\n\t\telse {                                                                                                               // 1628\n\t\t\tmiddleStr = middleStr1 + separator + middleStr2;                                                                    // 1629\n\t\t}                                                                                                                    // 1630\n\t}                                                                                                                     // 1631\n                                                                                                                       // 1632\n\treturn leftStr + middleStr + rightStr;                                                                                // 1633\n}                                                                                                                      // 1634\n                                                                                                                       // 1635\n                                                                                                                       // 1636\nvar similarUnitMap = {                                                                                                 // 1637\n\tY: 'year',                                                                                                            // 1638\n\tM: 'month',                                                                                                           // 1639\n\tD: 'day', // day of month                                                                                             // 1640\n\td: 'day', // day of week                                                                                              // 1641\n\t// prevents a separator between anything time-related...                                                              // 1642\n\tA: 'second', // AM/PM                                                                                                 // 1643\n\ta: 'second', // am/pm                                                                                                 // 1644\n\tT: 'second', // A/P                                                                                                   // 1645\n\tt: 'second', // a/p                                                                                                   // 1646\n\tH: 'second', // hour (24)                                                                                             // 1647\n\th: 'second', // hour (12)                                                                                             // 1648\n\tm: 'second', // minute                                                                                                // 1649\n\ts: 'second' // second                                                                                                 // 1650\n};                                                                                                                     // 1651\n// TODO: week maybe?                                                                                                   // 1652\n                                                                                                                       // 1653\n                                                                                                                       // 1654\n// Given a formatting chunk, and given that both dates are similar in the regard the                                   // 1655\n// formatting chunk is concerned, format date1 against `chunk`. Otherwise, return `false`.                             // 1656\nfunction formatSimilarChunk(date1, date2, unzonedDate1, unzonedDate2, chunk) {                                         // 1657\n\tvar token;                                                                                                            // 1658\n\tvar unit;                                                                                                             // 1659\n                                                                                                                       // 1660\n\tif (typeof chunk === 'string') { // a literal string                                                                  // 1661\n\t\treturn chunk;                                                                                                        // 1662\n\t}                                                                                                                     // 1663\n\telse if ((token = chunk.token)) {                                                                                     // 1664\n\t\tunit = similarUnitMap[token.charAt(0)];                                                                              // 1665\n                                                                                                                       // 1666\n\t\t// are the dates the same for this unit of measurement?                                                              // 1667\n\t\t// use the unzoned dates for this calculation because unreliable when near DST (bug #2396)                           // 1668\n\t\tif (unit && unzonedDate1.isSame(unzonedDate2, unit)) {                                                               // 1669\n\t\t\treturn oldMomentFormat(date1, token); // would be the same if we used `date2`                                       // 1670\n\t\t\t// BTW, don't support custom tokens                                                                                 // 1671\n\t\t}                                                                                                                    // 1672\n\t}                                                                                                                     // 1673\n                                                                                                                       // 1674\n\treturn false; // the chunk is NOT the same for the two dates                                                          // 1675\n\t// BTW, don't support splitting on non-zero areas                                                                     // 1676\n}                                                                                                                      // 1677\n                                                                                                                       // 1678\n                                                                                                                       // 1679\n// Chunking Utils                                                                                                      // 1680\n// -------------------------------------------------------------------------------------------------                   // 1681\n                                                                                                                       // 1682\n                                                                                                                       // 1683\nvar formatStringChunkCache = {};                                                                                       // 1684\n                                                                                                                       // 1685\n                                                                                                                       // 1686\nfunction getFormatStringChunks(formatStr) {                                                                            // 1687\n\tif (formatStr in formatStringChunkCache) {                                                                            // 1688\n\t\treturn formatStringChunkCache[formatStr];                                                                            // 1689\n\t}                                                                                                                     // 1690\n\treturn (formatStringChunkCache[formatStr] = chunkFormatString(formatStr));                                            // 1691\n}                                                                                                                      // 1692\n                                                                                                                       // 1693\n                                                                                                                       // 1694\n// Break the formatting string into an array of chunks                                                                 // 1695\nfunction chunkFormatString(formatStr) {                                                                                // 1696\n\tvar chunks = [];                                                                                                      // 1697\n\tvar chunker = /\\[([^\\]]*)\\]|\\(([^\\)]*)\\)|(LTS|LT|(\\w)\\4*o?)|([^\\w\\[\\(]+)/g; // TODO: more descrimination              // 1698\n\tvar match;                                                                                                            // 1699\n                                                                                                                       // 1700\n\twhile ((match = chunker.exec(formatStr))) {                                                                           // 1701\n\t\tif (match[1]) { // a literal string inside [ ... ]                                                                   // 1702\n\t\t\tchunks.push(match[1]);                                                                                              // 1703\n\t\t}                                                                                                                    // 1704\n\t\telse if (match[2]) { // non-zero formatting inside ( ... )                                                           // 1705\n\t\t\tchunks.push({ maybe: chunkFormatString(match[2]) });                                                                // 1706\n\t\t}                                                                                                                    // 1707\n\t\telse if (match[3]) { // a formatting token                                                                           // 1708\n\t\t\tchunks.push({ token: match[3] });                                                                                   // 1709\n\t\t}                                                                                                                    // 1710\n\t\telse if (match[5]) { // an unenclosed literal string                                                                 // 1711\n\t\t\tchunks.push(match[5]);                                                                                              // 1712\n\t\t}                                                                                                                    // 1713\n\t}                                                                                                                     // 1714\n                                                                                                                       // 1715\n\treturn chunks;                                                                                                        // 1716\n}                                                                                                                      // 1717\n                                                                                                                       // 1718\n;;                                                                                                                     // 1719\n                                                                                                                       // 1720\nFC.Class = Class; // export                                                                                            // 1721\n                                                                                                                       // 1722\n// Class that all other classes will inherit from                                                                      // 1723\nfunction Class() { }                                                                                                   // 1724\n                                                                                                                       // 1725\n                                                                                                                       // 1726\n// Called on a class to create a subclass.                                                                             // 1727\n// Last argument contains instance methods. Any argument before the last are considered mixins.                        // 1728\nClass.extend = function() {                                                                                            // 1729\n\tvar len = arguments.length;                                                                                           // 1730\n\tvar i;                                                                                                                // 1731\n\tvar members;                                                                                                          // 1732\n                                                                                                                       // 1733\n\tfor (i = 0; i < len; i++) {                                                                                           // 1734\n\t\tmembers = arguments[i];                                                                                              // 1735\n\t\tif (i < len - 1) { // not the last argument?                                                                         // 1736\n\t\t\tmixIntoClass(this, members);                                                                                        // 1737\n\t\t}                                                                                                                    // 1738\n\t}                                                                                                                     // 1739\n                                                                                                                       // 1740\n\treturn extendClass(this, members || {}); // members will be undefined if no arguments                                 // 1741\n};                                                                                                                     // 1742\n                                                                                                                       // 1743\n                                                                                                                       // 1744\n// Adds new member variables/methods to the class's prototype.                                                         // 1745\n// Can be called with another class, or a plain object hash containing new members.                                    // 1746\nClass.mixin = function(members) {                                                                                      // 1747\n\tmixIntoClass(this, members);                                                                                          // 1748\n};                                                                                                                     // 1749\n                                                                                                                       // 1750\n                                                                                                                       // 1751\nfunction extendClass(superClass, members) {                                                                            // 1752\n\tvar subClass;                                                                                                         // 1753\n                                                                                                                       // 1754\n\t// ensure a constructor for the subclass, forwarding all arguments to the super-constructor if it doesn't exist       // 1755\n\tif (hasOwnProp(members, 'constructor')) {                                                                             // 1756\n\t\tsubClass = members.constructor;                                                                                      // 1757\n\t}                                                                                                                     // 1758\n\tif (typeof subClass !== 'function') {                                                                                 // 1759\n\t\tsubClass = members.constructor = function() {                                                                        // 1760\n\t\t\tsuperClass.apply(this, arguments);                                                                                  // 1761\n\t\t};                                                                                                                   // 1762\n\t}                                                                                                                     // 1763\n                                                                                                                       // 1764\n\t// build the base prototype for the subclass, which is an new object chained to the superclass's prototype            // 1765\n\tsubClass.prototype = createObject(superClass.prototype);                                                              // 1766\n                                                                                                                       // 1767\n\t// copy each member variable/method onto the the subclass's prototype                                                 // 1768\n\tcopyOwnProps(members, subClass.prototype);                                                                            // 1769\n\tcopyNativeMethods(members, subClass.prototype); // hack for IE8                                                       // 1770\n                                                                                                                       // 1771\n\t// copy over all class variables/methods to the subclass, such as `extend` and `mixin`                                // 1772\n\tcopyOwnProps(superClass, subClass);                                                                                   // 1773\n                                                                                                                       // 1774\n\treturn subClass;                                                                                                      // 1775\n}                                                                                                                      // 1776\n                                                                                                                       // 1777\n                                                                                                                       // 1778\nfunction mixIntoClass(theClass, members) {                                                                             // 1779\n\tcopyOwnProps(members.prototype || members, theClass.prototype); // TODO: copyNativeMethods?                           // 1780\n}                                                                                                                      // 1781\n;;                                                                                                                     // 1782\n                                                                                                                       // 1783\nvar Emitter = FC.Emitter = Class.extend({                                                                              // 1784\n                                                                                                                       // 1785\n\tcallbackHash: null,                                                                                                   // 1786\n                                                                                                                       // 1787\n                                                                                                                       // 1788\n\ton: function(name, callback) {                                                                                        // 1789\n\t\tthis.getCallbacks(name).add(callback);                                                                               // 1790\n\t\treturn this; // for chaining                                                                                         // 1791\n\t},                                                                                                                    // 1792\n                                                                                                                       // 1793\n                                                                                                                       // 1794\n\toff: function(name, callback) {                                                                                       // 1795\n\t\tthis.getCallbacks(name).remove(callback);                                                                            // 1796\n\t\treturn this; // for chaining                                                                                         // 1797\n\t},                                                                                                                    // 1798\n                                                                                                                       // 1799\n                                                                                                                       // 1800\n\ttrigger: function(name) { // args...                                                                                  // 1801\n\t\tvar args = Array.prototype.slice.call(arguments, 1);                                                                 // 1802\n                                                                                                                       // 1803\n\t\tthis.triggerWith(name, this, args);                                                                                  // 1804\n                                                                                                                       // 1805\n\t\treturn this; // for chaining                                                                                         // 1806\n\t},                                                                                                                    // 1807\n                                                                                                                       // 1808\n                                                                                                                       // 1809\n\ttriggerWith: function(name, context, args) {                                                                          // 1810\n\t\tvar callbacks = this.getCallbacks(name);                                                                             // 1811\n                                                                                                                       // 1812\n\t\tcallbacks.fireWith(context, args);                                                                                   // 1813\n                                                                                                                       // 1814\n\t\treturn this; // for chaining                                                                                         // 1815\n\t},                                                                                                                    // 1816\n                                                                                                                       // 1817\n                                                                                                                       // 1818\n\tgetCallbacks: function(name) {                                                                                        // 1819\n\t\tvar callbacks;                                                                                                       // 1820\n                                                                                                                       // 1821\n\t\tif (!this.callbackHash) {                                                                                            // 1822\n\t\t\tthis.callbackHash = {};                                                                                             // 1823\n\t\t}                                                                                                                    // 1824\n                                                                                                                       // 1825\n\t\tcallbacks = this.callbackHash[name];                                                                                 // 1826\n\t\tif (!callbacks) {                                                                                                    // 1827\n\t\t\tcallbacks = this.callbackHash[name] = $.Callbacks();                                                                // 1828\n\t\t}                                                                                                                    // 1829\n                                                                                                                       // 1830\n\t\treturn callbacks;                                                                                                    // 1831\n\t}                                                                                                                     // 1832\n                                                                                                                       // 1833\n});                                                                                                                    // 1834\n;;                                                                                                                     // 1835\n                                                                                                                       // 1836\n/* A rectangular panel that is absolutely positioned over other content                                                // 1837\n------------------------------------------------------------------------------------------------------------------------\nOptions:                                                                                                               // 1839\n\t- className (string)                                                                                                  // 1840\n\t- content (HTML string or jQuery element set)                                                                         // 1841\n\t- parentEl                                                                                                            // 1842\n\t- top                                                                                                                 // 1843\n\t- left                                                                                                                // 1844\n\t- right (the x coord of where the right edge should be. not a \"CSS\" right)                                            // 1845\n\t- autoHide (boolean)                                                                                                  // 1846\n\t- show (callback)                                                                                                     // 1847\n\t- hide (callback)                                                                                                     // 1848\n*/                                                                                                                     // 1849\n                                                                                                                       // 1850\nvar Popover = Class.extend({                                                                                           // 1851\n                                                                                                                       // 1852\n\tisHidden: true,                                                                                                       // 1853\n\toptions: null,                                                                                                        // 1854\n\tel: null, // the container element for the popover. generated by this object                                          // 1855\n\tdocumentMousedownProxy: null, // document mousedown handler bound to `this`                                           // 1856\n\tmargin: 10, // the space required between the popover and the edges of the scroll container                           // 1857\n                                                                                                                       // 1858\n                                                                                                                       // 1859\n\tconstructor: function(options) {                                                                                      // 1860\n\t\tthis.options = options || {};                                                                                        // 1861\n\t},                                                                                                                    // 1862\n                                                                                                                       // 1863\n                                                                                                                       // 1864\n\t// Shows the popover on the specified position. Renders it if not already                                             // 1865\n\tshow: function() {                                                                                                    // 1866\n\t\tif (this.isHidden) {                                                                                                 // 1867\n\t\t\tif (!this.el) {                                                                                                     // 1868\n\t\t\t\tthis.render();                                                                                                     // 1869\n\t\t\t}                                                                                                                   // 1870\n\t\t\tthis.el.show();                                                                                                     // 1871\n\t\t\tthis.position();                                                                                                    // 1872\n\t\t\tthis.isHidden = false;                                                                                              // 1873\n\t\t\tthis.trigger('show');                                                                                               // 1874\n\t\t}                                                                                                                    // 1875\n\t},                                                                                                                    // 1876\n                                                                                                                       // 1877\n                                                                                                                       // 1878\n\t// Hides the popover, through CSS, but does not remove it from the DOM                                                // 1879\n\thide: function() {                                                                                                    // 1880\n\t\tif (!this.isHidden) {                                                                                                // 1881\n\t\t\tthis.el.hide();                                                                                                     // 1882\n\t\t\tthis.isHidden = true;                                                                                               // 1883\n\t\t\tthis.trigger('hide');                                                                                               // 1884\n\t\t}                                                                                                                    // 1885\n\t},                                                                                                                    // 1886\n                                                                                                                       // 1887\n                                                                                                                       // 1888\n\t// Creates `this.el` and renders content inside of it                                                                 // 1889\n\trender: function() {                                                                                                  // 1890\n\t\tvar _this = this;                                                                                                    // 1891\n\t\tvar options = this.options;                                                                                          // 1892\n                                                                                                                       // 1893\n\t\tthis.el = $('<div class=\"fc-popover\"/>')                                                                             // 1894\n\t\t\t.addClass(options.className || '')                                                                                  // 1895\n\t\t\t.css({                                                                                                              // 1896\n\t\t\t\t// position initially to the top left to avoid creating scrollbars                                                 // 1897\n\t\t\t\ttop: 0,                                                                                                            // 1898\n\t\t\t\tleft: 0                                                                                                            // 1899\n\t\t\t})                                                                                                                  // 1900\n\t\t\t.append(options.content)                                                                                            // 1901\n\t\t\t.appendTo(options.parentEl);                                                                                        // 1902\n                                                                                                                       // 1903\n\t\t// when a click happens on anything inside with a 'fc-close' className, hide the popover                             // 1904\n\t\tthis.el.on('click', '.fc-close', function() {                                                                        // 1905\n\t\t\t_this.hide();                                                                                                       // 1906\n\t\t});                                                                                                                  // 1907\n                                                                                                                       // 1908\n\t\tif (options.autoHide) {                                                                                              // 1909\n\t\t\t$(document).on('mousedown', this.documentMousedownProxy = proxy(this, 'documentMousedown'));                        // 1910\n\t\t}                                                                                                                    // 1911\n\t},                                                                                                                    // 1912\n                                                                                                                       // 1913\n                                                                                                                       // 1914\n\t// Triggered when the user clicks *anywhere* in the document, for the autoHide feature                                // 1915\n\tdocumentMousedown: function(ev) {                                                                                     // 1916\n\t\t// only hide the popover if the click happened outside the popover                                                   // 1917\n\t\tif (this.el && !$(ev.target).closest(this.el).length) {                                                              // 1918\n\t\t\tthis.hide();                                                                                                        // 1919\n\t\t}                                                                                                                    // 1920\n\t},                                                                                                                    // 1921\n                                                                                                                       // 1922\n                                                                                                                       // 1923\n\t// Hides and unregisters any handlers                                                                                 // 1924\n\tremoveElement: function() {                                                                                           // 1925\n\t\tthis.hide();                                                                                                         // 1926\n                                                                                                                       // 1927\n\t\tif (this.el) {                                                                                                       // 1928\n\t\t\tthis.el.remove();                                                                                                   // 1929\n\t\t\tthis.el = null;                                                                                                     // 1930\n\t\t}                                                                                                                    // 1931\n                                                                                                                       // 1932\n\t\t$(document).off('mousedown', this.documentMousedownProxy);                                                           // 1933\n\t},                                                                                                                    // 1934\n                                                                                                                       // 1935\n                                                                                                                       // 1936\n\t// Positions the popover optimally, using the top/left/right options                                                  // 1937\n\tposition: function() {                                                                                                // 1938\n\t\tvar options = this.options;                                                                                          // 1939\n\t\tvar origin = this.el.offsetParent().offset();                                                                        // 1940\n\t\tvar width = this.el.outerWidth();                                                                                    // 1941\n\t\tvar height = this.el.outerHeight();                                                                                  // 1942\n\t\tvar windowEl = $(window);                                                                                            // 1943\n\t\tvar viewportEl = getScrollParent(this.el);                                                                           // 1944\n\t\tvar viewportTop;                                                                                                     // 1945\n\t\tvar viewportLeft;                                                                                                    // 1946\n\t\tvar viewportOffset;                                                                                                  // 1947\n\t\tvar top; // the \"position\" (not \"offset\") values for the popover                                                     // 1948\n\t\tvar left; //                                                                                                         // 1949\n                                                                                                                       // 1950\n\t\t// compute top and left                                                                                              // 1951\n\t\ttop = options.top || 0;                                                                                              // 1952\n\t\tif (options.left !== undefined) {                                                                                    // 1953\n\t\t\tleft = options.left;                                                                                                // 1954\n\t\t}                                                                                                                    // 1955\n\t\telse if (options.right !== undefined) {                                                                              // 1956\n\t\t\tleft = options.right - width; // derive the left value from the right value                                         // 1957\n\t\t}                                                                                                                    // 1958\n\t\telse {                                                                                                               // 1959\n\t\t\tleft = 0;                                                                                                           // 1960\n\t\t}                                                                                                                    // 1961\n                                                                                                                       // 1962\n\t\tif (viewportEl.is(window) || viewportEl.is(document)) { // normalize getScrollParent's result                        // 1963\n\t\t\tviewportEl = windowEl;                                                                                              // 1964\n\t\t\tviewportTop = 0; // the window is always at the top left                                                            // 1965\n\t\t\tviewportLeft = 0; // (and .offset() won't work if called here)                                                      // 1966\n\t\t}                                                                                                                    // 1967\n\t\telse {                                                                                                               // 1968\n\t\t\tviewportOffset = viewportEl.offset();                                                                               // 1969\n\t\t\tviewportTop = viewportOffset.top;                                                                                   // 1970\n\t\t\tviewportLeft = viewportOffset.left;                                                                                 // 1971\n\t\t}                                                                                                                    // 1972\n                                                                                                                       // 1973\n\t\t// if the window is scrolled, it causes the visible area to be further down                                          // 1974\n\t\tviewportTop += windowEl.scrollTop();                                                                                 // 1975\n\t\tviewportLeft += windowEl.scrollLeft();                                                                               // 1976\n                                                                                                                       // 1977\n\t\t// constrain to the view port. if constrained by two edges, give precedence to top/left                              // 1978\n\t\tif (options.viewportConstrain !== false) {                                                                           // 1979\n\t\t\ttop = Math.min(top, viewportTop + viewportEl.outerHeight() - height - this.margin);                                 // 1980\n\t\t\ttop = Math.max(top, viewportTop + this.margin);                                                                     // 1981\n\t\t\tleft = Math.min(left, viewportLeft + viewportEl.outerWidth() - width - this.margin);                                // 1982\n\t\t\tleft = Math.max(left, viewportLeft + this.margin);                                                                  // 1983\n\t\t}                                                                                                                    // 1984\n                                                                                                                       // 1985\n\t\tthis.el.css({                                                                                                        // 1986\n\t\t\ttop: top - origin.top,                                                                                              // 1987\n\t\t\tleft: left - origin.left                                                                                            // 1988\n\t\t});                                                                                                                  // 1989\n\t},                                                                                                                    // 1990\n                                                                                                                       // 1991\n                                                                                                                       // 1992\n\t// Triggers a callback. Calls a function in the option hash of the same name.                                         // 1993\n\t// Arguments beyond the first `name` are forwarded on.                                                                // 1994\n\t// TODO: better code reuse for this. Repeat code                                                                      // 1995\n\ttrigger: function(name) {                                                                                             // 1996\n\t\tif (this.options[name]) {                                                                                            // 1997\n\t\t\tthis.options[name].apply(this, Array.prototype.slice.call(arguments, 1));                                           // 1998\n\t\t}                                                                                                                    // 1999\n\t}                                                                                                                     // 2000\n                                                                                                                       // 2001\n});                                                                                                                    // 2002\n                                                                                                                       // 2003\n;;                                                                                                                     // 2004\n                                                                                                                       // 2005\n/*                                                                                                                     // 2006\nA cache for the left/right/top/bottom/width/height values for one or more elements.                                    // 2007\nWorks with both offset (from topleft document) and position (from offsetParent).                                       // 2008\n                                                                                                                       // 2009\noptions:                                                                                                               // 2010\n- els                                                                                                                  // 2011\n- isHorizontal                                                                                                         // 2012\n- isVertical                                                                                                           // 2013\n*/                                                                                                                     // 2014\nvar CoordCache = FC.CoordCache = Class.extend({                                                                        // 2015\n                                                                                                                       // 2016\n\tels: null, // jQuery set (assumed to be siblings)                                                                     // 2017\n\tforcedOffsetParentEl: null, // options can override the natural offsetParent                                          // 2018\n\torigin: null, // {left,top} position of offsetParent of els                                                           // 2019\n\tboundingRect: null, // constrain cordinates to this rectangle. {left,right,top,bottom} or null                        // 2020\n\tisHorizontal: false, // whether to query for left/right/width                                                         // 2021\n\tisVertical: false, // whether to query for top/bottom/height                                                          // 2022\n                                                                                                                       // 2023\n\t// arrays of coordinates (offsets from topleft of document)                                                           // 2024\n\tlefts: null,                                                                                                          // 2025\n\trights: null,                                                                                                         // 2026\n\ttops: null,                                                                                                           // 2027\n\tbottoms: null,                                                                                                        // 2028\n                                                                                                                       // 2029\n                                                                                                                       // 2030\n\tconstructor: function(options) {                                                                                      // 2031\n\t\tthis.els = $(options.els);                                                                                           // 2032\n\t\tthis.isHorizontal = options.isHorizontal;                                                                            // 2033\n\t\tthis.isVertical = options.isVertical;                                                                                // 2034\n\t\tthis.forcedOffsetParentEl = options.offsetParent ? $(options.offsetParent) : null;                                   // 2035\n\t},                                                                                                                    // 2036\n                                                                                                                       // 2037\n                                                                                                                       // 2038\n\t// Queries the els for coordinates and stores them.                                                                   // 2039\n\t// Call this method before using and of the get* methods below.                                                       // 2040\n\tbuild: function() {                                                                                                   // 2041\n\t\tvar offsetParentEl = this.forcedOffsetParentEl || this.els.eq(0).offsetParent();                                     // 2042\n                                                                                                                       // 2043\n\t\tthis.origin = offsetParentEl.offset();                                                                               // 2044\n\t\tthis.boundingRect = this.queryBoundingRect();                                                                        // 2045\n                                                                                                                       // 2046\n\t\tif (this.isHorizontal) {                                                                                             // 2047\n\t\t\tthis.buildElHorizontals();                                                                                          // 2048\n\t\t}                                                                                                                    // 2049\n\t\tif (this.isVertical) {                                                                                               // 2050\n\t\t\tthis.buildElVerticals();                                                                                            // 2051\n\t\t}                                                                                                                    // 2052\n\t},                                                                                                                    // 2053\n                                                                                                                       // 2054\n                                                                                                                       // 2055\n\t// Destroys all internal data about coordinates, freeing memory                                                       // 2056\n\tclear: function() {                                                                                                   // 2057\n\t\tthis.origin = null;                                                                                                  // 2058\n\t\tthis.boundingRect = null;                                                                                            // 2059\n\t\tthis.lefts = null;                                                                                                   // 2060\n\t\tthis.rights = null;                                                                                                  // 2061\n\t\tthis.tops = null;                                                                                                    // 2062\n\t\tthis.bottoms = null;                                                                                                 // 2063\n\t},                                                                                                                    // 2064\n                                                                                                                       // 2065\n                                                                                                                       // 2066\n\t// Compute and return what the elements' bounding rectangle is, from the user's perspective.                          // 2067\n\t// Right now, only returns a rectangle if constrained by an overflow:scroll element.                                  // 2068\n\tqueryBoundingRect: function() {                                                                                       // 2069\n\t\tvar scrollParentEl = getScrollParent(this.els.eq(0));                                                                // 2070\n                                                                                                                       // 2071\n\t\tif (!scrollParentEl.is(document)) {                                                                                  // 2072\n\t\t\treturn getClientRect(scrollParentEl);                                                                               // 2073\n\t\t}                                                                                                                    // 2074\n\t},                                                                                                                    // 2075\n                                                                                                                       // 2076\n                                                                                                                       // 2077\n\t// Populates the left/right internal coordinate arrays                                                                // 2078\n\tbuildElHorizontals: function() {                                                                                      // 2079\n\t\tvar lefts = [];                                                                                                      // 2080\n\t\tvar rights = [];                                                                                                     // 2081\n                                                                                                                       // 2082\n\t\tthis.els.each(function(i, node) {                                                                                    // 2083\n\t\t\tvar el = $(node);                                                                                                   // 2084\n\t\t\tvar left = el.offset().left;                                                                                        // 2085\n\t\t\tvar width = el.outerWidth();                                                                                        // 2086\n                                                                                                                       // 2087\n\t\t\tlefts.push(left);                                                                                                   // 2088\n\t\t\trights.push(left + width);                                                                                          // 2089\n\t\t});                                                                                                                  // 2090\n                                                                                                                       // 2091\n\t\tthis.lefts = lefts;                                                                                                  // 2092\n\t\tthis.rights = rights;                                                                                                // 2093\n\t},                                                                                                                    // 2094\n                                                                                                                       // 2095\n                                                                                                                       // 2096\n\t// Populates the top/bottom internal coordinate arrays                                                                // 2097\n\tbuildElVerticals: function() {                                                                                        // 2098\n\t\tvar tops = [];                                                                                                       // 2099\n\t\tvar bottoms = [];                                                                                                    // 2100\n                                                                                                                       // 2101\n\t\tthis.els.each(function(i, node) {                                                                                    // 2102\n\t\t\tvar el = $(node);                                                                                                   // 2103\n\t\t\tvar top = el.offset().top;                                                                                          // 2104\n\t\t\tvar height = el.outerHeight();                                                                                      // 2105\n                                                                                                                       // 2106\n\t\t\ttops.push(top);                                                                                                     // 2107\n\t\t\tbottoms.push(top + height);                                                                                         // 2108\n\t\t});                                                                                                                  // 2109\n                                                                                                                       // 2110\n\t\tthis.tops = tops;                                                                                                    // 2111\n\t\tthis.bottoms = bottoms;                                                                                              // 2112\n\t},                                                                                                                    // 2113\n                                                                                                                       // 2114\n                                                                                                                       // 2115\n\t// Given a left offset (from document left), returns the index of the el that it horizontally intersects.             // 2116\n\t// If no intersection is made, or outside of the boundingRect, returns undefined.                                     // 2117\n\tgetHorizontalIndex: function(leftOffset) {                                                                            // 2118\n\t\tvar boundingRect = this.boundingRect;                                                                                // 2119\n\t\tvar lefts = this.lefts;                                                                                              // 2120\n\t\tvar rights = this.rights;                                                                                            // 2121\n\t\tvar len = lefts.length;                                                                                              // 2122\n\t\tvar i;                                                                                                               // 2123\n                                                                                                                       // 2124\n\t\tif (!boundingRect || (leftOffset >= boundingRect.left && leftOffset < boundingRect.right)) {                         // 2125\n\t\t\tfor (i = 0; i < len; i++) {                                                                                         // 2126\n\t\t\t\tif (leftOffset >= lefts[i] && leftOffset < rights[i]) {                                                            // 2127\n\t\t\t\t\treturn i;                                                                                                         // 2128\n\t\t\t\t}                                                                                                                  // 2129\n\t\t\t}                                                                                                                   // 2130\n\t\t}                                                                                                                    // 2131\n\t},                                                                                                                    // 2132\n                                                                                                                       // 2133\n                                                                                                                       // 2134\n\t// Given a top offset (from document top), returns the index of the el that it vertically intersects.                 // 2135\n\t// If no intersection is made, or outside of the boundingRect, returns undefined.                                     // 2136\n\tgetVerticalIndex: function(topOffset) {                                                                               // 2137\n\t\tvar boundingRect = this.boundingRect;                                                                                // 2138\n\t\tvar tops = this.tops;                                                                                                // 2139\n\t\tvar bottoms = this.bottoms;                                                                                          // 2140\n\t\tvar len = tops.length;                                                                                               // 2141\n\t\tvar i;                                                                                                               // 2142\n                                                                                                                       // 2143\n\t\tif (!boundingRect || (topOffset >= boundingRect.top && topOffset < boundingRect.bottom)) {                           // 2144\n\t\t\tfor (i = 0; i < len; i++) {                                                                                         // 2145\n\t\t\t\tif (topOffset >= tops[i] && topOffset < bottoms[i]) {                                                              // 2146\n\t\t\t\t\treturn i;                                                                                                         // 2147\n\t\t\t\t}                                                                                                                  // 2148\n\t\t\t}                                                                                                                   // 2149\n\t\t}                                                                                                                    // 2150\n\t},                                                                                                                    // 2151\n                                                                                                                       // 2152\n                                                                                                                       // 2153\n\t// Gets the left offset (from document left) of the element at the given index                                        // 2154\n\tgetLeftOffset: function(leftIndex) {                                                                                  // 2155\n\t\treturn this.lefts[leftIndex];                                                                                        // 2156\n\t},                                                                                                                    // 2157\n                                                                                                                       // 2158\n                                                                                                                       // 2159\n\t// Gets the left position (from offsetParent left) of the element at the given index                                  // 2160\n\tgetLeftPosition: function(leftIndex) {                                                                                // 2161\n\t\treturn this.lefts[leftIndex] - this.origin.left;                                                                     // 2162\n\t},                                                                                                                    // 2163\n                                                                                                                       // 2164\n                                                                                                                       // 2165\n\t// Gets the right offset (from document left) of the element at the given index.                                      // 2166\n\t// This value is NOT relative to the document's right edge, like the CSS concept of \"right\" would be.                 // 2167\n\tgetRightOffset: function(leftIndex) {                                                                                 // 2168\n\t\treturn this.rights[leftIndex];                                                                                       // 2169\n\t},                                                                                                                    // 2170\n                                                                                                                       // 2171\n                                                                                                                       // 2172\n\t// Gets the right position (from offsetParent left) of the element at the given index.                                // 2173\n\t// This value is NOT relative to the offsetParent's right edge, like the CSS concept of \"right\" would be.             // 2174\n\tgetRightPosition: function(leftIndex) {                                                                               // 2175\n\t\treturn this.rights[leftIndex] - this.origin.left;                                                                    // 2176\n\t},                                                                                                                    // 2177\n                                                                                                                       // 2178\n                                                                                                                       // 2179\n\t// Gets the width of the element at the given index                                                                   // 2180\n\tgetWidth: function(leftIndex) {                                                                                       // 2181\n\t\treturn this.rights[leftIndex] - this.lefts[leftIndex];                                                               // 2182\n\t},                                                                                                                    // 2183\n                                                                                                                       // 2184\n                                                                                                                       // 2185\n\t// Gets the top offset (from document top) of the element at the given index                                          // 2186\n\tgetTopOffset: function(topIndex) {                                                                                    // 2187\n\t\treturn this.tops[topIndex];                                                                                          // 2188\n\t},                                                                                                                    // 2189\n                                                                                                                       // 2190\n                                                                                                                       // 2191\n\t// Gets the top position (from offsetParent top) of the element at the given position                                 // 2192\n\tgetTopPosition: function(topIndex) {                                                                                  // 2193\n\t\treturn this.tops[topIndex] - this.origin.top;                                                                        // 2194\n\t},                                                                                                                    // 2195\n                                                                                                                       // 2196\n\t// Gets the bottom offset (from the document top) of the element at the given index.                                  // 2197\n\t// This value is NOT relative to the offsetParent's bottom edge, like the CSS concept of \"bottom\" would be.           // 2198\n\tgetBottomOffset: function(topIndex) {                                                                                 // 2199\n\t\treturn this.bottoms[topIndex];                                                                                       // 2200\n\t},                                                                                                                    // 2201\n                                                                                                                       // 2202\n                                                                                                                       // 2203\n\t// Gets the bottom position (from the offsetParent top) of the element at the given index.                            // 2204\n\t// This value is NOT relative to the offsetParent's bottom edge, like the CSS concept of \"bottom\" would be.           // 2205\n\tgetBottomPosition: function(topIndex) {                                                                               // 2206\n\t\treturn this.bottoms[topIndex] - this.origin.top;                                                                     // 2207\n\t},                                                                                                                    // 2208\n                                                                                                                       // 2209\n                                                                                                                       // 2210\n\t// Gets the height of the element at the given index                                                                  // 2211\n\tgetHeight: function(topIndex) {                                                                                       // 2212\n\t\treturn this.bottoms[topIndex] - this.tops[topIndex];                                                                 // 2213\n\t}                                                                                                                     // 2214\n                                                                                                                       // 2215\n});                                                                                                                    // 2216\n                                                                                                                       // 2217\n;;                                                                                                                     // 2218\n                                                                                                                       // 2219\n/* Tracks a drag's mouse movement, firing various handlers                                                             // 2220\n----------------------------------------------------------------------------------------------------------------------*/\n// TODO: use Emitter                                                                                                   // 2222\n                                                                                                                       // 2223\nvar DragListener = FC.DragListener = Class.extend({                                                                    // 2224\n                                                                                                                       // 2225\n\toptions: null,                                                                                                        // 2226\n                                                                                                                       // 2227\n\tisListening: false,                                                                                                   // 2228\n\tisDragging: false,                                                                                                    // 2229\n                                                                                                                       // 2230\n\t// coordinates of the initial mousedown                                                                               // 2231\n\toriginX: null,                                                                                                        // 2232\n\toriginY: null,                                                                                                        // 2233\n                                                                                                                       // 2234\n\t// handler attached to the document, bound to the DragListener's `this`                                               // 2235\n\tmousemoveProxy: null,                                                                                                 // 2236\n\tmouseupProxy: null,                                                                                                   // 2237\n                                                                                                                       // 2238\n\t// for IE8 bug-fighting behavior, for now                                                                             // 2239\n\tsubjectEl: null, // the element being draged. optional                                                                // 2240\n\tsubjectHref: null,                                                                                                    // 2241\n                                                                                                                       // 2242\n\tscrollEl: null,                                                                                                       // 2243\n\tscrollBounds: null, // { top, bottom, left, right }                                                                   // 2244\n\tscrollTopVel: null, // pixels per second                                                                              // 2245\n\tscrollLeftVel: null, // pixels per second                                                                             // 2246\n\tscrollIntervalId: null, // ID of setTimeout for scrolling animation loop                                              // 2247\n\tscrollHandlerProxy: null, // this-scoped function for handling when scrollEl is scrolled                              // 2248\n                                                                                                                       // 2249\n\tscrollSensitivity: 30, // pixels from edge for scrolling to start                                                     // 2250\n\tscrollSpeed: 200, // pixels per second, at maximum speed                                                              // 2251\n\tscrollIntervalMs: 50, // millisecond wait between scroll increment                                                    // 2252\n                                                                                                                       // 2253\n                                                                                                                       // 2254\n\tconstructor: function(options) {                                                                                      // 2255\n\t\toptions = options || {};                                                                                             // 2256\n\t\tthis.options = options;                                                                                              // 2257\n\t\tthis.subjectEl = options.subjectEl;                                                                                  // 2258\n\t},                                                                                                                    // 2259\n                                                                                                                       // 2260\n                                                                                                                       // 2261\n\t// Call this when the user does a mousedown. Will probably lead to startListening                                     // 2262\n\tmousedown: function(ev) {                                                                                             // 2263\n\t\tif (isPrimaryMouseButton(ev)) {                                                                                      // 2264\n                                                                                                                       // 2265\n\t\t\tev.preventDefault(); // prevents native selection in most browsers                                                  // 2266\n                                                                                                                       // 2267\n\t\t\tthis.startListening(ev);                                                                                            // 2268\n                                                                                                                       // 2269\n\t\t\t// start the drag immediately if there is no minimum distance for a drag start                                      // 2270\n\t\t\tif (!this.options.distance) {                                                                                       // 2271\n\t\t\t\tthis.startDrag(ev);                                                                                                // 2272\n\t\t\t}                                                                                                                   // 2273\n\t\t}                                                                                                                    // 2274\n\t},                                                                                                                    // 2275\n                                                                                                                       // 2276\n                                                                                                                       // 2277\n\t// Call this to start tracking mouse movements                                                                        // 2278\n\tstartListening: function(ev) {                                                                                        // 2279\n\t\tvar scrollParent;                                                                                                    // 2280\n                                                                                                                       // 2281\n\t\tif (!this.isListening) {                                                                                             // 2282\n                                                                                                                       // 2283\n\t\t\t// grab scroll container and attach handler                                                                         // 2284\n\t\t\tif (ev && this.options.scroll) {                                                                                    // 2285\n\t\t\t\tscrollParent = getScrollParent($(ev.target));                                                                      // 2286\n\t\t\t\tif (!scrollParent.is(window) && !scrollParent.is(document)) {                                                      // 2287\n\t\t\t\t\tthis.scrollEl = scrollParent;                                                                                     // 2288\n                                                                                                                       // 2289\n\t\t\t\t\t// scope to `this`, and use `debounce` to make sure rapid calls don't happen                                      // 2290\n\t\t\t\t\tthis.scrollHandlerProxy = debounce(proxy(this, 'scrollHandler'), 100);                                            // 2291\n\t\t\t\t\tthis.scrollEl.on('scroll', this.scrollHandlerProxy);                                                              // 2292\n\t\t\t\t}                                                                                                                  // 2293\n\t\t\t}                                                                                                                   // 2294\n                                                                                                                       // 2295\n\t\t\t$(document)                                                                                                         // 2296\n\t\t\t\t.on('mousemove', this.mousemoveProxy = proxy(this, 'mousemove'))                                                   // 2297\n\t\t\t\t.on('mouseup', this.mouseupProxy = proxy(this, 'mouseup'))                                                         // 2298\n\t\t\t\t.on('selectstart', this.preventDefault); // prevents native selection in IE<=8                                     // 2299\n                                                                                                                       // 2300\n\t\t\tif (ev) {                                                                                                           // 2301\n\t\t\t\tthis.originX = ev.pageX;                                                                                           // 2302\n\t\t\t\tthis.originY = ev.pageY;                                                                                           // 2303\n\t\t\t}                                                                                                                   // 2304\n\t\t\telse {                                                                                                              // 2305\n\t\t\t\t// if no starting information was given, origin will be the topleft corner of the screen.                          // 2306\n\t\t\t\t// if so, dx/dy in the future will be the absolute coordinates.                                                    // 2307\n\t\t\t\tthis.originX = 0;                                                                                                  // 2308\n\t\t\t\tthis.originY = 0;                                                                                                  // 2309\n\t\t\t}                                                                                                                   // 2310\n                                                                                                                       // 2311\n\t\t\tthis.isListening = true;                                                                                            // 2312\n\t\t\tthis.listenStart(ev);                                                                                               // 2313\n\t\t}                                                                                                                    // 2314\n\t},                                                                                                                    // 2315\n                                                                                                                       // 2316\n                                                                                                                       // 2317\n\t// Called when drag listening has started (but a real drag has not necessarily began)                                 // 2318\n\tlistenStart: function(ev) {                                                                                           // 2319\n\t\tthis.trigger('listenStart', ev);                                                                                     // 2320\n\t},                                                                                                                    // 2321\n                                                                                                                       // 2322\n                                                                                                                       // 2323\n\t// Called when the user moves the mouse                                                                               // 2324\n\tmousemove: function(ev) {                                                                                             // 2325\n\t\tvar dx = ev.pageX - this.originX;                                                                                    // 2326\n\t\tvar dy = ev.pageY - this.originY;                                                                                    // 2327\n\t\tvar minDistance;                                                                                                     // 2328\n\t\tvar distanceSq; // current distance from the origin, squared                                                         // 2329\n                                                                                                                       // 2330\n\t\tif (!this.isDragging) { // if not already dragging...                                                                // 2331\n\t\t\t// then start the drag if the minimum distance criteria is met                                                      // 2332\n\t\t\tminDistance = this.options.distance || 1;                                                                           // 2333\n\t\t\tdistanceSq = dx * dx + dy * dy;                                                                                     // 2334\n\t\t\tif (distanceSq >= minDistance * minDistance) { // use pythagorean theorem                                           // 2335\n\t\t\t\tthis.startDrag(ev);                                                                                                // 2336\n\t\t\t}                                                                                                                   // 2337\n\t\t}                                                                                                                    // 2338\n                                                                                                                       // 2339\n\t\tif (this.isDragging) {                                                                                               // 2340\n\t\t\tthis.drag(dx, dy, ev); // report a drag, even if this mousemove initiated the drag                                  // 2341\n\t\t}                                                                                                                    // 2342\n\t},                                                                                                                    // 2343\n                                                                                                                       // 2344\n                                                                                                                       // 2345\n\t// Call this to initiate a legitimate drag.                                                                           // 2346\n\t// This function is called internally from this class, but can also be called explicitly from outside                 // 2347\n\tstartDrag: function(ev) {                                                                                             // 2348\n                                                                                                                       // 2349\n\t\tif (!this.isListening) { // startDrag must have manually initiated                                                   // 2350\n\t\t\tthis.startListening();                                                                                              // 2351\n\t\t}                                                                                                                    // 2352\n                                                                                                                       // 2353\n\t\tif (!this.isDragging) {                                                                                              // 2354\n\t\t\tthis.isDragging = true;                                                                                             // 2355\n\t\t\tthis.dragStart(ev);                                                                                                 // 2356\n\t\t}                                                                                                                    // 2357\n\t},                                                                                                                    // 2358\n                                                                                                                       // 2359\n                                                                                                                       // 2360\n\t// Called when the actual drag has started (went beyond minDistance)                                                  // 2361\n\tdragStart: function(ev) {                                                                                             // 2362\n\t\tvar subjectEl = this.subjectEl;                                                                                      // 2363\n                                                                                                                       // 2364\n\t\tthis.trigger('dragStart', ev);                                                                                       // 2365\n                                                                                                                       // 2366\n\t\t// remove a mousedown'd <a>'s href so it is not visited (IE8 bug)                                                    // 2367\n\t\tif ((this.subjectHref = subjectEl ? subjectEl.attr('href') : null)) {                                                // 2368\n\t\t\tsubjectEl.removeAttr('href');                                                                                       // 2369\n\t\t}                                                                                                                    // 2370\n\t},                                                                                                                    // 2371\n                                                                                                                       // 2372\n                                                                                                                       // 2373\n\t// Called while the mouse is being moved and when we know a legitimate drag is taking place                           // 2374\n\tdrag: function(dx, dy, ev) {                                                                                          // 2375\n\t\tthis.trigger('drag', dx, dy, ev);                                                                                    // 2376\n\t\tthis.updateScroll(ev); // will possibly cause scrolling                                                              // 2377\n\t},                                                                                                                    // 2378\n                                                                                                                       // 2379\n                                                                                                                       // 2380\n\t// Called when the user does a mouseup                                                                                // 2381\n\tmouseup: function(ev) {                                                                                               // 2382\n\t\tthis.stopListening(ev);                                                                                              // 2383\n\t},                                                                                                                    // 2384\n                                                                                                                       // 2385\n                                                                                                                       // 2386\n\t// Called when the drag is over. Will not cause listening to stop however.                                            // 2387\n\t// A concluding 'cellOut' event will NOT be triggered.                                                                // 2388\n\tstopDrag: function(ev) {                                                                                              // 2389\n\t\tif (this.isDragging) {                                                                                               // 2390\n\t\t\tthis.stopScrolling();                                                                                               // 2391\n\t\t\tthis.dragStop(ev);                                                                                                  // 2392\n\t\t\tthis.isDragging = false;                                                                                            // 2393\n\t\t}                                                                                                                    // 2394\n\t},                                                                                                                    // 2395\n                                                                                                                       // 2396\n                                                                                                                       // 2397\n\t// Called when dragging has been stopped                                                                              // 2398\n\tdragStop: function(ev) {                                                                                              // 2399\n\t\tvar _this = this;                                                                                                    // 2400\n                                                                                                                       // 2401\n\t\tthis.trigger('dragStop', ev);                                                                                        // 2402\n                                                                                                                       // 2403\n\t\t// restore a mousedown'd <a>'s href (for IE8 bug)                                                                    // 2404\n\t\tsetTimeout(function() { // must be outside of the click's execution                                                  // 2405\n\t\t\tif (_this.subjectHref) {                                                                                            // 2406\n\t\t\t\t_this.subjectEl.attr('href', _this.subjectHref);                                                                   // 2407\n\t\t\t}                                                                                                                   // 2408\n\t\t}, 0);                                                                                                               // 2409\n\t},                                                                                                                    // 2410\n                                                                                                                       // 2411\n                                                                                                                       // 2412\n\t// Call this to stop listening to the user's mouse events                                                             // 2413\n\tstopListening: function(ev) {                                                                                         // 2414\n\t\tthis.stopDrag(ev); // if there's a current drag, kill it                                                             // 2415\n                                                                                                                       // 2416\n\t\tif (this.isListening) {                                                                                              // 2417\n                                                                                                                       // 2418\n\t\t\t// remove the scroll handler if there is a scrollEl                                                                 // 2419\n\t\t\tif (this.scrollEl) {                                                                                                // 2420\n\t\t\t\tthis.scrollEl.off('scroll', this.scrollHandlerProxy);                                                              // 2421\n\t\t\t\tthis.scrollHandlerProxy = null;                                                                                    // 2422\n\t\t\t}                                                                                                                   // 2423\n                                                                                                                       // 2424\n\t\t\t$(document)                                                                                                         // 2425\n\t\t\t\t.off('mousemove', this.mousemoveProxy)                                                                             // 2426\n\t\t\t\t.off('mouseup', this.mouseupProxy)                                                                                 // 2427\n\t\t\t\t.off('selectstart', this.preventDefault);                                                                          // 2428\n                                                                                                                       // 2429\n\t\t\tthis.mousemoveProxy = null;                                                                                         // 2430\n\t\t\tthis.mouseupProxy = null;                                                                                           // 2431\n                                                                                                                       // 2432\n\t\t\tthis.isListening = false;                                                                                           // 2433\n\t\t\tthis.listenStop(ev);                                                                                                // 2434\n\t\t}                                                                                                                    // 2435\n\t},                                                                                                                    // 2436\n                                                                                                                       // 2437\n                                                                                                                       // 2438\n\t// Called when drag listening has stopped                                                                             // 2439\n\tlistenStop: function(ev) {                                                                                            // 2440\n\t\tthis.trigger('listenStop', ev);                                                                                      // 2441\n\t},                                                                                                                    // 2442\n                                                                                                                       // 2443\n                                                                                                                       // 2444\n\t// Triggers a callback. Calls a function in the option hash of the same name.                                         // 2445\n\t// Arguments beyond the first `name` are forwarded on.                                                                // 2446\n\ttrigger: function(name) {                                                                                             // 2447\n\t\tif (this.options[name]) {                                                                                            // 2448\n\t\t\tthis.options[name].apply(this, Array.prototype.slice.call(arguments, 1));                                           // 2449\n\t\t}                                                                                                                    // 2450\n\t},                                                                                                                    // 2451\n                                                                                                                       // 2452\n                                                                                                                       // 2453\n\t// Stops a given mouse event from doing it's native browser action. In our case, text selection.                      // 2454\n\tpreventDefault: function(ev) {                                                                                        // 2455\n\t\tev.preventDefault();                                                                                                 // 2456\n\t},                                                                                                                    // 2457\n                                                                                                                       // 2458\n                                                                                                                       // 2459\n\t/* Scrolling                                                                                                          // 2460\n\t------------------------------------------------------------------------------------------------------------------*/  // 2461\n                                                                                                                       // 2462\n                                                                                                                       // 2463\n\t// Computes and stores the bounding rectangle of scrollEl                                                             // 2464\n\tcomputeScrollBounds: function() {                                                                                     // 2465\n\t\tvar el = this.scrollEl;                                                                                              // 2466\n                                                                                                                       // 2467\n\t\tthis.scrollBounds = el ? getOuterRect(el) : null;                                                                    // 2468\n\t\t\t// TODO: use getClientRect in future. but prevents auto scrolling when on top of scrollbars                         // 2469\n\t},                                                                                                                    // 2470\n                                                                                                                       // 2471\n                                                                                                                       // 2472\n\t// Called when the dragging is in progress and scrolling should be updated                                            // 2473\n\tupdateScroll: function(ev) {                                                                                          // 2474\n\t\tvar sensitivity = this.scrollSensitivity;                                                                            // 2475\n\t\tvar bounds = this.scrollBounds;                                                                                      // 2476\n\t\tvar topCloseness, bottomCloseness;                                                                                   // 2477\n\t\tvar leftCloseness, rightCloseness;                                                                                   // 2478\n\t\tvar topVel = 0;                                                                                                      // 2479\n\t\tvar leftVel = 0;                                                                                                     // 2480\n                                                                                                                       // 2481\n\t\tif (bounds) { // only scroll if scrollEl exists                                                                      // 2482\n                                                                                                                       // 2483\n\t\t\t// compute closeness to edges. valid range is from 0.0 - 1.0                                                        // 2484\n\t\t\ttopCloseness = (sensitivity - (ev.pageY - bounds.top)) / sensitivity;                                               // 2485\n\t\t\tbottomCloseness = (sensitivity - (bounds.bottom - ev.pageY)) / sensitivity;                                         // 2486\n\t\t\tleftCloseness = (sensitivity - (ev.pageX - bounds.left)) / sensitivity;                                             // 2487\n\t\t\trightCloseness = (sensitivity - (bounds.right - ev.pageX)) / sensitivity;                                           // 2488\n                                                                                                                       // 2489\n\t\t\t// translate vertical closeness into velocity.                                                                      // 2490\n\t\t\t// mouse must be completely in bounds for velocity to happen.                                                       // 2491\n\t\t\tif (topCloseness >= 0 && topCloseness <= 1) {                                                                       // 2492\n\t\t\t\ttopVel = topCloseness * this.scrollSpeed * -1; // negative. for scrolling up                                       // 2493\n\t\t\t}                                                                                                                   // 2494\n\t\t\telse if (bottomCloseness >= 0 && bottomCloseness <= 1) {                                                            // 2495\n\t\t\t\ttopVel = bottomCloseness * this.scrollSpeed;                                                                       // 2496\n\t\t\t}                                                                                                                   // 2497\n                                                                                                                       // 2498\n\t\t\t// translate horizontal closeness into velocity                                                                     // 2499\n\t\t\tif (leftCloseness >= 0 && leftCloseness <= 1) {                                                                     // 2500\n\t\t\t\tleftVel = leftCloseness * this.scrollSpeed * -1; // negative. for scrolling left                                   // 2501\n\t\t\t}                                                                                                                   // 2502\n\t\t\telse if (rightCloseness >= 0 && rightCloseness <= 1) {                                                              // 2503\n\t\t\t\tleftVel = rightCloseness * this.scrollSpeed;                                                                       // 2504\n\t\t\t}                                                                                                                   // 2505\n\t\t}                                                                                                                    // 2506\n                                                                                                                       // 2507\n\t\tthis.setScrollVel(topVel, leftVel);                                                                                  // 2508\n\t},                                                                                                                    // 2509\n                                                                                                                       // 2510\n                                                                                                                       // 2511\n\t// Sets the speed-of-scrolling for the scrollEl                                                                       // 2512\n\tsetScrollVel: function(topVel, leftVel) {                                                                             // 2513\n                                                                                                                       // 2514\n\t\tthis.scrollTopVel = topVel;                                                                                          // 2515\n\t\tthis.scrollLeftVel = leftVel;                                                                                        // 2516\n                                                                                                                       // 2517\n\t\tthis.constrainScrollVel(); // massages into realistic values                                                         // 2518\n                                                                                                                       // 2519\n\t\t// if there is non-zero velocity, and an animation loop hasn't already started, then START                           // 2520\n\t\tif ((this.scrollTopVel || this.scrollLeftVel) && !this.scrollIntervalId) {                                           // 2521\n\t\t\tthis.scrollIntervalId = setInterval(                                                                                // 2522\n\t\t\t\tproxy(this, 'scrollIntervalFunc'), // scope to `this`                                                              // 2523\n\t\t\t\tthis.scrollIntervalMs                                                                                              // 2524\n\t\t\t);                                                                                                                  // 2525\n\t\t}                                                                                                                    // 2526\n\t},                                                                                                                    // 2527\n                                                                                                                       // 2528\n                                                                                                                       // 2529\n\t// Forces scrollTopVel and scrollLeftVel to be zero if scrolling has already gone all the way                         // 2530\n\tconstrainScrollVel: function() {                                                                                      // 2531\n\t\tvar el = this.scrollEl;                                                                                              // 2532\n                                                                                                                       // 2533\n\t\tif (this.scrollTopVel < 0) { // scrolling up?                                                                        // 2534\n\t\t\tif (el.scrollTop() <= 0) { // already scrolled all the way up?                                                      // 2535\n\t\t\t\tthis.scrollTopVel = 0;                                                                                             // 2536\n\t\t\t}                                                                                                                   // 2537\n\t\t}                                                                                                                    // 2538\n\t\telse if (this.scrollTopVel > 0) { // scrolling down?                                                                 // 2539\n\t\t\tif (el.scrollTop() + el[0].clientHeight >= el[0].scrollHeight) { // already scrolled all the way down?              // 2540\n\t\t\t\tthis.scrollTopVel = 0;                                                                                             // 2541\n\t\t\t}                                                                                                                   // 2542\n\t\t}                                                                                                                    // 2543\n                                                                                                                       // 2544\n\t\tif (this.scrollLeftVel < 0) { // scrolling left?                                                                     // 2545\n\t\t\tif (el.scrollLeft() <= 0) { // already scrolled all the left?                                                       // 2546\n\t\t\t\tthis.scrollLeftVel = 0;                                                                                            // 2547\n\t\t\t}                                                                                                                   // 2548\n\t\t}                                                                                                                    // 2549\n\t\telse if (this.scrollLeftVel > 0) { // scrolling right?                                                               // 2550\n\t\t\tif (el.scrollLeft() + el[0].clientWidth >= el[0].scrollWidth) { // already scrolled all the way right?              // 2551\n\t\t\t\tthis.scrollLeftVel = 0;                                                                                            // 2552\n\t\t\t}                                                                                                                   // 2553\n\t\t}                                                                                                                    // 2554\n\t},                                                                                                                    // 2555\n                                                                                                                       // 2556\n                                                                                                                       // 2557\n\t// This function gets called during every iteration of the scrolling animation loop                                   // 2558\n\tscrollIntervalFunc: function() {                                                                                      // 2559\n\t\tvar el = this.scrollEl;                                                                                              // 2560\n\t\tvar frac = this.scrollIntervalMs / 1000; // considering animation frequency, what the vel should be mult'd by        // 2561\n                                                                                                                       // 2562\n\t\t// change the value of scrollEl's scroll                                                                             // 2563\n\t\tif (this.scrollTopVel) {                                                                                             // 2564\n\t\t\tel.scrollTop(el.scrollTop() + this.scrollTopVel * frac);                                                            // 2565\n\t\t}                                                                                                                    // 2566\n\t\tif (this.scrollLeftVel) {                                                                                            // 2567\n\t\t\tel.scrollLeft(el.scrollLeft() + this.scrollLeftVel * frac);                                                         // 2568\n\t\t}                                                                                                                    // 2569\n                                                                                                                       // 2570\n\t\tthis.constrainScrollVel(); // since the scroll values changed, recompute the velocities                              // 2571\n                                                                                                                       // 2572\n\t\t// if scrolled all the way, which causes the vels to be zero, stop the animation loop                                // 2573\n\t\tif (!this.scrollTopVel && !this.scrollLeftVel) {                                                                     // 2574\n\t\t\tthis.stopScrolling();                                                                                               // 2575\n\t\t}                                                                                                                    // 2576\n\t},                                                                                                                    // 2577\n                                                                                                                       // 2578\n                                                                                                                       // 2579\n\t// Kills any existing scrolling animation loop                                                                        // 2580\n\tstopScrolling: function() {                                                                                           // 2581\n\t\tif (this.scrollIntervalId) {                                                                                         // 2582\n\t\t\tclearInterval(this.scrollIntervalId);                                                                               // 2583\n\t\t\tthis.scrollIntervalId = null;                                                                                       // 2584\n                                                                                                                       // 2585\n\t\t\t// when all done with scrolling, recompute positions since they probably changed                                    // 2586\n\t\t\tthis.scrollStop();                                                                                                  // 2587\n\t\t}                                                                                                                    // 2588\n\t},                                                                                                                    // 2589\n                                                                                                                       // 2590\n                                                                                                                       // 2591\n\t// Get called when the scrollEl is scrolled (NOTE: this is delayed via debounce)                                      // 2592\n\tscrollHandler: function() {                                                                                           // 2593\n\t\t// recompute all coordinates, but *only* if this is *not* part of our scrolling animation                            // 2594\n\t\tif (!this.scrollIntervalId) {                                                                                        // 2595\n\t\t\tthis.scrollStop();                                                                                                  // 2596\n\t\t}                                                                                                                    // 2597\n\t},                                                                                                                    // 2598\n                                                                                                                       // 2599\n                                                                                                                       // 2600\n\t// Called when scrolling has stopped, whether through auto scroll, or the user scrolling                              // 2601\n\tscrollStop: function() {                                                                                              // 2602\n\t}                                                                                                                     // 2603\n                                                                                                                       // 2604\n});                                                                                                                    // 2605\n                                                                                                                       // 2606\n;;                                                                                                                     // 2607\n                                                                                                                       // 2608\n/* Tracks mouse movements over a component and raises events about which hit the mouse is over.                        // 2609\n------------------------------------------------------------------------------------------------------------------------\noptions:                                                                                                               // 2611\n- subjectEl                                                                                                            // 2612\n- subjectCenter                                                                                                        // 2613\n*/                                                                                                                     // 2614\n                                                                                                                       // 2615\nvar HitDragListener = DragListener.extend({                                                                            // 2616\n                                                                                                                       // 2617\n\tcomponent: null, // converts coordinates to hits                                                                      // 2618\n\t\t// methods: prepareHits, releaseHits, queryHit                                                                       // 2619\n                                                                                                                       // 2620\n\torigHit: null, // the hit the mouse was over when listening started                                                   // 2621\n\thit: null, // the hit the mouse is over                                                                               // 2622\n\tcoordAdjust: null, // delta that will be added to the mouse coordinates when computing collisions                     // 2623\n                                                                                                                       // 2624\n                                                                                                                       // 2625\n\tconstructor: function(component, options) {                                                                           // 2626\n\t\tDragListener.call(this, options); // call the super-constructor                                                      // 2627\n                                                                                                                       // 2628\n\t\tthis.component = component;                                                                                          // 2629\n\t},                                                                                                                    // 2630\n                                                                                                                       // 2631\n                                                                                                                       // 2632\n\t// Called when drag listening starts (but a real drag has not necessarily began).                                     // 2633\n\t// ev might be undefined if dragging was started manually.                                                            // 2634\n\tlistenStart: function(ev) {                                                                                           // 2635\n\t\tvar subjectEl = this.subjectEl;                                                                                      // 2636\n\t\tvar subjectRect;                                                                                                     // 2637\n\t\tvar origPoint;                                                                                                       // 2638\n\t\tvar point;                                                                                                           // 2639\n                                                                                                                       // 2640\n\t\tDragListener.prototype.listenStart.apply(this, arguments); // call the super-method                                  // 2641\n                                                                                                                       // 2642\n\t\tthis.computeCoords();                                                                                                // 2643\n                                                                                                                       // 2644\n\t\tif (ev) {                                                                                                            // 2645\n\t\t\torigPoint = { left: ev.pageX, top: ev.pageY };                                                                      // 2646\n\t\t\tpoint = origPoint;                                                                                                  // 2647\n                                                                                                                       // 2648\n\t\t\t// constrain the point to bounds of the element being dragged                                                       // 2649\n\t\t\tif (subjectEl) {                                                                                                    // 2650\n\t\t\t\tsubjectRect = getOuterRect(subjectEl); // used for centering as well                                               // 2651\n\t\t\t\tpoint = constrainPoint(point, subjectRect);                                                                        // 2652\n\t\t\t}                                                                                                                   // 2653\n                                                                                                                       // 2654\n\t\t\tthis.origHit = this.queryHit(point.left, point.top);                                                                // 2655\n                                                                                                                       // 2656\n\t\t\t// treat the center of the subject as the collision point?                                                          // 2657\n\t\t\tif (subjectEl && this.options.subjectCenter) {                                                                      // 2658\n                                                                                                                       // 2659\n\t\t\t\t// only consider the area the subject overlaps the hit. best for large subjects.                                   // 2660\n\t\t\t\t// TODO: skip this if hit didn't supply left/right/top/bottom                                                      // 2661\n\t\t\t\tif (this.origHit) {                                                                                                // 2662\n\t\t\t\t\tsubjectRect = intersectRects(this.origHit, subjectRect) ||                                                        // 2663\n\t\t\t\t\t\tsubjectRect; // in case there is no intersection                                                                 // 2664\n\t\t\t\t}                                                                                                                  // 2665\n                                                                                                                       // 2666\n\t\t\t\tpoint = getRectCenter(subjectRect);                                                                                // 2667\n\t\t\t}                                                                                                                   // 2668\n                                                                                                                       // 2669\n\t\t\tthis.coordAdjust = diffPoints(point, origPoint); // point - origPoint                                               // 2670\n\t\t}                                                                                                                    // 2671\n\t\telse {                                                                                                               // 2672\n\t\t\tthis.origHit = null;                                                                                                // 2673\n\t\t\tthis.coordAdjust = null;                                                                                            // 2674\n\t\t}                                                                                                                    // 2675\n\t},                                                                                                                    // 2676\n                                                                                                                       // 2677\n                                                                                                                       // 2678\n\t// Recomputes the drag-critical positions of elements                                                                 // 2679\n\tcomputeCoords: function() {                                                                                           // 2680\n\t\tthis.component.prepareHits();                                                                                        // 2681\n\t\tthis.computeScrollBounds(); // why is this here???                                                                   // 2682\n\t},                                                                                                                    // 2683\n                                                                                                                       // 2684\n                                                                                                                       // 2685\n\t// Called when the actual drag has started                                                                            // 2686\n\tdragStart: function(ev) {                                                                                             // 2687\n\t\tvar hit;                                                                                                             // 2688\n                                                                                                                       // 2689\n\t\tDragListener.prototype.dragStart.apply(this, arguments); // call the super-method                                    // 2690\n                                                                                                                       // 2691\n\t\t// might be different from this.origHit if the min-distance is large                                                 // 2692\n\t\thit = this.queryHit(ev.pageX, ev.pageY);                                                                             // 2693\n                                                                                                                       // 2694\n\t\t// report the initial hit the mouse is over                                                                          // 2695\n\t\t// especially important if no min-distance and drag starts immediately                                               // 2696\n\t\tif (hit) {                                                                                                           // 2697\n\t\t\tthis.hitOver(hit);                                                                                                  // 2698\n\t\t}                                                                                                                    // 2699\n\t},                                                                                                                    // 2700\n                                                                                                                       // 2701\n                                                                                                                       // 2702\n\t// Called when the drag moves                                                                                         // 2703\n\tdrag: function(dx, dy, ev) {                                                                                          // 2704\n\t\tvar hit;                                                                                                             // 2705\n                                                                                                                       // 2706\n\t\tDragListener.prototype.drag.apply(this, arguments); // call the super-method                                         // 2707\n                                                                                                                       // 2708\n\t\thit = this.queryHit(ev.pageX, ev.pageY);                                                                             // 2709\n                                                                                                                       // 2710\n\t\tif (!isHitsEqual(hit, this.hit)) { // a different hit than before?                                                   // 2711\n\t\t\tif (this.hit) {                                                                                                     // 2712\n\t\t\t\tthis.hitOut();                                                                                                     // 2713\n\t\t\t}                                                                                                                   // 2714\n\t\t\tif (hit) {                                                                                                          // 2715\n\t\t\t\tthis.hitOver(hit);                                                                                                 // 2716\n\t\t\t}                                                                                                                   // 2717\n\t\t}                                                                                                                    // 2718\n\t},                                                                                                                    // 2719\n                                                                                                                       // 2720\n                                                                                                                       // 2721\n\t// Called when dragging has been stopped                                                                              // 2722\n\tdragStop: function() {                                                                                                // 2723\n\t\tthis.hitDone();                                                                                                      // 2724\n\t\tDragListener.prototype.dragStop.apply(this, arguments); // call the super-method                                     // 2725\n\t},                                                                                                                    // 2726\n                                                                                                                       // 2727\n                                                                                                                       // 2728\n\t// Called when a the mouse has just moved over a new hit                                                              // 2729\n\thitOver: function(hit) {                                                                                              // 2730\n\t\tvar isOrig = isHitsEqual(hit, this.origHit);                                                                         // 2731\n                                                                                                                       // 2732\n\t\tthis.hit = hit;                                                                                                      // 2733\n                                                                                                                       // 2734\n\t\tthis.trigger('hitOver', this.hit, isOrig, this.origHit);                                                             // 2735\n\t},                                                                                                                    // 2736\n                                                                                                                       // 2737\n                                                                                                                       // 2738\n\t// Called when the mouse has just moved out of a hit                                                                  // 2739\n\thitOut: function() {                                                                                                  // 2740\n\t\tif (this.hit) {                                                                                                      // 2741\n\t\t\tthis.trigger('hitOut', this.hit);                                                                                   // 2742\n\t\t\tthis.hitDone();                                                                                                     // 2743\n\t\t\tthis.hit = null;                                                                                                    // 2744\n\t\t}                                                                                                                    // 2745\n\t},                                                                                                                    // 2746\n                                                                                                                       // 2747\n                                                                                                                       // 2748\n\t// Called after a hitOut. Also called before a dragStop                                                               // 2749\n\thitDone: function() {                                                                                                 // 2750\n\t\tif (this.hit) {                                                                                                      // 2751\n\t\t\tthis.trigger('hitDone', this.hit);                                                                                  // 2752\n\t\t}                                                                                                                    // 2753\n\t},                                                                                                                    // 2754\n                                                                                                                       // 2755\n                                                                                                                       // 2756\n\t// Called when drag listening has stopped                                                                             // 2757\n\tlistenStop: function() {                                                                                              // 2758\n\t\tDragListener.prototype.listenStop.apply(this, arguments); // call the super-method                                   // 2759\n                                                                                                                       // 2760\n\t\tthis.origHit = null;                                                                                                 // 2761\n\t\tthis.hit = null;                                                                                                     // 2762\n                                                                                                                       // 2763\n\t\tthis.component.releaseHits();                                                                                        // 2764\n\t},                                                                                                                    // 2765\n                                                                                                                       // 2766\n                                                                                                                       // 2767\n\t// Called when scrolling has stopped, whether through auto scroll, or the user scrolling                              // 2768\n\tscrollStop: function() {                                                                                              // 2769\n\t\tDragListener.prototype.scrollStop.apply(this, arguments); // call the super-method                                   // 2770\n                                                                                                                       // 2771\n\t\tthis.computeCoords(); // hits' absolute positions will be in new places. recompute                                   // 2772\n\t},                                                                                                                    // 2773\n                                                                                                                       // 2774\n                                                                                                                       // 2775\n\t// Gets the hit underneath the coordinates for the given mouse event                                                  // 2776\n\tqueryHit: function(left, top) {                                                                                       // 2777\n                                                                                                                       // 2778\n\t\tif (this.coordAdjust) {                                                                                              // 2779\n\t\t\tleft += this.coordAdjust.left;                                                                                      // 2780\n\t\t\ttop += this.coordAdjust.top;                                                                                        // 2781\n\t\t}                                                                                                                    // 2782\n                                                                                                                       // 2783\n\t\treturn this.component.queryHit(left, top);                                                                           // 2784\n\t}                                                                                                                     // 2785\n                                                                                                                       // 2786\n});                                                                                                                    // 2787\n                                                                                                                       // 2788\n                                                                                                                       // 2789\n// Returns `true` if the hits are identically equal. `false` otherwise. Must be from the same component.               // 2790\n// Two null values will be considered equal, as two \"out of the component\" states are the same.                        // 2791\nfunction isHitsEqual(hit0, hit1) {                                                                                     // 2792\n                                                                                                                       // 2793\n\tif (!hit0 && !hit1) {                                                                                                 // 2794\n\t\treturn true;                                                                                                         // 2795\n\t}                                                                                                                     // 2796\n                                                                                                                       // 2797\n\tif (hit0 && hit1) {                                                                                                   // 2798\n\t\treturn hit0.component === hit1.component &&                                                                          // 2799\n\t\t\tisHitPropsWithin(hit0, hit1) &&                                                                                     // 2800\n\t\t\tisHitPropsWithin(hit1, hit0); // ensures all props are identical                                                    // 2801\n\t}                                                                                                                     // 2802\n                                                                                                                       // 2803\n\treturn false;                                                                                                         // 2804\n}                                                                                                                      // 2805\n                                                                                                                       // 2806\n                                                                                                                       // 2807\n// Returns true if all of subHit's non-standard properties are within superHit                                         // 2808\nfunction isHitPropsWithin(subHit, superHit) {                                                                          // 2809\n\tfor (var propName in subHit) {                                                                                        // 2810\n\t\tif (!/^(component|left|right|top|bottom)$/.test(propName)) {                                                         // 2811\n\t\t\tif (subHit[propName] !== superHit[propName]) {                                                                      // 2812\n\t\t\t\treturn false;                                                                                                      // 2813\n\t\t\t}                                                                                                                   // 2814\n\t\t}                                                                                                                    // 2815\n\t}                                                                                                                     // 2816\n\treturn true;                                                                                                          // 2817\n}                                                                                                                      // 2818\n                                                                                                                       // 2819\n;;                                                                                                                     // 2820\n                                                                                                                       // 2821\n/* Creates a clone of an element and lets it track the mouse as it moves                                               // 2822\n----------------------------------------------------------------------------------------------------------------------*/\n                                                                                                                       // 2824\nvar MouseFollower = Class.extend({                                                                                     // 2825\n                                                                                                                       // 2826\n\toptions: null,                                                                                                        // 2827\n                                                                                                                       // 2828\n\tsourceEl: null, // the element that will be cloned and made to look like it is dragging                               // 2829\n\tel: null, // the clone of `sourceEl` that will track the mouse                                                        // 2830\n\tparentEl: null, // the element that `el` (the clone) will be attached to                                              // 2831\n                                                                                                                       // 2832\n\t// the initial position of el, relative to the offset parent. made to match the initial offset of sourceEl            // 2833\n\ttop0: null,                                                                                                           // 2834\n\tleft0: null,                                                                                                          // 2835\n                                                                                                                       // 2836\n\t// the initial position of the mouse                                                                                  // 2837\n\tmouseY0: null,                                                                                                        // 2838\n\tmouseX0: null,                                                                                                        // 2839\n                                                                                                                       // 2840\n\t// the number of pixels the mouse has moved from its initial position                                                 // 2841\n\ttopDelta: null,                                                                                                       // 2842\n\tleftDelta: null,                                                                                                      // 2843\n                                                                                                                       // 2844\n\tmousemoveProxy: null, // document mousemove handler, bound to the MouseFollower's `this`                              // 2845\n                                                                                                                       // 2846\n\tisFollowing: false,                                                                                                   // 2847\n\tisHidden: false,                                                                                                      // 2848\n\tisAnimating: false, // doing the revert animation?                                                                    // 2849\n                                                                                                                       // 2850\n\tconstructor: function(sourceEl, options) {                                                                            // 2851\n\t\tthis.options = options = options || {};                                                                              // 2852\n\t\tthis.sourceEl = sourceEl;                                                                                            // 2853\n\t\tthis.parentEl = options.parentEl ? $(options.parentEl) : sourceEl.parent(); // default to sourceEl's parent          // 2854\n\t},                                                                                                                    // 2855\n                                                                                                                       // 2856\n                                                                                                                       // 2857\n\t// Causes the element to start following the mouse                                                                    // 2858\n\tstart: function(ev) {                                                                                                 // 2859\n\t\tif (!this.isFollowing) {                                                                                             // 2860\n\t\t\tthis.isFollowing = true;                                                                                            // 2861\n                                                                                                                       // 2862\n\t\t\tthis.mouseY0 = ev.pageY;                                                                                            // 2863\n\t\t\tthis.mouseX0 = ev.pageX;                                                                                            // 2864\n\t\t\tthis.topDelta = 0;                                                                                                  // 2865\n\t\t\tthis.leftDelta = 0;                                                                                                 // 2866\n                                                                                                                       // 2867\n\t\t\tif (!this.isHidden) {                                                                                               // 2868\n\t\t\t\tthis.updatePosition();                                                                                             // 2869\n\t\t\t}                                                                                                                   // 2870\n                                                                                                                       // 2871\n\t\t\t$(document).on('mousemove', this.mousemoveProxy = proxy(this, 'mousemove'));                                        // 2872\n\t\t}                                                                                                                    // 2873\n\t},                                                                                                                    // 2874\n                                                                                                                       // 2875\n                                                                                                                       // 2876\n\t// Causes the element to stop following the mouse. If shouldRevert is true, will animate back to original position.   // 2877\n\t// `callback` gets invoked when the animation is complete. If no animation, it is invoked immediately.                // 2878\n\tstop: function(shouldRevert, callback) {                                                                              // 2879\n\t\tvar _this = this;                                                                                                    // 2880\n\t\tvar revertDuration = this.options.revertDuration;                                                                    // 2881\n                                                                                                                       // 2882\n\t\tfunction complete() {                                                                                                // 2883\n\t\t\tthis.isAnimating = false;                                                                                           // 2884\n\t\t\t_this.removeElement();                                                                                              // 2885\n                                                                                                                       // 2886\n\t\t\tthis.top0 = this.left0 = null; // reset state for future updatePosition calls                                       // 2887\n                                                                                                                       // 2888\n\t\t\tif (callback) {                                                                                                     // 2889\n\t\t\t\tcallback();                                                                                                        // 2890\n\t\t\t}                                                                                                                   // 2891\n\t\t}                                                                                                                    // 2892\n                                                                                                                       // 2893\n\t\tif (this.isFollowing && !this.isAnimating) { // disallow more than one stop animation at a time                      // 2894\n\t\t\tthis.isFollowing = false;                                                                                           // 2895\n                                                                                                                       // 2896\n\t\t\t$(document).off('mousemove', this.mousemoveProxy);                                                                  // 2897\n                                                                                                                       // 2898\n\t\t\tif (shouldRevert && revertDuration && !this.isHidden) { // do a revert animation?                                   // 2899\n\t\t\t\tthis.isAnimating = true;                                                                                           // 2900\n\t\t\t\tthis.el.animate({                                                                                                  // 2901\n\t\t\t\t\ttop: this.top0,                                                                                                   // 2902\n\t\t\t\t\tleft: this.left0                                                                                                  // 2903\n\t\t\t\t}, {                                                                                                               // 2904\n\t\t\t\t\tduration: revertDuration,                                                                                         // 2905\n\t\t\t\t\tcomplete: complete                                                                                                // 2906\n\t\t\t\t});                                                                                                                // 2907\n\t\t\t}                                                                                                                   // 2908\n\t\t\telse {                                                                                                              // 2909\n\t\t\t\tcomplete();                                                                                                        // 2910\n\t\t\t}                                                                                                                   // 2911\n\t\t}                                                                                                                    // 2912\n\t},                                                                                                                    // 2913\n                                                                                                                       // 2914\n                                                                                                                       // 2915\n\t// Gets the tracking element. Create it if necessary                                                                  // 2916\n\tgetEl: function() {                                                                                                   // 2917\n\t\tvar el = this.el;                                                                                                    // 2918\n                                                                                                                       // 2919\n\t\tif (!el) {                                                                                                           // 2920\n\t\t\tthis.sourceEl.width(); // hack to force IE8 to compute correct bounding box                                         // 2921\n\t\t\tel = this.el = this.sourceEl.clone()                                                                                // 2922\n\t\t\t\t.css({                                                                                                             // 2923\n\t\t\t\t\tposition: 'absolute',                                                                                             // 2924\n\t\t\t\t\tvisibility: '', // in case original element was hidden (commonly through hideEvents())                            // 2925\n\t\t\t\t\tdisplay: this.isHidden ? 'none' : '', // for when initially hidden                                                // 2926\n\t\t\t\t\tmargin: 0,                                                                                                        // 2927\n\t\t\t\t\tright: 'auto', // erase and set width instead                                                                     // 2928\n\t\t\t\t\tbottom: 'auto', // erase and set height instead                                                                   // 2929\n\t\t\t\t\twidth: this.sourceEl.width(), // explicit height in case there was a 'right' value                                // 2930\n\t\t\t\t\theight: this.sourceEl.height(), // explicit width in case there was a 'bottom' value                              // 2931\n\t\t\t\t\topacity: this.options.opacity || '',                                                                              // 2932\n\t\t\t\t\tzIndex: this.options.zIndex                                                                                       // 2933\n\t\t\t\t})                                                                                                                 // 2934\n\t\t\t\t.appendTo(this.parentEl);                                                                                          // 2935\n\t\t}                                                                                                                    // 2936\n                                                                                                                       // 2937\n\t\treturn el;                                                                                                           // 2938\n\t},                                                                                                                    // 2939\n                                                                                                                       // 2940\n                                                                                                                       // 2941\n\t// Removes the tracking element if it has already been created                                                        // 2942\n\tremoveElement: function() {                                                                                           // 2943\n\t\tif (this.el) {                                                                                                       // 2944\n\t\t\tthis.el.remove();                                                                                                   // 2945\n\t\t\tthis.el = null;                                                                                                     // 2946\n\t\t}                                                                                                                    // 2947\n\t},                                                                                                                    // 2948\n                                                                                                                       // 2949\n                                                                                                                       // 2950\n\t// Update the CSS position of the tracking element                                                                    // 2951\n\tupdatePosition: function() {                                                                                          // 2952\n\t\tvar sourceOffset;                                                                                                    // 2953\n\t\tvar origin;                                                                                                          // 2954\n                                                                                                                       // 2955\n\t\tthis.getEl(); // ensure this.el                                                                                      // 2956\n                                                                                                                       // 2957\n\t\t// make sure origin info was computed                                                                                // 2958\n\t\tif (this.top0 === null) {                                                                                            // 2959\n\t\t\tthis.sourceEl.width(); // hack to force IE8 to compute correct bounding box                                         // 2960\n\t\t\tsourceOffset = this.sourceEl.offset();                                                                              // 2961\n\t\t\torigin = this.el.offsetParent().offset();                                                                           // 2962\n\t\t\tthis.top0 = sourceOffset.top - origin.top;                                                                          // 2963\n\t\t\tthis.left0 = sourceOffset.left - origin.left;                                                                       // 2964\n\t\t}                                                                                                                    // 2965\n                                                                                                                       // 2966\n\t\tthis.el.css({                                                                                                        // 2967\n\t\t\ttop: this.top0 + this.topDelta,                                                                                     // 2968\n\t\t\tleft: this.left0 + this.leftDelta                                                                                   // 2969\n\t\t});                                                                                                                  // 2970\n\t},                                                                                                                    // 2971\n                                                                                                                       // 2972\n                                                                                                                       // 2973\n\t// Gets called when the user moves the mouse                                                                          // 2974\n\tmousemove: function(ev) {                                                                                             // 2975\n\t\tthis.topDelta = ev.pageY - this.mouseY0;                                                                             // 2976\n\t\tthis.leftDelta = ev.pageX - this.mouseX0;                                                                            // 2977\n                                                                                                                       // 2978\n\t\tif (!this.isHidden) {                                                                                                // 2979\n\t\t\tthis.updatePosition();                                                                                              // 2980\n\t\t}                                                                                                                    // 2981\n\t},                                                                                                                    // 2982\n                                                                                                                       // 2983\n                                                                                                                       // 2984\n\t// Temporarily makes the tracking element invisible. Can be called before following starts                            // 2985\n\thide: function() {                                                                                                    // 2986\n\t\tif (!this.isHidden) {                                                                                                // 2987\n\t\t\tthis.isHidden = true;                                                                                               // 2988\n\t\t\tif (this.el) {                                                                                                      // 2989\n\t\t\t\tthis.el.hide();                                                                                                    // 2990\n\t\t\t}                                                                                                                   // 2991\n\t\t}                                                                                                                    // 2992\n\t},                                                                                                                    // 2993\n                                                                                                                       // 2994\n                                                                                                                       // 2995\n\t// Show the tracking element after it has been temporarily hidden                                                     // 2996\n\tshow: function() {                                                                                                    // 2997\n\t\tif (this.isHidden) {                                                                                                 // 2998\n\t\t\tthis.isHidden = false;                                                                                              // 2999\n\t\t\tthis.updatePosition();                                                                                              // 3000\n\t\t\tthis.getEl().show();                                                                                                // 3001\n\t\t}                                                                                                                    // 3002\n\t}                                                                                                                     // 3003\n                                                                                                                       // 3004\n});                                                                                                                    // 3005\n                                                                                                                       // 3006\n;;                                                                                                                     // 3007\n                                                                                                                       // 3008\n/* An abstract class comprised of a \"grid\" of areas that each represent a specific datetime                            // 3009\n----------------------------------------------------------------------------------------------------------------------*/\n                                                                                                                       // 3011\nvar Grid = FC.Grid = Class.extend({                                                                                    // 3012\n                                                                                                                       // 3013\n\tview: null, // a View object                                                                                          // 3014\n\tisRTL: null, // shortcut to the view's isRTL option                                                                   // 3015\n                                                                                                                       // 3016\n\tstart: null,                                                                                                          // 3017\n\tend: null,                                                                                                            // 3018\n                                                                                                                       // 3019\n\tel: null, // the containing element                                                                                   // 3020\n\telsByFill: null, // a hash of jQuery element sets used for rendering each fill. Keyed by fill name.                   // 3021\n                                                                                                                       // 3022\n\texternalDragStartProxy: null, // binds the Grid's scope to externalDragStart (in DayGrid.events)                      // 3023\n                                                                                                                       // 3024\n\t// derived from options                                                                                               // 3025\n\teventTimeFormat: null,                                                                                                // 3026\n\tdisplayEventTime: null,                                                                                               // 3027\n\tdisplayEventEnd: null,                                                                                                // 3028\n                                                                                                                       // 3029\n\tminResizeDuration: null, // TODO: hack. set by subclasses. minumum event resize duration                              // 3030\n                                                                                                                       // 3031\n\t// if defined, holds the unit identified (ex: \"year\" or \"month\") that determines the level of granularity             // 3032\n\t// of the date areas. if not defined, assumes to be day and time granularity.                                         // 3033\n\t// TODO: port isTimeScale into same system?                                                                           // 3034\n\tlargeUnit: null,                                                                                                      // 3035\n                                                                                                                       // 3036\n                                                                                                                       // 3037\n\tconstructor: function(view) {                                                                                         // 3038\n\t\tthis.view = view;                                                                                                    // 3039\n\t\tthis.isRTL = view.opt('isRTL');                                                                                      // 3040\n                                                                                                                       // 3041\n\t\tthis.elsByFill = {};                                                                                                 // 3042\n\t\tthis.externalDragStartProxy = proxy(this, 'externalDragStart');                                                      // 3043\n\t},                                                                                                                    // 3044\n                                                                                                                       // 3045\n                                                                                                                       // 3046\n\t/* Options                                                                                                            // 3047\n\t------------------------------------------------------------------------------------------------------------------*/  // 3048\n                                                                                                                       // 3049\n                                                                                                                       // 3050\n\t// Generates the format string used for event time text, if not explicitly defined by 'timeFormat'                    // 3051\n\tcomputeEventTimeFormat: function() {                                                                                  // 3052\n\t\treturn this.view.opt('smallTimeFormat');                                                                             // 3053\n\t},                                                                                                                    // 3054\n                                                                                                                       // 3055\n                                                                                                                       // 3056\n\t// Determines whether events should have their end times displayed, if not explicitly defined by 'displayEventTime'.  // 3057\n\t// Only applies to non-all-day events.                                                                                // 3058\n\tcomputeDisplayEventTime: function() {                                                                                 // 3059\n\t\treturn true;                                                                                                         // 3060\n\t},                                                                                                                    // 3061\n                                                                                                                       // 3062\n                                                                                                                       // 3063\n\t// Determines whether events should have their end times displayed, if not explicitly defined by 'displayEventEnd'    // 3064\n\tcomputeDisplayEventEnd: function() {                                                                                  // 3065\n\t\treturn true;                                                                                                         // 3066\n\t},                                                                                                                    // 3067\n                                                                                                                       // 3068\n                                                                                                                       // 3069\n\t/* Dates                                                                                                              // 3070\n\t------------------------------------------------------------------------------------------------------------------*/  // 3071\n                                                                                                                       // 3072\n                                                                                                                       // 3073\n\t// Tells the grid about what period of time to display.                                                               // 3074\n\t// Any date-related internal data should be generated.                                                                // 3075\n\tsetRange: function(range) {                                                                                           // 3076\n\t\tthis.start = range.start.clone();                                                                                    // 3077\n\t\tthis.end = range.end.clone();                                                                                        // 3078\n                                                                                                                       // 3079\n\t\tthis.rangeUpdated();                                                                                                 // 3080\n\t\tthis.processRangeOptions();                                                                                          // 3081\n\t},                                                                                                                    // 3082\n                                                                                                                       // 3083\n                                                                                                                       // 3084\n\t// Called when internal variables that rely on the range should be updated                                            // 3085\n\trangeUpdated: function() {                                                                                            // 3086\n\t},                                                                                                                    // 3087\n                                                                                                                       // 3088\n                                                                                                                       // 3089\n\t// Updates values that rely on options and also relate to range                                                       // 3090\n\tprocessRangeOptions: function() {                                                                                     // 3091\n\t\tvar view = this.view;                                                                                                // 3092\n\t\tvar displayEventTime;                                                                                                // 3093\n\t\tvar displayEventEnd;                                                                                                 // 3094\n                                                                                                                       // 3095\n\t\tthis.eventTimeFormat =                                                                                               // 3096\n\t\t\tview.opt('eventTimeFormat') ||                                                                                      // 3097\n\t\t\tview.opt('timeFormat') || // deprecated                                                                             // 3098\n\t\t\tthis.computeEventTimeFormat();                                                                                      // 3099\n                                                                                                                       // 3100\n\t\tdisplayEventTime = view.opt('displayEventTime');                                                                     // 3101\n\t\tif (displayEventTime == null) {                                                                                      // 3102\n\t\t\tdisplayEventTime = this.computeDisplayEventTime(); // might be based off of range                                   // 3103\n\t\t}                                                                                                                    // 3104\n                                                                                                                       // 3105\n\t\tdisplayEventEnd = view.opt('displayEventEnd');                                                                       // 3106\n\t\tif (displayEventEnd == null) {                                                                                       // 3107\n\t\t\tdisplayEventEnd = this.computeDisplayEventEnd(); // might be based off of range                                     // 3108\n\t\t}                                                                                                                    // 3109\n                                                                                                                       // 3110\n\t\tthis.displayEventTime = displayEventTime;                                                                            // 3111\n\t\tthis.displayEventEnd = displayEventEnd;                                                                              // 3112\n\t},                                                                                                                    // 3113\n                                                                                                                       // 3114\n                                                                                                                       // 3115\n\t// Converts a span (has unzoned start/end and any other grid-specific location information)                           // 3116\n\t// into an array of segments (pieces of events whose format is decided by the grid).                                  // 3117\n\tspanToSegs: function(span) {                                                                                          // 3118\n\t\t// subclasses must implement                                                                                         // 3119\n\t},                                                                                                                    // 3120\n                                                                                                                       // 3121\n                                                                                                                       // 3122\n\t// Diffs the two dates, returning a duration, based on granularity of the grid                                        // 3123\n\t// TODO: port isTimeScale into this system?                                                                           // 3124\n\tdiffDates: function(a, b) {                                                                                           // 3125\n\t\tif (this.largeUnit) {                                                                                                // 3126\n\t\t\treturn diffByUnit(a, b, this.largeUnit);                                                                            // 3127\n\t\t}                                                                                                                    // 3128\n\t\telse {                                                                                                               // 3129\n\t\t\treturn diffDayTime(a, b);                                                                                           // 3130\n\t\t}                                                                                                                    // 3131\n\t},                                                                                                                    // 3132\n                                                                                                                       // 3133\n                                                                                                                       // 3134\n\t/* Hit Area                                                                                                           // 3135\n\t------------------------------------------------------------------------------------------------------------------*/  // 3136\n                                                                                                                       // 3137\n                                                                                                                       // 3138\n\t// Called before one or more queryHit calls might happen. Should prepare any cached coordinates for queryHit          // 3139\n\tprepareHits: function() {                                                                                             // 3140\n\t},                                                                                                                    // 3141\n                                                                                                                       // 3142\n                                                                                                                       // 3143\n\t// Called when queryHit calls have subsided. Good place to clear any coordinate caches.                               // 3144\n\treleaseHits: function() {                                                                                             // 3145\n\t},                                                                                                                    // 3146\n                                                                                                                       // 3147\n                                                                                                                       // 3148\n\t// Given coordinates from the topleft of the document, return data about the date-related area underneath.            // 3149\n\t// Can return an object with arbitrary properties (although top/right/left/bottom are encouraged).                    // 3150\n\t// Must have a `grid` property, a reference to this current grid. TODO: avoid this                                    // 3151\n\t// The returned object will be processed by getHitSpan and getHitEl.                                                  // 3152\n\tqueryHit: function(leftOffset, topOffset) {                                                                           // 3153\n\t},                                                                                                                    // 3154\n                                                                                                                       // 3155\n                                                                                                                       // 3156\n\t// Given position-level information about a date-related area within the grid,                                        // 3157\n\t// should return an object with at least a start/end date. Can provide other information as well.                     // 3158\n\tgetHitSpan: function(hit) {                                                                                           // 3159\n\t},                                                                                                                    // 3160\n                                                                                                                       // 3161\n                                                                                                                       // 3162\n\t// Given position-level information about a date-related area within the grid,                                        // 3163\n\t// should return a jQuery element that best represents it. passed to dayClick callback.                               // 3164\n\tgetHitEl: function(hit) {                                                                                             // 3165\n\t},                                                                                                                    // 3166\n                                                                                                                       // 3167\n                                                                                                                       // 3168\n\t/* Rendering                                                                                                          // 3169\n\t------------------------------------------------------------------------------------------------------------------*/  // 3170\n                                                                                                                       // 3171\n                                                                                                                       // 3172\n\t// Sets the container element that the grid should render inside of.                                                  // 3173\n\t// Does other DOM-related initializations.                                                                            // 3174\n\tsetElement: function(el) {                                                                                            // 3175\n\t\tvar _this = this;                                                                                                    // 3176\n                                                                                                                       // 3177\n\t\tthis.el = el;                                                                                                        // 3178\n                                                                                                                       // 3179\n\t\t// attach a handler to the grid's root element.                                                                      // 3180\n\t\t// jQuery will take care of unregistering them when removeElement gets called.                                       // 3181\n\t\tel.on('mousedown', function(ev) {                                                                                    // 3182\n\t\t\tif (                                                                                                                // 3183\n\t\t\t\t!$(ev.target).is('.fc-event-container *, .fc-more') && // not an an event element, or \"more..\" link                // 3184\n\t\t\t\t!$(ev.target).closest('.fc-popover').length // not on a popover (like the \"more..\" events one)                     // 3185\n\t\t\t) {                                                                                                                 // 3186\n\t\t\t\t_this.dayMousedown(ev);                                                                                            // 3187\n\t\t\t}                                                                                                                   // 3188\n\t\t});                                                                                                                  // 3189\n                                                                                                                       // 3190\n\t\t// attach event-element-related handlers. in Grid.events                                                             // 3191\n\t\t// same garbage collection note as above.                                                                            // 3192\n\t\tthis.bindSegHandlers();                                                                                              // 3193\n                                                                                                                       // 3194\n\t\tthis.bindGlobalHandlers();                                                                                           // 3195\n\t},                                                                                                                    // 3196\n                                                                                                                       // 3197\n                                                                                                                       // 3198\n\t// Removes the grid's container element from the DOM. Undoes any other DOM-related attachments.                       // 3199\n\t// DOES NOT remove any content beforehand (doesn't clear events or call unrenderDates), unlike View                   // 3200\n\tremoveElement: function() {                                                                                           // 3201\n\t\tthis.unbindGlobalHandlers();                                                                                         // 3202\n                                                                                                                       // 3203\n\t\tthis.el.remove();                                                                                                    // 3204\n                                                                                                                       // 3205\n\t\t// NOTE: we don't null-out this.el for the same reasons we don't do it within View::removeElement                    // 3206\n\t},                                                                                                                    // 3207\n                                                                                                                       // 3208\n                                                                                                                       // 3209\n\t// Renders the basic structure of grid view before any content is rendered                                            // 3210\n\trenderSkeleton: function() {                                                                                          // 3211\n\t\t// subclasses should implement                                                                                       // 3212\n\t},                                                                                                                    // 3213\n                                                                                                                       // 3214\n                                                                                                                       // 3215\n\t// Renders the grid's date-related content (like areas that represent days/times).                                    // 3216\n\t// Assumes setRange has already been called and the skeleton has already been rendered.                               // 3217\n\trenderDates: function() {                                                                                             // 3218\n\t\t// subclasses should implement                                                                                       // 3219\n\t},                                                                                                                    // 3220\n                                                                                                                       // 3221\n                                                                                                                       // 3222\n\t// Unrenders the grid's date-related content                                                                          // 3223\n\tunrenderDates: function() {                                                                                           // 3224\n\t\t// subclasses should implement                                                                                       // 3225\n\t},                                                                                                                    // 3226\n                                                                                                                       // 3227\n                                                                                                                       // 3228\n\t/* Handlers                                                                                                           // 3229\n\t------------------------------------------------------------------------------------------------------------------*/  // 3230\n                                                                                                                       // 3231\n                                                                                                                       // 3232\n\t// Binds DOM handlers to elements that reside outside the grid, such as the document                                  // 3233\n\tbindGlobalHandlers: function() {                                                                                      // 3234\n\t\t$(document).on('dragstart sortstart', this.externalDragStartProxy); // jqui                                          // 3235\n\t},                                                                                                                    // 3236\n                                                                                                                       // 3237\n                                                                                                                       // 3238\n\t// Unbinds DOM handlers from elements that reside outside the grid                                                    // 3239\n\tunbindGlobalHandlers: function() {                                                                                    // 3240\n\t\t$(document).off('dragstart sortstart', this.externalDragStartProxy); // jqui                                         // 3241\n\t},                                                                                                                    // 3242\n                                                                                                                       // 3243\n                                                                                                                       // 3244\n\t// Process a mousedown on an element that represents a day. For day clicking and selecting.                           // 3245\n\tdayMousedown: function(ev) {                                                                                          // 3246\n\t\tvar _this = this;                                                                                                    // 3247\n\t\tvar view = this.view;                                                                                                // 3248\n\t\tvar isSelectable = view.opt('selectable');                                                                           // 3249\n\t\tvar dayClickHit; // null if invalid dayClick                                                                         // 3250\n\t\tvar selectionSpan; // null if invalid selection                                                                      // 3251\n                                                                                                                       // 3252\n\t\t// this listener tracks a mousedown on a day element, and a subsequent drag.                                         // 3253\n\t\t// if the drag ends on the same day, it is a 'dayClick'.                                                             // 3254\n\t\t// if 'selectable' is enabled, this listener also detects selections.                                                // 3255\n\t\tvar dragListener = new HitDragListener(this, {                                                                       // 3256\n\t\t\t//distance: 5, // needs more work if we want dayClick to fire correctly                                             // 3257\n\t\t\tscroll: view.opt('dragScroll'),                                                                                     // 3258\n\t\t\tdragStart: function() {                                                                                             // 3259\n\t\t\t\tview.unselect(); // since we could be rendering a new selection, we want to clear any old one                      // 3260\n\t\t\t},                                                                                                                  // 3261\n\t\t\thitOver: function(hit, isOrig, origHit) {                                                                           // 3262\n\t\t\t\tif (origHit) { // click needs to have started on a hit                                                             // 3263\n\t\t\t\t\tdayClickHit = isOrig ? hit : null; // single-hit selection is a day click                                         // 3264\n\t\t\t\t\tif (isSelectable) {                                                                                               // 3265\n\t\t\t\t\t\tselectionSpan = _this.computeSelection(                                                                          // 3266\n\t\t\t\t\t\t\t_this.getHitSpan(origHit),                                                                                      // 3267\n\t\t\t\t\t\t\t_this.getHitSpan(hit)                                                                                           // 3268\n\t\t\t\t\t\t);                                                                                                               // 3269\n\t\t\t\t\t\tif (selectionSpan) {                                                                                             // 3270\n\t\t\t\t\t\t\t_this.renderSelection(selectionSpan);                                                                           // 3271\n\t\t\t\t\t\t}                                                                                                                // 3272\n\t\t\t\t\t\telse if (selectionSpan === false) {                                                                              // 3273\n\t\t\t\t\t\t\tdisableCursor();                                                                                                // 3274\n\t\t\t\t\t\t}                                                                                                                // 3275\n\t\t\t\t\t}                                                                                                                 // 3276\n\t\t\t\t}                                                                                                                  // 3277\n\t\t\t},                                                                                                                  // 3278\n\t\t\thitOut: function() {                                                                                                // 3279\n\t\t\t\tdayClickHit = null;                                                                                                // 3280\n\t\t\t\tselectionSpan = null;                                                                                              // 3281\n\t\t\t\t_this.unrenderSelection();                                                                                         // 3282\n\t\t\t\tenableCursor();                                                                                                    // 3283\n\t\t\t},                                                                                                                  // 3284\n\t\t\tlistenStop: function(ev) {                                                                                          // 3285\n\t\t\t\tif (dayClickHit) {                                                                                                 // 3286\n\t\t\t\t\tview.triggerDayClick(                                                                                             // 3287\n\t\t\t\t\t\t_this.getHitSpan(dayClickHit),                                                                                   // 3288\n\t\t\t\t\t\t_this.getHitEl(dayClickHit),                                                                                     // 3289\n\t\t\t\t\t\tev                                                                                                               // 3290\n\t\t\t\t\t);                                                                                                                // 3291\n\t\t\t\t}                                                                                                                  // 3292\n\t\t\t\tif (selectionSpan) {                                                                                               // 3293\n\t\t\t\t\t// the selection will already have been rendered. just report it                                                  // 3294\n\t\t\t\t\tview.reportSelection(selectionSpan, ev);                                                                          // 3295\n\t\t\t\t}                                                                                                                  // 3296\n\t\t\t\tenableCursor();                                                                                                    // 3297\n\t\t\t}                                                                                                                   // 3298\n\t\t});                                                                                                                  // 3299\n                                                                                                                       // 3300\n\t\tdragListener.mousedown(ev); // start listening, which will eventually initiate a dragStart                           // 3301\n\t},                                                                                                                    // 3302\n                                                                                                                       // 3303\n                                                                                                                       // 3304\n\t/* Event Helper                                                                                                       // 3305\n\t------------------------------------------------------------------------------------------------------------------*/  // 3306\n\t// TODO: should probably move this to Grid.events, like we did event dragging / resizing                              // 3307\n                                                                                                                       // 3308\n                                                                                                                       // 3309\n\t// Renders a mock event at the given event location, which contains zoned start/end properties.                       // 3310\n\trenderEventLocationHelper: function(eventLocation, sourceSeg) {                                                       // 3311\n\t\tvar fakeEvent = this.fabricateHelperEvent(eventLocation, sourceSeg);                                                 // 3312\n                                                                                                                       // 3313\n\t\tthis.renderHelper(fakeEvent, sourceSeg); // do the actual rendering                                                  // 3314\n\t},                                                                                                                    // 3315\n                                                                                                                       // 3316\n                                                                                                                       // 3317\n\t// Builds a fake event given zoned event date properties and a segment is should be inspired from.                    // 3318\n\t// The range's end can be null, in which case the mock event that is rendered will have a null end time.              // 3319\n\t// `sourceSeg` is the internal segment object involved in the drag. If null, something external is dragging.          // 3320\n\tfabricateHelperEvent: function(eventLocation, sourceSeg) {                                                            // 3321\n\t\tvar fakeEvent = sourceSeg ? createObject(sourceSeg.event) : {}; // mask the original event object if possible        // 3322\n                                                                                                                       // 3323\n\t\tfakeEvent.start = eventLocation.start.clone();                                                                       // 3324\n\t\tfakeEvent.end = eventLocation.end ? eventLocation.end.clone() : null;                                                // 3325\n\t\tfakeEvent.allDay = null; // force it to be freshly computed by normalizeEventDates                                   // 3326\n\t\tthis.view.calendar.normalizeEventDates(fakeEvent);                                                                   // 3327\n                                                                                                                       // 3328\n\t\t// this extra className will be useful for differentiating real events from mock events in CSS                       // 3329\n\t\tfakeEvent.className = (fakeEvent.className || []).concat('fc-helper');                                               // 3330\n                                                                                                                       // 3331\n\t\t// if something external is being dragged in, don't render a resizer                                                 // 3332\n\t\tif (!sourceSeg) {                                                                                                    // 3333\n\t\t\tfakeEvent.editable = false;                                                                                         // 3334\n\t\t}                                                                                                                    // 3335\n                                                                                                                       // 3336\n\t\treturn fakeEvent;                                                                                                    // 3337\n\t},                                                                                                                    // 3338\n                                                                                                                       // 3339\n                                                                                                                       // 3340\n\t// Renders a mock event. Given zoned event date properties.                                                           // 3341\n\trenderHelper: function(eventLocation, sourceSeg) {                                                                    // 3342\n\t\t// subclasses must implement                                                                                         // 3343\n\t},                                                                                                                    // 3344\n                                                                                                                       // 3345\n                                                                                                                       // 3346\n\t// Unrenders a mock event                                                                                             // 3347\n\tunrenderHelper: function() {                                                                                          // 3348\n\t\t// subclasses must implement                                                                                         // 3349\n\t},                                                                                                                    // 3350\n                                                                                                                       // 3351\n                                                                                                                       // 3352\n\t/* Selection                                                                                                          // 3353\n\t------------------------------------------------------------------------------------------------------------------*/  // 3354\n                                                                                                                       // 3355\n                                                                                                                       // 3356\n\t// Renders a visual indication of a selection. Will highlight by default but can be overridden by subclasses.         // 3357\n\t// Given a span (unzoned start/end and other misc data)                                                               // 3358\n\trenderSelection: function(span) {                                                                                     // 3359\n\t\tthis.renderHighlight(span);                                                                                          // 3360\n\t},                                                                                                                    // 3361\n                                                                                                                       // 3362\n                                                                                                                       // 3363\n\t// Unrenders any visual indications of a selection. Will unrender a highlight by default.                             // 3364\n\tunrenderSelection: function() {                                                                                       // 3365\n\t\tthis.unrenderHighlight();                                                                                            // 3366\n\t},                                                                                                                    // 3367\n                                                                                                                       // 3368\n                                                                                                                       // 3369\n\t// Given the first and last date-spans of a selection, returns another date-span object.                              // 3370\n\t// Subclasses can override and provide additional data in the span object. Will be passed to renderSelection().       // 3371\n\t// Will return false if the selection is invalid and this should be indicated to the user.                            // 3372\n\t// Will return null/undefined if a selection invalid but no error should be reported.                                 // 3373\n\tcomputeSelection: function(span0, span1) {                                                                            // 3374\n\t\tvar span = this.computeSelectionSpan(span0, span1);                                                                  // 3375\n                                                                                                                       // 3376\n\t\tif (span && !this.view.calendar.isSelectionSpanAllowed(span)) {                                                      // 3377\n\t\t\treturn false;                                                                                                       // 3378\n\t\t}                                                                                                                    // 3379\n                                                                                                                       // 3380\n\t\treturn span;                                                                                                         // 3381\n\t},                                                                                                                    // 3382\n                                                                                                                       // 3383\n                                                                                                                       // 3384\n\t// Given two spans, must return the combination of the two.                                                           // 3385\n\t// TODO: do this separation of concerns (combining VS validation) for event dnd/resize too.                           // 3386\n\tcomputeSelectionSpan: function(span0, span1) {                                                                        // 3387\n\t\tvar dates = [ span0.start, span0.end, span1.start, span1.end ];                                                      // 3388\n                                                                                                                       // 3389\n\t\tdates.sort(compareNumbers); // sorts chronologically. works with Moments                                             // 3390\n                                                                                                                       // 3391\n\t\treturn { start: dates[0].clone(), end: dates[3].clone() };                                                           // 3392\n\t},                                                                                                                    // 3393\n                                                                                                                       // 3394\n                                                                                                                       // 3395\n\t/* Highlight                                                                                                          // 3396\n\t------------------------------------------------------------------------------------------------------------------*/  // 3397\n                                                                                                                       // 3398\n                                                                                                                       // 3399\n\t// Renders an emphasis on the given date range. Given a span (unzoned start/end and other misc data)                  // 3400\n\trenderHighlight: function(span) {                                                                                     // 3401\n\t\tthis.renderFill('highlight', this.spanToSegs(span));                                                                 // 3402\n\t},                                                                                                                    // 3403\n                                                                                                                       // 3404\n                                                                                                                       // 3405\n\t// Unrenders the emphasis on a date range                                                                             // 3406\n\tunrenderHighlight: function() {                                                                                       // 3407\n\t\tthis.unrenderFill('highlight');                                                                                      // 3408\n\t},                                                                                                                    // 3409\n                                                                                                                       // 3410\n                                                                                                                       // 3411\n\t// Generates an array of classNames for rendering the highlight. Used by the fill system.                             // 3412\n\thighlightSegClasses: function() {                                                                                     // 3413\n\t\treturn [ 'fc-highlight' ];                                                                                           // 3414\n\t},                                                                                                                    // 3415\n                                                                                                                       // 3416\n                                                                                                                       // 3417\n\t/* Fill System (highlight, background events, business hours)                                                         // 3418\n\t------------------------------------------------------------------------------------------------------------------*/  // 3419\n                                                                                                                       // 3420\n                                                                                                                       // 3421\n\t// Renders a set of rectangles over the given segments of time.                                                       // 3422\n\t// MUST RETURN a subset of segs, the segs that were actually rendered.                                                // 3423\n\t// Responsible for populating this.elsByFill. TODO: better API for expressing this requirement                        // 3424\n\trenderFill: function(type, segs) {                                                                                    // 3425\n\t\t// subclasses must implement                                                                                         // 3426\n\t},                                                                                                                    // 3427\n                                                                                                                       // 3428\n                                                                                                                       // 3429\n\t// Unrenders a specific type of fill that is currently rendered on the grid                                           // 3430\n\tunrenderFill: function(type) {                                                                                        // 3431\n\t\tvar el = this.elsByFill[type];                                                                                       // 3432\n                                                                                                                       // 3433\n\t\tif (el) {                                                                                                            // 3434\n\t\t\tel.remove();                                                                                                        // 3435\n\t\t\tdelete this.elsByFill[type];                                                                                        // 3436\n\t\t}                                                                                                                    // 3437\n\t},                                                                                                                    // 3438\n                                                                                                                       // 3439\n                                                                                                                       // 3440\n\t// Renders and assigns an `el` property for each fill segment. Generic enough to work with different types.           // 3441\n\t// Only returns segments that successfully rendered.                                                                  // 3442\n\t// To be harnessed by renderFill (implemented by subclasses).                                                         // 3443\n\t// Analagous to renderFgSegEls.                                                                                       // 3444\n\trenderFillSegEls: function(type, segs) {                                                                              // 3445\n\t\tvar _this = this;                                                                                                    // 3446\n\t\tvar segElMethod = this[type + 'SegEl'];                                                                              // 3447\n\t\tvar html = '';                                                                                                       // 3448\n\t\tvar renderedSegs = [];                                                                                               // 3449\n\t\tvar i;                                                                                                               // 3450\n                                                                                                                       // 3451\n\t\tif (segs.length) {                                                                                                   // 3452\n                                                                                                                       // 3453\n\t\t\t// build a large concatenation of segment HTML                                                                      // 3454\n\t\t\tfor (i = 0; i < segs.length; i++) {                                                                                 // 3455\n\t\t\t\thtml += this.fillSegHtml(type, segs[i]);                                                                           // 3456\n\t\t\t}                                                                                                                   // 3457\n                                                                                                                       // 3458\n\t\t\t// Grab individual elements from the combined HTML string. Use each as the default rendering.                       // 3459\n\t\t\t// Then, compute the 'el' for each segment.                                                                         // 3460\n\t\t\t$(html).each(function(i, node) {                                                                                    // 3461\n\t\t\t\tvar seg = segs[i];                                                                                                 // 3462\n\t\t\t\tvar el = $(node);                                                                                                  // 3463\n                                                                                                                       // 3464\n\t\t\t\t// allow custom filter methods per-type                                                                            // 3465\n\t\t\t\tif (segElMethod) {                                                                                                 // 3466\n\t\t\t\t\tel = segElMethod.call(_this, seg, el);                                                                            // 3467\n\t\t\t\t}                                                                                                                  // 3468\n                                                                                                                       // 3469\n\t\t\t\tif (el) { // custom filters did not cancel the render                                                              // 3470\n\t\t\t\t\tel = $(el); // allow custom filter to return raw DOM node                                                         // 3471\n                                                                                                                       // 3472\n\t\t\t\t\t// correct element type? (would be bad if a non-TD were inserted into a table for example)                        // 3473\n\t\t\t\t\tif (el.is(_this.fillSegTag)) {                                                                                    // 3474\n\t\t\t\t\t\tseg.el = el;                                                                                                     // 3475\n\t\t\t\t\t\trenderedSegs.push(seg);                                                                                          // 3476\n\t\t\t\t\t}                                                                                                                 // 3477\n\t\t\t\t}                                                                                                                  // 3478\n\t\t\t});                                                                                                                 // 3479\n\t\t}                                                                                                                    // 3480\n                                                                                                                       // 3481\n\t\treturn renderedSegs;                                                                                                 // 3482\n\t},                                                                                                                    // 3483\n                                                                                                                       // 3484\n                                                                                                                       // 3485\n\tfillSegTag: 'div', // subclasses can override                                                                         // 3486\n                                                                                                                       // 3487\n                                                                                                                       // 3488\n\t// Builds the HTML needed for one fill segment. Generic enought o work with different types.                          // 3489\n\tfillSegHtml: function(type, seg) {                                                                                    // 3490\n                                                                                                                       // 3491\n\t\t// custom hooks per-type                                                                                             // 3492\n\t\tvar classesMethod = this[type + 'SegClasses'];                                                                       // 3493\n\t\tvar cssMethod = this[type + 'SegCss'];                                                                               // 3494\n                                                                                                                       // 3495\n\t\tvar classes = classesMethod ? classesMethod.call(this, seg) : [];                                                    // 3496\n\t\tvar css = cssToStr(cssMethod ? cssMethod.call(this, seg) : {});                                                      // 3497\n                                                                                                                       // 3498\n\t\treturn '<' + this.fillSegTag +                                                                                       // 3499\n\t\t\t(classes.length ? ' class=\"' + classes.join(' ') + '\"' : '') +                                                      // 3500\n\t\t\t(css ? ' style=\"' + css + '\"' : '') +                                                                               // 3501\n\t\t\t' />';                                                                                                              // 3502\n\t},                                                                                                                    // 3503\n                                                                                                                       // 3504\n                                                                                                                       // 3505\n                                                                                                                       // 3506\n\t/* Generic rendering utilities for subclasses                                                                         // 3507\n\t------------------------------------------------------------------------------------------------------------------*/  // 3508\n                                                                                                                       // 3509\n                                                                                                                       // 3510\n\t// Computes HTML classNames for a single-day element                                                                  // 3511\n\tgetDayClasses: function(date) {                                                                                       // 3512\n\t\tvar view = this.view;                                                                                                // 3513\n\t\tvar today = view.calendar.getNow().stripTime();                                                                      // 3514\n\t\tvar classes = [ 'fc-' + dayIDs[date.day()] ];                                                                        // 3515\n                                                                                                                       // 3516\n\t\tif (                                                                                                                 // 3517\n\t\t\tview.intervalDuration.as('months') == 1 &&                                                                          // 3518\n\t\t\tdate.month() != view.intervalStart.month()                                                                          // 3519\n\t\t) {                                                                                                                  // 3520\n\t\t\tclasses.push('fc-other-month');                                                                                     // 3521\n\t\t}                                                                                                                    // 3522\n                                                                                                                       // 3523\n\t\tif (date.isSame(today, 'day')) {                                                                                     // 3524\n\t\t\tclasses.push(                                                                                                       // 3525\n\t\t\t\t'fc-today',                                                                                                        // 3526\n\t\t\t\tview.highlightStateClass                                                                                           // 3527\n\t\t\t);                                                                                                                  // 3528\n\t\t}                                                                                                                    // 3529\n\t\telse if (date < today) {                                                                                             // 3530\n\t\t\tclasses.push('fc-past');                                                                                            // 3531\n\t\t}                                                                                                                    // 3532\n\t\telse {                                                                                                               // 3533\n\t\t\tclasses.push('fc-future');                                                                                          // 3534\n\t\t}                                                                                                                    // 3535\n                                                                                                                       // 3536\n\t\treturn classes;                                                                                                      // 3537\n\t}                                                                                                                     // 3538\n                                                                                                                       // 3539\n});                                                                                                                    // 3540\n                                                                                                                       // 3541\n;;                                                                                                                     // 3542\n                                                                                                                       // 3543\n/* Event-rendering and event-interaction methods for the abstract Grid class                                           // 3544\n----------------------------------------------------------------------------------------------------------------------*/\n                                                                                                                       // 3546\nGrid.mixin({                                                                                                           // 3547\n                                                                                                                       // 3548\n\tmousedOverSeg: null, // the segment object the user's mouse is over. null if over nothing                             // 3549\n\tisDraggingSeg: false, // is a segment being dragged? boolean                                                          // 3550\n\tisResizingSeg: false, // is a segment being resized? boolean                                                          // 3551\n\tisDraggingExternal: false, // jqui-dragging an external element? boolean                                              // 3552\n\tsegs: null, // the event segments currently rendered in the grid                                                      // 3553\n                                                                                                                       // 3554\n                                                                                                                       // 3555\n\t// Renders the given events onto the grid                                                                             // 3556\n\trenderEvents: function(events) {                                                                                      // 3557\n\t\tvar bgEvents = [];                                                                                                   // 3558\n\t\tvar fgEvents = [];                                                                                                   // 3559\n\t\tvar i;                                                                                                               // 3560\n                                                                                                                       // 3561\n\t\tfor (i = 0; i < events.length; i++) {                                                                                // 3562\n\t\t\t(isBgEvent(events[i]) ? bgEvents : fgEvents).push(events[i]);                                                       // 3563\n\t\t}                                                                                                                    // 3564\n                                                                                                                       // 3565\n\t\tthis.segs = [].concat( // record all segs                                                                            // 3566\n\t\t\tthis.renderBgEvents(bgEvents),                                                                                      // 3567\n\t\t\tthis.renderFgEvents(fgEvents)                                                                                       // 3568\n\t\t);                                                                                                                   // 3569\n\t},                                                                                                                    // 3570\n                                                                                                                       // 3571\n                                                                                                                       // 3572\n\trenderBgEvents: function(events) {                                                                                    // 3573\n\t\tvar segs = this.eventsToSegs(events);                                                                                // 3574\n                                                                                                                       // 3575\n\t\t// renderBgSegs might return a subset of segs, segs that were actually rendered                                      // 3576\n\t\treturn this.renderBgSegs(segs) || segs;                                                                              // 3577\n\t},                                                                                                                    // 3578\n                                                                                                                       // 3579\n                                                                                                                       // 3580\n\trenderFgEvents: function(events) {                                                                                    // 3581\n\t\tvar segs = this.eventsToSegs(events);                                                                                // 3582\n                                                                                                                       // 3583\n\t\t// renderFgSegs might return a subset of segs, segs that were actually rendered                                      // 3584\n\t\treturn this.renderFgSegs(segs) || segs;                                                                              // 3585\n\t},                                                                                                                    // 3586\n                                                                                                                       // 3587\n                                                                                                                       // 3588\n\t// Unrenders all events currently rendered on the grid                                                                // 3589\n\tunrenderEvents: function() {                                                                                          // 3590\n\t\tthis.triggerSegMouseout(); // trigger an eventMouseout if user's mouse is over an event                              // 3591\n                                                                                                                       // 3592\n\t\tthis.unrenderFgSegs();                                                                                               // 3593\n\t\tthis.unrenderBgSegs();                                                                                               // 3594\n                                                                                                                       // 3595\n\t\tthis.segs = null;                                                                                                    // 3596\n\t},                                                                                                                    // 3597\n                                                                                                                       // 3598\n                                                                                                                       // 3599\n\t// Retrieves all rendered segment objects currently rendered on the grid                                              // 3600\n\tgetEventSegs: function() {                                                                                            // 3601\n\t\treturn this.segs || [];                                                                                              // 3602\n\t},                                                                                                                    // 3603\n                                                                                                                       // 3604\n                                                                                                                       // 3605\n\t/* Foreground Segment Rendering                                                                                       // 3606\n\t------------------------------------------------------------------------------------------------------------------*/  // 3607\n                                                                                                                       // 3608\n                                                                                                                       // 3609\n\t// Renders foreground event segments onto the grid. May return a subset of segs that were rendered.                   // 3610\n\trenderFgSegs: function(segs) {                                                                                        // 3611\n\t\t// subclasses must implement                                                                                         // 3612\n\t},                                                                                                                    // 3613\n                                                                                                                       // 3614\n                                                                                                                       // 3615\n\t// Unrenders all currently rendered foreground segments                                                               // 3616\n\tunrenderFgSegs: function() {                                                                                          // 3617\n\t\t// subclasses must implement                                                                                         // 3618\n\t},                                                                                                                    // 3619\n                                                                                                                       // 3620\n                                                                                                                       // 3621\n\t// Renders and assigns an `el` property for each foreground event segment.                                            // 3622\n\t// Only returns segments that successfully rendered.                                                                  // 3623\n\t// A utility that subclasses may use.                                                                                 // 3624\n\trenderFgSegEls: function(segs, disableResizing) {                                                                     // 3625\n\t\tvar view = this.view;                                                                                                // 3626\n\t\tvar html = '';                                                                                                       // 3627\n\t\tvar renderedSegs = [];                                                                                               // 3628\n\t\tvar i;                                                                                                               // 3629\n                                                                                                                       // 3630\n\t\tif (segs.length) { // don't build an empty html string                                                               // 3631\n                                                                                                                       // 3632\n\t\t\t// build a large concatenation of event segment HTML                                                                // 3633\n\t\t\tfor (i = 0; i < segs.length; i++) {                                                                                 // 3634\n\t\t\t\thtml += this.fgSegHtml(segs[i], disableResizing);                                                                  // 3635\n\t\t\t}                                                                                                                   // 3636\n                                                                                                                       // 3637\n\t\t\t// Grab individual elements from the combined HTML string. Use each as the default rendering.                       // 3638\n\t\t\t// Then, compute the 'el' for each segment. An el might be null if the eventRender callback returned false.         // 3639\n\t\t\t$(html).each(function(i, node) {                                                                                    // 3640\n\t\t\t\tvar seg = segs[i];                                                                                                 // 3641\n\t\t\t\tvar el = view.resolveEventEl(seg.event, $(node));                                                                  // 3642\n                                                                                                                       // 3643\n\t\t\t\tif (el) {                                                                                                          // 3644\n\t\t\t\t\tel.data('fc-seg', seg); // used by handlers                                                                       // 3645\n\t\t\t\t\tseg.el = el;                                                                                                      // 3646\n\t\t\t\t\trenderedSegs.push(seg);                                                                                           // 3647\n\t\t\t\t}                                                                                                                  // 3648\n\t\t\t});                                                                                                                 // 3649\n\t\t}                                                                                                                    // 3650\n                                                                                                                       // 3651\n\t\treturn renderedSegs;                                                                                                 // 3652\n\t},                                                                                                                    // 3653\n                                                                                                                       // 3654\n                                                                                                                       // 3655\n\t// Generates the HTML for the default rendering of a foreground event segment. Used by renderFgSegEls()               // 3656\n\tfgSegHtml: function(seg, disableResizing) {                                                                           // 3657\n\t\t// subclasses should implement                                                                                       // 3658\n\t},                                                                                                                    // 3659\n                                                                                                                       // 3660\n                                                                                                                       // 3661\n\t/* Background Segment Rendering                                                                                       // 3662\n\t------------------------------------------------------------------------------------------------------------------*/  // 3663\n                                                                                                                       // 3664\n                                                                                                                       // 3665\n\t// Renders the given background event segments onto the grid.                                                         // 3666\n\t// Returns a subset of the segs that were actually rendered.                                                          // 3667\n\trenderBgSegs: function(segs) {                                                                                        // 3668\n\t\treturn this.renderFill('bgEvent', segs);                                                                             // 3669\n\t},                                                                                                                    // 3670\n                                                                                                                       // 3671\n                                                                                                                       // 3672\n\t// Unrenders all the currently rendered background event segments                                                     // 3673\n\tunrenderBgSegs: function() {                                                                                          // 3674\n\t\tthis.unrenderFill('bgEvent');                                                                                        // 3675\n\t},                                                                                                                    // 3676\n                                                                                                                       // 3677\n                                                                                                                       // 3678\n\t// Renders a background event element, given the default rendering. Called by the fill system.                        // 3679\n\tbgEventSegEl: function(seg, el) {                                                                                     // 3680\n\t\treturn this.view.resolveEventEl(seg.event, el); // will filter through eventRender                                   // 3681\n\t},                                                                                                                    // 3682\n                                                                                                                       // 3683\n                                                                                                                       // 3684\n\t// Generates an array of classNames to be used for the default rendering of a background event.                       // 3685\n\t// Called by the fill system.                                                                                         // 3686\n\tbgEventSegClasses: function(seg) {                                                                                    // 3687\n\t\tvar event = seg.event;                                                                                               // 3688\n\t\tvar source = event.source || {};                                                                                     // 3689\n                                                                                                                       // 3690\n\t\treturn [ 'fc-bgevent' ].concat(                                                                                      // 3691\n\t\t\tevent.className,                                                                                                    // 3692\n\t\t\tsource.className || []                                                                                              // 3693\n\t\t);                                                                                                                   // 3694\n\t},                                                                                                                    // 3695\n                                                                                                                       // 3696\n                                                                                                                       // 3697\n\t// Generates a semicolon-separated CSS string to be used for the default rendering of a background event.             // 3698\n\t// Called by the fill system.                                                                                         // 3699\n\t// TODO: consolidate with getEventSkinCss?                                                                            // 3700\n\tbgEventSegCss: function(seg) {                                                                                        // 3701\n\t\tvar view = this.view;                                                                                                // 3702\n\t\tvar event = seg.event;                                                                                               // 3703\n\t\tvar source = event.source || {};                                                                                     // 3704\n                                                                                                                       // 3705\n\t\treturn {                                                                                                             // 3706\n\t\t\t'background-color':                                                                                                 // 3707\n\t\t\t\tevent.backgroundColor ||                                                                                           // 3708\n\t\t\t\tevent.color ||                                                                                                     // 3709\n\t\t\t\tsource.backgroundColor ||                                                                                          // 3710\n\t\t\t\tsource.color ||                                                                                                    // 3711\n\t\t\t\tview.opt('eventBackgroundColor') ||                                                                                // 3712\n\t\t\t\tview.opt('eventColor')                                                                                             // 3713\n\t\t};                                                                                                                   // 3714\n\t},                                                                                                                    // 3715\n                                                                                                                       // 3716\n                                                                                                                       // 3717\n\t// Generates an array of classNames to be used for the rendering business hours overlay. Called by the fill system.   // 3718\n\tbusinessHoursSegClasses: function(seg) {                                                                              // 3719\n\t\treturn [ 'fc-nonbusiness', 'fc-bgevent' ];                                                                           // 3720\n\t},                                                                                                                    // 3721\n                                                                                                                       // 3722\n                                                                                                                       // 3723\n\t/* Handlers                                                                                                           // 3724\n\t------------------------------------------------------------------------------------------------------------------*/  // 3725\n                                                                                                                       // 3726\n                                                                                                                       // 3727\n\t// Attaches event-element-related handlers to the container element and leverage bubbling                             // 3728\n\tbindSegHandlers: function() {                                                                                         // 3729\n\t\tvar _this = this;                                                                                                    // 3730\n\t\tvar view = this.view;                                                                                                // 3731\n                                                                                                                       // 3732\n\t\t$.each(                                                                                                              // 3733\n\t\t\t{                                                                                                                   // 3734\n\t\t\t\tmouseenter: function(seg, ev) {                                                                                    // 3735\n\t\t\t\t\t_this.triggerSegMouseover(seg, ev);                                                                               // 3736\n\t\t\t\t},                                                                                                                 // 3737\n\t\t\t\tmouseleave: function(seg, ev) {                                                                                    // 3738\n\t\t\t\t\t_this.triggerSegMouseout(seg, ev);                                                                                // 3739\n\t\t\t\t},                                                                                                                 // 3740\n\t\t\t\tclick: function(seg, ev) {                                                                                         // 3741\n\t\t\t\t\treturn view.trigger('eventClick', this, seg.event, ev); // can return `false` to cancel                           // 3742\n\t\t\t\t},                                                                                                                 // 3743\n\t\t\t\tmousedown: function(seg, ev) {                                                                                     // 3744\n\t\t\t\t\tif ($(ev.target).is('.fc-resizer') && view.isEventResizable(seg.event)) {                                         // 3745\n\t\t\t\t\t\t_this.segResizeMousedown(seg, ev, $(ev.target).is('.fc-start-resizer'));                                         // 3746\n\t\t\t\t\t}                                                                                                                 // 3747\n\t\t\t\t\telse if (view.isEventDraggable(seg.event)) {                                                                      // 3748\n\t\t\t\t\t\t_this.segDragMousedown(seg, ev);                                                                                 // 3749\n\t\t\t\t\t}                                                                                                                 // 3750\n\t\t\t\t}                                                                                                                  // 3751\n\t\t\t},                                                                                                                  // 3752\n\t\t\tfunction(name, func) {                                                                                              // 3753\n\t\t\t\t// attach the handler to the container element and only listen for real event elements via bubbling                // 3754\n\t\t\t\t_this.el.on(name, '.fc-event-container > *', function(ev) {                                                        // 3755\n\t\t\t\t\tvar seg = $(this).data('fc-seg'); // grab segment data. put there by View::renderEvents                           // 3756\n                                                                                                                       // 3757\n\t\t\t\t\t// only call the handlers if there is not a drag/resize in progress                                               // 3758\n\t\t\t\t\tif (seg && !_this.isDraggingSeg && !_this.isResizingSeg) {                                                        // 3759\n\t\t\t\t\t\treturn func.call(this, seg, ev); // `this` will be the event element                                             // 3760\n\t\t\t\t\t}                                                                                                                 // 3761\n\t\t\t\t});                                                                                                                // 3762\n\t\t\t}                                                                                                                   // 3763\n\t\t);                                                                                                                   // 3764\n\t},                                                                                                                    // 3765\n                                                                                                                       // 3766\n                                                                                                                       // 3767\n\t// Updates internal state and triggers handlers for when an event element is moused over                              // 3768\n\ttriggerSegMouseover: function(seg, ev) {                                                                              // 3769\n\t\tif (!this.mousedOverSeg) {                                                                                           // 3770\n\t\t\tthis.mousedOverSeg = seg;                                                                                           // 3771\n\t\t\tthis.view.trigger('eventMouseover', seg.el[0], seg.event, ev);                                                      // 3772\n\t\t}                                                                                                                    // 3773\n\t},                                                                                                                    // 3774\n                                                                                                                       // 3775\n                                                                                                                       // 3776\n\t// Updates internal state and triggers handlers for when an event element is moused out.                              // 3777\n\t// Can be given no arguments, in which case it will mouseout the segment that was previously moused over.             // 3778\n\ttriggerSegMouseout: function(seg, ev) {                                                                               // 3779\n\t\tev = ev || {}; // if given no args, make a mock mouse event                                                          // 3780\n                                                                                                                       // 3781\n\t\tif (this.mousedOverSeg) {                                                                                            // 3782\n\t\t\tseg = seg || this.mousedOverSeg; // if given no args, use the currently moused-over segment                         // 3783\n\t\t\tthis.mousedOverSeg = null;                                                                                          // 3784\n\t\t\tthis.view.trigger('eventMouseout', seg.el[0], seg.event, ev);                                                       // 3785\n\t\t}                                                                                                                    // 3786\n\t},                                                                                                                    // 3787\n                                                                                                                       // 3788\n                                                                                                                       // 3789\n\t/* Event Dragging                                                                                                     // 3790\n\t------------------------------------------------------------------------------------------------------------------*/  // 3791\n                                                                                                                       // 3792\n                                                                                                                       // 3793\n\t// Called when the user does a mousedown on an event, which might lead to dragging.                                   // 3794\n\t// Generic enough to work with any type of Grid.                                                                      // 3795\n\tsegDragMousedown: function(seg, ev) {                                                                                 // 3796\n\t\tvar _this = this;                                                                                                    // 3797\n\t\tvar view = this.view;                                                                                                // 3798\n\t\tvar calendar = view.calendar;                                                                                        // 3799\n\t\tvar el = seg.el;                                                                                                     // 3800\n\t\tvar event = seg.event;                                                                                               // 3801\n\t\tvar dropLocation; // zoned event date properties                                                                     // 3802\n                                                                                                                       // 3803\n\t\t// A clone of the original element that will move with the mouse                                                     // 3804\n\t\tvar mouseFollower = new MouseFollower(seg.el, {                                                                      // 3805\n\t\t\tparentEl: view.el,                                                                                                  // 3806\n\t\t\topacity: view.opt('dragOpacity'),                                                                                   // 3807\n\t\t\trevertDuration: view.opt('dragRevertDuration'),                                                                     // 3808\n\t\t\tzIndex: 2 // one above the .fc-view                                                                                 // 3809\n\t\t});                                                                                                                  // 3810\n                                                                                                                       // 3811\n\t\t// Tracks mouse movement over the *view's* coordinate map. Allows dragging and dropping between subcomponents        // 3812\n\t\t// of the view.                                                                                                      // 3813\n\t\tvar dragListener = new HitDragListener(view, {                                                                       // 3814\n\t\t\tdistance: 5,                                                                                                        // 3815\n\t\t\tscroll: view.opt('dragScroll'),                                                                                     // 3816\n\t\t\tsubjectEl: el,                                                                                                      // 3817\n\t\t\tsubjectCenter: true,                                                                                                // 3818\n\t\t\tlistenStart: function(ev) {                                                                                         // 3819\n\t\t\t\tmouseFollower.hide(); // don't show until we know this is a real drag                                              // 3820\n\t\t\t\tmouseFollower.start(ev);                                                                                           // 3821\n\t\t\t},                                                                                                                  // 3822\n\t\t\tdragStart: function(ev) {                                                                                           // 3823\n\t\t\t\t_this.triggerSegMouseout(seg, ev); // ensure a mouseout on the manipulated event has been reported                 // 3824\n\t\t\t\t_this.segDragStart(seg, ev);                                                                                       // 3825\n\t\t\t\tview.hideEvent(event); // hide all event segments. our mouseFollower will take over                                // 3826\n\t\t\t},                                                                                                                  // 3827\n\t\t\thitOver: function(hit, isOrig, origHit) {                                                                           // 3828\n                                                                                                                       // 3829\n\t\t\t\t// starting hit could be forced (DayGrid.limit)                                                                    // 3830\n\t\t\t\tif (seg.hit) {                                                                                                     // 3831\n\t\t\t\t\torigHit = seg.hit;                                                                                                // 3832\n\t\t\t\t}                                                                                                                  // 3833\n                                                                                                                       // 3834\n\t\t\t\t// since we are querying the parent view, might not belong to this grid                                            // 3835\n\t\t\t\tdropLocation = _this.computeEventDrop(                                                                             // 3836\n\t\t\t\t\torigHit.component.getHitSpan(origHit),                                                                            // 3837\n\t\t\t\t\thit.component.getHitSpan(hit),                                                                                    // 3838\n\t\t\t\t\tevent                                                                                                             // 3839\n\t\t\t\t);                                                                                                                 // 3840\n                                                                                                                       // 3841\n\t\t\t\tif (dropLocation &&!calendar.isEventSpanAllowed(_this.eventToSpan(dropLocation), event)) {                         // 3842\n\t\t\t\t\tdisableCursor();                                                                                                  // 3843\n\t\t\t\t\tdropLocation = null;                                                                                              // 3844\n\t\t\t\t}                                                                                                                  // 3845\n                                                                                                                       // 3846\n\t\t\t\t// if a valid drop location, have the subclass render a visual indication                                          // 3847\n\t\t\t\tif (dropLocation && view.renderDrag(dropLocation, seg)) {                                                          // 3848\n\t\t\t\t\tmouseFollower.hide(); // if the subclass is already using a mock event \"helper\", hide our own                     // 3849\n\t\t\t\t}                                                                                                                  // 3850\n\t\t\t\telse {                                                                                                             // 3851\n\t\t\t\t\tmouseFollower.show(); // otherwise, have the helper follow the mouse (no snapping)                                // 3852\n\t\t\t\t}                                                                                                                  // 3853\n                                                                                                                       // 3854\n\t\t\t\tif (isOrig) {                                                                                                      // 3855\n\t\t\t\t\tdropLocation = null; // needs to have moved hits to be a valid drop                                               // 3856\n\t\t\t\t}                                                                                                                  // 3857\n\t\t\t},                                                                                                                  // 3858\n\t\t\thitOut: function() { // called before mouse moves to a different hit OR moved out of all hits                       // 3859\n\t\t\t\tview.unrenderDrag(); // unrender whatever was done in renderDrag                                                   // 3860\n\t\t\t\tmouseFollower.show(); // show in case we are moving out of all hits                                                // 3861\n\t\t\t\tdropLocation = null;                                                                                               // 3862\n\t\t\t},                                                                                                                  // 3863\n\t\t\thitDone: function() { // Called after a hitOut OR before a dragStop                                                 // 3864\n\t\t\t\tenableCursor();                                                                                                    // 3865\n\t\t\t},                                                                                                                  // 3866\n\t\t\tdragStop: function(ev) {                                                                                            // 3867\n\t\t\t\t// do revert animation if hasn't changed. calls a callback when finished (whether animation or not)                // 3868\n\t\t\t\tmouseFollower.stop(!dropLocation, function() {                                                                     // 3869\n\t\t\t\t\tview.unrenderDrag();                                                                                              // 3870\n\t\t\t\t\tview.showEvent(event);                                                                                            // 3871\n\t\t\t\t\t_this.segDragStop(seg, ev);                                                                                       // 3872\n                                                                                                                       // 3873\n\t\t\t\t\tif (dropLocation) {                                                                                               // 3874\n\t\t\t\t\t\tview.reportEventDrop(event, dropLocation, this.largeUnit, el, ev);                                               // 3875\n\t\t\t\t\t}                                                                                                                 // 3876\n\t\t\t\t});                                                                                                                // 3877\n\t\t\t},                                                                                                                  // 3878\n\t\t\tlistenStop: function() {                                                                                            // 3879\n\t\t\t\tmouseFollower.stop(); // put in listenStop in case there was a mousedown but the drag never started                // 3880\n\t\t\t}                                                                                                                   // 3881\n\t\t});                                                                                                                  // 3882\n                                                                                                                       // 3883\n\t\tdragListener.mousedown(ev); // start listening, which will eventually lead to a dragStart                            // 3884\n\t},                                                                                                                    // 3885\n                                                                                                                       // 3886\n                                                                                                                       // 3887\n\t// Called before event segment dragging starts                                                                        // 3888\n\tsegDragStart: function(seg, ev) {                                                                                     // 3889\n\t\tthis.isDraggingSeg = true;                                                                                           // 3890\n\t\tthis.view.trigger('eventDragStart', seg.el[0], seg.event, ev, {}); // last argument is jqui dummy                    // 3891\n\t},                                                                                                                    // 3892\n                                                                                                                       // 3893\n                                                                                                                       // 3894\n\t// Called after event segment dragging stops                                                                          // 3895\n\tsegDragStop: function(seg, ev) {                                                                                      // 3896\n\t\tthis.isDraggingSeg = false;                                                                                          // 3897\n\t\tthis.view.trigger('eventDragStop', seg.el[0], seg.event, ev, {}); // last argument is jqui dummy                     // 3898\n\t},                                                                                                                    // 3899\n                                                                                                                       // 3900\n                                                                                                                       // 3901\n\t// Given the spans an event drag began, and the span event was dropped, calculates the new zoned start/end/allDay     // 3902\n\t// values for the event. Subclasses may override and set additional properties to be used by renderDrag.              // 3903\n\t// A falsy returned value indicates an invalid drop.                                                                  // 3904\n\tcomputeEventDrop: function(startSpan, endSpan, event) {                                                               // 3905\n\t\tvar calendar = this.view.calendar;                                                                                   // 3906\n\t\tvar dragStart = startSpan.start;                                                                                     // 3907\n\t\tvar dragEnd = endSpan.start;                                                                                         // 3908\n\t\tvar delta;                                                                                                           // 3909\n\t\tvar dropLocation; // zoned event date properties                                                                     // 3910\n                                                                                                                       // 3911\n\t\tif (dragStart.hasTime() === dragEnd.hasTime()) {                                                                     // 3912\n\t\t\tdelta = this.diffDates(dragEnd, dragStart);                                                                         // 3913\n                                                                                                                       // 3914\n\t\t\t// if an all-day event was in a timed area and it was dragged to a different time,                                  // 3915\n\t\t\t// guarantee an end and adjust start/end to have times                                                              // 3916\n\t\t\tif (event.allDay && durationHasTime(delta)) {                                                                       // 3917\n\t\t\t\tdropLocation = {                                                                                                   // 3918\n\t\t\t\t\tstart: event.start.clone(),                                                                                       // 3919\n\t\t\t\t\tend: calendar.getEventEnd(event), // will be an ambig day                                                         // 3920\n\t\t\t\t\tallDay: false // for normalizeEventTimes                                                                          // 3921\n\t\t\t\t};                                                                                                                 // 3922\n\t\t\t\tcalendar.normalizeEventTimes(dropLocation);                                                                        // 3923\n\t\t\t}                                                                                                                   // 3924\n\t\t\t// othewise, work off existing values                                                                               // 3925\n\t\t\telse {                                                                                                              // 3926\n\t\t\t\tdropLocation = {                                                                                                   // 3927\n\t\t\t\t\tstart: event.start.clone(),                                                                                       // 3928\n\t\t\t\t\tend: event.end ? event.end.clone() : null,                                                                        // 3929\n\t\t\t\t\tallDay: event.allDay // keep it the same                                                                          // 3930\n\t\t\t\t};                                                                                                                 // 3931\n\t\t\t}                                                                                                                   // 3932\n                                                                                                                       // 3933\n\t\t\tdropLocation.start.add(delta);                                                                                      // 3934\n\t\t\tif (dropLocation.end) {                                                                                             // 3935\n\t\t\t\tdropLocation.end.add(delta);                                                                                       // 3936\n\t\t\t}                                                                                                                   // 3937\n\t\t}                                                                                                                    // 3938\n\t\telse {                                                                                                               // 3939\n\t\t\t// if switching from day <-> timed, start should be reset to the dropped date, and the end cleared                  // 3940\n\t\t\tdropLocation = {                                                                                                    // 3941\n\t\t\t\tstart: dragEnd.clone(),                                                                                            // 3942\n\t\t\t\tend: null, // end should be cleared                                                                                // 3943\n\t\t\t\tallDay: !dragEnd.hasTime()                                                                                         // 3944\n\t\t\t};                                                                                                                  // 3945\n\t\t}                                                                                                                    // 3946\n                                                                                                                       // 3947\n\t\treturn dropLocation;                                                                                                 // 3948\n\t},                                                                                                                    // 3949\n                                                                                                                       // 3950\n                                                                                                                       // 3951\n\t// Utility for apply dragOpacity to a jQuery set                                                                      // 3952\n\tapplyDragOpacity: function(els) {                                                                                     // 3953\n\t\tvar opacity = this.view.opt('dragOpacity');                                                                          // 3954\n                                                                                                                       // 3955\n\t\tif (opacity != null) {                                                                                               // 3956\n\t\t\tels.each(function(i, node) {                                                                                        // 3957\n\t\t\t\t// Don't use jQuery (will set an IE filter), do it the old fashioned way.                                          // 3958\n\t\t\t\t// In IE8, a helper element will disappears if there's a filter.                                                   // 3959\n\t\t\t\tnode.style.opacity = opacity;                                                                                      // 3960\n\t\t\t});                                                                                                                 // 3961\n\t\t}                                                                                                                    // 3962\n\t},                                                                                                                    // 3963\n                                                                                                                       // 3964\n                                                                                                                       // 3965\n\t/* External Element Dragging                                                                                          // 3966\n\t------------------------------------------------------------------------------------------------------------------*/  // 3967\n                                                                                                                       // 3968\n                                                                                                                       // 3969\n\t// Called when a jQuery UI drag is initiated anywhere in the DOM                                                      // 3970\n\texternalDragStart: function(ev, ui) {                                                                                 // 3971\n\t\tvar view = this.view;                                                                                                // 3972\n\t\tvar el;                                                                                                              // 3973\n\t\tvar accept;                                                                                                          // 3974\n                                                                                                                       // 3975\n\t\tif (view.opt('droppable')) { // only listen if this setting is on                                                    // 3976\n\t\t\tel = $((ui ? ui.item : null) || ev.target);                                                                         // 3977\n                                                                                                                       // 3978\n\t\t\t// Test that the dragged element passes the dropAccept selector or filter function.                                 // 3979\n\t\t\t// FYI, the default is \"*\" (matches all)                                                                            // 3980\n\t\t\taccept = view.opt('dropAccept');                                                                                    // 3981\n\t\t\tif ($.isFunction(accept) ? accept.call(el[0], el) : el.is(accept)) {                                                // 3982\n\t\t\t\tif (!this.isDraggingExternal) { // prevent double-listening if fired twice                                         // 3983\n\t\t\t\t\tthis.listenToExternalDrag(el, ev, ui);                                                                            // 3984\n\t\t\t\t}                                                                                                                  // 3985\n\t\t\t}                                                                                                                   // 3986\n\t\t}                                                                                                                    // 3987\n\t},                                                                                                                    // 3988\n                                                                                                                       // 3989\n                                                                                                                       // 3990\n\t// Called when a jQuery UI drag starts and it needs to be monitored for dropping                                      // 3991\n\tlistenToExternalDrag: function(el, ev, ui) {                                                                          // 3992\n\t\tvar _this = this;                                                                                                    // 3993\n\t\tvar meta = getDraggedElMeta(el); // extra data about event drop, including possible event to create                  // 3994\n\t\tvar dropLocation; // a null value signals an unsuccessful drag                                                       // 3995\n                                                                                                                       // 3996\n\t\t// listener that tracks mouse movement over date-associated pixel regions                                            // 3997\n\t\tvar dragListener = new HitDragListener(this, {                                                                       // 3998\n\t\t\tlistenStart: function() {                                                                                           // 3999\n\t\t\t\t_this.isDraggingExternal = true;                                                                                   // 4000\n\t\t\t},                                                                                                                  // 4001\n\t\t\thitOver: function(hit) {                                                                                            // 4002\n\t\t\t\tdropLocation = _this.computeExternalDrop(                                                                          // 4003\n\t\t\t\t\thit.component.getHitSpan(hit), // since we are querying the parent view, might not belong to this grid            // 4004\n\t\t\t\t\tmeta                                                                                                              // 4005\n\t\t\t\t);                                                                                                                 // 4006\n\t\t\t\tif (dropLocation) {                                                                                                // 4007\n\t\t\t\t\t_this.renderDrag(dropLocation); // called without a seg parameter                                                 // 4008\n\t\t\t\t}                                                                                                                  // 4009\n\t\t\t\telse { // invalid hit                                                                                              // 4010\n\t\t\t\t\tdisableCursor();                                                                                                  // 4011\n\t\t\t\t}                                                                                                                  // 4012\n\t\t\t},                                                                                                                  // 4013\n\t\t\thitOut: function() {                                                                                                // 4014\n\t\t\t\tdropLocation = null; // signal unsuccessful                                                                        // 4015\n\t\t\t\t_this.unrenderDrag();                                                                                              // 4016\n\t\t\t\tenableCursor();                                                                                                    // 4017\n\t\t\t},                                                                                                                  // 4018\n\t\t\tdragStop: function() {                                                                                              // 4019\n\t\t\t\t_this.unrenderDrag();                                                                                              // 4020\n\t\t\t\tenableCursor();                                                                                                    // 4021\n                                                                                                                       // 4022\n\t\t\t\tif (dropLocation) { // element was dropped on a valid hit                                                          // 4023\n\t\t\t\t\t_this.view.reportExternalDrop(meta, dropLocation, el, ev, ui);                                                    // 4024\n\t\t\t\t}                                                                                                                  // 4025\n\t\t\t},                                                                                                                  // 4026\n\t\t\tlistenStop: function() {                                                                                            // 4027\n\t\t\t\t_this.isDraggingExternal = false;                                                                                  // 4028\n\t\t\t}                                                                                                                   // 4029\n\t\t});                                                                                                                  // 4030\n                                                                                                                       // 4031\n\t\tdragListener.startDrag(ev); // start listening immediately                                                           // 4032\n\t},                                                                                                                    // 4033\n                                                                                                                       // 4034\n                                                                                                                       // 4035\n\t// Given a hit to be dropped upon, and misc data associated with the jqui drag (guaranteed to be a plain object),     // 4036\n\t// returns the zoned start/end dates for the event that would result from the hypothetical drop. end might be null.   // 4037\n\t// Returning a null value signals an invalid drop hit.                                                                // 4038\n\tcomputeExternalDrop: function(span, meta) {                                                                           // 4039\n\t\tvar calendar = this.view.calendar;                                                                                   // 4040\n\t\tvar dropLocation = {                                                                                                 // 4041\n\t\t\tstart: calendar.applyTimezone(span.start), // simulate a zoned event start date                                     // 4042\n\t\t\tend: null                                                                                                           // 4043\n\t\t};                                                                                                                   // 4044\n                                                                                                                       // 4045\n\t\t// if dropped on an all-day span, and element's metadata specified a time, set it                                    // 4046\n\t\tif (meta.startTime && !dropLocation.start.hasTime()) {                                                               // 4047\n\t\t\tdropLocation.start.time(meta.startTime);                                                                            // 4048\n\t\t}                                                                                                                    // 4049\n                                                                                                                       // 4050\n\t\tif (meta.duration) {                                                                                                 // 4051\n\t\t\tdropLocation.end = dropLocation.start.clone().add(meta.duration);                                                   // 4052\n\t\t}                                                                                                                    // 4053\n                                                                                                                       // 4054\n\t\tif (!calendar.isExternalSpanAllowed(this.eventToSpan(dropLocation), dropLocation, meta.eventProps)) {                // 4055\n\t\t\treturn null;                                                                                                        // 4056\n\t\t}                                                                                                                    // 4057\n                                                                                                                       // 4058\n\t\treturn dropLocation;                                                                                                 // 4059\n\t},                                                                                                                    // 4060\n                                                                                                                       // 4061\n                                                                                                                       // 4062\n                                                                                                                       // 4063\n\t/* Drag Rendering (for both events and an external elements)                                                          // 4064\n\t------------------------------------------------------------------------------------------------------------------*/  // 4065\n                                                                                                                       // 4066\n                                                                                                                       // 4067\n\t// Renders a visual indication of an event or external element being dragged.                                         // 4068\n\t// `dropLocation` contains hypothetical start/end/allDay values the event would have if dropped. end can be null.     // 4069\n\t// `seg` is the internal segment object that is being dragged. If dragging an external element, `seg` is null.        // 4070\n\t// A truthy returned value indicates this method has rendered a helper element.                                       // 4071\n\trenderDrag: function(dropLocation, seg) {                                                                             // 4072\n\t\t// subclasses must implement                                                                                         // 4073\n\t},                                                                                                                    // 4074\n                                                                                                                       // 4075\n                                                                                                                       // 4076\n\t// Unrenders a visual indication of an event or external element being dragged                                        // 4077\n\tunrenderDrag: function() {                                                                                            // 4078\n\t\t// subclasses must implement                                                                                         // 4079\n\t},                                                                                                                    // 4080\n                                                                                                                       // 4081\n                                                                                                                       // 4082\n\t/* Resizing                                                                                                           // 4083\n\t------------------------------------------------------------------------------------------------------------------*/  // 4084\n                                                                                                                       // 4085\n                                                                                                                       // 4086\n\t// Called when the user does a mousedown on an event's resizer, which might lead to resizing.                         // 4087\n\t// Generic enough to work with any type of Grid.                                                                      // 4088\n\tsegResizeMousedown: function(seg, ev, isStart) {                                                                      // 4089\n\t\tvar _this = this;                                                                                                    // 4090\n\t\tvar view = this.view;                                                                                                // 4091\n\t\tvar calendar = view.calendar;                                                                                        // 4092\n\t\tvar el = seg.el;                                                                                                     // 4093\n\t\tvar event = seg.event;                                                                                               // 4094\n\t\tvar eventEnd = calendar.getEventEnd(event);                                                                          // 4095\n\t\tvar resizeLocation; // zoned event date properties. falsy if invalid resize                                          // 4096\n                                                                                                                       // 4097\n\t\t// Tracks mouse movement over the *grid's* coordinate map                                                            // 4098\n\t\tvar dragListener = new HitDragListener(this, {                                                                       // 4099\n\t\t\tdistance: 5,                                                                                                        // 4100\n\t\t\tscroll: view.opt('dragScroll'),                                                                                     // 4101\n\t\t\tsubjectEl: el,                                                                                                      // 4102\n\t\t\tdragStart: function(ev) {                                                                                           // 4103\n\t\t\t\t_this.triggerSegMouseout(seg, ev); // ensure a mouseout on the manipulated event has been reported                 // 4104\n\t\t\t\t_this.segResizeStart(seg, ev);                                                                                     // 4105\n\t\t\t},                                                                                                                  // 4106\n\t\t\thitOver: function(hit, isOrig, origHit) {                                                                           // 4107\n\t\t\t\tvar origHitSpan = _this.getHitSpan(origHit);                                                                       // 4108\n\t\t\t\tvar hitSpan = _this.getHitSpan(hit);                                                                               // 4109\n                                                                                                                       // 4110\n\t\t\t\tresizeLocation = isStart ?                                                                                         // 4111\n\t\t\t\t\t_this.computeEventStartResize(origHitSpan, hitSpan, event) :                                                      // 4112\n\t\t\t\t\t_this.computeEventEndResize(origHitSpan, hitSpan, event);                                                         // 4113\n                                                                                                                       // 4114\n\t\t\t\tif (resizeLocation) {                                                                                              // 4115\n\t\t\t\t\tif (!calendar.isEventSpanAllowed(_this.eventToSpan(resizeLocation), event)) {                                     // 4116\n\t\t\t\t\t\tdisableCursor();                                                                                                 // 4117\n\t\t\t\t\t\tresizeLocation = null;                                                                                           // 4118\n\t\t\t\t\t}                                                                                                                 // 4119\n\t\t\t\t\t// no change? (TODO: how does this work with timezones?)                                                          // 4120\n\t\t\t\t\telse if (resizeLocation.start.isSame(event.start) && resizeLocation.end.isSame(eventEnd)) {                       // 4121\n\t\t\t\t\t\tresizeLocation = null;                                                                                           // 4122\n\t\t\t\t\t}                                                                                                                 // 4123\n\t\t\t\t}                                                                                                                  // 4124\n                                                                                                                       // 4125\n\t\t\t\tif (resizeLocation) {                                                                                              // 4126\n\t\t\t\t\tview.hideEvent(event);                                                                                            // 4127\n\t\t\t\t\t_this.renderEventResize(resizeLocation, seg);                                                                     // 4128\n\t\t\t\t}                                                                                                                  // 4129\n\t\t\t},                                                                                                                  // 4130\n\t\t\thitOut: function() { // called before mouse moves to a different hit OR moved out of all hits                       // 4131\n\t\t\t\tresizeLocation = null;                                                                                             // 4132\n\t\t\t},                                                                                                                  // 4133\n\t\t\thitDone: function() { // resets the rendering to show the original event                                            // 4134\n\t\t\t\t_this.unrenderEventResize();                                                                                       // 4135\n\t\t\t\tview.showEvent(event);                                                                                             // 4136\n\t\t\t\tenableCursor();                                                                                                    // 4137\n\t\t\t},                                                                                                                  // 4138\n\t\t\tdragStop: function(ev) {                                                                                            // 4139\n\t\t\t\t_this.segResizeStop(seg, ev);                                                                                      // 4140\n                                                                                                                       // 4141\n\t\t\t\tif (resizeLocation) { // valid date to resize to?                                                                  // 4142\n\t\t\t\t\tview.reportEventResize(event, resizeLocation, this.largeUnit, el, ev);                                            // 4143\n\t\t\t\t}                                                                                                                  // 4144\n\t\t\t}                                                                                                                   // 4145\n\t\t});                                                                                                                  // 4146\n                                                                                                                       // 4147\n\t\tdragListener.mousedown(ev); // start listening, which will eventually lead to a dragStart                            // 4148\n\t},                                                                                                                    // 4149\n                                                                                                                       // 4150\n                                                                                                                       // 4151\n\t// Called before event segment resizing starts                                                                        // 4152\n\tsegResizeStart: function(seg, ev) {                                                                                   // 4153\n\t\tthis.isResizingSeg = true;                                                                                           // 4154\n\t\tthis.view.trigger('eventResizeStart', seg.el[0], seg.event, ev, {}); // last argument is jqui dummy                  // 4155\n\t},                                                                                                                    // 4156\n                                                                                                                       // 4157\n                                                                                                                       // 4158\n\t// Called after event segment resizing stops                                                                          // 4159\n\tsegResizeStop: function(seg, ev) {                                                                                    // 4160\n\t\tthis.isResizingSeg = false;                                                                                          // 4161\n\t\tthis.view.trigger('eventResizeStop', seg.el[0], seg.event, ev, {}); // last argument is jqui dummy                   // 4162\n\t},                                                                                                                    // 4163\n                                                                                                                       // 4164\n                                                                                                                       // 4165\n\t// Returns new date-information for an event segment being resized from its start                                     // 4166\n\tcomputeEventStartResize: function(startSpan, endSpan, event) {                                                        // 4167\n\t\treturn this.computeEventResize('start', startSpan, endSpan, event);                                                  // 4168\n\t},                                                                                                                    // 4169\n                                                                                                                       // 4170\n                                                                                                                       // 4171\n\t// Returns new date-information for an event segment being resized from its end                                       // 4172\n\tcomputeEventEndResize: function(startSpan, endSpan, event) {                                                          // 4173\n\t\treturn this.computeEventResize('end', startSpan, endSpan, event);                                                    // 4174\n\t},                                                                                                                    // 4175\n                                                                                                                       // 4176\n                                                                                                                       // 4177\n\t// Returns new zoned date information for an event segment being resized from its start OR end                        // 4178\n\t// `type` is either 'start' or 'end'                                                                                  // 4179\n\tcomputeEventResize: function(type, startSpan, endSpan, event) {                                                       // 4180\n\t\tvar calendar = this.view.calendar;                                                                                   // 4181\n\t\tvar delta = this.diffDates(endSpan[type], startSpan[type]);                                                          // 4182\n\t\tvar resizeLocation; // zoned event date properties                                                                   // 4183\n\t\tvar defaultDuration;                                                                                                 // 4184\n                                                                                                                       // 4185\n\t\t// build original values to work from, guaranteeing a start and end                                                  // 4186\n\t\tresizeLocation = {                                                                                                   // 4187\n\t\t\tstart: event.start.clone(),                                                                                         // 4188\n\t\t\tend: calendar.getEventEnd(event),                                                                                   // 4189\n\t\t\tallDay: event.allDay                                                                                                // 4190\n\t\t};                                                                                                                   // 4191\n                                                                                                                       // 4192\n\t\t// if an all-day event was in a timed area and was resized to a time, adjust start/end to have times                 // 4193\n\t\tif (resizeLocation.allDay && durationHasTime(delta)) {                                                               // 4194\n\t\t\tresizeLocation.allDay = false;                                                                                      // 4195\n\t\t\tcalendar.normalizeEventTimes(resizeLocation);                                                                       // 4196\n\t\t}                                                                                                                    // 4197\n                                                                                                                       // 4198\n\t\tresizeLocation[type].add(delta); // apply delta to start or end                                                      // 4199\n                                                                                                                       // 4200\n\t\t// if the event was compressed too small, find a new reasonable duration for it                                      // 4201\n\t\tif (!resizeLocation.start.isBefore(resizeLocation.end)) {                                                            // 4202\n                                                                                                                       // 4203\n\t\t\tdefaultDuration =                                                                                                   // 4204\n\t\t\t\tthis.minResizeDuration || // TODO: hack                                                                            // 4205\n\t\t\t\t(event.allDay ?                                                                                                    // 4206\n\t\t\t\t\tcalendar.defaultAllDayEventDuration :                                                                             // 4207\n\t\t\t\t\tcalendar.defaultTimedEventDuration);                                                                              // 4208\n                                                                                                                       // 4209\n\t\t\tif (type == 'start') { // resizing the start?                                                                       // 4210\n\t\t\t\tresizeLocation.start = resizeLocation.end.clone().subtract(defaultDuration);                                       // 4211\n\t\t\t}                                                                                                                   // 4212\n\t\t\telse { // resizing the end?                                                                                         // 4213\n\t\t\t\tresizeLocation.end = resizeLocation.start.clone().add(defaultDuration);                                            // 4214\n\t\t\t}                                                                                                                   // 4215\n\t\t}                                                                                                                    // 4216\n                                                                                                                       // 4217\n\t\treturn resizeLocation;                                                                                               // 4218\n\t},                                                                                                                    // 4219\n                                                                                                                       // 4220\n                                                                                                                       // 4221\n\t// Renders a visual indication of an event being resized.                                                             // 4222\n\t// `range` has the updated dates of the event. `seg` is the original segment object involved in the drag.             // 4223\n\trenderEventResize: function(range, seg) {                                                                             // 4224\n\t\t// subclasses must implement                                                                                         // 4225\n\t},                                                                                                                    // 4226\n                                                                                                                       // 4227\n                                                                                                                       // 4228\n\t// Unrenders a visual indication of an event being resized.                                                           // 4229\n\tunrenderEventResize: function() {                                                                                     // 4230\n\t\t// subclasses must implement                                                                                         // 4231\n\t},                                                                                                                    // 4232\n                                                                                                                       // 4233\n                                                                                                                       // 4234\n\t/* Rendering Utils                                                                                                    // 4235\n\t------------------------------------------------------------------------------------------------------------------*/  // 4236\n                                                                                                                       // 4237\n                                                                                                                       // 4238\n\t// Compute the text that should be displayed on an event's element.                                                   // 4239\n\t// `range` can be the Event object itself, or something range-like, with at least a `start`.                          // 4240\n\t// If event times are disabled, or the event has no time, will return a blank string.                                 // 4241\n\t// If not specified, formatStr will default to the eventTimeFormat setting,                                           // 4242\n\t// and displayEnd will default to the displayEventEnd setting.                                                        // 4243\n\tgetEventTimeText: function(range, formatStr, displayEnd) {                                                            // 4244\n                                                                                                                       // 4245\n\t\tif (formatStr == null) {                                                                                             // 4246\n\t\t\tformatStr = this.eventTimeFormat;                                                                                   // 4247\n\t\t}                                                                                                                    // 4248\n                                                                                                                       // 4249\n\t\tif (displayEnd == null) {                                                                                            // 4250\n\t\t\tdisplayEnd = this.displayEventEnd;                                                                                  // 4251\n\t\t}                                                                                                                    // 4252\n                                                                                                                       // 4253\n\t\tif (this.displayEventTime && range.start.hasTime()) {                                                                // 4254\n\t\t\tif (displayEnd && range.end) {                                                                                      // 4255\n\t\t\t\treturn this.view.formatRange(range, formatStr);                                                                    // 4256\n\t\t\t}                                                                                                                   // 4257\n\t\t\telse {                                                                                                              // 4258\n\t\t\t\treturn range.start.format(formatStr);                                                                              // 4259\n\t\t\t}                                                                                                                   // 4260\n\t\t}                                                                                                                    // 4261\n                                                                                                                       // 4262\n\t\treturn '';                                                                                                           // 4263\n\t},                                                                                                                    // 4264\n                                                                                                                       // 4265\n                                                                                                                       // 4266\n\t// Generic utility for generating the HTML classNames for an event segment's element                                  // 4267\n\tgetSegClasses: function(seg, isDraggable, isResizable) {                                                              // 4268\n\t\tvar event = seg.event;                                                                                               // 4269\n\t\tvar classes = [                                                                                                      // 4270\n\t\t\t'fc-event',                                                                                                         // 4271\n\t\t\tseg.isStart ? 'fc-start' : 'fc-not-start',                                                                          // 4272\n\t\t\tseg.isEnd ? 'fc-end' : 'fc-not-end'                                                                                 // 4273\n\t\t].concat(                                                                                                            // 4274\n\t\t\tevent.className,                                                                                                    // 4275\n\t\t\tevent.source ? event.source.className : []                                                                          // 4276\n\t\t);                                                                                                                   // 4277\n                                                                                                                       // 4278\n\t\tif (isDraggable) {                                                                                                   // 4279\n\t\t\tclasses.push('fc-draggable');                                                                                       // 4280\n\t\t}                                                                                                                    // 4281\n\t\tif (isResizable) {                                                                                                   // 4282\n\t\t\tclasses.push('fc-resizable');                                                                                       // 4283\n\t\t}                                                                                                                    // 4284\n                                                                                                                       // 4285\n\t\treturn classes;                                                                                                      // 4286\n\t},                                                                                                                    // 4287\n                                                                                                                       // 4288\n                                                                                                                       // 4289\n\t// Utility for generating event skin-related CSS properties                                                           // 4290\n\tgetEventSkinCss: function(event) {                                                                                    // 4291\n\t\tvar view = this.view;                                                                                                // 4292\n\t\tvar source = event.source || {};                                                                                     // 4293\n\t\tvar eventColor = event.color;                                                                                        // 4294\n\t\tvar sourceColor = source.color;                                                                                      // 4295\n\t\tvar optionColor = view.opt('eventColor');                                                                            // 4296\n                                                                                                                       // 4297\n\t\treturn {                                                                                                             // 4298\n\t\t\t'background-color':                                                                                                 // 4299\n\t\t\t\tevent.backgroundColor ||                                                                                           // 4300\n\t\t\t\teventColor ||                                                                                                      // 4301\n\t\t\t\tsource.backgroundColor ||                                                                                          // 4302\n\t\t\t\tsourceColor ||                                                                                                     // 4303\n\t\t\t\tview.opt('eventBackgroundColor') ||                                                                                // 4304\n\t\t\t\toptionColor,                                                                                                       // 4305\n\t\t\t'border-color':                                                                                                     // 4306\n\t\t\t\tevent.borderColor ||                                                                                               // 4307\n\t\t\t\teventColor ||                                                                                                      // 4308\n\t\t\t\tsource.borderColor ||                                                                                              // 4309\n\t\t\t\tsourceColor ||                                                                                                     // 4310\n\t\t\t\tview.opt('eventBorderColor') ||                                                                                    // 4311\n\t\t\t\toptionColor,                                                                                                       // 4312\n\t\t\tcolor:                                                                                                              // 4313\n\t\t\t\tevent.textColor ||                                                                                                 // 4314\n\t\t\t\tsource.textColor ||                                                                                                // 4315\n\t\t\t\tview.opt('eventTextColor')                                                                                         // 4316\n\t\t};                                                                                                                   // 4317\n\t},                                                                                                                    // 4318\n                                                                                                                       // 4319\n                                                                                                                       // 4320\n\t/* Converting events -> eventRange -> eventSpan -> eventSegs                                                          // 4321\n\t------------------------------------------------------------------------------------------------------------------*/  // 4322\n                                                                                                                       // 4323\n                                                                                                                       // 4324\n\t// Generates an array of segments for the given single event                                                          // 4325\n\teventToSegs: function(event) {                                                                                        // 4326\n\t\treturn this.eventsToSegs([ event ]);                                                                                 // 4327\n\t},                                                                                                                    // 4328\n                                                                                                                       // 4329\n                                                                                                                       // 4330\n\t// Generates a single span (always unzoned) by using the given event's dates.                                         // 4331\n\t// Does not do any inverting for inverse-background events.                                                           // 4332\n\teventToSpan: function(event) {                                                                                        // 4333\n\t\tvar range = this.eventToRange(event);                                                                                // 4334\n\t\tthis.transformEventSpan(range, event); // convert it to a span, in-place                                             // 4335\n\t\treturn range;                                                                                                        // 4336\n\t},                                                                                                                    // 4337\n                                                                                                                       // 4338\n                                                                                                                       // 4339\n\t// Converts an array of event objects into an array of event segment objects.                                         // 4340\n\t// A custom `segSliceFunc` may be given for arbitrarily slicing up events.                                            // 4341\n\t// Doesn't guarantee an order for the resulting array.                                                                // 4342\n\teventsToSegs: function(allEvents, segSliceFunc) {                                                                     // 4343\n\t\tvar _this = this;                                                                                                    // 4344\n\t\tvar eventsById = groupEventsById(allEvents);                                                                         // 4345\n\t\tvar segs = [];                                                                                                       // 4346\n                                                                                                                       // 4347\n\t\t$.each(eventsById, function(id, events) {                                                                            // 4348\n\t\t\tvar ranges = [];                                                                                                    // 4349\n\t\t\tvar i;                                                                                                              // 4350\n                                                                                                                       // 4351\n\t\t\tfor (i = 0; i < events.length; i++) {                                                                               // 4352\n\t\t\t\tranges.push(_this.eventToRange(events[i]));                                                                        // 4353\n\t\t\t}                                                                                                                   // 4354\n                                                                                                                       // 4355\n\t\t\t// inverse-background events (utilize only the first event in calculations)                                         // 4356\n\t\t\tif (isInverseBgEvent(events[0])) {                                                                                  // 4357\n\t\t\t\tranges = _this.invertRanges(ranges);                                                                               // 4358\n                                                                                                                       // 4359\n\t\t\t\tfor (i = 0; i < ranges.length; i++) {                                                                              // 4360\n\t\t\t\t\t_this.generateEventSegs(ranges[i], events[0], segSliceFunc, segs);                                                // 4361\n\t\t\t\t}                                                                                                                  // 4362\n\t\t\t}                                                                                                                   // 4363\n\t\t\t// normal event ranges                                                                                              // 4364\n\t\t\telse {                                                                                                              // 4365\n\t\t\t\tfor (i = 0; i < ranges.length; i++) {                                                                              // 4366\n\t\t\t\t\t_this.generateEventSegs(ranges[i], events[i], segSliceFunc, segs);                                                // 4367\n\t\t\t\t}                                                                                                                  // 4368\n\t\t\t}                                                                                                                   // 4369\n\t\t});                                                                                                                  // 4370\n                                                                                                                       // 4371\n\t\treturn segs;                                                                                                         // 4372\n\t},                                                                                                                    // 4373\n                                                                                                                       // 4374\n                                                                                                                       // 4375\n\t// Generates the unzoned start/end dates an event appears to occupy                                                   // 4376\n\teventToRange: function(event) {                                                                                       // 4377\n\t\treturn {                                                                                                             // 4378\n\t\t\tstart: event.start.clone().stripZone(),                                                                             // 4379\n\t\t\tend: this.view.calendar.getEventEnd(event).stripZone()                                                              // 4380\n\t\t};                                                                                                                   // 4381\n\t},                                                                                                                    // 4382\n                                                                                                                       // 4383\n                                                                                                                       // 4384\n\t// Given an event's span (unzoned start/end and other misc data), and the event itself,                               // 4385\n\t// slice into segments (using the segSliceFunc function if specified) and append to the `out` array.                  // 4386\n\t// SIDE EFFECT: will mutate the given `range`.                                                                        // 4387\n\tgenerateEventSegs: function(range, event, segSliceFunc, out) {                                                        // 4388\n\t\tvar segs;                                                                                                            // 4389\n\t\tvar i;                                                                                                               // 4390\n                                                                                                                       // 4391\n\t\tthis.transformEventSpan(range, event); // converts the range to a span                                               // 4392\n                                                                                                                       // 4393\n\t\tsegs = segSliceFunc ? segSliceFunc(range) : this.spanToSegs(range);                                                  // 4394\n                                                                                                                       // 4395\n\t\tfor (i = 0; i < segs.length; i++) {                                                                                  // 4396\n\t\t\tthis.transformEventSeg(segs[i], range, event);                                                                      // 4397\n\t\t\tout.push(segs[i]);                                                                                                  // 4398\n\t\t}                                                                                                                    // 4399\n\t},                                                                                                                    // 4400\n                                                                                                                       // 4401\n                                                                                                                       // 4402\n\t// Given a range (unzoned start/end) that is about to become a span,                                                  // 4403\n\t// attach any event-derived properties to it.                                                                         // 4404\n\ttransformEventSpan: function(range, event) {                                                                          // 4405\n\t\t// subclasses can implement                                                                                          // 4406\n\t},                                                                                                                    // 4407\n                                                                                                                       // 4408\n                                                                                                                       // 4409\n\t// Given a segment object, attach any extra properties, based off of its source span and event.                       // 4410\n\ttransformEventSeg: function(seg, span, event) {                                                                       // 4411\n\t\tseg.event = event;                                                                                                   // 4412\n\t\tseg.eventStartMS = +span.start; // TODO: not the best name after making spans unzoned                                // 4413\n\t\tseg.eventDurationMS = span.end - span.start;                                                                         // 4414\n\t},                                                                                                                    // 4415\n                                                                                                                       // 4416\n                                                                                                                       // 4417\n\t// Produces a new array of range objects that will cover all the time NOT covered by the given ranges.                // 4418\n\t// SIDE EFFECT: will mutate the given array and will use its date references.                                         // 4419\n\tinvertRanges: function(ranges) {                                                                                      // 4420\n\t\tvar view = this.view;                                                                                                // 4421\n\t\tvar viewStart = view.start.clone(); // need a copy                                                                   // 4422\n\t\tvar viewEnd = view.end.clone(); // need a copy                                                                       // 4423\n\t\tvar inverseRanges = [];                                                                                              // 4424\n\t\tvar start = viewStart; // the end of the previous range. the start of the new range                                  // 4425\n\t\tvar i, range;                                                                                                        // 4426\n                                                                                                                       // 4427\n\t\t// ranges need to be in order. required for our date-walking algorithm                                               // 4428\n\t\tranges.sort(compareRanges);                                                                                          // 4429\n                                                                                                                       // 4430\n\t\tfor (i = 0; i < ranges.length; i++) {                                                                                // 4431\n\t\t\trange = ranges[i];                                                                                                  // 4432\n                                                                                                                       // 4433\n\t\t\t// add the span of time before the event (if there is any)                                                          // 4434\n\t\t\tif (range.start > start) { // compare millisecond time (skip any ambig logic)                                       // 4435\n\t\t\t\tinverseRanges.push({                                                                                               // 4436\n\t\t\t\t\tstart: start,                                                                                                     // 4437\n\t\t\t\t\tend: range.start                                                                                                  // 4438\n\t\t\t\t});                                                                                                                // 4439\n\t\t\t}                                                                                                                   // 4440\n                                                                                                                       // 4441\n\t\t\tstart = range.end;                                                                                                  // 4442\n\t\t}                                                                                                                    // 4443\n                                                                                                                       // 4444\n\t\t// add the span of time after the last event (if there is any)                                                       // 4445\n\t\tif (start < viewEnd) { // compare millisecond time (skip any ambig logic)                                            // 4446\n\t\t\tinverseRanges.push({                                                                                                // 4447\n\t\t\t\tstart: start,                                                                                                      // 4448\n\t\t\t\tend: viewEnd                                                                                                       // 4449\n\t\t\t});                                                                                                                 // 4450\n\t\t}                                                                                                                    // 4451\n                                                                                                                       // 4452\n\t\treturn inverseRanges;                                                                                                // 4453\n\t},                                                                                                                    // 4454\n                                                                                                                       // 4455\n                                                                                                                       // 4456\n\tsortEventSegs: function(segs) {                                                                                       // 4457\n\t\tsegs.sort(proxy(this, 'compareEventSegs'));                                                                          // 4458\n\t},                                                                                                                    // 4459\n                                                                                                                       // 4460\n                                                                                                                       // 4461\n\t// A cmp function for determining which segments should take visual priority                                          // 4462\n\tcompareEventSegs: function(seg1, seg2) {                                                                              // 4463\n\t\treturn seg1.eventStartMS - seg2.eventStartMS || // earlier events go first                                           // 4464\n\t\t\tseg2.eventDurationMS - seg1.eventDurationMS || // tie? longer events go first                                       // 4465\n\t\t\tseg2.event.allDay - seg1.event.allDay || // tie? put all-day events first (booleans cast to 0/1)                    // 4466\n\t\t\tcompareByFieldSpecs(seg1.event, seg2.event, this.view.eventOrderSpecs);                                             // 4467\n\t}                                                                                                                     // 4468\n                                                                                                                       // 4469\n});                                                                                                                    // 4470\n                                                                                                                       // 4471\n                                                                                                                       // 4472\n/* Utilities                                                                                                           // 4473\n----------------------------------------------------------------------------------------------------------------------*/\n                                                                                                                       // 4475\n                                                                                                                       // 4476\nfunction isBgEvent(event) { // returns true if background OR inverse-background                                        // 4477\n\tvar rendering = getEventRendering(event);                                                                             // 4478\n\treturn rendering === 'background' || rendering === 'inverse-background';                                              // 4479\n}                                                                                                                      // 4480\n                                                                                                                       // 4481\n                                                                                                                       // 4482\nfunction isInverseBgEvent(event) {                                                                                     // 4483\n\treturn getEventRendering(event) === 'inverse-background';                                                             // 4484\n}                                                                                                                      // 4485\n                                                                                                                       // 4486\n                                                                                                                       // 4487\nfunction getEventRendering(event) {                                                                                    // 4488\n\treturn firstDefined((event.source || {}).rendering, event.rendering);                                                 // 4489\n}                                                                                                                      // 4490\n                                                                                                                       // 4491\n                                                                                                                       // 4492\nfunction groupEventsById(events) {                                                                                     // 4493\n\tvar eventsById = {};                                                                                                  // 4494\n\tvar i, event;                                                                                                         // 4495\n                                                                                                                       // 4496\n\tfor (i = 0; i < events.length; i++) {                                                                                 // 4497\n\t\tevent = events[i];                                                                                                   // 4498\n\t\t(eventsById[event._id] || (eventsById[event._id] = [])).push(event);                                                 // 4499\n\t}                                                                                                                     // 4500\n                                                                                                                       // 4501\n\treturn eventsById;                                                                                                    // 4502\n}                                                                                                                      // 4503\n                                                                                                                       // 4504\n                                                                                                                       // 4505\n// A cmp function for determining which non-inverted \"ranges\" (see above) happen earlier                               // 4506\nfunction compareRanges(range1, range2) {                                                                               // 4507\n\treturn range1.start - range2.start; // earlier ranges go first                                                        // 4508\n}                                                                                                                      // 4509\n                                                                                                                       // 4510\n                                                                                                                       // 4511\n/* External-Dragging-Element Data                                                                                      // 4512\n----------------------------------------------------------------------------------------------------------------------*/\n                                                                                                                       // 4514\n// Require all HTML5 data-* attributes used by FullCalendar to have this prefix.                                       // 4515\n// A value of '' will query attributes like data-event. A value of 'fc' will query attributes like data-fc-event.      // 4516\nFC.dataAttrPrefix = '';                                                                                                // 4517\n                                                                                                                       // 4518\n// Given a jQuery element that might represent a dragged FullCalendar event, returns an intermediate data structure    // 4519\n// to be used for Event Object creation.                                                                               // 4520\n// A defined `.eventProps`, even when empty, indicates that an event should be created.                                // 4521\nfunction getDraggedElMeta(el) {                                                                                        // 4522\n\tvar prefix = FC.dataAttrPrefix;                                                                                       // 4523\n\tvar eventProps; // properties for creating the event, not related to date/time                                        // 4524\n\tvar startTime; // a Duration                                                                                          // 4525\n\tvar duration;                                                                                                         // 4526\n\tvar stick;                                                                                                            // 4527\n                                                                                                                       // 4528\n\tif (prefix) { prefix += '-'; }                                                                                        // 4529\n\teventProps = el.data(prefix + 'event') || null;                                                                       // 4530\n                                                                                                                       // 4531\n\tif (eventProps) {                                                                                                     // 4532\n\t\tif (typeof eventProps === 'object') {                                                                                // 4533\n\t\t\teventProps = $.extend({}, eventProps); // make a copy                                                               // 4534\n\t\t}                                                                                                                    // 4535\n\t\telse { // something like 1 or true. still signal event creation                                                      // 4536\n\t\t\teventProps = {};                                                                                                    // 4537\n\t\t}                                                                                                                    // 4538\n                                                                                                                       // 4539\n\t\t// pluck special-cased date/time properties                                                                          // 4540\n\t\tstartTime = eventProps.start;                                                                                        // 4541\n\t\tif (startTime == null) { startTime = eventProps.time; } // accept 'time' as well                                     // 4542\n\t\tduration = eventProps.duration;                                                                                      // 4543\n\t\tstick = eventProps.stick;                                                                                            // 4544\n\t\tdelete eventProps.start;                                                                                             // 4545\n\t\tdelete eventProps.time;                                                                                              // 4546\n\t\tdelete eventProps.duration;                                                                                          // 4547\n\t\tdelete eventProps.stick;                                                                                             // 4548\n\t}                                                                                                                     // 4549\n                                                                                                                       // 4550\n\t// fallback to standalone attribute values for each of the date/time properties                                       // 4551\n\tif (startTime == null) { startTime = el.data(prefix + 'start'); }                                                     // 4552\n\tif (startTime == null) { startTime = el.data(prefix + 'time'); } // accept 'time' as well                             // 4553\n\tif (duration == null) { duration = el.data(prefix + 'duration'); }                                                    // 4554\n\tif (stick == null) { stick = el.data(prefix + 'stick'); }                                                             // 4555\n                                                                                                                       // 4556\n\t// massage into correct data types                                                                                    // 4557\n\tstartTime = startTime != null ? moment.duration(startTime) : null;                                                    // 4558\n\tduration = duration != null ? moment.duration(duration) : null;                                                       // 4559\n\tstick = Boolean(stick);                                                                                               // 4560\n                                                                                                                       // 4561\n\treturn { eventProps: eventProps, startTime: startTime, duration: duration, stick: stick };                            // 4562\n}                                                                                                                      // 4563\n                                                                                                                       // 4564\n                                                                                                                       // 4565\n;;                                                                                                                     // 4566\n                                                                                                                       // 4567\n/*                                                                                                                     // 4568\nA set of rendering and date-related methods for a visual component comprised of one or more rows of day columns.       // 4569\nPrerequisite: the object being mixed into needs to be a *Grid*                                                         // 4570\n*/                                                                                                                     // 4571\nvar DayTableMixin = FC.DayTableMixin = {                                                                               // 4572\n                                                                                                                       // 4573\n\tbreakOnWeeks: false, // should create a new row for each week?                                                        // 4574\n\tdayDates: null, // whole-day dates for each column. left to right                                                     // 4575\n\tdayIndices: null, // for each day from start, the offset                                                              // 4576\n\tdaysPerRow: null,                                                                                                     // 4577\n\trowCnt: null,                                                                                                         // 4578\n\tcolCnt: null,                                                                                                         // 4579\n\tcolHeadFormat: null,                                                                                                  // 4580\n                                                                                                                       // 4581\n                                                                                                                       // 4582\n\t// Populates internal variables used for date calculation and rendering                                               // 4583\n\tupdateDayTable: function() {                                                                                          // 4584\n\t\tvar view = this.view;                                                                                                // 4585\n\t\tvar date = this.start.clone();                                                                                       // 4586\n\t\tvar dayIndex = -1;                                                                                                   // 4587\n\t\tvar dayIndices = [];                                                                                                 // 4588\n\t\tvar dayDates = [];                                                                                                   // 4589\n\t\tvar daysPerRow;                                                                                                      // 4590\n\t\tvar firstDay;                                                                                                        // 4591\n\t\tvar rowCnt;                                                                                                          // 4592\n                                                                                                                       // 4593\n\t\twhile (date.isBefore(this.end)) { // loop each day from start to end                                                 // 4594\n\t\t\tif (view.isHiddenDay(date)) {                                                                                       // 4595\n\t\t\t\tdayIndices.push(dayIndex + 0.5); // mark that it's between indices                                                 // 4596\n\t\t\t}                                                                                                                   // 4597\n\t\t\telse {                                                                                                              // 4598\n\t\t\t\tdayIndex++;                                                                                                        // 4599\n\t\t\t\tdayIndices.push(dayIndex);                                                                                         // 4600\n\t\t\t\tdayDates.push(date.clone());                                                                                       // 4601\n\t\t\t}                                                                                                                   // 4602\n\t\t\tdate.add(1, 'days');                                                                                                // 4603\n\t\t}                                                                                                                    // 4604\n                                                                                                                       // 4605\n\t\tif (this.breakOnWeeks) {                                                                                             // 4606\n\t\t\t// count columns until the day-of-week repeats                                                                      // 4607\n\t\t\tfirstDay = dayDates[0].day();                                                                                       // 4608\n\t\t\tfor (daysPerRow = 1; daysPerRow < dayDates.length; daysPerRow++) {                                                  // 4609\n\t\t\t\tif (dayDates[daysPerRow].day() == firstDay) {                                                                      // 4610\n\t\t\t\t\tbreak;                                                                                                            // 4611\n\t\t\t\t}                                                                                                                  // 4612\n\t\t\t}                                                                                                                   // 4613\n\t\t\trowCnt = Math.ceil(dayDates.length / daysPerRow);                                                                   // 4614\n\t\t}                                                                                                                    // 4615\n\t\telse {                                                                                                               // 4616\n\t\t\trowCnt = 1;                                                                                                         // 4617\n\t\t\tdaysPerRow = dayDates.length;                                                                                       // 4618\n\t\t}                                                                                                                    // 4619\n                                                                                                                       // 4620\n\t\tthis.dayDates = dayDates;                                                                                            // 4621\n\t\tthis.dayIndices = dayIndices;                                                                                        // 4622\n\t\tthis.daysPerRow = daysPerRow;                                                                                        // 4623\n\t\tthis.rowCnt = rowCnt;                                                                                                // 4624\n\t\t                                                                                                                     // 4625\n\t\tthis.updateDayTableCols();                                                                                           // 4626\n\t},                                                                                                                    // 4627\n                                                                                                                       // 4628\n                                                                                                                       // 4629\n\t// Computes and assigned the colCnt property and updates any options that may be computed from it                     // 4630\n\tupdateDayTableCols: function() {                                                                                      // 4631\n\t\tthis.colCnt = this.computeColCnt();                                                                                  // 4632\n\t\tthis.colHeadFormat = this.view.opt('columnFormat') || this.computeColHeadFormat();                                   // 4633\n\t},                                                                                                                    // 4634\n                                                                                                                       // 4635\n                                                                                                                       // 4636\n\t// Determines how many columns there should be in the table                                                           // 4637\n\tcomputeColCnt: function() {                                                                                           // 4638\n\t\treturn this.daysPerRow;                                                                                              // 4639\n\t},                                                                                                                    // 4640\n                                                                                                                       // 4641\n                                                                                                                       // 4642\n\t// Computes the ambiguously-timed moment for the given cell                                                           // 4643\n\tgetCellDate: function(row, col) {                                                                                     // 4644\n\t\treturn this.dayDates[                                                                                                // 4645\n\t\t\t\tthis.getCellDayIndex(row, col)                                                                                     // 4646\n\t\t\t].clone();                                                                                                          // 4647\n\t},                                                                                                                    // 4648\n                                                                                                                       // 4649\n                                                                                                                       // 4650\n\t// Computes the ambiguously-timed date range for the given cell                                                       // 4651\n\tgetCellRange: function(row, col) {                                                                                    // 4652\n\t\tvar start = this.getCellDate(row, col);                                                                              // 4653\n\t\tvar end = start.clone().add(1, 'days');                                                                              // 4654\n                                                                                                                       // 4655\n\t\treturn { start: start, end: end };                                                                                   // 4656\n\t},                                                                                                                    // 4657\n                                                                                                                       // 4658\n                                                                                                                       // 4659\n\t// Returns the number of day cells, chronologically, from the first of the grid (0-based)                             // 4660\n\tgetCellDayIndex: function(row, col) {                                                                                 // 4661\n\t\treturn row * this.daysPerRow + this.getColDayIndex(col);                                                             // 4662\n\t},                                                                                                                    // 4663\n                                                                                                                       // 4664\n                                                                                                                       // 4665\n\t// Returns the numner of day cells, chronologically, from the first cell in *any given row*                           // 4666\n\tgetColDayIndex: function(col) {                                                                                       // 4667\n\t\tif (this.isRTL) {                                                                                                    // 4668\n\t\t\treturn this.colCnt - 1 - col;                                                                                       // 4669\n\t\t}                                                                                                                    // 4670\n\t\telse {                                                                                                               // 4671\n\t\t\treturn col;                                                                                                         // 4672\n\t\t}                                                                                                                    // 4673\n\t},                                                                                                                    // 4674\n                                                                                                                       // 4675\n                                                                                                                       // 4676\n\t// Given a date, returns its chronolocial cell-index from the first cell of the grid.                                 // 4677\n\t// If the date lies between cells (because of hiddenDays), returns a floating-point value between offsets.            // 4678\n\t// If before the first offset, returns a negative number.                                                             // 4679\n\t// If after the last offset, returns an offset past the last cell offset.                                             // 4680\n\t// Only works for *start* dates of cells. Will not work for exclusive end dates for cells.                            // 4681\n\tgetDateDayIndex: function(date) {                                                                                     // 4682\n\t\tvar dayIndices = this.dayIndices;                                                                                    // 4683\n\t\tvar dayOffset = date.diff(this.start, 'days');                                                                       // 4684\n                                                                                                                       // 4685\n\t\tif (dayOffset < 0) {                                                                                                 // 4686\n\t\t\treturn dayIndices[0] - 1;                                                                                           // 4687\n\t\t}                                                                                                                    // 4688\n\t\telse if (dayOffset >= dayIndices.length) {                                                                           // 4689\n\t\t\treturn dayIndices[dayIndices.length - 1] + 1;                                                                       // 4690\n\t\t}                                                                                                                    // 4691\n\t\telse {                                                                                                               // 4692\n\t\t\treturn dayIndices[dayOffset];                                                                                       // 4693\n\t\t}                                                                                                                    // 4694\n\t},                                                                                                                    // 4695\n                                                                                                                       // 4696\n                                                                                                                       // 4697\n\t/* Options                                                                                                            // 4698\n\t------------------------------------------------------------------------------------------------------------------*/  // 4699\n                                                                                                                       // 4700\n                                                                                                                       // 4701\n\t// Computes a default column header formatting string if `colFormat` is not explicitly defined                        // 4702\n\tcomputeColHeadFormat: function() {                                                                                    // 4703\n\t\t// if more than one week row, or if there are a lot of columns with not much space,                                  // 4704\n\t\t// put just the day numbers will be in each cell                                                                     // 4705\n\t\tif (this.rowCnt > 1 || this.colCnt > 10) {                                                                           // 4706\n\t\t\treturn 'ddd'; // \"Sat\"                                                                                              // 4707\n\t\t}                                                                                                                    // 4708\n\t\t// multiple days, so full single date string WON'T be in title text                                                  // 4709\n\t\telse if (this.colCnt > 1) {                                                                                          // 4710\n\t\t\treturn this.view.opt('dayOfMonthFormat'); // \"Sat 12/10\"                                                            // 4711\n\t\t}                                                                                                                    // 4712\n\t\t// single day, so full single date string will probably be in title text                                             // 4713\n\t\telse {                                                                                                               // 4714\n\t\t\treturn 'dddd'; // \"Saturday\"                                                                                        // 4715\n\t\t}                                                                                                                    // 4716\n\t},                                                                                                                    // 4717\n                                                                                                                       // 4718\n                                                                                                                       // 4719\n\t/* Slicing                                                                                                            // 4720\n\t------------------------------------------------------------------------------------------------------------------*/  // 4721\n                                                                                                                       // 4722\n                                                                                                                       // 4723\n\t// Slices up a date range into a segment for every week-row it intersects with                                        // 4724\n\tsliceRangeByRow: function(range) {                                                                                    // 4725\n\t\tvar daysPerRow = this.daysPerRow;                                                                                    // 4726\n\t\tvar normalRange = this.view.computeDayRange(range); // make whole-day range, considering nextDayThreshold            // 4727\n\t\tvar rangeFirst = this.getDateDayIndex(normalRange.start); // inclusive first index                                   // 4728\n\t\tvar rangeLast = this.getDateDayIndex(normalRange.end.clone().subtract(1, 'days')); // inclusive last index           // 4729\n\t\tvar segs = [];                                                                                                       // 4730\n\t\tvar row;                                                                                                             // 4731\n\t\tvar rowFirst, rowLast; // inclusive day-index range for current row                                                  // 4732\n\t\tvar segFirst, segLast; // inclusive day-index range for segment                                                      // 4733\n                                                                                                                       // 4734\n\t\tfor (row = 0; row < this.rowCnt; row++) {                                                                            // 4735\n\t\t\trowFirst = row * daysPerRow;                                                                                        // 4736\n\t\t\trowLast = rowFirst + daysPerRow - 1;                                                                                // 4737\n                                                                                                                       // 4738\n\t\t\t// intersect segment's offset range with the row's                                                                  // 4739\n\t\t\tsegFirst = Math.max(rangeFirst, rowFirst);                                                                          // 4740\n\t\t\tsegLast = Math.min(rangeLast, rowLast);                                                                             // 4741\n                                                                                                                       // 4742\n\t\t\t// deal with in-between indices                                                                                     // 4743\n\t\t\tsegFirst = Math.ceil(segFirst); // in-between starts round to next cell                                             // 4744\n\t\t\tsegLast = Math.floor(segLast); // in-between ends round to prev cell                                                // 4745\n                                                                                                                       // 4746\n\t\t\tif (segFirst <= segLast) { // was there any intersection with the current row?                                      // 4747\n\t\t\t\tsegs.push({                                                                                                        // 4748\n\t\t\t\t\trow: row,                                                                                                         // 4749\n                                                                                                                       // 4750\n\t\t\t\t\t// normalize to start of row                                                                                      // 4751\n\t\t\t\t\tfirstRowDayIndex: segFirst - rowFirst,                                                                            // 4752\n\t\t\t\t\tlastRowDayIndex: segLast - rowFirst,                                                                              // 4753\n                                                                                                                       // 4754\n\t\t\t\t\t// must be matching integers to be the segment's start/end                                                        // 4755\n\t\t\t\t\tisStart: segFirst === rangeFirst,                                                                                 // 4756\n\t\t\t\t\tisEnd: segLast === rangeLast                                                                                      // 4757\n\t\t\t\t});                                                                                                                // 4758\n\t\t\t}                                                                                                                   // 4759\n\t\t}                                                                                                                    // 4760\n                                                                                                                       // 4761\n\t\treturn segs;                                                                                                         // 4762\n\t},                                                                                                                    // 4763\n                                                                                                                       // 4764\n                                                                                                                       // 4765\n\t// Slices up a date range into a segment for every day-cell it intersects with.                                       // 4766\n\t// TODO: make more DRY with sliceRangeByRow somehow.                                                                  // 4767\n\tsliceRangeByDay: function(range) {                                                                                    // 4768\n\t\tvar daysPerRow = this.daysPerRow;                                                                                    // 4769\n\t\tvar normalRange = this.view.computeDayRange(range); // make whole-day range, considering nextDayThreshold            // 4770\n\t\tvar rangeFirst = this.getDateDayIndex(normalRange.start); // inclusive first index                                   // 4771\n\t\tvar rangeLast = this.getDateDayIndex(normalRange.end.clone().subtract(1, 'days')); // inclusive last index           // 4772\n\t\tvar segs = [];                                                                                                       // 4773\n\t\tvar row;                                                                                                             // 4774\n\t\tvar rowFirst, rowLast; // inclusive day-index range for current row                                                  // 4775\n\t\tvar i;                                                                                                               // 4776\n\t\tvar segFirst, segLast; // inclusive day-index range for segment                                                      // 4777\n                                                                                                                       // 4778\n\t\tfor (row = 0; row < this.rowCnt; row++) {                                                                            // 4779\n\t\t\trowFirst = row * daysPerRow;                                                                                        // 4780\n\t\t\trowLast = rowFirst + daysPerRow - 1;                                                                                // 4781\n                                                                                                                       // 4782\n\t\t\tfor (i = rowFirst; i <= rowLast; i++) {                                                                             // 4783\n                                                                                                                       // 4784\n\t\t\t\t// intersect segment's offset range with the row's                                                                 // 4785\n\t\t\t\tsegFirst = Math.max(rangeFirst, i);                                                                                // 4786\n\t\t\t\tsegLast = Math.min(rangeLast, i);                                                                                  // 4787\n                                                                                                                       // 4788\n\t\t\t\t// deal with in-between indices                                                                                    // 4789\n\t\t\t\tsegFirst = Math.ceil(segFirst); // in-between starts round to next cell                                            // 4790\n\t\t\t\tsegLast = Math.floor(segLast); // in-between ends round to prev cell                                               // 4791\n                                                                                                                       // 4792\n\t\t\t\tif (segFirst <= segLast) { // was there any intersection with the current row?                                     // 4793\n\t\t\t\t\tsegs.push({                                                                                                       // 4794\n\t\t\t\t\t\trow: row,                                                                                                        // 4795\n                                                                                                                       // 4796\n\t\t\t\t\t\t// normalize to start of row                                                                                     // 4797\n\t\t\t\t\t\tfirstRowDayIndex: segFirst - rowFirst,                                                                           // 4798\n\t\t\t\t\t\tlastRowDayIndex: segLast - rowFirst,                                                                             // 4799\n                                                                                                                       // 4800\n\t\t\t\t\t\t// must be matching integers to be the segment's start/end                                                       // 4801\n\t\t\t\t\t\tisStart: segFirst === rangeFirst,                                                                                // 4802\n\t\t\t\t\t\tisEnd: segLast === rangeLast                                                                                     // 4803\n\t\t\t\t\t});                                                                                                               // 4804\n\t\t\t\t}                                                                                                                  // 4805\n\t\t\t}                                                                                                                   // 4806\n\t\t}                                                                                                                    // 4807\n                                                                                                                       // 4808\n\t\treturn segs;                                                                                                         // 4809\n\t},                                                                                                                    // 4810\n                                                                                                                       // 4811\n                                                                                                                       // 4812\n\t/* Header Rendering                                                                                                   // 4813\n\t------------------------------------------------------------------------------------------------------------------*/  // 4814\n                                                                                                                       // 4815\n                                                                                                                       // 4816\n\trenderHeadHtml: function() {                                                                                          // 4817\n\t\tvar view = this.view;                                                                                                // 4818\n                                                                                                                       // 4819\n\t\treturn '' +                                                                                                          // 4820\n\t\t\t'<div class=\"fc-row ' + view.widgetHeaderClass + '\">' +                                                             // 4821\n\t\t\t\t'<table>' +                                                                                                        // 4822\n\t\t\t\t\t'<thead>' +                                                                                                       // 4823\n\t\t\t\t\t\tthis.renderHeadTrHtml() +                                                                                        // 4824\n\t\t\t\t\t'</thead>' +                                                                                                      // 4825\n\t\t\t\t'</table>' +                                                                                                       // 4826\n\t\t\t'</div>';                                                                                                           // 4827\n\t},                                                                                                                    // 4828\n                                                                                                                       // 4829\n                                                                                                                       // 4830\n\trenderHeadIntroHtml: function() {                                                                                     // 4831\n\t\treturn this.renderIntroHtml(); // fall back to generic                                                               // 4832\n\t},                                                                                                                    // 4833\n                                                                                                                       // 4834\n                                                                                                                       // 4835\n\trenderHeadTrHtml: function() {                                                                                        // 4836\n\t\treturn '' +                                                                                                          // 4837\n\t\t\t'<tr>' +                                                                                                            // 4838\n\t\t\t\t(this.isRTL ? '' : this.renderHeadIntroHtml()) +                                                                   // 4839\n\t\t\t\tthis.renderHeadDateCellsHtml() +                                                                                   // 4840\n\t\t\t\t(this.isRTL ? this.renderHeadIntroHtml() : '') +                                                                   // 4841\n\t\t\t'</tr>';                                                                                                            // 4842\n\t},                                                                                                                    // 4843\n                                                                                                                       // 4844\n                                                                                                                       // 4845\n\trenderHeadDateCellsHtml: function() {                                                                                 // 4846\n\t\tvar htmls = [];                                                                                                      // 4847\n\t\tvar col, date;                                                                                                       // 4848\n                                                                                                                       // 4849\n\t\tfor (col = 0; col < this.colCnt; col++) {                                                                            // 4850\n\t\t\tdate = this.getCellDate(0, col);                                                                                    // 4851\n\t\t\thtmls.push(this.renderHeadDateCellHtml(date));                                                                      // 4852\n\t\t}                                                                                                                    // 4853\n                                                                                                                       // 4854\n\t\treturn htmls.join('');                                                                                               // 4855\n\t},                                                                                                                    // 4856\n                                                                                                                       // 4857\n                                                                                                                       // 4858\n\trenderHeadDateCellHtml: function(date, colspan) {                                                                     // 4859\n\t\tvar view = this.view;                                                                                                // 4860\n                                                                                                                       // 4861\n\t\treturn '' +                                                                                                          // 4862\n\t\t\t'<th class=\"fc-day-header ' + view.widgetHeaderClass + ' fc-' + dayIDs[date.day()] + '\"' +                          // 4863\n\t\t\t\t(colspan > 1 ? ' colspan=\"' + colspan + '\"' : '') +                                                                // 4864\n\t\t\t\t'>' +                                                                                                              // 4865\n\t\t\t\thtmlEscape(date.format(this.colHeadFormat)) +                                                                      // 4866\n\t\t\t'</th>';                                                                                                            // 4867\n\t},                                                                                                                    // 4868\n                                                                                                                       // 4869\n                                                                                                                       // 4870\n\t/* Background Rendering                                                                                               // 4871\n\t------------------------------------------------------------------------------------------------------------------*/  // 4872\n                                                                                                                       // 4873\n                                                                                                                       // 4874\n\trenderBgTrHtml: function(row) {                                                                                       // 4875\n\t\treturn '' +                                                                                                          // 4876\n\t\t\t'<tr>' +                                                                                                            // 4877\n\t\t\t\t(this.isRTL ? '' : this.renderBgIntroHtml(row)) +                                                                  // 4878\n\t\t\t\tthis.renderBgCellsHtml(row) +                                                                                      // 4879\n\t\t\t\t(this.isRTL ? this.renderBgIntroHtml(row) : '') +                                                                  // 4880\n\t\t\t'</tr>';                                                                                                            // 4881\n\t},                                                                                                                    // 4882\n                                                                                                                       // 4883\n                                                                                                                       // 4884\n\trenderBgIntroHtml: function(row) {                                                                                    // 4885\n\t\treturn this.renderIntroHtml(); // fall back to generic                                                               // 4886\n\t},                                                                                                                    // 4887\n                                                                                                                       // 4888\n                                                                                                                       // 4889\n\trenderBgCellsHtml: function(row) {                                                                                    // 4890\n\t\tvar htmls = [];                                                                                                      // 4891\n\t\tvar col, date;                                                                                                       // 4892\n                                                                                                                       // 4893\n\t\tfor (col = 0; col < this.colCnt; col++) {                                                                            // 4894\n\t\t\tdate = this.getCellDate(row, col);                                                                                  // 4895\n\t\t\thtmls.push(this.renderBgCellHtml(date));                                                                            // 4896\n\t\t}                                                                                                                    // 4897\n                                                                                                                       // 4898\n\t\treturn htmls.join('');                                                                                               // 4899\n\t},                                                                                                                    // 4900\n                                                                                                                       // 4901\n                                                                                                                       // 4902\n\trenderBgCellHtml: function(date) {                                                                                    // 4903\n\t\tvar view = this.view;                                                                                                // 4904\n\t\tvar classes = this.getDayClasses(date);                                                                              // 4905\n                                                                                                                       // 4906\n\t\tclasses.unshift('fc-day', view.widgetContentClass);                                                                  // 4907\n                                                                                                                       // 4908\n\t\treturn '<td class=\"' + classes.join(' ') + '\"' +                                                                     // 4909\n\t\t\t' data-date=\"' + date.format('YYYY-MM-DD') + '\"' + // if date has a time, won't format it                           // 4910\n\t\t\t'></td>';                                                                                                           // 4911\n\t},                                                                                                                    // 4912\n                                                                                                                       // 4913\n                                                                                                                       // 4914\n\t/* Generic                                                                                                            // 4915\n\t------------------------------------------------------------------------------------------------------------------*/  // 4916\n                                                                                                                       // 4917\n                                                                                                                       // 4918\n\t// Generates the default HTML intro for any row. User classes should override                                         // 4919\n\trenderIntroHtml: function() {                                                                                         // 4920\n\t},                                                                                                                    // 4921\n                                                                                                                       // 4922\n                                                                                                                       // 4923\n\t/* Utils                                                                                                              // 4924\n\t------------------------------------------------------------------------------------------------------------------*/  // 4925\n                                                                                                                       // 4926\n                                                                                                                       // 4927\n\t// Applies the generic \"intro\" and \"outro\" HTML to the given cells.                                                   // 4928\n\t// Intro means the leftmost cell when the calendar is LTR and the rightmost cell when RTL. Vice-versa for outro.      // 4929\n\tbookendCells: function(trEl) {                                                                                        // 4930\n\t\tvar introHtml = this.renderIntroHtml();                                                                              // 4931\n                                                                                                                       // 4932\n\t\tif (introHtml) {                                                                                                     // 4933\n\t\t\tif (this.isRTL) {                                                                                                   // 4934\n\t\t\t\ttrEl.append(introHtml);                                                                                            // 4935\n\t\t\t}                                                                                                                   // 4936\n\t\t\telse {                                                                                                              // 4937\n\t\t\t\ttrEl.prepend(introHtml);                                                                                           // 4938\n\t\t\t}                                                                                                                   // 4939\n\t\t}                                                                                                                    // 4940\n\t}                                                                                                                     // 4941\n                                                                                                                       // 4942\n};                                                                                                                     // 4943\n                                                                                                                       // 4944\n;;                                                                                                                     // 4945\n                                                                                                                       // 4946\n/* A component that renders a grid of whole-days that runs horizontally. There can be multiple rows, one per week.     // 4947\n----------------------------------------------------------------------------------------------------------------------*/\n                                                                                                                       // 4949\nvar DayGrid = FC.DayGrid = Grid.extend(DayTableMixin, {                                                                // 4950\n                                                                                                                       // 4951\n\tnumbersVisible: false, // should render a row for day/week numbers? set by outside view. TODO: make internal          // 4952\n\tbottomCoordPadding: 0, // hack for extending the hit area for the last row of the coordinate grid                     // 4953\n                                                                                                                       // 4954\n\trowEls: null, // set of fake row elements                                                                             // 4955\n\tcellEls: null, // set of whole-day elements comprising the row's background                                           // 4956\n\thelperEls: null, // set of cell skeleton elements for rendering the mock event \"helper\"                               // 4957\n                                                                                                                       // 4958\n\trowCoordCache: null,                                                                                                  // 4959\n\tcolCoordCache: null,                                                                                                  // 4960\n                                                                                                                       // 4961\n                                                                                                                       // 4962\n\t// Renders the rows and columns into the component's `this.el`, which should already be assigned.                     // 4963\n\t// isRigid determins whether the individual rows should ignore the contents and be a constant height.                 // 4964\n\t// Relies on the view's colCnt and rowCnt. In the future, this component should probably be self-sufficient.          // 4965\n\trenderDates: function(isRigid) {                                                                                      // 4966\n\t\tvar view = this.view;                                                                                                // 4967\n\t\tvar rowCnt = this.rowCnt;                                                                                            // 4968\n\t\tvar colCnt = this.colCnt;                                                                                            // 4969\n\t\tvar html = '';                                                                                                       // 4970\n\t\tvar row;                                                                                                             // 4971\n\t\tvar col;                                                                                                             // 4972\n                                                                                                                       // 4973\n\t\tfor (row = 0; row < rowCnt; row++) {                                                                                 // 4974\n\t\t\thtml += this.renderDayRowHtml(row, isRigid);                                                                        // 4975\n\t\t}                                                                                                                    // 4976\n\t\tthis.el.html(html);                                                                                                  // 4977\n                                                                                                                       // 4978\n\t\tthis.rowEls = this.el.find('.fc-row');                                                                               // 4979\n\t\tthis.cellEls = this.el.find('.fc-day');                                                                              // 4980\n                                                                                                                       // 4981\n\t\tthis.rowCoordCache = new CoordCache({                                                                                // 4982\n\t\t\tels: this.rowEls,                                                                                                   // 4983\n\t\t\tisVertical: true                                                                                                    // 4984\n\t\t});                                                                                                                  // 4985\n\t\tthis.colCoordCache = new CoordCache({                                                                                // 4986\n\t\t\tels: this.cellEls.slice(0, this.colCnt), // only the first row                                                      // 4987\n\t\t\tisHorizontal: true                                                                                                  // 4988\n\t\t});                                                                                                                  // 4989\n                                                                                                                       // 4990\n\t\t// trigger dayRender with each cell's element                                                                        // 4991\n\t\tfor (row = 0; row < rowCnt; row++) {                                                                                 // 4992\n\t\t\tfor (col = 0; col < colCnt; col++) {                                                                                // 4993\n\t\t\t\tview.trigger(                                                                                                      // 4994\n\t\t\t\t\t'dayRender',                                                                                                      // 4995\n\t\t\t\t\tnull,                                                                                                             // 4996\n\t\t\t\t\tthis.getCellDate(row, col),                                                                                       // 4997\n\t\t\t\t\tthis.getCellEl(row, col)                                                                                          // 4998\n\t\t\t\t);                                                                                                                 // 4999\n\t\t\t}                                                                                                                   // 5000\n\t\t}                                                                                                                    // 5001\n\t},                                                                                                                    // 5002\n                                                                                                                       // 5003\n                                                                                                                       // 5004\n\tunrenderDates: function() {                                                                                           // 5005\n\t\tthis.removeSegPopover();                                                                                             // 5006\n\t},                                                                                                                    // 5007\n                                                                                                                       // 5008\n                                                                                                                       // 5009\n\trenderBusinessHours: function() {                                                                                     // 5010\n\t\tvar events = this.view.calendar.getBusinessHoursEvents(true); // wholeDay=true                                       // 5011\n\t\tvar segs = this.eventsToSegs(events);                                                                                // 5012\n                                                                                                                       // 5013\n\t\tthis.renderFill('businessHours', segs, 'bgevent');                                                                   // 5014\n\t},                                                                                                                    // 5015\n                                                                                                                       // 5016\n                                                                                                                       // 5017\n\t// Generates the HTML for a single row, which is a div that wraps a table.                                            // 5018\n\t// `row` is the row number.                                                                                           // 5019\n\trenderDayRowHtml: function(row, isRigid) {                                                                            // 5020\n\t\tvar view = this.view;                                                                                                // 5021\n\t\tvar classes = [ 'fc-row', 'fc-week', view.widgetContentClass ];                                                      // 5022\n                                                                                                                       // 5023\n\t\tif (isRigid) {                                                                                                       // 5024\n\t\t\tclasses.push('fc-rigid');                                                                                           // 5025\n\t\t}                                                                                                                    // 5026\n                                                                                                                       // 5027\n\t\treturn '' +                                                                                                          // 5028\n\t\t\t'<div class=\"' + classes.join(' ') + '\">' +                                                                         // 5029\n\t\t\t\t'<div class=\"fc-bg\">' +                                                                                            // 5030\n\t\t\t\t\t'<table>' +                                                                                                       // 5031\n\t\t\t\t\t\tthis.renderBgTrHtml(row) +                                                                                       // 5032\n\t\t\t\t\t'</table>' +                                                                                                      // 5033\n\t\t\t\t'</div>' +                                                                                                         // 5034\n\t\t\t\t'<div class=\"fc-content-skeleton\">' +                                                                              // 5035\n\t\t\t\t\t'<table>' +                                                                                                       // 5036\n\t\t\t\t\t\t(this.numbersVisible ?                                                                                           // 5037\n\t\t\t\t\t\t\t'<thead>' +                                                                                                     // 5038\n\t\t\t\t\t\t\t\tthis.renderNumberTrHtml(row) +                                                                                 // 5039\n\t\t\t\t\t\t\t'</thead>' :                                                                                                    // 5040\n\t\t\t\t\t\t\t''                                                                                                              // 5041\n\t\t\t\t\t\t\t) +                                                                                                             // 5042\n\t\t\t\t\t'</table>' +                                                                                                      // 5043\n\t\t\t\t'</div>' +                                                                                                         // 5044\n\t\t\t'</div>';                                                                                                           // 5045\n\t},                                                                                                                    // 5046\n                                                                                                                       // 5047\n                                                                                                                       // 5048\n\t/* Grid Number Rendering                                                                                              // 5049\n\t------------------------------------------------------------------------------------------------------------------*/  // 5050\n                                                                                                                       // 5051\n                                                                                                                       // 5052\n\trenderNumberTrHtml: function(row) {                                                                                   // 5053\n\t\treturn '' +                                                                                                          // 5054\n\t\t\t'<tr>' +                                                                                                            // 5055\n\t\t\t\t(this.isRTL ? '' : this.renderNumberIntroHtml(row)) +                                                              // 5056\n\t\t\t\tthis.renderNumberCellsHtml(row) +                                                                                  // 5057\n\t\t\t\t(this.isRTL ? this.renderNumberIntroHtml(row) : '') +                                                              // 5058\n\t\t\t'</tr>';                                                                                                            // 5059\n\t},                                                                                                                    // 5060\n                                                                                                                       // 5061\n                                                                                                                       // 5062\n\trenderNumberIntroHtml: function(row) {                                                                                // 5063\n\t\treturn this.renderIntroHtml();                                                                                       // 5064\n\t},                                                                                                                    // 5065\n                                                                                                                       // 5066\n                                                                                                                       // 5067\n\trenderNumberCellsHtml: function(row) {                                                                                // 5068\n\t\tvar htmls = [];                                                                                                      // 5069\n\t\tvar col, date;                                                                                                       // 5070\n                                                                                                                       // 5071\n\t\tfor (col = 0; col < this.colCnt; col++) {                                                                            // 5072\n\t\t\tdate = this.getCellDate(row, col);                                                                                  // 5073\n\t\t\thtmls.push(this.renderNumberCellHtml(date));                                                                        // 5074\n\t\t}                                                                                                                    // 5075\n                                                                                                                       // 5076\n\t\treturn htmls.join('');                                                                                               // 5077\n\t},                                                                                                                    // 5078\n                                                                                                                       // 5079\n                                                                                                                       // 5080\n\t// Generates the HTML for the <td>s of the \"number\" row in the DayGrid's content skeleton.                            // 5081\n\t// The number row will only exist if either day numbers or week numbers are turned on.                                // 5082\n\trenderNumberCellHtml: function(date) {                                                                                // 5083\n\t\tvar classes;                                                                                                         // 5084\n                                                                                                                       // 5085\n\t\tif (!this.view.dayNumbersVisible) { // if there are week numbers but not day numbers                                 // 5086\n\t\t\treturn '<td/>'; //  will create an empty space above events :(                                                      // 5087\n\t\t}                                                                                                                    // 5088\n                                                                                                                       // 5089\n\t\tclasses = this.getDayClasses(date);                                                                                  // 5090\n\t\tclasses.unshift('fc-day-number');                                                                                    // 5091\n                                                                                                                       // 5092\n\t\treturn '' +                                                                                                          // 5093\n\t\t\t'<td class=\"' + classes.join(' ') + '\" data-date=\"' + date.format() + '\">' +                                        // 5094\n\t\t\t\tdate.date() +                                                                                                      // 5095\n\t\t\t'</td>';                                                                                                            // 5096\n\t},                                                                                                                    // 5097\n                                                                                                                       // 5098\n                                                                                                                       // 5099\n\t/* Options                                                                                                            // 5100\n\t------------------------------------------------------------------------------------------------------------------*/  // 5101\n                                                                                                                       // 5102\n                                                                                                                       // 5103\n\t// Computes a default event time formatting string if `timeFormat` is not explicitly defined                          // 5104\n\tcomputeEventTimeFormat: function() {                                                                                  // 5105\n\t\treturn this.view.opt('extraSmallTimeFormat'); // like \"6p\" or \"6:30p\"                                                // 5106\n\t},                                                                                                                    // 5107\n                                                                                                                       // 5108\n                                                                                                                       // 5109\n\t// Computes a default `displayEventEnd` value if one is not expliclty defined                                         // 5110\n\tcomputeDisplayEventEnd: function() {                                                                                  // 5111\n\t\treturn this.colCnt == 1; // we'll likely have space if there's only one day                                          // 5112\n\t},                                                                                                                    // 5113\n                                                                                                                       // 5114\n                                                                                                                       // 5115\n\t/* Dates                                                                                                              // 5116\n\t------------------------------------------------------------------------------------------------------------------*/  // 5117\n                                                                                                                       // 5118\n                                                                                                                       // 5119\n\trangeUpdated: function() {                                                                                            // 5120\n\t\tthis.updateDayTable();                                                                                               // 5121\n\t},                                                                                                                    // 5122\n                                                                                                                       // 5123\n                                                                                                                       // 5124\n\t// Slices up the given span (unzoned start/end with other misc data) into an array of segments                        // 5125\n\tspanToSegs: function(span) {                                                                                          // 5126\n\t\tvar segs = this.sliceRangeByRow(span);                                                                               // 5127\n\t\tvar i, seg;                                                                                                          // 5128\n                                                                                                                       // 5129\n\t\tfor (i = 0; i < segs.length; i++) {                                                                                  // 5130\n\t\t\tseg = segs[i];                                                                                                      // 5131\n\t\t\tif (this.isRTL) {                                                                                                   // 5132\n\t\t\t\tseg.leftCol = this.daysPerRow - 1 - seg.lastRowDayIndex;                                                           // 5133\n\t\t\t\tseg.rightCol = this.daysPerRow - 1 - seg.firstRowDayIndex;                                                         // 5134\n\t\t\t}                                                                                                                   // 5135\n\t\t\telse {                                                                                                              // 5136\n\t\t\t\tseg.leftCol = seg.firstRowDayIndex;                                                                                // 5137\n\t\t\t\tseg.rightCol = seg.lastRowDayIndex;                                                                                // 5138\n\t\t\t}                                                                                                                   // 5139\n\t\t}                                                                                                                    // 5140\n                                                                                                                       // 5141\n\t\treturn segs;                                                                                                         // 5142\n\t},                                                                                                                    // 5143\n                                                                                                                       // 5144\n                                                                                                                       // 5145\n\t/* Hit System                                                                                                         // 5146\n\t------------------------------------------------------------------------------------------------------------------*/  // 5147\n                                                                                                                       // 5148\n                                                                                                                       // 5149\n\tprepareHits: function() {                                                                                             // 5150\n\t\tthis.colCoordCache.build();                                                                                          // 5151\n\t\tthis.rowCoordCache.build();                                                                                          // 5152\n\t\tthis.rowCoordCache.bottoms[this.rowCnt - 1] += this.bottomCoordPadding; // hack                                      // 5153\n\t},                                                                                                                    // 5154\n                                                                                                                       // 5155\n                                                                                                                       // 5156\n\treleaseHits: function() {                                                                                             // 5157\n\t\tthis.colCoordCache.clear();                                                                                          // 5158\n\t\tthis.rowCoordCache.clear();                                                                                          // 5159\n\t},                                                                                                                    // 5160\n                                                                                                                       // 5161\n                                                                                                                       // 5162\n\tqueryHit: function(leftOffset, topOffset) {                                                                           // 5163\n\t\tvar col = this.colCoordCache.getHorizontalIndex(leftOffset);                                                         // 5164\n\t\tvar row = this.rowCoordCache.getVerticalIndex(topOffset);                                                            // 5165\n                                                                                                                       // 5166\n\t\tif (row != null && col != null) {                                                                                    // 5167\n\t\t\treturn this.getCellHit(row, col);                                                                                   // 5168\n\t\t}                                                                                                                    // 5169\n\t},                                                                                                                    // 5170\n                                                                                                                       // 5171\n                                                                                                                       // 5172\n\tgetHitSpan: function(hit) {                                                                                           // 5173\n\t\treturn this.getCellRange(hit.row, hit.col);                                                                          // 5174\n\t},                                                                                                                    // 5175\n                                                                                                                       // 5176\n                                                                                                                       // 5177\n\tgetHitEl: function(hit) {                                                                                             // 5178\n\t\treturn this.getCellEl(hit.row, hit.col);                                                                             // 5179\n\t},                                                                                                                    // 5180\n                                                                                                                       // 5181\n                                                                                                                       // 5182\n\t/* Cell System                                                                                                        // 5183\n\t------------------------------------------------------------------------------------------------------------------*/  // 5184\n\t// FYI: the first column is the leftmost column, regardless of date                                                   // 5185\n                                                                                                                       // 5186\n                                                                                                                       // 5187\n\tgetCellHit: function(row, col) {                                                                                      // 5188\n\t\treturn {                                                                                                             // 5189\n\t\t\trow: row,                                                                                                           // 5190\n\t\t\tcol: col,                                                                                                           // 5191\n\t\t\tcomponent: this, // needed unfortunately :(                                                                         // 5192\n\t\t\tleft: this.colCoordCache.getLeftOffset(col),                                                                        // 5193\n\t\t\tright: this.colCoordCache.getRightOffset(col),                                                                      // 5194\n\t\t\ttop: this.rowCoordCache.getTopOffset(row),                                                                          // 5195\n\t\t\tbottom: this.rowCoordCache.getBottomOffset(row)                                                                     // 5196\n\t\t};                                                                                                                   // 5197\n\t},                                                                                                                    // 5198\n                                                                                                                       // 5199\n                                                                                                                       // 5200\n\tgetCellEl: function(row, col) {                                                                                       // 5201\n\t\treturn this.cellEls.eq(row * this.colCnt + col);                                                                     // 5202\n\t},                                                                                                                    // 5203\n                                                                                                                       // 5204\n                                                                                                                       // 5205\n\t/* Event Drag Visualization                                                                                           // 5206\n\t------------------------------------------------------------------------------------------------------------------*/  // 5207\n\t// TODO: move to DayGrid.event, similar to what we did with Grid's drag methods                                       // 5208\n                                                                                                                       // 5209\n                                                                                                                       // 5210\n\t// Renders a visual indication of an event or external element being dragged.                                         // 5211\n\t// `eventLocation` has zoned start and end (optional)                                                                 // 5212\n\trenderDrag: function(eventLocation, seg) {                                                                            // 5213\n                                                                                                                       // 5214\n\t\t// always render a highlight underneath                                                                              // 5215\n\t\tthis.renderHighlight(this.eventToSpan(eventLocation));                                                               // 5216\n                                                                                                                       // 5217\n\t\t// if a segment from the same calendar but another component is being dragged, render a helper event                 // 5218\n\t\tif (seg && !seg.el.closest(this.el).length) {                                                                        // 5219\n                                                                                                                       // 5220\n\t\t\tthis.renderEventLocationHelper(eventLocation, seg);                                                                 // 5221\n\t\t\tthis.applyDragOpacity(this.helperEls);                                                                              // 5222\n                                                                                                                       // 5223\n\t\t\treturn true; // a helper has been rendered                                                                          // 5224\n\t\t}                                                                                                                    // 5225\n\t},                                                                                                                    // 5226\n                                                                                                                       // 5227\n                                                                                                                       // 5228\n\t// Unrenders any visual indication of a hovering event                                                                // 5229\n\tunrenderDrag: function() {                                                                                            // 5230\n\t\tthis.unrenderHighlight();                                                                                            // 5231\n\t\tthis.unrenderHelper();                                                                                               // 5232\n\t},                                                                                                                    // 5233\n                                                                                                                       // 5234\n                                                                                                                       // 5235\n\t/* Event Resize Visualization                                                                                         // 5236\n\t------------------------------------------------------------------------------------------------------------------*/  // 5237\n                                                                                                                       // 5238\n                                                                                                                       // 5239\n\t// Renders a visual indication of an event being resized                                                              // 5240\n\trenderEventResize: function(eventLocation, seg) {                                                                     // 5241\n\t\tthis.renderHighlight(this.eventToSpan(eventLocation));                                                               // 5242\n\t\tthis.renderEventLocationHelper(eventLocation, seg);                                                                  // 5243\n\t},                                                                                                                    // 5244\n                                                                                                                       // 5245\n                                                                                                                       // 5246\n\t// Unrenders a visual indication of an event being resized                                                            // 5247\n\tunrenderEventResize: function() {                                                                                     // 5248\n\t\tthis.unrenderHighlight();                                                                                            // 5249\n\t\tthis.unrenderHelper();                                                                                               // 5250\n\t},                                                                                                                    // 5251\n                                                                                                                       // 5252\n                                                                                                                       // 5253\n\t/* Event Helper                                                                                                       // 5254\n\t------------------------------------------------------------------------------------------------------------------*/  // 5255\n                                                                                                                       // 5256\n                                                                                                                       // 5257\n\t// Renders a mock \"helper\" event. `sourceSeg` is the associated internal segment object. It can be null.              // 5258\n\trenderHelper: function(event, sourceSeg) {                                                                            // 5259\n\t\tvar helperNodes = [];                                                                                                // 5260\n\t\tvar segs = this.eventToSegs(event);                                                                                  // 5261\n\t\tvar rowStructs;                                                                                                      // 5262\n                                                                                                                       // 5263\n\t\tsegs = this.renderFgSegEls(segs); // assigns each seg's el and returns a subset of segs that were rendered           // 5264\n\t\trowStructs = this.renderSegRows(segs);                                                                               // 5265\n                                                                                                                       // 5266\n\t\t// inject each new event skeleton into each associated row                                                           // 5267\n\t\tthis.rowEls.each(function(row, rowNode) {                                                                            // 5268\n\t\t\tvar rowEl = $(rowNode); // the .fc-row                                                                              // 5269\n\t\t\tvar skeletonEl = $('<div class=\"fc-helper-skeleton\"><table/></div>'); // will be absolutely positioned              // 5270\n\t\t\tvar skeletonTop;                                                                                                    // 5271\n                                                                                                                       // 5272\n\t\t\t// If there is an original segment, match the top position. Otherwise, put it at the row's top level                // 5273\n\t\t\tif (sourceSeg && sourceSeg.row === row) {                                                                           // 5274\n\t\t\t\tskeletonTop = sourceSeg.el.position().top;                                                                         // 5275\n\t\t\t}                                                                                                                   // 5276\n\t\t\telse {                                                                                                              // 5277\n\t\t\t\tskeletonTop = rowEl.find('.fc-content-skeleton tbody').position().top;                                             // 5278\n\t\t\t}                                                                                                                   // 5279\n                                                                                                                       // 5280\n\t\t\tskeletonEl.css('top', skeletonTop)                                                                                  // 5281\n\t\t\t\t.find('table')                                                                                                     // 5282\n\t\t\t\t\t.append(rowStructs[row].tbodyEl);                                                                                 // 5283\n                                                                                                                       // 5284\n\t\t\trowEl.append(skeletonEl);                                                                                           // 5285\n\t\t\thelperNodes.push(skeletonEl[0]);                                                                                    // 5286\n\t\t});                                                                                                                  // 5287\n                                                                                                                       // 5288\n\t\tthis.helperEls = $(helperNodes); // array -> jQuery set                                                              // 5289\n\t},                                                                                                                    // 5290\n                                                                                                                       // 5291\n                                                                                                                       // 5292\n\t// Unrenders any visual indication of a mock helper event                                                             // 5293\n\tunrenderHelper: function() {                                                                                          // 5294\n\t\tif (this.helperEls) {                                                                                                // 5295\n\t\t\tthis.helperEls.remove();                                                                                            // 5296\n\t\t\tthis.helperEls = null;                                                                                              // 5297\n\t\t}                                                                                                                    // 5298\n\t},                                                                                                                    // 5299\n                                                                                                                       // 5300\n                                                                                                                       // 5301\n\t/* Fill System (highlight, background events, business hours)                                                         // 5302\n\t------------------------------------------------------------------------------------------------------------------*/  // 5303\n                                                                                                                       // 5304\n                                                                                                                       // 5305\n\tfillSegTag: 'td', // override the default tag name                                                                    // 5306\n                                                                                                                       // 5307\n                                                                                                                       // 5308\n\t// Renders a set of rectangles over the given segments of days.                                                       // 5309\n\t// Only returns segments that successfully rendered.                                                                  // 5310\n\trenderFill: function(type, segs, className) {                                                                         // 5311\n\t\tvar nodes = [];                                                                                                      // 5312\n\t\tvar i, seg;                                                                                                          // 5313\n\t\tvar skeletonEl;                                                                                                      // 5314\n                                                                                                                       // 5315\n\t\tsegs = this.renderFillSegEls(type, segs); // assignes `.el` to each seg. returns successfully rendered segs          // 5316\n                                                                                                                       // 5317\n\t\tfor (i = 0; i < segs.length; i++) {                                                                                  // 5318\n\t\t\tseg = segs[i];                                                                                                      // 5319\n\t\t\tskeletonEl = this.renderFillRow(type, seg, className);                                                              // 5320\n\t\t\tthis.rowEls.eq(seg.row).append(skeletonEl);                                                                         // 5321\n\t\t\tnodes.push(skeletonEl[0]);                                                                                          // 5322\n\t\t}                                                                                                                    // 5323\n                                                                                                                       // 5324\n\t\tthis.elsByFill[type] = $(nodes);                                                                                     // 5325\n                                                                                                                       // 5326\n\t\treturn segs;                                                                                                         // 5327\n\t},                                                                                                                    // 5328\n                                                                                                                       // 5329\n                                                                                                                       // 5330\n\t// Generates the HTML needed for one row of a fill. Requires the seg's el to be rendered.                             // 5331\n\trenderFillRow: function(type, seg, className) {                                                                       // 5332\n\t\tvar colCnt = this.colCnt;                                                                                            // 5333\n\t\tvar startCol = seg.leftCol;                                                                                          // 5334\n\t\tvar endCol = seg.rightCol + 1;                                                                                       // 5335\n\t\tvar skeletonEl;                                                                                                      // 5336\n\t\tvar trEl;                                                                                                            // 5337\n                                                                                                                       // 5338\n\t\tclassName = className || type.toLowerCase();                                                                         // 5339\n                                                                                                                       // 5340\n\t\tskeletonEl = $(                                                                                                      // 5341\n\t\t\t'<div class=\"fc-' + className + '-skeleton\">' +                                                                     // 5342\n\t\t\t\t'<table><tr/></table>' +                                                                                           // 5343\n\t\t\t'</div>'                                                                                                            // 5344\n\t\t);                                                                                                                   // 5345\n\t\ttrEl = skeletonEl.find('tr');                                                                                        // 5346\n                                                                                                                       // 5347\n\t\tif (startCol > 0) {                                                                                                  // 5348\n\t\t\ttrEl.append('<td colspan=\"' + startCol + '\"/>');                                                                    // 5349\n\t\t}                                                                                                                    // 5350\n                                                                                                                       // 5351\n\t\ttrEl.append(                                                                                                         // 5352\n\t\t\tseg.el.attr('colspan', endCol - startCol)                                                                           // 5353\n\t\t);                                                                                                                   // 5354\n                                                                                                                       // 5355\n\t\tif (endCol < colCnt) {                                                                                               // 5356\n\t\t\ttrEl.append('<td colspan=\"' + (colCnt - endCol) + '\"/>');                                                           // 5357\n\t\t}                                                                                                                    // 5358\n                                                                                                                       // 5359\n\t\tthis.bookendCells(trEl);                                                                                             // 5360\n                                                                                                                       // 5361\n\t\treturn skeletonEl;                                                                                                   // 5362\n\t}                                                                                                                     // 5363\n                                                                                                                       // 5364\n});                                                                                                                    // 5365\n                                                                                                                       // 5366\n;;                                                                                                                     // 5367\n                                                                                                                       // 5368\n/* Event-rendering methods for the DayGrid class                                                                       // 5369\n----------------------------------------------------------------------------------------------------------------------*/\n                                                                                                                       // 5371\nDayGrid.mixin({                                                                                                        // 5372\n                                                                                                                       // 5373\n\trowStructs: null, // an array of objects, each holding information about a row's foreground event-rendering           // 5374\n                                                                                                                       // 5375\n                                                                                                                       // 5376\n\t// Unrenders all events currently rendered on the grid                                                                // 5377\n\tunrenderEvents: function() {                                                                                          // 5378\n\t\tthis.removeSegPopover(); // removes the \"more..\" events popover                                                      // 5379\n\t\tGrid.prototype.unrenderEvents.apply(this, arguments); // calls the super-method                                      // 5380\n\t},                                                                                                                    // 5381\n                                                                                                                       // 5382\n                                                                                                                       // 5383\n\t// Retrieves all rendered segment objects currently rendered on the grid                                              // 5384\n\tgetEventSegs: function() {                                                                                            // 5385\n\t\treturn Grid.prototype.getEventSegs.call(this) // get the segments from the super-method                              // 5386\n\t\t\t.concat(this.popoverSegs || []); // append the segments from the \"more...\" popover                                  // 5387\n\t},                                                                                                                    // 5388\n                                                                                                                       // 5389\n                                                                                                                       // 5390\n\t// Renders the given background event segments onto the grid                                                          // 5391\n\trenderBgSegs: function(segs) {                                                                                        // 5392\n                                                                                                                       // 5393\n\t\t// don't render timed background events                                                                              // 5394\n\t\tvar allDaySegs = $.grep(segs, function(seg) {                                                                        // 5395\n\t\t\treturn seg.event.allDay;                                                                                            // 5396\n\t\t});                                                                                                                  // 5397\n                                                                                                                       // 5398\n\t\treturn Grid.prototype.renderBgSegs.call(this, allDaySegs); // call the super-method                                  // 5399\n\t},                                                                                                                    // 5400\n                                                                                                                       // 5401\n                                                                                                                       // 5402\n\t// Renders the given foreground event segments onto the grid                                                          // 5403\n\trenderFgSegs: function(segs) {                                                                                        // 5404\n\t\tvar rowStructs;                                                                                                      // 5405\n                                                                                                                       // 5406\n\t\t// render an `.el` on each seg                                                                                       // 5407\n\t\t// returns a subset of the segs. segs that were actually rendered                                                    // 5408\n\t\tsegs = this.renderFgSegEls(segs);                                                                                    // 5409\n                                                                                                                       // 5410\n\t\trowStructs = this.rowStructs = this.renderSegRows(segs);                                                             // 5411\n                                                                                                                       // 5412\n\t\t// append to each row's content skeleton                                                                             // 5413\n\t\tthis.rowEls.each(function(i, rowNode) {                                                                              // 5414\n\t\t\t$(rowNode).find('.fc-content-skeleton > table').append(                                                             // 5415\n\t\t\t\trowStructs[i].tbodyEl                                                                                              // 5416\n\t\t\t);                                                                                                                  // 5417\n\t\t});                                                                                                                  // 5418\n                                                                                                                       // 5419\n\t\treturn segs; // return only the segs that were actually rendered                                                     // 5420\n\t},                                                                                                                    // 5421\n                                                                                                                       // 5422\n                                                                                                                       // 5423\n\t// Unrenders all currently rendered foreground event segments                                                         // 5424\n\tunrenderFgSegs: function() {                                                                                          // 5425\n\t\tvar rowStructs = this.rowStructs || [];                                                                              // 5426\n\t\tvar rowStruct;                                                                                                       // 5427\n                                                                                                                       // 5428\n\t\twhile ((rowStruct = rowStructs.pop())) {                                                                             // 5429\n\t\t\trowStruct.tbodyEl.remove();                                                                                         // 5430\n\t\t}                                                                                                                    // 5431\n                                                                                                                       // 5432\n\t\tthis.rowStructs = null;                                                                                              // 5433\n\t},                                                                                                                    // 5434\n                                                                                                                       // 5435\n                                                                                                                       // 5436\n\t// Uses the given events array to generate <tbody> elements that should be appended to each row's content skeleton.   // 5437\n\t// Returns an array of rowStruct objects (see the bottom of `renderSegRow`).                                          // 5438\n\t// PRECONDITION: each segment shoud already have a rendered and assigned `.el`                                        // 5439\n\trenderSegRows: function(segs) {                                                                                       // 5440\n\t\tvar rowStructs = [];                                                                                                 // 5441\n\t\tvar segRows;                                                                                                         // 5442\n\t\tvar row;                                                                                                             // 5443\n                                                                                                                       // 5444\n\t\tsegRows = this.groupSegRows(segs); // group into nested arrays                                                       // 5445\n                                                                                                                       // 5446\n\t\t// iterate each row of segment groupings                                                                             // 5447\n\t\tfor (row = 0; row < segRows.length; row++) {                                                                         // 5448\n\t\t\trowStructs.push(                                                                                                    // 5449\n\t\t\t\tthis.renderSegRow(row, segRows[row])                                                                               // 5450\n\t\t\t);                                                                                                                  // 5451\n\t\t}                                                                                                                    // 5452\n                                                                                                                       // 5453\n\t\treturn rowStructs;                                                                                                   // 5454\n\t},                                                                                                                    // 5455\n                                                                                                                       // 5456\n                                                                                                                       // 5457\n\t// Builds the HTML to be used for the default element for an individual segment                                       // 5458\n\tfgSegHtml: function(seg, disableResizing) {                                                                           // 5459\n\t\tvar view = this.view;                                                                                                // 5460\n\t\tvar event = seg.event;                                                                                               // 5461\n\t\tvar isDraggable = view.isEventDraggable(event);                                                                      // 5462\n\t\tvar isResizableFromStart = !disableResizing && event.allDay &&                                                       // 5463\n\t\t\tseg.isStart && view.isEventResizableFromStart(event);                                                               // 5464\n\t\tvar isResizableFromEnd = !disableResizing && event.allDay &&                                                         // 5465\n\t\t\tseg.isEnd && view.isEventResizableFromEnd(event);                                                                   // 5466\n\t\tvar classes = this.getSegClasses(seg, isDraggable, isResizableFromStart || isResizableFromEnd);                      // 5467\n\t\tvar skinCss = cssToStr(this.getEventSkinCss(event));                                                                 // 5468\n\t\tvar timeHtml = '';                                                                                                   // 5469\n\t\tvar timeText;                                                                                                        // 5470\n\t\tvar titleHtml;                                                                                                       // 5471\n                                                                                                                       // 5472\n\t\tclasses.unshift('fc-day-grid-event', 'fc-h-event');                                                                  // 5473\n                                                                                                                       // 5474\n\t\t// Only display a timed events time if it is the starting segment                                                    // 5475\n\t\tif (seg.isStart) {                                                                                                   // 5476\n\t\t\ttimeText = this.getEventTimeText(event);                                                                            // 5477\n\t\t\tif (timeText) {                                                                                                     // 5478\n\t\t\t\ttimeHtml = '<span class=\"fc-time\">' + htmlEscape(timeText) + '</span>';                                            // 5479\n\t\t\t}                                                                                                                   // 5480\n\t\t}                                                                                                                    // 5481\n                                                                                                                       // 5482\n\t\ttitleHtml =                                                                                                          // 5483\n\t\t\t'<span class=\"fc-title\">' +                                                                                         // 5484\n\t\t\t\t(htmlEscape(event.title || '') || '&nbsp;') + // we always want one line of height                                 // 5485\n\t\t\t'</span>';                                                                                                          // 5486\n\t\t                                                                                                                     // 5487\n\t\treturn '<a class=\"' + classes.join(' ') + '\"' +                                                                      // 5488\n\t\t\t\t(event.url ?                                                                                                       // 5489\n\t\t\t\t\t' href=\"' + htmlEscape(event.url) + '\"' :                                                                         // 5490\n\t\t\t\t\t''                                                                                                                // 5491\n\t\t\t\t\t) +                                                                                                               // 5492\n\t\t\t\t(skinCss ?                                                                                                         // 5493\n\t\t\t\t\t' style=\"' + skinCss + '\"' :                                                                                      // 5494\n\t\t\t\t\t''                                                                                                                // 5495\n\t\t\t\t\t) +                                                                                                               // 5496\n\t\t\t'>' +                                                                                                               // 5497\n\t\t\t\t'<div class=\"fc-content\">' +                                                                                       // 5498\n\t\t\t\t\t(this.isRTL ?                                                                                                     // 5499\n\t\t\t\t\t\ttitleHtml + ' ' + timeHtml : // put a natural space in between                                                   // 5500\n\t\t\t\t\t\ttimeHtml + ' ' + titleHtml   //                                                                                  // 5501\n\t\t\t\t\t\t) +                                                                                                              // 5502\n\t\t\t\t'</div>' +                                                                                                         // 5503\n\t\t\t\t(isResizableFromStart ?                                                                                            // 5504\n\t\t\t\t\t'<div class=\"fc-resizer fc-start-resizer\" />' :                                                                   // 5505\n\t\t\t\t\t''                                                                                                                // 5506\n\t\t\t\t\t) +                                                                                                               // 5507\n\t\t\t\t(isResizableFromEnd ?                                                                                              // 5508\n\t\t\t\t\t'<div class=\"fc-resizer fc-end-resizer\" />' :                                                                     // 5509\n\t\t\t\t\t''                                                                                                                // 5510\n\t\t\t\t\t) +                                                                                                               // 5511\n\t\t\t'</a>';                                                                                                             // 5512\n\t},                                                                                                                    // 5513\n                                                                                                                       // 5514\n                                                                                                                       // 5515\n\t// Given a row # and an array of segments all in the same row, render a <tbody> element, a skeleton that contains     // 5516\n\t// the segments. Returns object with a bunch of internal data about how the render was calculated.                    // 5517\n\t// NOTE: modifies rowSegs                                                                                             // 5518\n\trenderSegRow: function(row, rowSegs) {                                                                                // 5519\n\t\tvar colCnt = this.colCnt;                                                                                            // 5520\n\t\tvar segLevels = this.buildSegLevels(rowSegs); // group into sub-arrays of levels                                     // 5521\n\t\tvar levelCnt = Math.max(1, segLevels.length); // ensure at least one level                                           // 5522\n\t\tvar tbody = $('<tbody/>');                                                                                           // 5523\n\t\tvar segMatrix = []; // lookup for which segments are rendered into which level+col cells                             // 5524\n\t\tvar cellMatrix = []; // lookup for all <td> elements of the level+col matrix                                         // 5525\n\t\tvar loneCellMatrix = []; // lookup for <td> elements that only take up a single column                               // 5526\n\t\tvar i, levelSegs;                                                                                                    // 5527\n\t\tvar col;                                                                                                             // 5528\n\t\tvar tr;                                                                                                              // 5529\n\t\tvar j, seg;                                                                                                          // 5530\n\t\tvar td;                                                                                                              // 5531\n                                                                                                                       // 5532\n\t\t// populates empty cells from the current column (`col`) to `endCol`                                                 // 5533\n\t\tfunction emptyCellsUntil(endCol) {                                                                                   // 5534\n\t\t\twhile (col < endCol) {                                                                                              // 5535\n\t\t\t\t// try to grab a cell from the level above and extend its rowspan. otherwise, create a fresh cell                  // 5536\n\t\t\t\ttd = (loneCellMatrix[i - 1] || [])[col];                                                                           // 5537\n\t\t\t\tif (td) {                                                                                                          // 5538\n\t\t\t\t\ttd.attr(                                                                                                          // 5539\n\t\t\t\t\t\t'rowspan',                                                                                                       // 5540\n\t\t\t\t\t\tparseInt(td.attr('rowspan') || 1, 10) + 1                                                                        // 5541\n\t\t\t\t\t);                                                                                                                // 5542\n\t\t\t\t}                                                                                                                  // 5543\n\t\t\t\telse {                                                                                                             // 5544\n\t\t\t\t\ttd = $('<td/>');                                                                                                  // 5545\n\t\t\t\t\ttr.append(td);                                                                                                    // 5546\n\t\t\t\t}                                                                                                                  // 5547\n\t\t\t\tcellMatrix[i][col] = td;                                                                                           // 5548\n\t\t\t\tloneCellMatrix[i][col] = td;                                                                                       // 5549\n\t\t\t\tcol++;                                                                                                             // 5550\n\t\t\t}                                                                                                                   // 5551\n\t\t}                                                                                                                    // 5552\n                                                                                                                       // 5553\n\t\tfor (i = 0; i < levelCnt; i++) { // iterate through all levels                                                       // 5554\n\t\t\tlevelSegs = segLevels[i];                                                                                           // 5555\n\t\t\tcol = 0;                                                                                                            // 5556\n\t\t\ttr = $('<tr/>');                                                                                                    // 5557\n                                                                                                                       // 5558\n\t\t\tsegMatrix.push([]);                                                                                                 // 5559\n\t\t\tcellMatrix.push([]);                                                                                                // 5560\n\t\t\tloneCellMatrix.push([]);                                                                                            // 5561\n                                                                                                                       // 5562\n\t\t\t// levelCnt might be 1 even though there are no actual levels. protect against this.                                // 5563\n\t\t\t// this single empty row is useful for styling.                                                                     // 5564\n\t\t\tif (levelSegs) {                                                                                                    // 5565\n\t\t\t\tfor (j = 0; j < levelSegs.length; j++) { // iterate through segments in level                                      // 5566\n\t\t\t\t\tseg = levelSegs[j];                                                                                               // 5567\n                                                                                                                       // 5568\n\t\t\t\t\temptyCellsUntil(seg.leftCol);                                                                                     // 5569\n                                                                                                                       // 5570\n\t\t\t\t\t// create a container that occupies or more columns. append the event element.                                    // 5571\n\t\t\t\t\ttd = $('<td class=\"fc-event-container\"/>').append(seg.el);                                                        // 5572\n\t\t\t\t\tif (seg.leftCol != seg.rightCol) {                                                                                // 5573\n\t\t\t\t\t\ttd.attr('colspan', seg.rightCol - seg.leftCol + 1);                                                              // 5574\n\t\t\t\t\t}                                                                                                                 // 5575\n\t\t\t\t\telse { // a single-column segment                                                                                 // 5576\n\t\t\t\t\t\tloneCellMatrix[i][col] = td;                                                                                     // 5577\n\t\t\t\t\t}                                                                                                                 // 5578\n                                                                                                                       // 5579\n\t\t\t\t\twhile (col <= seg.rightCol) {                                                                                     // 5580\n\t\t\t\t\t\tcellMatrix[i][col] = td;                                                                                         // 5581\n\t\t\t\t\t\tsegMatrix[i][col] = seg;                                                                                         // 5582\n\t\t\t\t\t\tcol++;                                                                                                           // 5583\n\t\t\t\t\t}                                                                                                                 // 5584\n                                                                                                                       // 5585\n\t\t\t\t\ttr.append(td);                                                                                                    // 5586\n\t\t\t\t}                                                                                                                  // 5587\n\t\t\t}                                                                                                                   // 5588\n                                                                                                                       // 5589\n\t\t\temptyCellsUntil(colCnt); // finish off the row                                                                      // 5590\n\t\t\tthis.bookendCells(tr);                                                                                              // 5591\n\t\t\ttbody.append(tr);                                                                                                   // 5592\n\t\t}                                                                                                                    // 5593\n                                                                                                                       // 5594\n\t\treturn { // a \"rowStruct\"                                                                                            // 5595\n\t\t\trow: row, // the row number                                                                                         // 5596\n\t\t\ttbodyEl: tbody,                                                                                                     // 5597\n\t\t\tcellMatrix: cellMatrix,                                                                                             // 5598\n\t\t\tsegMatrix: segMatrix,                                                                                               // 5599\n\t\t\tsegLevels: segLevels,                                                                                               // 5600\n\t\t\tsegs: rowSegs                                                                                                       // 5601\n\t\t};                                                                                                                   // 5602\n\t},                                                                                                                    // 5603\n                                                                                                                       // 5604\n                                                                                                                       // 5605\n\t// Stacks a flat array of segments, which are all assumed to be in the same row, into subarrays of vertical levels.   // 5606\n\t// NOTE: modifies segs                                                                                                // 5607\n\tbuildSegLevels: function(segs) {                                                                                      // 5608\n\t\tvar levels = [];                                                                                                     // 5609\n\t\tvar i, seg;                                                                                                          // 5610\n\t\tvar j;                                                                                                               // 5611\n                                                                                                                       // 5612\n\t\t// Give preference to elements with certain criteria, so they have                                                   // 5613\n\t\t// a chance to be closer to the top.                                                                                 // 5614\n\t\tthis.sortEventSegs(segs);                                                                                            // 5615\n\t\t                                                                                                                     // 5616\n\t\tfor (i = 0; i < segs.length; i++) {                                                                                  // 5617\n\t\t\tseg = segs[i];                                                                                                      // 5618\n                                                                                                                       // 5619\n\t\t\t// loop through levels, starting with the topmost, until the segment doesn't collide with other segments            // 5620\n\t\t\tfor (j = 0; j < levels.length; j++) {                                                                               // 5621\n\t\t\t\tif (!isDaySegCollision(seg, levels[j])) {                                                                          // 5622\n\t\t\t\t\tbreak;                                                                                                            // 5623\n\t\t\t\t}                                                                                                                  // 5624\n\t\t\t}                                                                                                                   // 5625\n\t\t\t// `j` now holds the desired subrow index                                                                           // 5626\n\t\t\tseg.level = j;                                                                                                      // 5627\n                                                                                                                       // 5628\n\t\t\t// create new level array if needed and append segment                                                              // 5629\n\t\t\t(levels[j] || (levels[j] = [])).push(seg);                                                                          // 5630\n\t\t}                                                                                                                    // 5631\n                                                                                                                       // 5632\n\t\t// order segments left-to-right. very important if calendar is RTL                                                   // 5633\n\t\tfor (j = 0; j < levels.length; j++) {                                                                                // 5634\n\t\t\tlevels[j].sort(compareDaySegCols);                                                                                  // 5635\n\t\t}                                                                                                                    // 5636\n                                                                                                                       // 5637\n\t\treturn levels;                                                                                                       // 5638\n\t},                                                                                                                    // 5639\n                                                                                                                       // 5640\n                                                                                                                       // 5641\n\t// Given a flat array of segments, return an array of sub-arrays, grouped by each segment's row                       // 5642\n\tgroupSegRows: function(segs) {                                                                                        // 5643\n\t\tvar segRows = [];                                                                                                    // 5644\n\t\tvar i;                                                                                                               // 5645\n                                                                                                                       // 5646\n\t\tfor (i = 0; i < this.rowCnt; i++) {                                                                                  // 5647\n\t\t\tsegRows.push([]);                                                                                                   // 5648\n\t\t}                                                                                                                    // 5649\n                                                                                                                       // 5650\n\t\tfor (i = 0; i < segs.length; i++) {                                                                                  // 5651\n\t\t\tsegRows[segs[i].row].push(segs[i]);                                                                                 // 5652\n\t\t}                                                                                                                    // 5653\n                                                                                                                       // 5654\n\t\treturn segRows;                                                                                                      // 5655\n\t}                                                                                                                     // 5656\n                                                                                                                       // 5657\n});                                                                                                                    // 5658\n                                                                                                                       // 5659\n                                                                                                                       // 5660\n// Computes whether two segments' columns collide. They are assumed to be in the same row.                             // 5661\nfunction isDaySegCollision(seg, otherSegs) {                                                                           // 5662\n\tvar i, otherSeg;                                                                                                      // 5663\n                                                                                                                       // 5664\n\tfor (i = 0; i < otherSegs.length; i++) {                                                                              // 5665\n\t\totherSeg = otherSegs[i];                                                                                             // 5666\n                                                                                                                       // 5667\n\t\tif (                                                                                                                 // 5668\n\t\t\totherSeg.leftCol <= seg.rightCol &&                                                                                 // 5669\n\t\t\totherSeg.rightCol >= seg.leftCol                                                                                    // 5670\n\t\t) {                                                                                                                  // 5671\n\t\t\treturn true;                                                                                                        // 5672\n\t\t}                                                                                                                    // 5673\n\t}                                                                                                                     // 5674\n                                                                                                                       // 5675\n\treturn false;                                                                                                         // 5676\n}                                                                                                                      // 5677\n                                                                                                                       // 5678\n                                                                                                                       // 5679\n// A cmp function for determining the leftmost event                                                                   // 5680\nfunction compareDaySegCols(a, b) {                                                                                     // 5681\n\treturn a.leftCol - b.leftCol;                                                                                         // 5682\n}                                                                                                                      // 5683\n                                                                                                                       // 5684\n;;                                                                                                                     // 5685\n                                                                                                                       // 5686\n/* Methods relate to limiting the number events for a given day on a DayGrid                                           // 5687\n----------------------------------------------------------------------------------------------------------------------*/\n// NOTE: all the segs being passed around in here are foreground segs                                                  // 5689\n                                                                                                                       // 5690\nDayGrid.mixin({                                                                                                        // 5691\n                                                                                                                       // 5692\n\tsegPopover: null, // the Popover that holds events that can't fit in a cell. null when not visible                    // 5693\n\tpopoverSegs: null, // an array of segment objects that the segPopover holds. null when not visible                    // 5694\n                                                                                                                       // 5695\n                                                                                                                       // 5696\n\tremoveSegPopover: function() {                                                                                        // 5697\n\t\tif (this.segPopover) {                                                                                               // 5698\n\t\t\tthis.segPopover.hide(); // in handler, will call segPopover's removeElement                                         // 5699\n\t\t}                                                                                                                    // 5700\n\t},                                                                                                                    // 5701\n                                                                                                                       // 5702\n                                                                                                                       // 5703\n\t// Limits the number of \"levels\" (vertically stacking layers of events) for each row of the grid.                     // 5704\n\t// `levelLimit` can be false (don't limit), a number, or true (should be computed).                                   // 5705\n\tlimitRows: function(levelLimit) {                                                                                     // 5706\n\t\tvar rowStructs = this.rowStructs || [];                                                                              // 5707\n\t\tvar row; // row #                                                                                                    // 5708\n\t\tvar rowLevelLimit;                                                                                                   // 5709\n                                                                                                                       // 5710\n\t\tfor (row = 0; row < rowStructs.length; row++) {                                                                      // 5711\n\t\t\tthis.unlimitRow(row);                                                                                               // 5712\n                                                                                                                       // 5713\n\t\t\tif (!levelLimit) {                                                                                                  // 5714\n\t\t\t\trowLevelLimit = false;                                                                                             // 5715\n\t\t\t}                                                                                                                   // 5716\n\t\t\telse if (typeof levelLimit === 'number') {                                                                          // 5717\n\t\t\t\trowLevelLimit = levelLimit;                                                                                        // 5718\n\t\t\t}                                                                                                                   // 5719\n\t\t\telse {                                                                                                              // 5720\n\t\t\t\trowLevelLimit = this.computeRowLevelLimit(row);                                                                    // 5721\n\t\t\t}                                                                                                                   // 5722\n                                                                                                                       // 5723\n\t\t\tif (rowLevelLimit !== false) {                                                                                      // 5724\n\t\t\t\tthis.limitRow(row, rowLevelLimit);                                                                                 // 5725\n\t\t\t}                                                                                                                   // 5726\n\t\t}                                                                                                                    // 5727\n\t},                                                                                                                    // 5728\n                                                                                                                       // 5729\n                                                                                                                       // 5730\n\t// Computes the number of levels a row will accomodate without going outside its bounds.                              // 5731\n\t// Assumes the row is \"rigid\" (maintains a constant height regardless of what is inside).                             // 5732\n\t// `row` is the row number.                                                                                           // 5733\n\tcomputeRowLevelLimit: function(row) {                                                                                 // 5734\n\t\tvar rowEl = this.rowEls.eq(row); // the containing \"fake\" row div                                                    // 5735\n\t\tvar rowHeight = rowEl.height(); // TODO: cache somehow?                                                              // 5736\n\t\tvar trEls = this.rowStructs[row].tbodyEl.children();                                                                 // 5737\n\t\tvar i, trEl;                                                                                                         // 5738\n\t\tvar trHeight;                                                                                                        // 5739\n                                                                                                                       // 5740\n\t\tfunction iterInnerHeights(i, childNode) {                                                                            // 5741\n\t\t\ttrHeight = Math.max(trHeight, $(childNode).outerHeight());                                                          // 5742\n\t\t}                                                                                                                    // 5743\n                                                                                                                       // 5744\n\t\t// Reveal one level <tr> at a time and stop when we find one out of bounds                                           // 5745\n\t\tfor (i = 0; i < trEls.length; i++) {                                                                                 // 5746\n\t\t\ttrEl = trEls.eq(i).removeClass('fc-limited'); // reset to original state (reveal)                                   // 5747\n                                                                                                                       // 5748\n\t\t\t// with rowspans>1 and IE8, trEl.outerHeight() would return the height of the largest cell,                         // 5749\n\t\t\t// so instead, find the tallest inner content element.                                                              // 5750\n\t\t\ttrHeight = 0;                                                                                                       // 5751\n\t\t\ttrEl.find('> td > :first-child').each(iterInnerHeights);                                                            // 5752\n                                                                                                                       // 5753\n\t\t\tif (trEl.position().top + trHeight > rowHeight) {                                                                   // 5754\n\t\t\t\treturn i;                                                                                                          // 5755\n\t\t\t}                                                                                                                   // 5756\n\t\t}                                                                                                                    // 5757\n                                                                                                                       // 5758\n\t\treturn false; // should not limit at all                                                                             // 5759\n\t},                                                                                                                    // 5760\n                                                                                                                       // 5761\n                                                                                                                       // 5762\n\t// Limits the given grid row to the maximum number of levels and injects \"more\" links if necessary.                   // 5763\n\t// `row` is the row number.                                                                                           // 5764\n\t// `levelLimit` is a number for the maximum (inclusive) number of levels allowed.                                     // 5765\n\tlimitRow: function(row, levelLimit) {                                                                                 // 5766\n\t\tvar _this = this;                                                                                                    // 5767\n\t\tvar rowStruct = this.rowStructs[row];                                                                                // 5768\n\t\tvar moreNodes = []; // array of \"more\" <a> links and <td> DOM nodes                                                  // 5769\n\t\tvar col = 0; // col #, left-to-right (not chronologically)                                                           // 5770\n\t\tvar levelSegs; // array of segment objects in the last allowable level, ordered left-to-right                        // 5771\n\t\tvar cellMatrix; // a matrix (by level, then column) of all <td> jQuery elements in the row                           // 5772\n\t\tvar limitedNodes; // array of temporarily hidden level <tr> and segment <td> DOM nodes                               // 5773\n\t\tvar i, seg;                                                                                                          // 5774\n\t\tvar segsBelow; // array of segment objects below `seg` in the current `col`                                          // 5775\n\t\tvar totalSegsBelow; // total number of segments below `seg` in any of the columns `seg` occupies                     // 5776\n\t\tvar colSegsBelow; // array of segment arrays, below seg, one for each column (offset from segs's first column)       // 5777\n\t\tvar td, rowspan;                                                                                                     // 5778\n\t\tvar segMoreNodes; // array of \"more\" <td> cells that will stand-in for the current seg's cell                        // 5779\n\t\tvar j;                                                                                                               // 5780\n\t\tvar moreTd, moreWrap, moreLink;                                                                                      // 5781\n                                                                                                                       // 5782\n\t\t// Iterates through empty level cells and places \"more\" links inside if need be                                      // 5783\n\t\tfunction emptyCellsUntil(endCol) { // goes from current `col` to `endCol`                                            // 5784\n\t\t\twhile (col < endCol) {                                                                                              // 5785\n\t\t\t\tsegsBelow = _this.getCellSegs(row, col, levelLimit);                                                               // 5786\n\t\t\t\tif (segsBelow.length) {                                                                                            // 5787\n\t\t\t\t\ttd = cellMatrix[levelLimit - 1][col];                                                                             // 5788\n\t\t\t\t\tmoreLink = _this.renderMoreLink(row, col, segsBelow);                                                             // 5789\n\t\t\t\t\tmoreWrap = $('<div/>').append(moreLink);                                                                          // 5790\n\t\t\t\t\ttd.append(moreWrap);                                                                                              // 5791\n\t\t\t\t\tmoreNodes.push(moreWrap[0]);                                                                                      // 5792\n\t\t\t\t}                                                                                                                  // 5793\n\t\t\t\tcol++;                                                                                                             // 5794\n\t\t\t}                                                                                                                   // 5795\n\t\t}                                                                                                                    // 5796\n                                                                                                                       // 5797\n\t\tif (levelLimit && levelLimit < rowStruct.segLevels.length) { // is it actually over the limit?                       // 5798\n\t\t\tlevelSegs = rowStruct.segLevels[levelLimit - 1];                                                                    // 5799\n\t\t\tcellMatrix = rowStruct.cellMatrix;                                                                                  // 5800\n                                                                                                                       // 5801\n\t\t\tlimitedNodes = rowStruct.tbodyEl.children().slice(levelLimit) // get level <tr> elements past the limit             // 5802\n\t\t\t\t.addClass('fc-limited').get(); // hide elements and get a simple DOM-nodes array                                   // 5803\n                                                                                                                       // 5804\n\t\t\t// iterate though segments in the last allowable level                                                              // 5805\n\t\t\tfor (i = 0; i < levelSegs.length; i++) {                                                                            // 5806\n\t\t\t\tseg = levelSegs[i];                                                                                                // 5807\n\t\t\t\temptyCellsUntil(seg.leftCol); // process empty cells before the segment                                            // 5808\n                                                                                                                       // 5809\n\t\t\t\t// determine *all* segments below `seg` that occupy the same columns                                               // 5810\n\t\t\t\tcolSegsBelow = [];                                                                                                 // 5811\n\t\t\t\ttotalSegsBelow = 0;                                                                                                // 5812\n\t\t\t\twhile (col <= seg.rightCol) {                                                                                      // 5813\n\t\t\t\t\tsegsBelow = this.getCellSegs(row, col, levelLimit);                                                               // 5814\n\t\t\t\t\tcolSegsBelow.push(segsBelow);                                                                                     // 5815\n\t\t\t\t\ttotalSegsBelow += segsBelow.length;                                                                               // 5816\n\t\t\t\t\tcol++;                                                                                                            // 5817\n\t\t\t\t}                                                                                                                  // 5818\n                                                                                                                       // 5819\n\t\t\t\tif (totalSegsBelow) { // do we need to replace this segment with one or many \"more\" links?                         // 5820\n\t\t\t\t\ttd = cellMatrix[levelLimit - 1][seg.leftCol]; // the segment's parent cell                                        // 5821\n\t\t\t\t\trowspan = td.attr('rowspan') || 1;                                                                                // 5822\n\t\t\t\t\tsegMoreNodes = [];                                                                                                // 5823\n                                                                                                                       // 5824\n\t\t\t\t\t// make a replacement <td> for each column the segment occupies. will be one for each colspan                     // 5825\n\t\t\t\t\tfor (j = 0; j < colSegsBelow.length; j++) {                                                                       // 5826\n\t\t\t\t\t\tmoreTd = $('<td class=\"fc-more-cell\"/>').attr('rowspan', rowspan);                                               // 5827\n\t\t\t\t\t\tsegsBelow = colSegsBelow[j];                                                                                     // 5828\n\t\t\t\t\t\tmoreLink = this.renderMoreLink(                                                                                  // 5829\n\t\t\t\t\t\t\trow,                                                                                                            // 5830\n\t\t\t\t\t\t\tseg.leftCol + j,                                                                                                // 5831\n\t\t\t\t\t\t\t[ seg ].concat(segsBelow) // count seg as hidden too                                                            // 5832\n\t\t\t\t\t\t);                                                                                                               // 5833\n\t\t\t\t\t\tmoreWrap = $('<div/>').append(moreLink);                                                                         // 5834\n\t\t\t\t\t\tmoreTd.append(moreWrap);                                                                                         // 5835\n\t\t\t\t\t\tsegMoreNodes.push(moreTd[0]);                                                                                    // 5836\n\t\t\t\t\t\tmoreNodes.push(moreTd[0]);                                                                                       // 5837\n\t\t\t\t\t}                                                                                                                 // 5838\n                                                                                                                       // 5839\n\t\t\t\t\ttd.addClass('fc-limited').after($(segMoreNodes)); // hide original <td> and inject replacements                   // 5840\n\t\t\t\t\tlimitedNodes.push(td[0]);                                                                                         // 5841\n\t\t\t\t}                                                                                                                  // 5842\n\t\t\t}                                                                                                                   // 5843\n                                                                                                                       // 5844\n\t\t\temptyCellsUntil(this.colCnt); // finish off the level                                                               // 5845\n\t\t\trowStruct.moreEls = $(moreNodes); // for easy undoing later                                                         // 5846\n\t\t\trowStruct.limitedEls = $(limitedNodes); // for easy undoing later                                                   // 5847\n\t\t}                                                                                                                    // 5848\n\t},                                                                                                                    // 5849\n                                                                                                                       // 5850\n                                                                                                                       // 5851\n\t// Reveals all levels and removes all \"more\"-related elements for a grid's row.                                       // 5852\n\t// `row` is a row number.                                                                                             // 5853\n\tunlimitRow: function(row) {                                                                                           // 5854\n\t\tvar rowStruct = this.rowStructs[row];                                                                                // 5855\n                                                                                                                       // 5856\n\t\tif (rowStruct.moreEls) {                                                                                             // 5857\n\t\t\trowStruct.moreEls.remove();                                                                                         // 5858\n\t\t\trowStruct.moreEls = null;                                                                                           // 5859\n\t\t}                                                                                                                    // 5860\n                                                                                                                       // 5861\n\t\tif (rowStruct.limitedEls) {                                                                                          // 5862\n\t\t\trowStruct.limitedEls.removeClass('fc-limited');                                                                     // 5863\n\t\t\trowStruct.limitedEls = null;                                                                                        // 5864\n\t\t}                                                                                                                    // 5865\n\t},                                                                                                                    // 5866\n                                                                                                                       // 5867\n                                                                                                                       // 5868\n\t// Renders an <a> element that represents hidden event element for a cell.                                            // 5869\n\t// Responsible for attaching click handler as well.                                                                   // 5870\n\trenderMoreLink: function(row, col, hiddenSegs) {                                                                      // 5871\n\t\tvar _this = this;                                                                                                    // 5872\n\t\tvar view = this.view;                                                                                                // 5873\n                                                                                                                       // 5874\n\t\treturn $('<a class=\"fc-more\"/>')                                                                                     // 5875\n\t\t\t.text(                                                                                                              // 5876\n\t\t\t\tthis.getMoreLinkText(hiddenSegs.length)                                                                            // 5877\n\t\t\t)                                                                                                                   // 5878\n\t\t\t.on('click', function(ev) {                                                                                         // 5879\n\t\t\t\tvar clickOption = view.opt('eventLimitClick');                                                                     // 5880\n\t\t\t\tvar date = _this.getCellDate(row, col);                                                                            // 5881\n\t\t\t\tvar moreEl = $(this);                                                                                              // 5882\n\t\t\t\tvar dayEl = _this.getCellEl(row, col);                                                                             // 5883\n\t\t\t\tvar allSegs = _this.getCellSegs(row, col);                                                                         // 5884\n                                                                                                                       // 5885\n\t\t\t\t// rescope the segments to be within the cell's date                                                               // 5886\n\t\t\t\tvar reslicedAllSegs = _this.resliceDaySegs(allSegs, date);                                                         // 5887\n\t\t\t\tvar reslicedHiddenSegs = _this.resliceDaySegs(hiddenSegs, date);                                                   // 5888\n                                                                                                                       // 5889\n\t\t\t\tif (typeof clickOption === 'function') {                                                                           // 5890\n\t\t\t\t\t// the returned value can be an atomic option                                                                     // 5891\n\t\t\t\t\tclickOption = view.trigger('eventLimitClick', null, {                                                             // 5892\n\t\t\t\t\t\tdate: date,                                                                                                      // 5893\n\t\t\t\t\t\tdayEl: dayEl,                                                                                                    // 5894\n\t\t\t\t\t\tmoreEl: moreEl,                                                                                                  // 5895\n\t\t\t\t\t\tsegs: reslicedAllSegs,                                                                                           // 5896\n\t\t\t\t\t\thiddenSegs: reslicedHiddenSegs                                                                                   // 5897\n\t\t\t\t\t}, ev);                                                                                                           // 5898\n\t\t\t\t}                                                                                                                  // 5899\n                                                                                                                       // 5900\n\t\t\t\tif (clickOption === 'popover') {                                                                                   // 5901\n\t\t\t\t\t_this.showSegPopover(row, col, moreEl, reslicedAllSegs);                                                          // 5902\n\t\t\t\t}                                                                                                                  // 5903\n\t\t\t\telse if (typeof clickOption === 'string') { // a view name                                                         // 5904\n\t\t\t\t\tview.calendar.zoomTo(date, clickOption);                                                                          // 5905\n\t\t\t\t}                                                                                                                  // 5906\n\t\t\t});                                                                                                                 // 5907\n\t},                                                                                                                    // 5908\n                                                                                                                       // 5909\n                                                                                                                       // 5910\n\t// Reveals the popover that displays all events within a cell                                                         // 5911\n\tshowSegPopover: function(row, col, moreLink, segs) {                                                                  // 5912\n\t\tvar _this = this;                                                                                                    // 5913\n\t\tvar view = this.view;                                                                                                // 5914\n\t\tvar moreWrap = moreLink.parent(); // the <div> wrapper around the <a>                                                // 5915\n\t\tvar topEl; // the element we want to match the top coordinate of                                                     // 5916\n\t\tvar options;                                                                                                         // 5917\n                                                                                                                       // 5918\n\t\tif (this.rowCnt == 1) {                                                                                              // 5919\n\t\t\ttopEl = view.el; // will cause the popover to cover any sort of header                                              // 5920\n\t\t}                                                                                                                    // 5921\n\t\telse {                                                                                                               // 5922\n\t\t\ttopEl = this.rowEls.eq(row); // will align with top of row                                                          // 5923\n\t\t}                                                                                                                    // 5924\n                                                                                                                       // 5925\n\t\toptions = {                                                                                                          // 5926\n\t\t\tclassName: 'fc-more-popover',                                                                                       // 5927\n\t\t\tcontent: this.renderSegPopoverContent(row, col, segs),                                                              // 5928\n\t\t\tparentEl: this.el,                                                                                                  // 5929\n\t\t\ttop: topEl.offset().top,                                                                                            // 5930\n\t\t\tautoHide: true, // when the user clicks elsewhere, hide the popover                                                 // 5931\n\t\t\tviewportConstrain: view.opt('popoverViewportConstrain'),                                                            // 5932\n\t\t\thide: function() {                                                                                                  // 5933\n\t\t\t\t// kill everything when the popover is hidden                                                                      // 5934\n\t\t\t\t_this.segPopover.removeElement();                                                                                  // 5935\n\t\t\t\t_this.segPopover = null;                                                                                           // 5936\n\t\t\t\t_this.popoverSegs = null;                                                                                          // 5937\n\t\t\t}                                                                                                                   // 5938\n\t\t};                                                                                                                   // 5939\n                                                                                                                       // 5940\n\t\t// Determine horizontal coordinate.                                                                                  // 5941\n\t\t// We use the moreWrap instead of the <td> to avoid border confusion.                                                // 5942\n\t\tif (this.isRTL) {                                                                                                    // 5943\n\t\t\toptions.right = moreWrap.offset().left + moreWrap.outerWidth() + 1; // +1 to be over cell border                    // 5944\n\t\t}                                                                                                                    // 5945\n\t\telse {                                                                                                               // 5946\n\t\t\toptions.left = moreWrap.offset().left - 1; // -1 to be over cell border                                             // 5947\n\t\t}                                                                                                                    // 5948\n                                                                                                                       // 5949\n\t\tthis.segPopover = new Popover(options);                                                                              // 5950\n\t\tthis.segPopover.show();                                                                                              // 5951\n\t},                                                                                                                    // 5952\n                                                                                                                       // 5953\n                                                                                                                       // 5954\n\t// Builds the inner DOM contents of the segment popover                                                               // 5955\n\trenderSegPopoverContent: function(row, col, segs) {                                                                   // 5956\n\t\tvar view = this.view;                                                                                                // 5957\n\t\tvar isTheme = view.opt('theme');                                                                                     // 5958\n\t\tvar title = this.getCellDate(row, col).format(view.opt('dayPopoverFormat'));                                         // 5959\n\t\tvar content = $(                                                                                                     // 5960\n\t\t\t'<div class=\"fc-header ' + view.widgetHeaderClass + '\">' +                                                          // 5961\n\t\t\t\t'<span class=\"fc-close ' +                                                                                         // 5962\n\t\t\t\t\t(isTheme ? 'ui-icon ui-icon-closethick' : 'fc-icon fc-icon-x') +                                                  // 5963\n\t\t\t\t'\"></span>' +                                                                                                      // 5964\n\t\t\t\t'<span class=\"fc-title\">' +                                                                                        // 5965\n\t\t\t\t\thtmlEscape(title) +                                                                                               // 5966\n\t\t\t\t'</span>' +                                                                                                        // 5967\n\t\t\t\t'<div class=\"fc-clear\"/>' +                                                                                        // 5968\n\t\t\t'</div>' +                                                                                                          // 5969\n\t\t\t'<div class=\"fc-body ' + view.widgetContentClass + '\">' +                                                           // 5970\n\t\t\t\t'<div class=\"fc-event-container\"></div>' +                                                                         // 5971\n\t\t\t'</div>'                                                                                                            // 5972\n\t\t);                                                                                                                   // 5973\n\t\tvar segContainer = content.find('.fc-event-container');                                                              // 5974\n\t\tvar i;                                                                                                               // 5975\n                                                                                                                       // 5976\n\t\t// render each seg's `el` and only return the visible segs                                                           // 5977\n\t\tsegs = this.renderFgSegEls(segs, true); // disableResizing=true                                                      // 5978\n\t\tthis.popoverSegs = segs;                                                                                             // 5979\n                                                                                                                       // 5980\n\t\tfor (i = 0; i < segs.length; i++) {                                                                                  // 5981\n                                                                                                                       // 5982\n\t\t\t// because segments in the popover are not part of a grid coordinate system, provide a hint to any                  // 5983\n\t\t\t// grids that want to do drag-n-drop about which cell it came from                                                  // 5984\n\t\t\tthis.prepareHits();                                                                                                 // 5985\n\t\t\tsegs[i].hit = this.getCellHit(row, col);                                                                            // 5986\n\t\t\tthis.releaseHits();                                                                                                 // 5987\n                                                                                                                       // 5988\n\t\t\tsegContainer.append(segs[i].el);                                                                                    // 5989\n\t\t}                                                                                                                    // 5990\n                                                                                                                       // 5991\n\t\treturn content;                                                                                                      // 5992\n\t},                                                                                                                    // 5993\n                                                                                                                       // 5994\n                                                                                                                       // 5995\n\t// Given the events within an array of segment objects, reslice them to be in a single day                            // 5996\n\tresliceDaySegs: function(segs, dayDate) {                                                                             // 5997\n                                                                                                                       // 5998\n\t\t// build an array of the original events                                                                             // 5999\n\t\tvar events = $.map(segs, function(seg) {                                                                             // 6000\n\t\t\treturn seg.event;                                                                                                   // 6001\n\t\t});                                                                                                                  // 6002\n                                                                                                                       // 6003\n\t\tvar dayStart = dayDate.clone();                                                                                      // 6004\n\t\tvar dayEnd = dayStart.clone().add(1, 'days');                                                                        // 6005\n\t\tvar dayRange = { start: dayStart, end: dayEnd };                                                                     // 6006\n                                                                                                                       // 6007\n\t\t// slice the events with a custom slicing function                                                                   // 6008\n\t\tsegs = this.eventsToSegs(                                                                                            // 6009\n\t\t\tevents,                                                                                                             // 6010\n\t\t\tfunction(range) {                                                                                                   // 6011\n\t\t\t\tvar seg = intersectRanges(range, dayRange); // undefind if no intersection                                         // 6012\n\t\t\t\treturn seg ? [ seg ] : []; // must return an array of segments                                                     // 6013\n\t\t\t}                                                                                                                   // 6014\n\t\t);                                                                                                                   // 6015\n                                                                                                                       // 6016\n\t\t// force an order because eventsToSegs doesn't guarantee one                                                         // 6017\n\t\tthis.sortEventSegs(segs);                                                                                            // 6018\n                                                                                                                       // 6019\n\t\treturn segs;                                                                                                         // 6020\n\t},                                                                                                                    // 6021\n                                                                                                                       // 6022\n                                                                                                                       // 6023\n\t// Generates the text that should be inside a \"more\" link, given the number of events it represents                   // 6024\n\tgetMoreLinkText: function(num) {                                                                                      // 6025\n\t\tvar opt = this.view.opt('eventLimitText');                                                                           // 6026\n                                                                                                                       // 6027\n\t\tif (typeof opt === 'function') {                                                                                     // 6028\n\t\t\treturn opt(num);                                                                                                    // 6029\n\t\t}                                                                                                                    // 6030\n\t\telse {                                                                                                               // 6031\n\t\t\treturn '+' + num + ' ' + opt;                                                                                       // 6032\n\t\t}                                                                                                                    // 6033\n\t},                                                                                                                    // 6034\n                                                                                                                       // 6035\n                                                                                                                       // 6036\n\t// Returns segments within a given cell.                                                                              // 6037\n\t// If `startLevel` is specified, returns only events including and below that level. Otherwise returns all segs.      // 6038\n\tgetCellSegs: function(row, col, startLevel) {                                                                         // 6039\n\t\tvar segMatrix = this.rowStructs[row].segMatrix;                                                                      // 6040\n\t\tvar level = startLevel || 0;                                                                                         // 6041\n\t\tvar segs = [];                                                                                                       // 6042\n\t\tvar seg;                                                                                                             // 6043\n                                                                                                                       // 6044\n\t\twhile (level < segMatrix.length) {                                                                                   // 6045\n\t\t\tseg = segMatrix[level][col];                                                                                        // 6046\n\t\t\tif (seg) {                                                                                                          // 6047\n\t\t\t\tsegs.push(seg);                                                                                                    // 6048\n\t\t\t}                                                                                                                   // 6049\n\t\t\tlevel++;                                                                                                            // 6050\n\t\t}                                                                                                                    // 6051\n                                                                                                                       // 6052\n\t\treturn segs;                                                                                                         // 6053\n\t}                                                                                                                     // 6054\n                                                                                                                       // 6055\n});                                                                                                                    // 6056\n                                                                                                                       // 6057\n;;                                                                                                                     // 6058\n                                                                                                                       // 6059\n/* A component that renders one or more columns of vertical time slots                                                 // 6060\n----------------------------------------------------------------------------------------------------------------------*/\n// We mixin DayTable, even though there is only a single row of days                                                   // 6062\n                                                                                                                       // 6063\nvar TimeGrid = FC.TimeGrid = Grid.extend(DayTableMixin, {                                                              // 6064\n                                                                                                                       // 6065\n\tslotDuration: null, // duration of a \"slot\", a distinct time segment on given day, visualized by lines                // 6066\n\tsnapDuration: null, // granularity of time for dragging and selecting                                                 // 6067\n\tsnapsPerSlot: null,                                                                                                   // 6068\n\tminTime: null, // Duration object that denotes the first visible time of any given day                                // 6069\n\tmaxTime: null, // Duration object that denotes the exclusive visible end time of any given day                        // 6070\n\tlabelFormat: null, // formatting string for times running along vertical axis                                         // 6071\n\tlabelInterval: null, // duration of how often a label should be displayed for a slot                                  // 6072\n                                                                                                                       // 6073\n\tcolEls: null, // cells elements in the day-row background                                                             // 6074\n\tslatEls: null, // elements running horizontally across all columns                                                    // 6075\n\thelperEl: null, // cell skeleton element for rendering the mock event \"helper\"                                        // 6076\n                                                                                                                       // 6077\n\tcolCoordCache: null,                                                                                                  // 6078\n\tslatCoordCache: null,                                                                                                 // 6079\n                                                                                                                       // 6080\n\tbusinessHourSegs: null,                                                                                               // 6081\n                                                                                                                       // 6082\n                                                                                                                       // 6083\n\tconstructor: function() {                                                                                             // 6084\n\t\tGrid.apply(this, arguments); // call the super-constructor                                                           // 6085\n                                                                                                                       // 6086\n\t\tthis.processOptions();                                                                                               // 6087\n\t},                                                                                                                    // 6088\n                                                                                                                       // 6089\n                                                                                                                       // 6090\n\t// Renders the time grid into `this.el`, which should already be assigned.                                            // 6091\n\t// Relies on the view's colCnt. In the future, this component should probably be self-sufficient.                     // 6092\n\trenderDates: function() {                                                                                             // 6093\n\t\tthis.el.html(this.renderHtml());                                                                                     // 6094\n\t\tthis.colEls = this.el.find('.fc-day');                                                                               // 6095\n\t\tthis.slatEls = this.el.find('.fc-slats tr');                                                                         // 6096\n                                                                                                                       // 6097\n\t\tthis.colCoordCache = new CoordCache({                                                                                // 6098\n\t\t\tels: this.colEls,                                                                                                   // 6099\n\t\t\tisHorizontal: true                                                                                                  // 6100\n\t\t});                                                                                                                  // 6101\n\t\tthis.slatCoordCache = new CoordCache({                                                                               // 6102\n\t\t\tels: this.slatEls,                                                                                                  // 6103\n\t\t\tisVertical: true                                                                                                    // 6104\n\t\t});                                                                                                                  // 6105\n\t},                                                                                                                    // 6106\n                                                                                                                       // 6107\n                                                                                                                       // 6108\n\trenderBusinessHours: function() {                                                                                     // 6109\n\t\tvar events = this.view.calendar.getBusinessHoursEvents();                                                            // 6110\n\t\tthis.businessHourSegs = this.renderFill('businessHours', this.eventsToSegs(events), 'bgevent');                      // 6111\n\t},                                                                                                                    // 6112\n                                                                                                                       // 6113\n                                                                                                                       // 6114\n\t// Renders the basic HTML skeleton for the grid                                                                       // 6115\n\trenderHtml: function() {                                                                                              // 6116\n\t\treturn '' +                                                                                                          // 6117\n\t\t\t'<div class=\"fc-bg\">' +                                                                                             // 6118\n\t\t\t\t'<table>' +                                                                                                        // 6119\n\t\t\t\t\tthis.renderBgTrHtml(0) + // row=0                                                                                 // 6120\n\t\t\t\t'</table>' +                                                                                                       // 6121\n\t\t\t'</div>' +                                                                                                          // 6122\n\t\t\t'<div class=\"fc-slats\">' +                                                                                          // 6123\n\t\t\t\t'<table>' +                                                                                                        // 6124\n\t\t\t\t\tthis.renderSlatRowHtml() +                                                                                        // 6125\n\t\t\t\t'</table>' +                                                                                                       // 6126\n\t\t\t'</div>';                                                                                                           // 6127\n\t},                                                                                                                    // 6128\n                                                                                                                       // 6129\n                                                                                                                       // 6130\n\t// Generates the HTML for the horizontal \"slats\" that run width-wise. Has a time axis on a side. Depends on RTL.      // 6131\n\trenderSlatRowHtml: function() {                                                                                       // 6132\n\t\tvar view = this.view;                                                                                                // 6133\n\t\tvar isRTL = this.isRTL;                                                                                              // 6134\n\t\tvar html = '';                                                                                                       // 6135\n\t\tvar slotTime = moment.duration(+this.minTime); // wish there was .clone() for durations                              // 6136\n\t\tvar slotDate; // will be on the view's first day, but we only care about its time                                    // 6137\n\t\tvar isLabeled;                                                                                                       // 6138\n\t\tvar axisHtml;                                                                                                        // 6139\n                                                                                                                       // 6140\n\t\t// Calculate the time for each slot                                                                                  // 6141\n\t\twhile (slotTime < this.maxTime) {                                                                                    // 6142\n\t\t\tslotDate = this.start.clone().time(slotTime);                                                                       // 6143\n\t\t\tisLabeled = isInt(divideDurationByDuration(slotTime, this.labelInterval));                                          // 6144\n                                                                                                                       // 6145\n\t\t\taxisHtml =                                                                                                          // 6146\n\t\t\t\t'<td class=\"fc-axis fc-time ' + view.widgetContentClass + '\" ' + view.axisStyleAttr() + '>' +                      // 6147\n\t\t\t\t\t(isLabeled ?                                                                                                      // 6148\n\t\t\t\t\t\t'<span>' + // for matchCellWidths                                                                                // 6149\n\t\t\t\t\t\t\thtmlEscape(slotDate.format(this.labelFormat)) +                                                                 // 6150\n\t\t\t\t\t\t'</span>' :                                                                                                      // 6151\n\t\t\t\t\t\t''                                                                                                               // 6152\n\t\t\t\t\t\t) +                                                                                                              // 6153\n\t\t\t\t'</td>';                                                                                                           // 6154\n                                                                                                                       // 6155\n\t\t\thtml +=                                                                                                             // 6156\n\t\t\t\t'<tr ' + (isLabeled ? '' : 'class=\"fc-minor\"') + '>' +                                                             // 6157\n\t\t\t\t\t(!isRTL ? axisHtml : '') +                                                                                        // 6158\n\t\t\t\t\t'<td class=\"' + view.widgetContentClass + '\"/>' +                                                                 // 6159\n\t\t\t\t\t(isRTL ? axisHtml : '') +                                                                                         // 6160\n\t\t\t\t\"</tr>\";                                                                                                           // 6161\n                                                                                                                       // 6162\n\t\t\tslotTime.add(this.slotDuration);                                                                                    // 6163\n\t\t}                                                                                                                    // 6164\n                                                                                                                       // 6165\n\t\treturn html;                                                                                                         // 6166\n\t},                                                                                                                    // 6167\n                                                                                                                       // 6168\n                                                                                                                       // 6169\n\t/* Options                                                                                                            // 6170\n\t------------------------------------------------------------------------------------------------------------------*/  // 6171\n                                                                                                                       // 6172\n                                                                                                                       // 6173\n\t// Parses various options into properties of this object                                                              // 6174\n\tprocessOptions: function() {                                                                                          // 6175\n\t\tvar view = this.view;                                                                                                // 6176\n\t\tvar slotDuration = view.opt('slotDuration');                                                                         // 6177\n\t\tvar snapDuration = view.opt('snapDuration');                                                                         // 6178\n\t\tvar input;                                                                                                           // 6179\n                                                                                                                       // 6180\n\t\tslotDuration = moment.duration(slotDuration);                                                                        // 6181\n\t\tsnapDuration = snapDuration ? moment.duration(snapDuration) : slotDuration;                                          // 6182\n                                                                                                                       // 6183\n\t\tthis.slotDuration = slotDuration;                                                                                    // 6184\n\t\tthis.snapDuration = snapDuration;                                                                                    // 6185\n\t\tthis.snapsPerSlot = slotDuration / snapDuration; // TODO: ensure an integer multiple?                                // 6186\n                                                                                                                       // 6187\n\t\tthis.minResizeDuration = snapDuration; // hack                                                                       // 6188\n                                                                                                                       // 6189\n\t\tthis.minTime = moment.duration(view.opt('minTime'));                                                                 // 6190\n\t\tthis.maxTime = moment.duration(view.opt('maxTime'));                                                                 // 6191\n                                                                                                                       // 6192\n\t\t// might be an array value (for TimelineView).                                                                       // 6193\n\t\t// if so, getting the most granular entry (the last one probably).                                                   // 6194\n\t\tinput = view.opt('slotLabelFormat');                                                                                 // 6195\n\t\tif ($.isArray(input)) {                                                                                              // 6196\n\t\t\tinput = input[input.length - 1];                                                                                    // 6197\n\t\t}                                                                                                                    // 6198\n                                                                                                                       // 6199\n\t\tthis.labelFormat =                                                                                                   // 6200\n\t\t\tinput ||                                                                                                            // 6201\n\t\t\tview.opt('axisFormat') || // deprecated                                                                             // 6202\n\t\t\tview.opt('smallTimeFormat'); // the computed default                                                                // 6203\n                                                                                                                       // 6204\n\t\tinput = view.opt('slotLabelInterval');                                                                               // 6205\n\t\tthis.labelInterval = input ?                                                                                         // 6206\n\t\t\tmoment.duration(input) :                                                                                            // 6207\n\t\t\tthis.computeLabelInterval(slotDuration);                                                                            // 6208\n\t},                                                                                                                    // 6209\n                                                                                                                       // 6210\n                                                                                                                       // 6211\n\t// Computes an automatic value for slotLabelInterval                                                                  // 6212\n\tcomputeLabelInterval: function(slotDuration) {                                                                        // 6213\n\t\tvar i;                                                                                                               // 6214\n\t\tvar labelInterval;                                                                                                   // 6215\n\t\tvar slotsPerLabel;                                                                                                   // 6216\n                                                                                                                       // 6217\n\t\t// find the smallest stock label interval that results in more than one slots-per-label                              // 6218\n\t\tfor (i = AGENDA_STOCK_SUB_DURATIONS.length - 1; i >= 0; i--) {                                                       // 6219\n\t\t\tlabelInterval = moment.duration(AGENDA_STOCK_SUB_DURATIONS[i]);                                                     // 6220\n\t\t\tslotsPerLabel = divideDurationByDuration(labelInterval, slotDuration);                                              // 6221\n\t\t\tif (isInt(slotsPerLabel) && slotsPerLabel > 1) {                                                                    // 6222\n\t\t\t\treturn labelInterval;                                                                                              // 6223\n\t\t\t}                                                                                                                   // 6224\n\t\t}                                                                                                                    // 6225\n                                                                                                                       // 6226\n\t\treturn moment.duration(slotDuration); // fall back. clone                                                            // 6227\n\t},                                                                                                                    // 6228\n                                                                                                                       // 6229\n                                                                                                                       // 6230\n\t// Computes a default event time formatting string if `timeFormat` is not explicitly defined                          // 6231\n\tcomputeEventTimeFormat: function() {                                                                                  // 6232\n\t\treturn this.view.opt('noMeridiemTimeFormat'); // like \"6:30\" (no AM/PM)                                              // 6233\n\t},                                                                                                                    // 6234\n                                                                                                                       // 6235\n                                                                                                                       // 6236\n\t// Computes a default `displayEventEnd` value if one is not expliclty defined                                         // 6237\n\tcomputeDisplayEventEnd: function() {                                                                                  // 6238\n\t\treturn true;                                                                                                         // 6239\n\t},                                                                                                                    // 6240\n                                                                                                                       // 6241\n                                                                                                                       // 6242\n\t/* Hit System                                                                                                         // 6243\n\t------------------------------------------------------------------------------------------------------------------*/  // 6244\n                                                                                                                       // 6245\n                                                                                                                       // 6246\n\tprepareHits: function() {                                                                                             // 6247\n\t\tthis.colCoordCache.build();                                                                                          // 6248\n\t\tthis.slatCoordCache.build();                                                                                         // 6249\n\t},                                                                                                                    // 6250\n                                                                                                                       // 6251\n                                                                                                                       // 6252\n\treleaseHits: function() {                                                                                             // 6253\n\t\tthis.colCoordCache.clear();                                                                                          // 6254\n\t\t// NOTE: don't clear slatCoordCache because we rely on it for computeTimeTop                                         // 6255\n\t},                                                                                                                    // 6256\n                                                                                                                       // 6257\n                                                                                                                       // 6258\n\tqueryHit: function(leftOffset, topOffset) {                                                                           // 6259\n\t\tvar snapsPerSlot = this.snapsPerSlot;                                                                                // 6260\n\t\tvar colCoordCache = this.colCoordCache;                                                                              // 6261\n\t\tvar slatCoordCache = this.slatCoordCache;                                                                            // 6262\n\t\tvar colIndex = colCoordCache.getHorizontalIndex(leftOffset);                                                         // 6263\n\t\tvar slatIndex = slatCoordCache.getVerticalIndex(topOffset);                                                          // 6264\n                                                                                                                       // 6265\n\t\tif (colIndex != null && slatIndex != null) {                                                                         // 6266\n\t\t\tvar slatTop = slatCoordCache.getTopOffset(slatIndex);                                                               // 6267\n\t\t\tvar slatHeight = slatCoordCache.getHeight(slatIndex);                                                               // 6268\n\t\t\tvar partial = (topOffset - slatTop) / slatHeight; // floating point number between 0 and 1                          // 6269\n\t\t\tvar localSnapIndex = Math.floor(partial * snapsPerSlot); // the snap # relative to start of slat                    // 6270\n\t\t\tvar snapIndex = slatIndex * snapsPerSlot + localSnapIndex;                                                          // 6271\n\t\t\tvar snapTop = slatTop + (localSnapIndex / snapsPerSlot) * slatHeight;                                               // 6272\n\t\t\tvar snapBottom = slatTop + ((localSnapIndex + 1) / snapsPerSlot) * slatHeight;                                      // 6273\n                                                                                                                       // 6274\n\t\t\treturn {                                                                                                            // 6275\n\t\t\t\tcol: colIndex,                                                                                                     // 6276\n\t\t\t\tsnap: snapIndex,                                                                                                   // 6277\n\t\t\t\tcomponent: this, // needed unfortunately :(                                                                        // 6278\n\t\t\t\tleft: colCoordCache.getLeftOffset(colIndex),                                                                       // 6279\n\t\t\t\tright: colCoordCache.getRightOffset(colIndex),                                                                     // 6280\n\t\t\t\ttop: snapTop,                                                                                                      // 6281\n\t\t\t\tbottom: snapBottom                                                                                                 // 6282\n\t\t\t};                                                                                                                  // 6283\n\t\t}                                                                                                                    // 6284\n\t},                                                                                                                    // 6285\n                                                                                                                       // 6286\n                                                                                                                       // 6287\n\tgetHitSpan: function(hit) {                                                                                           // 6288\n\t\tvar start = this.getCellDate(0, hit.col); // row=0                                                                   // 6289\n\t\tvar time = this.computeSnapTime(hit.snap); // pass in the snap-index                                                 // 6290\n\t\tvar end;                                                                                                             // 6291\n                                                                                                                       // 6292\n\t\tstart.time(time);                                                                                                    // 6293\n\t\tend = start.clone().add(this.snapDuration);                                                                          // 6294\n                                                                                                                       // 6295\n\t\treturn { start: start, end: end };                                                                                   // 6296\n\t},                                                                                                                    // 6297\n                                                                                                                       // 6298\n                                                                                                                       // 6299\n\tgetHitEl: function(hit) {                                                                                             // 6300\n\t\treturn this.colEls.eq(hit.col);                                                                                      // 6301\n\t},                                                                                                                    // 6302\n                                                                                                                       // 6303\n                                                                                                                       // 6304\n\t/* Dates                                                                                                              // 6305\n\t------------------------------------------------------------------------------------------------------------------*/  // 6306\n                                                                                                                       // 6307\n                                                                                                                       // 6308\n\trangeUpdated: function() {                                                                                            // 6309\n\t\tthis.updateDayTable();                                                                                               // 6310\n\t},                                                                                                                    // 6311\n                                                                                                                       // 6312\n                                                                                                                       // 6313\n\t// Given a row number of the grid, representing a \"snap\", returns a time (Duration) from its start-of-day             // 6314\n\tcomputeSnapTime: function(snapIndex) {                                                                                // 6315\n\t\treturn moment.duration(this.minTime + this.snapDuration * snapIndex);                                                // 6316\n\t},                                                                                                                    // 6317\n                                                                                                                       // 6318\n                                                                                                                       // 6319\n\t// Slices up the given span (unzoned start/end with other misc data) into an array of segments                        // 6320\n\tspanToSegs: function(span) {                                                                                          // 6321\n\t\tvar segs = this.sliceRangeByTimes(span);                                                                             // 6322\n\t\tvar i;                                                                                                               // 6323\n                                                                                                                       // 6324\n\t\tfor (i = 0; i < segs.length; i++) {                                                                                  // 6325\n\t\t\tif (this.isRTL) {                                                                                                   // 6326\n\t\t\t\tsegs[i].col = this.daysPerRow - 1 - segs[i].dayIndex;                                                              // 6327\n\t\t\t}                                                                                                                   // 6328\n\t\t\telse {                                                                                                              // 6329\n\t\t\t\tsegs[i].col = segs[i].dayIndex;                                                                                    // 6330\n\t\t\t}                                                                                                                   // 6331\n\t\t}                                                                                                                    // 6332\n                                                                                                                       // 6333\n\t\treturn segs;                                                                                                         // 6334\n\t},                                                                                                                    // 6335\n                                                                                                                       // 6336\n                                                                                                                       // 6337\n\tsliceRangeByTimes: function(range) {                                                                                  // 6338\n\t\tvar segs = [];                                                                                                       // 6339\n\t\tvar seg;                                                                                                             // 6340\n\t\tvar dayIndex;                                                                                                        // 6341\n\t\tvar dayDate;                                                                                                         // 6342\n\t\tvar dayRange;                                                                                                        // 6343\n                                                                                                                       // 6344\n\t\tfor (dayIndex = 0; dayIndex < this.daysPerRow; dayIndex++) {                                                         // 6345\n\t\t\tdayDate = this.dayDates[dayIndex].clone(); // TODO: better API for this?                                            // 6346\n\t\t\tdayRange = {                                                                                                        // 6347\n\t\t\t\tstart: dayDate.clone().time(this.minTime),                                                                         // 6348\n\t\t\t\tend: dayDate.clone().time(this.maxTime)                                                                            // 6349\n\t\t\t};                                                                                                                  // 6350\n\t\t\tseg = intersectRanges(range, dayRange); // both will be ambig timezone                                              // 6351\n\t\t\tif (seg) {                                                                                                          // 6352\n\t\t\t\tseg.dayIndex = dayIndex;                                                                                           // 6353\n\t\t\t\tsegs.push(seg);                                                                                                    // 6354\n\t\t\t}                                                                                                                   // 6355\n\t\t}                                                                                                                    // 6356\n                                                                                                                       // 6357\n\t\treturn segs;                                                                                                         // 6358\n\t},                                                                                                                    // 6359\n                                                                                                                       // 6360\n                                                                                                                       // 6361\n\t/* Coordinates                                                                                                        // 6362\n\t------------------------------------------------------------------------------------------------------------------*/  // 6363\n                                                                                                                       // 6364\n                                                                                                                       // 6365\n\tupdateSize: function(isResize) { // NOT a standard Grid method                                                        // 6366\n\t\tthis.slatCoordCache.build();                                                                                         // 6367\n                                                                                                                       // 6368\n\t\tif (isResize) {                                                                                                      // 6369\n\t\t\tthis.updateSegVerticals();                                                                                          // 6370\n\t\t}                                                                                                                    // 6371\n\t},                                                                                                                    // 6372\n                                                                                                                       // 6373\n                                                                                                                       // 6374\n\t// Computes the top coordinate, relative to the bounds of the grid, of the given date.                                // 6375\n\t// A `startOfDayDate` must be given for avoiding ambiguity over how to treat midnight.                                // 6376\n\tcomputeDateTop: function(date, startOfDayDate) {                                                                      // 6377\n\t\treturn this.computeTimeTop(                                                                                          // 6378\n\t\t\tmoment.duration(                                                                                                    // 6379\n\t\t\t\tdate - startOfDayDate.clone().stripTime()                                                                          // 6380\n\t\t\t)                                                                                                                   // 6381\n\t\t);                                                                                                                   // 6382\n\t},                                                                                                                    // 6383\n                                                                                                                       // 6384\n                                                                                                                       // 6385\n\t// Computes the top coordinate, relative to the bounds of the grid, of the given time (a Duration).                   // 6386\n\tcomputeTimeTop: function(time) {                                                                                      // 6387\n\t\tvar len = this.slatEls.length;                                                                                       // 6388\n\t\tvar slatCoverage = (time - this.minTime) / this.slotDuration; // floating-point value of # of slots covered          // 6389\n\t\tvar slatIndex;                                                                                                       // 6390\n\t\tvar slatRemainder;                                                                                                   // 6391\n                                                                                                                       // 6392\n\t\t// compute a floating-point number for how many slats should be progressed through.                                  // 6393\n\t\t// from 0 to number of slats (inclusive)                                                                             // 6394\n\t\t// constrained because minTime/maxTime might be customized.                                                          // 6395\n\t\tslatCoverage = Math.max(0, slatCoverage);                                                                            // 6396\n\t\tslatCoverage = Math.min(len, slatCoverage);                                                                          // 6397\n                                                                                                                       // 6398\n\t\t// an integer index of the furthest whole slat                                                                       // 6399\n\t\t// from 0 to number slats (*exclusive*, so len-1)                                                                    // 6400\n\t\tslatIndex = Math.floor(slatCoverage);                                                                                // 6401\n\t\tslatIndex = Math.min(slatIndex, len - 1);                                                                            // 6402\n                                                                                                                       // 6403\n\t\t// how much further through the slatIndex slat (from 0.0-1.0) must be covered in addition.                           // 6404\n\t\t// could be 1.0 if slatCoverage is covering *all* the slots                                                          // 6405\n\t\tslatRemainder = slatCoverage - slatIndex;                                                                            // 6406\n                                                                                                                       // 6407\n\t\treturn this.slatCoordCache.getTopPosition(slatIndex) +                                                               // 6408\n\t\t\tthis.slatCoordCache.getHeight(slatIndex) * slatRemainder;                                                           // 6409\n\t},                                                                                                                    // 6410\n                                                                                                                       // 6411\n                                                                                                                       // 6412\n                                                                                                                       // 6413\n\t/* Event Drag Visualization                                                                                           // 6414\n\t------------------------------------------------------------------------------------------------------------------*/  // 6415\n                                                                                                                       // 6416\n                                                                                                                       // 6417\n\t// Renders a visual indication of an event being dragged over the specified date(s).                                  // 6418\n\t// A returned value of `true` signals that a mock \"helper\" event has been rendered.                                   // 6419\n\trenderDrag: function(eventLocation, seg) {                                                                            // 6420\n                                                                                                                       // 6421\n\t\tif (seg) { // if there is event information for this drag, render a helper event                                     // 6422\n\t\t\tthis.renderEventLocationHelper(eventLocation, seg);                                                                 // 6423\n\t\t\tthis.applyDragOpacity(this.helperEl);                                                                               // 6424\n                                                                                                                       // 6425\n\t\t\treturn true; // signal that a helper has been rendered                                                              // 6426\n\t\t}                                                                                                                    // 6427\n\t\telse {                                                                                                               // 6428\n\t\t\t// otherwise, just render a highlight                                                                               // 6429\n\t\t\tthis.renderHighlight(this.eventToSpan(eventLocation));                                                              // 6430\n\t\t}                                                                                                                    // 6431\n\t},                                                                                                                    // 6432\n                                                                                                                       // 6433\n                                                                                                                       // 6434\n\t// Unrenders any visual indication of an event being dragged                                                          // 6435\n\tunrenderDrag: function() {                                                                                            // 6436\n\t\tthis.unrenderHelper();                                                                                               // 6437\n\t\tthis.unrenderHighlight();                                                                                            // 6438\n\t},                                                                                                                    // 6439\n                                                                                                                       // 6440\n                                                                                                                       // 6441\n\t/* Event Resize Visualization                                                                                         // 6442\n\t------------------------------------------------------------------------------------------------------------------*/  // 6443\n                                                                                                                       // 6444\n                                                                                                                       // 6445\n\t// Renders a visual indication of an event being resized                                                              // 6446\n\trenderEventResize: function(eventLocation, seg) {                                                                     // 6447\n\t\tthis.renderEventLocationHelper(eventLocation, seg);                                                                  // 6448\n\t},                                                                                                                    // 6449\n                                                                                                                       // 6450\n                                                                                                                       // 6451\n\t// Unrenders any visual indication of an event being resized                                                          // 6452\n\tunrenderEventResize: function() {                                                                                     // 6453\n\t\tthis.unrenderHelper();                                                                                               // 6454\n\t},                                                                                                                    // 6455\n                                                                                                                       // 6456\n                                                                                                                       // 6457\n\t/* Event Helper                                                                                                       // 6458\n\t------------------------------------------------------------------------------------------------------------------*/  // 6459\n                                                                                                                       // 6460\n                                                                                                                       // 6461\n\t// Renders a mock \"helper\" event. `sourceSeg` is the original segment object and might be null (an external drag)     // 6462\n\trenderHelper: function(event, sourceSeg) {                                                                            // 6463\n\t\tvar segs = this.eventToSegs(event);                                                                                  // 6464\n\t\tvar tableEl;                                                                                                         // 6465\n\t\tvar i, seg;                                                                                                          // 6466\n\t\tvar sourceEl;                                                                                                        // 6467\n                                                                                                                       // 6468\n\t\tsegs = this.renderFgSegEls(segs); // assigns each seg's el and returns a subset of segs that were rendered           // 6469\n\t\ttableEl = this.renderSegTable(segs);                                                                                 // 6470\n                                                                                                                       // 6471\n\t\t// Try to make the segment that is in the same row as sourceSeg look the same                                        // 6472\n\t\tfor (i = 0; i < segs.length; i++) {                                                                                  // 6473\n\t\t\tseg = segs[i];                                                                                                      // 6474\n\t\t\tif (sourceSeg && sourceSeg.col === seg.col) {                                                                       // 6475\n\t\t\t\tsourceEl = sourceSeg.el;                                                                                           // 6476\n\t\t\t\tseg.el.css({                                                                                                       // 6477\n\t\t\t\t\tleft: sourceEl.css('left'),                                                                                       // 6478\n\t\t\t\t\tright: sourceEl.css('right'),                                                                                     // 6479\n\t\t\t\t\t'margin-left': sourceEl.css('margin-left'),                                                                       // 6480\n\t\t\t\t\t'margin-right': sourceEl.css('margin-right')                                                                      // 6481\n\t\t\t\t});                                                                                                                // 6482\n\t\t\t}                                                                                                                   // 6483\n\t\t}                                                                                                                    // 6484\n                                                                                                                       // 6485\n\t\tthis.helperEl = $('<div class=\"fc-helper-skeleton\"/>')                                                               // 6486\n\t\t\t.append(tableEl)                                                                                                    // 6487\n\t\t\t\t.appendTo(this.el);                                                                                                // 6488\n\t},                                                                                                                    // 6489\n                                                                                                                       // 6490\n                                                                                                                       // 6491\n\t// Unrenders any mock helper event                                                                                    // 6492\n\tunrenderHelper: function() {                                                                                          // 6493\n\t\tif (this.helperEl) {                                                                                                 // 6494\n\t\t\tthis.helperEl.remove();                                                                                             // 6495\n\t\t\tthis.helperEl = null;                                                                                               // 6496\n\t\t}                                                                                                                    // 6497\n\t},                                                                                                                    // 6498\n                                                                                                                       // 6499\n                                                                                                                       // 6500\n\t/* Selection                                                                                                          // 6501\n\t------------------------------------------------------------------------------------------------------------------*/  // 6502\n                                                                                                                       // 6503\n                                                                                                                       // 6504\n\t// Renders a visual indication of a selection. Overrides the default, which was to simply render a highlight.         // 6505\n\trenderSelection: function(span) {                                                                                     // 6506\n\t\tif (this.view.opt('selectHelper')) { // this setting signals that a mock helper event should be rendered             // 6507\n                                                                                                                       // 6508\n\t\t\t// normally acceps an eventLocation, span has a start/end, which is good enough                                     // 6509\n\t\t\tthis.renderEventLocationHelper(span);                                                                               // 6510\n\t\t}                                                                                                                    // 6511\n\t\telse {                                                                                                               // 6512\n\t\t\tthis.renderHighlight(span);                                                                                         // 6513\n\t\t}                                                                                                                    // 6514\n\t},                                                                                                                    // 6515\n                                                                                                                       // 6516\n                                                                                                                       // 6517\n\t// Unrenders any visual indication of a selection                                                                     // 6518\n\tunrenderSelection: function() {                                                                                       // 6519\n\t\tthis.unrenderHelper();                                                                                               // 6520\n\t\tthis.unrenderHighlight();                                                                                            // 6521\n\t},                                                                                                                    // 6522\n                                                                                                                       // 6523\n                                                                                                                       // 6524\n\t/* Fill System (highlight, background events, business hours)                                                         // 6525\n\t------------------------------------------------------------------------------------------------------------------*/  // 6526\n                                                                                                                       // 6527\n                                                                                                                       // 6528\n\t// Renders a set of rectangles over the given time segments.                                                          // 6529\n\t// Only returns segments that successfully rendered.                                                                  // 6530\n\trenderFill: function(type, segs, className) {                                                                         // 6531\n\t\tvar segCols;                                                                                                         // 6532\n\t\tvar skeletonEl;                                                                                                      // 6533\n\t\tvar trEl;                                                                                                            // 6534\n\t\tvar col, colSegs;                                                                                                    // 6535\n\t\tvar tdEl;                                                                                                            // 6536\n\t\tvar containerEl;                                                                                                     // 6537\n\t\tvar dayDate;                                                                                                         // 6538\n\t\tvar i, seg;                                                                                                          // 6539\n                                                                                                                       // 6540\n\t\tif (segs.length) {                                                                                                   // 6541\n                                                                                                                       // 6542\n\t\t\tsegs = this.renderFillSegEls(type, segs); // assignes `.el` to each seg. returns successfully rendered segs         // 6543\n\t\t\tsegCols = this.groupSegCols(segs); // group into sub-arrays, and assigns 'col' to each seg                          // 6544\n                                                                                                                       // 6545\n\t\t\tclassName = className || type.toLowerCase();                                                                        // 6546\n\t\t\tskeletonEl = $(                                                                                                     // 6547\n\t\t\t\t'<div class=\"fc-' + className + '-skeleton\">' +                                                                    // 6548\n\t\t\t\t\t'<table><tr/></table>' +                                                                                          // 6549\n\t\t\t\t'</div>'                                                                                                           // 6550\n\t\t\t);                                                                                                                  // 6551\n\t\t\ttrEl = skeletonEl.find('tr');                                                                                       // 6552\n                                                                                                                       // 6553\n\t\t\tfor (col = 0; col < segCols.length; col++) {                                                                        // 6554\n\t\t\t\tcolSegs = segCols[col];                                                                                            // 6555\n\t\t\t\ttdEl = $('<td/>').appendTo(trEl);                                                                                  // 6556\n                                                                                                                       // 6557\n\t\t\t\tif (colSegs.length) {                                                                                              // 6558\n\t\t\t\t\tcontainerEl = $('<div class=\"fc-' + className + '-container\"/>').appendTo(tdEl);                                  // 6559\n\t\t\t\t\tdayDate = this.getCellDate(0, col); // row=0                                                                      // 6560\n                                                                                                                       // 6561\n\t\t\t\t\tfor (i = 0; i < colSegs.length; i++) {                                                                            // 6562\n\t\t\t\t\t\tseg = colSegs[i];                                                                                                // 6563\n\t\t\t\t\t\tcontainerEl.append(                                                                                              // 6564\n\t\t\t\t\t\t\tseg.el.css({                                                                                                    // 6565\n\t\t\t\t\t\t\t\ttop: this.computeDateTop(seg.start, dayDate),                                                                  // 6566\n\t\t\t\t\t\t\t\tbottom: -this.computeDateTop(seg.end, dayDate) // the y position of the bottom edge                            // 6567\n\t\t\t\t\t\t\t})                                                                                                              // 6568\n\t\t\t\t\t\t);                                                                                                               // 6569\n\t\t\t\t\t}                                                                                                                 // 6570\n\t\t\t\t}                                                                                                                  // 6571\n\t\t\t}                                                                                                                   // 6572\n                                                                                                                       // 6573\n\t\t\tthis.bookendCells(trEl);                                                                                            // 6574\n                                                                                                                       // 6575\n\t\t\tthis.el.append(skeletonEl);                                                                                         // 6576\n\t\t\tthis.elsByFill[type] = skeletonEl;                                                                                  // 6577\n\t\t}                                                                                                                    // 6578\n                                                                                                                       // 6579\n\t\treturn segs;                                                                                                         // 6580\n\t}                                                                                                                     // 6581\n                                                                                                                       // 6582\n});                                                                                                                    // 6583\n                                                                                                                       // 6584\n;;                                                                                                                     // 6585\n                                                                                                                       // 6586\n/* Event-rendering methods for the TimeGrid class                                                                      // 6587\n----------------------------------------------------------------------------------------------------------------------*/\n                                                                                                                       // 6589\nTimeGrid.mixin({                                                                                                       // 6590\n                                                                                                                       // 6591\n\teventSkeletonEl: null, // has cells with event-containers, which contain absolutely positioned event elements         // 6592\n                                                                                                                       // 6593\n                                                                                                                       // 6594\n\t// Renders the given foreground event segments onto the grid                                                          // 6595\n\trenderFgSegs: function(segs) {                                                                                        // 6596\n\t\tsegs = this.renderFgSegEls(segs); // returns a subset of the segs. segs that were actually rendered                  // 6597\n                                                                                                                       // 6598\n\t\tthis.el.append(                                                                                                      // 6599\n\t\t\tthis.eventSkeletonEl = $('<div class=\"fc-content-skeleton\"/>')                                                      // 6600\n\t\t\t\t.append(this.renderSegTable(segs))                                                                                 // 6601\n\t\t);                                                                                                                   // 6602\n                                                                                                                       // 6603\n\t\treturn segs; // return only the segs that were actually rendered                                                     // 6604\n\t},                                                                                                                    // 6605\n                                                                                                                       // 6606\n                                                                                                                       // 6607\n\t// Unrenders all currently rendered foreground event segments                                                         // 6608\n\tunrenderFgSegs: function(segs) {                                                                                      // 6609\n\t\tif (this.eventSkeletonEl) {                                                                                          // 6610\n\t\t\tthis.eventSkeletonEl.remove();                                                                                      // 6611\n\t\t\tthis.eventSkeletonEl = null;                                                                                        // 6612\n\t\t}                                                                                                                    // 6613\n\t},                                                                                                                    // 6614\n                                                                                                                       // 6615\n                                                                                                                       // 6616\n\t// Renders and returns the <table> portion of the event-skeleton.                                                     // 6617\n\t// Returns an object with properties 'tbodyEl' and 'segs'.                                                            // 6618\n\trenderSegTable: function(segs) {                                                                                      // 6619\n\t\tvar tableEl = $('<table><tr/></table>');                                                                             // 6620\n\t\tvar trEl = tableEl.find('tr');                                                                                       // 6621\n\t\tvar segCols;                                                                                                         // 6622\n\t\tvar i, seg;                                                                                                          // 6623\n\t\tvar col, colSegs;                                                                                                    // 6624\n\t\tvar containerEl;                                                                                                     // 6625\n                                                                                                                       // 6626\n\t\tsegCols = this.groupSegCols(segs); // group into sub-arrays, and assigns 'col' to each seg                           // 6627\n                                                                                                                       // 6628\n\t\tthis.computeSegVerticals(segs); // compute and assign top/bottom                                                     // 6629\n                                                                                                                       // 6630\n\t\tfor (col = 0; col < segCols.length; col++) { // iterate each column grouping                                         // 6631\n\t\t\tcolSegs = segCols[col];                                                                                             // 6632\n\t\t\tthis.placeSlotSegs(colSegs); // compute horizontal coordinates, z-index's, and reorder the array                    // 6633\n                                                                                                                       // 6634\n\t\t\tcontainerEl = $('<div class=\"fc-event-container\"/>');                                                               // 6635\n                                                                                                                       // 6636\n\t\t\t// assign positioning CSS and insert into container                                                                 // 6637\n\t\t\tfor (i = 0; i < colSegs.length; i++) {                                                                              // 6638\n\t\t\t\tseg = colSegs[i];                                                                                                  // 6639\n\t\t\t\tseg.el.css(this.generateSegPositionCss(seg));                                                                      // 6640\n                                                                                                                       // 6641\n\t\t\t\t// if the height is short, add a className for alternate styling                                                   // 6642\n\t\t\t\tif (seg.bottom - seg.top < 30) {                                                                                   // 6643\n\t\t\t\t\tseg.el.addClass('fc-short');                                                                                      // 6644\n\t\t\t\t}                                                                                                                  // 6645\n                                                                                                                       // 6646\n\t\t\t\tcontainerEl.append(seg.el);                                                                                        // 6647\n\t\t\t}                                                                                                                   // 6648\n                                                                                                                       // 6649\n\t\t\ttrEl.append($('<td/>').append(containerEl));                                                                        // 6650\n\t\t}                                                                                                                    // 6651\n                                                                                                                       // 6652\n\t\tthis.bookendCells(trEl);                                                                                             // 6653\n                                                                                                                       // 6654\n\t\treturn tableEl;                                                                                                      // 6655\n\t},                                                                                                                    // 6656\n                                                                                                                       // 6657\n                                                                                                                       // 6658\n\t// Given an array of segments that are all in the same column, sets the backwardCoord and forwardCoord on each.       // 6659\n\t// NOTE: Also reorders the given array by date!                                                                       // 6660\n\tplaceSlotSegs: function(segs) {                                                                                       // 6661\n\t\tvar levels;                                                                                                          // 6662\n\t\tvar level0;                                                                                                          // 6663\n\t\tvar i;                                                                                                               // 6664\n                                                                                                                       // 6665\n\t\tthis.sortEventSegs(segs); // order by certain criteria                                                               // 6666\n\t\tlevels = buildSlotSegLevels(segs);                                                                                   // 6667\n\t\tcomputeForwardSlotSegs(levels);                                                                                      // 6668\n                                                                                                                       // 6669\n\t\tif ((level0 = levels[0])) {                                                                                          // 6670\n                                                                                                                       // 6671\n\t\t\tfor (i = 0; i < level0.length; i++) {                                                                               // 6672\n\t\t\t\tcomputeSlotSegPressures(level0[i]);                                                                                // 6673\n\t\t\t}                                                                                                                   // 6674\n                                                                                                                       // 6675\n\t\t\tfor (i = 0; i < level0.length; i++) {                                                                               // 6676\n\t\t\t\tthis.computeSlotSegCoords(level0[i], 0, 0);                                                                        // 6677\n\t\t\t}                                                                                                                   // 6678\n\t\t}                                                                                                                    // 6679\n\t},                                                                                                                    // 6680\n                                                                                                                       // 6681\n                                                                                                                       // 6682\n\t// Calculate seg.forwardCoord and seg.backwardCoord for the segment, where both values range                          // 6683\n\t// from 0 to 1. If the calendar is left-to-right, the seg.backwardCoord maps to \"left\" and                            // 6684\n\t// seg.forwardCoord maps to \"right\" (via percentage). Vice-versa if the calendar is right-to-left.                    // 6685\n\t//                                                                                                                    // 6686\n\t// The segment might be part of a \"series\", which means consecutive segments with the same pressure                   // 6687\n\t// who's width is unknown until an edge has been hit. `seriesBackwardPressure` is the number of                       // 6688\n\t// segments behind this one in the current series, and `seriesBackwardCoord` is the starting                          // 6689\n\t// coordinate of the first segment in the series.                                                                     // 6690\n\tcomputeSlotSegCoords: function(seg, seriesBackwardPressure, seriesBackwardCoord) {                                    // 6691\n\t\tvar forwardSegs = seg.forwardSegs;                                                                                   // 6692\n\t\tvar i;                                                                                                               // 6693\n                                                                                                                       // 6694\n\t\tif (seg.forwardCoord === undefined) { // not already computed                                                        // 6695\n                                                                                                                       // 6696\n\t\t\tif (!forwardSegs.length) {                                                                                          // 6697\n                                                                                                                       // 6698\n\t\t\t\t// if there are no forward segments, this segment should butt up against the edge                                  // 6699\n\t\t\t\tseg.forwardCoord = 1;                                                                                              // 6700\n\t\t\t}                                                                                                                   // 6701\n\t\t\telse {                                                                                                              // 6702\n                                                                                                                       // 6703\n\t\t\t\t// sort highest pressure first                                                                                     // 6704\n\t\t\t\tthis.sortForwardSlotSegs(forwardSegs);                                                                             // 6705\n                                                                                                                       // 6706\n\t\t\t\t// this segment's forwardCoord will be calculated from the backwardCoord of the                                    // 6707\n\t\t\t\t// highest-pressure forward segment.                                                                               // 6708\n\t\t\t\tthis.computeSlotSegCoords(forwardSegs[0], seriesBackwardPressure + 1, seriesBackwardCoord);                        // 6709\n\t\t\t\tseg.forwardCoord = forwardSegs[0].backwardCoord;                                                                   // 6710\n\t\t\t}                                                                                                                   // 6711\n                                                                                                                       // 6712\n\t\t\t// calculate the backwardCoord from the forwardCoord. consider the series                                           // 6713\n\t\t\tseg.backwardCoord = seg.forwardCoord -                                                                              // 6714\n\t\t\t\t(seg.forwardCoord - seriesBackwardCoord) / // available width for series                                           // 6715\n\t\t\t\t(seriesBackwardPressure + 1); // # of segments in the series                                                       // 6716\n                                                                                                                       // 6717\n\t\t\t// use this segment's coordinates to computed the coordinates of the less-pressurized                               // 6718\n\t\t\t// forward segments                                                                                                 // 6719\n\t\t\tfor (i=0; i<forwardSegs.length; i++) {                                                                              // 6720\n\t\t\t\tthis.computeSlotSegCoords(forwardSegs[i], 0, seg.forwardCoord);                                                    // 6721\n\t\t\t}                                                                                                                   // 6722\n\t\t}                                                                                                                    // 6723\n\t},                                                                                                                    // 6724\n                                                                                                                       // 6725\n                                                                                                                       // 6726\n\t// Refreshes the CSS top/bottom coordinates for each segment element. Probably after a window resize/zoom.            // 6727\n\t// Repositions business hours segs too, so not just for events. Maybe shouldn't be here.                              // 6728\n\tupdateSegVerticals: function() {                                                                                      // 6729\n\t\tvar allSegs = (this.segs || []).concat(this.businessHourSegs || []);                                                 // 6730\n\t\tvar i;                                                                                                               // 6731\n                                                                                                                       // 6732\n\t\tthis.computeSegVerticals(allSegs);                                                                                   // 6733\n                                                                                                                       // 6734\n\t\tfor (i = 0; i < allSegs.length; i++) {                                                                               // 6735\n\t\t\tallSegs[i].el.css(                                                                                                  // 6736\n\t\t\t\tthis.generateSegVerticalCss(allSegs[i])                                                                            // 6737\n\t\t\t);                                                                                                                  // 6738\n\t\t}                                                                                                                    // 6739\n\t},                                                                                                                    // 6740\n                                                                                                                       // 6741\n                                                                                                                       // 6742\n\t// For each segment in an array, computes and assigns its top and bottom properties                                   // 6743\n\tcomputeSegVerticals: function(segs) {                                                                                 // 6744\n\t\tvar i, seg;                                                                                                          // 6745\n                                                                                                                       // 6746\n\t\tfor (i = 0; i < segs.length; i++) {                                                                                  // 6747\n\t\t\tseg = segs[i];                                                                                                      // 6748\n\t\t\tseg.top = this.computeDateTop(seg.start, seg.start);                                                                // 6749\n\t\t\tseg.bottom = this.computeDateTop(seg.end, seg.start);                                                               // 6750\n\t\t}                                                                                                                    // 6751\n\t},                                                                                                                    // 6752\n                                                                                                                       // 6753\n                                                                                                                       // 6754\n\t// Renders the HTML for a single event segment's default rendering                                                    // 6755\n\tfgSegHtml: function(seg, disableResizing) {                                                                           // 6756\n\t\tvar view = this.view;                                                                                                // 6757\n\t\tvar event = seg.event;                                                                                               // 6758\n\t\tvar isDraggable = view.isEventDraggable(event);                                                                      // 6759\n\t\tvar isResizableFromStart = !disableResizing && seg.isStart && view.isEventResizableFromStart(event);                 // 6760\n\t\tvar isResizableFromEnd = !disableResizing && seg.isEnd && view.isEventResizableFromEnd(event);                       // 6761\n\t\tvar classes = this.getSegClasses(seg, isDraggable, isResizableFromStart || isResizableFromEnd);                      // 6762\n\t\tvar skinCss = cssToStr(this.getEventSkinCss(event));                                                                 // 6763\n\t\tvar timeText;                                                                                                        // 6764\n\t\tvar fullTimeText; // more verbose time text. for the print stylesheet                                                // 6765\n\t\tvar startTimeText; // just the start time text                                                                       // 6766\n                                                                                                                       // 6767\n\t\tclasses.unshift('fc-time-grid-event', 'fc-v-event');                                                                 // 6768\n                                                                                                                       // 6769\n\t\tif (view.isMultiDayEvent(event)) { // if the event appears to span more than one day...                              // 6770\n\t\t\t// Don't display time text on segments that run entirely through a day.                                             // 6771\n\t\t\t// That would appear as midnight-midnight and would look dumb.                                                      // 6772\n\t\t\t// Otherwise, display the time text for the *segment's* times (like 6pm-midnight or midnight-10am)                  // 6773\n\t\t\tif (seg.isStart || seg.isEnd) {                                                                                     // 6774\n\t\t\t\ttimeText = this.getEventTimeText(seg);                                                                             // 6775\n\t\t\t\tfullTimeText = this.getEventTimeText(seg, 'LT');                                                                   // 6776\n\t\t\t\tstartTimeText = this.getEventTimeText(seg, null, false); // displayEnd=false                                       // 6777\n\t\t\t}                                                                                                                   // 6778\n\t\t} else {                                                                                                             // 6779\n\t\t\t// Display the normal time text for the *event's* times                                                             // 6780\n\t\t\ttimeText = this.getEventTimeText(event);                                                                            // 6781\n\t\t\tfullTimeText = this.getEventTimeText(event, 'LT');                                                                  // 6782\n\t\t\tstartTimeText = this.getEventTimeText(event, null, false); // displayEnd=false                                      // 6783\n\t\t}                                                                                                                    // 6784\n                                                                                                                       // 6785\n\t\treturn '<a class=\"' + classes.join(' ') + '\"' +                                                                      // 6786\n\t\t\t(event.url ?                                                                                                        // 6787\n\t\t\t\t' href=\"' + htmlEscape(event.url) + '\"' :                                                                          // 6788\n\t\t\t\t''                                                                                                                 // 6789\n\t\t\t\t) +                                                                                                                // 6790\n\t\t\t(skinCss ?                                                                                                          // 6791\n\t\t\t\t' style=\"' + skinCss + '\"' :                                                                                       // 6792\n\t\t\t\t''                                                                                                                 // 6793\n\t\t\t\t) +                                                                                                                // 6794\n\t\t\t'>' +                                                                                                               // 6795\n\t\t\t\t'<div class=\"fc-content\">' +                                                                                       // 6796\n\t\t\t\t\t(timeText ?                                                                                                       // 6797\n\t\t\t\t\t\t'<div class=\"fc-time\"' +                                                                                         // 6798\n\t\t\t\t\t\t' data-start=\"' + htmlEscape(startTimeText) + '\"' +                                                              // 6799\n\t\t\t\t\t\t' data-full=\"' + htmlEscape(fullTimeText) + '\"' +                                                                // 6800\n\t\t\t\t\t\t'>' +                                                                                                            // 6801\n\t\t\t\t\t\t\t'<span>' + htmlEscape(timeText) + '</span>' +                                                                   // 6802\n\t\t\t\t\t\t'</div>' :                                                                                                       // 6803\n\t\t\t\t\t\t''                                                                                                               // 6804\n\t\t\t\t\t\t) +                                                                                                              // 6805\n\t\t\t\t\t(event.title ?                                                                                                    // 6806\n\t\t\t\t\t\t'<div class=\"fc-title\">' +                                                                                       // 6807\n\t\t\t\t\t\t\thtmlEscape(event.title) +                                                                                       // 6808\n\t\t\t\t\t\t'</div>' :                                                                                                       // 6809\n\t\t\t\t\t\t''                                                                                                               // 6810\n\t\t\t\t\t\t) +                                                                                                              // 6811\n\t\t\t\t'</div>' +                                                                                                         // 6812\n\t\t\t\t'<div class=\"fc-bg\"/>' +                                                                                           // 6813\n\t\t\t\t/* TODO: write CSS for this                                                                                        // 6814\n\t\t\t\t(isResizableFromStart ?                                                                                            // 6815\n\t\t\t\t\t'<div class=\"fc-resizer fc-start-resizer\" />' :                                                                   // 6816\n\t\t\t\t\t''                                                                                                                // 6817\n\t\t\t\t\t) +                                                                                                               // 6818\n\t\t\t\t*/                                                                                                                 // 6819\n\t\t\t\t(isResizableFromEnd ?                                                                                              // 6820\n\t\t\t\t\t'<div class=\"fc-resizer fc-end-resizer\" />' :                                                                     // 6821\n\t\t\t\t\t''                                                                                                                // 6822\n\t\t\t\t\t) +                                                                                                               // 6823\n\t\t\t'</a>';                                                                                                             // 6824\n\t},                                                                                                                    // 6825\n                                                                                                                       // 6826\n                                                                                                                       // 6827\n\t// Generates an object with CSS properties/values that should be applied to an event segment element.                 // 6828\n\t// Contains important positioning-related properties that should be applied to any event element, customized or not.  // 6829\n\tgenerateSegPositionCss: function(seg) {                                                                               // 6830\n\t\tvar shouldOverlap = this.view.opt('slotEventOverlap');                                                               // 6831\n\t\tvar backwardCoord = seg.backwardCoord; // the left side if LTR. the right side if RTL. floating-point                // 6832\n\t\tvar forwardCoord = seg.forwardCoord; // the right side if LTR. the left side if RTL. floating-point                  // 6833\n\t\tvar props = this.generateSegVerticalCss(seg); // get top/bottom first                                                // 6834\n\t\tvar left; // amount of space from left edge, a fraction of the total width                                           // 6835\n\t\tvar right; // amount of space from right edge, a fraction of the total width                                         // 6836\n                                                                                                                       // 6837\n\t\tif (shouldOverlap) {                                                                                                 // 6838\n\t\t\t// double the width, but don't go beyond the maximum forward coordinate (1.0)                                       // 6839\n\t\t\tforwardCoord = Math.min(1, backwardCoord + (forwardCoord - backwardCoord) * 2);                                     // 6840\n\t\t}                                                                                                                    // 6841\n                                                                                                                       // 6842\n\t\tif (this.isRTL) {                                                                                                    // 6843\n\t\t\tleft = 1 - forwardCoord;                                                                                            // 6844\n\t\t\tright = backwardCoord;                                                                                              // 6845\n\t\t}                                                                                                                    // 6846\n\t\telse {                                                                                                               // 6847\n\t\t\tleft = backwardCoord;                                                                                               // 6848\n\t\t\tright = 1 - forwardCoord;                                                                                           // 6849\n\t\t}                                                                                                                    // 6850\n                                                                                                                       // 6851\n\t\tprops.zIndex = seg.level + 1; // convert from 0-base to 1-based                                                      // 6852\n\t\tprops.left = left * 100 + '%';                                                                                       // 6853\n\t\tprops.right = right * 100 + '%';                                                                                     // 6854\n                                                                                                                       // 6855\n\t\tif (shouldOverlap && seg.forwardPressure) {                                                                          // 6856\n\t\t\t// add padding to the edge so that forward stacked events don't cover the resizer's icon                            // 6857\n\t\t\tprops[this.isRTL ? 'marginLeft' : 'marginRight'] = 10 * 2; // 10 is a guesstimate of the icon's width               // 6858\n\t\t}                                                                                                                    // 6859\n                                                                                                                       // 6860\n\t\treturn props;                                                                                                        // 6861\n\t},                                                                                                                    // 6862\n                                                                                                                       // 6863\n                                                                                                                       // 6864\n\t// Generates an object with CSS properties for the top/bottom coordinates of a segment element                        // 6865\n\tgenerateSegVerticalCss: function(seg) {                                                                               // 6866\n\t\treturn {                                                                                                             // 6867\n\t\t\ttop: seg.top,                                                                                                       // 6868\n\t\t\tbottom: -seg.bottom // flipped because needs to be space beyond bottom edge of event container                      // 6869\n\t\t};                                                                                                                   // 6870\n\t},                                                                                                                    // 6871\n                                                                                                                       // 6872\n                                                                                                                       // 6873\n\t// Given a flat array of segments, return an array of sub-arrays, grouped by each segment's col                       // 6874\n\tgroupSegCols: function(segs) {                                                                                        // 6875\n\t\tvar segCols = [];                                                                                                    // 6876\n\t\tvar i;                                                                                                               // 6877\n                                                                                                                       // 6878\n\t\tfor (i = 0; i < this.colCnt; i++) {                                                                                  // 6879\n\t\t\tsegCols.push([]);                                                                                                   // 6880\n\t\t}                                                                                                                    // 6881\n                                                                                                                       // 6882\n\t\tfor (i = 0; i < segs.length; i++) {                                                                                  // 6883\n\t\t\tsegCols[segs[i].col].push(segs[i]);                                                                                 // 6884\n\t\t}                                                                                                                    // 6885\n                                                                                                                       // 6886\n\t\treturn segCols;                                                                                                      // 6887\n\t},                                                                                                                    // 6888\n                                                                                                                       // 6889\n                                                                                                                       // 6890\n\tsortForwardSlotSegs: function(forwardSegs) {                                                                          // 6891\n\t\tforwardSegs.sort(proxy(this, 'compareForwardSlotSegs'));                                                             // 6892\n\t},                                                                                                                    // 6893\n                                                                                                                       // 6894\n                                                                                                                       // 6895\n\t// A cmp function for determining which forward segment to rely on more when computing coordinates.                   // 6896\n\tcompareForwardSlotSegs: function(seg1, seg2) {                                                                        // 6897\n\t\t// put higher-pressure first                                                                                         // 6898\n\t\treturn seg2.forwardPressure - seg1.forwardPressure ||                                                                // 6899\n\t\t\t// put segments that are closer to initial edge first (and favor ones with no coords yet)                           // 6900\n\t\t\t(seg1.backwardCoord || 0) - (seg2.backwardCoord || 0) ||                                                            // 6901\n\t\t\t// do normal sorting...                                                                                             // 6902\n\t\t\tthis.compareEventSegs(seg1, seg2);                                                                                  // 6903\n\t}                                                                                                                     // 6904\n                                                                                                                       // 6905\n});                                                                                                                    // 6906\n                                                                                                                       // 6907\n                                                                                                                       // 6908\n// Builds an array of segments \"levels\". The first level will be the leftmost tier of segments if the calendar is      // 6909\n// left-to-right, or the rightmost if the calendar is right-to-left. Assumes the segments are already ordered by date.\nfunction buildSlotSegLevels(segs) {                                                                                    // 6911\n\tvar levels = [];                                                                                                      // 6912\n\tvar i, seg;                                                                                                           // 6913\n\tvar j;                                                                                                                // 6914\n                                                                                                                       // 6915\n\tfor (i=0; i<segs.length; i++) {                                                                                       // 6916\n\t\tseg = segs[i];                                                                                                       // 6917\n                                                                                                                       // 6918\n\t\t// go through all the levels and stop on the first level where there are no collisions                               // 6919\n\t\tfor (j=0; j<levels.length; j++) {                                                                                    // 6920\n\t\t\tif (!computeSlotSegCollisions(seg, levels[j]).length) {                                                             // 6921\n\t\t\t\tbreak;                                                                                                             // 6922\n\t\t\t}                                                                                                                   // 6923\n\t\t}                                                                                                                    // 6924\n                                                                                                                       // 6925\n\t\tseg.level = j;                                                                                                       // 6926\n                                                                                                                       // 6927\n\t\t(levels[j] || (levels[j] = [])).push(seg);                                                                           // 6928\n\t}                                                                                                                     // 6929\n                                                                                                                       // 6930\n\treturn levels;                                                                                                        // 6931\n}                                                                                                                      // 6932\n                                                                                                                       // 6933\n                                                                                                                       // 6934\n// For every segment, figure out the other segments that are in subsequent                                             // 6935\n// levels that also occupy the same vertical space. Accumulate in seg.forwardSegs                                      // 6936\nfunction computeForwardSlotSegs(levels) {                                                                              // 6937\n\tvar i, level;                                                                                                         // 6938\n\tvar j, seg;                                                                                                           // 6939\n\tvar k;                                                                                                                // 6940\n                                                                                                                       // 6941\n\tfor (i=0; i<levels.length; i++) {                                                                                     // 6942\n\t\tlevel = levels[i];                                                                                                   // 6943\n                                                                                                                       // 6944\n\t\tfor (j=0; j<level.length; j++) {                                                                                     // 6945\n\t\t\tseg = level[j];                                                                                                     // 6946\n                                                                                                                       // 6947\n\t\t\tseg.forwardSegs = [];                                                                                               // 6948\n\t\t\tfor (k=i+1; k<levels.length; k++) {                                                                                 // 6949\n\t\t\t\tcomputeSlotSegCollisions(seg, levels[k], seg.forwardSegs);                                                         // 6950\n\t\t\t}                                                                                                                   // 6951\n\t\t}                                                                                                                    // 6952\n\t}                                                                                                                     // 6953\n}                                                                                                                      // 6954\n                                                                                                                       // 6955\n                                                                                                                       // 6956\n// Figure out which path forward (via seg.forwardSegs) results in the longest path until                               // 6957\n// the furthest edge is reached. The number of segments in this path will be seg.forwardPressure                       // 6958\nfunction computeSlotSegPressures(seg) {                                                                                // 6959\n\tvar forwardSegs = seg.forwardSegs;                                                                                    // 6960\n\tvar forwardPressure = 0;                                                                                              // 6961\n\tvar i, forwardSeg;                                                                                                    // 6962\n                                                                                                                       // 6963\n\tif (seg.forwardPressure === undefined) { // not already computed                                                      // 6964\n                                                                                                                       // 6965\n\t\tfor (i=0; i<forwardSegs.length; i++) {                                                                               // 6966\n\t\t\tforwardSeg = forwardSegs[i];                                                                                        // 6967\n                                                                                                                       // 6968\n\t\t\t// figure out the child's maximum forward path                                                                      // 6969\n\t\t\tcomputeSlotSegPressures(forwardSeg);                                                                                // 6970\n                                                                                                                       // 6971\n\t\t\t// either use the existing maximum, or use the child's forward pressure                                             // 6972\n\t\t\t// plus one (for the forwardSeg itself)                                                                             // 6973\n\t\t\tforwardPressure = Math.max(                                                                                         // 6974\n\t\t\t\tforwardPressure,                                                                                                   // 6975\n\t\t\t\t1 + forwardSeg.forwardPressure                                                                                     // 6976\n\t\t\t);                                                                                                                  // 6977\n\t\t}                                                                                                                    // 6978\n                                                                                                                       // 6979\n\t\tseg.forwardPressure = forwardPressure;                                                                               // 6980\n\t}                                                                                                                     // 6981\n}                                                                                                                      // 6982\n                                                                                                                       // 6983\n                                                                                                                       // 6984\n// Find all the segments in `otherSegs` that vertically collide with `seg`.                                            // 6985\n// Append into an optionally-supplied `results` array and return.                                                      // 6986\nfunction computeSlotSegCollisions(seg, otherSegs, results) {                                                           // 6987\n\tresults = results || [];                                                                                              // 6988\n                                                                                                                       // 6989\n\tfor (var i=0; i<otherSegs.length; i++) {                                                                              // 6990\n\t\tif (isSlotSegCollision(seg, otherSegs[i])) {                                                                         // 6991\n\t\t\tresults.push(otherSegs[i]);                                                                                         // 6992\n\t\t}                                                                                                                    // 6993\n\t}                                                                                                                     // 6994\n                                                                                                                       // 6995\n\treturn results;                                                                                                       // 6996\n}                                                                                                                      // 6997\n                                                                                                                       // 6998\n                                                                                                                       // 6999\n// Do these segments occupy the same vertical space?                                                                   // 7000\nfunction isSlotSegCollision(seg1, seg2) {                                                                              // 7001\n\treturn seg1.bottom > seg2.top && seg1.top < seg2.bottom;                                                              // 7002\n}                                                                                                                      // 7003\n                                                                                                                       // 7004\n;;                                                                                                                     // 7005\n                                                                                                                       // 7006\n/* An abstract class from which other views inherit from                                                               // 7007\n----------------------------------------------------------------------------------------------------------------------*/\n                                                                                                                       // 7009\nvar View = FC.View = Class.extend({                                                                                    // 7010\n                                                                                                                       // 7011\n\ttype: null, // subclass' view name (string)                                                                           // 7012\n\tname: null, // deprecated. use `type` instead                                                                         // 7013\n\ttitle: null, // the text that will be displayed in the header's title                                                 // 7014\n                                                                                                                       // 7015\n\tcalendar: null, // owner Calendar object                                                                              // 7016\n\toptions: null, // hash containing all options. already merged with view-specific-options                              // 7017\n\tel: null, // the view's containing element. set by Calendar                                                           // 7018\n                                                                                                                       // 7019\n\tdisplaying: null, // a promise representing the state of rendering. null if no render requested                       // 7020\n\tisSkeletonRendered: false,                                                                                            // 7021\n\tisEventsRendered: false,                                                                                              // 7022\n                                                                                                                       // 7023\n\t// range the view is actually displaying (moments)                                                                    // 7024\n\tstart: null,                                                                                                          // 7025\n\tend: null, // exclusive                                                                                               // 7026\n                                                                                                                       // 7027\n\t// range the view is formally responsible for (moments)                                                               // 7028\n\t// may be different from start/end. for example, a month view might have 1st-31st, excluding padded dates             // 7029\n\tintervalStart: null,                                                                                                  // 7030\n\tintervalEnd: null, // exclusive                                                                                       // 7031\n\tintervalDuration: null,                                                                                               // 7032\n\tintervalUnit: null, // name of largest unit being displayed, like \"month\" or \"week\"                                   // 7033\n                                                                                                                       // 7034\n\tisRTL: false,                                                                                                         // 7035\n\tisSelected: false, // boolean whether a range of time is user-selected or not                                         // 7036\n                                                                                                                       // 7037\n\teventOrderSpecs: null, // criteria for ordering events when they have same date/time                                  // 7038\n                                                                                                                       // 7039\n\t// subclasses can optionally use a scroll container                                                                   // 7040\n\tscrollerEl: null, // the element that will most likely scroll when content is too tall                                // 7041\n\tscrollTop: null, // cached vertical scroll value                                                                      // 7042\n                                                                                                                       // 7043\n\t// classNames styled by jqui themes                                                                                   // 7044\n\twidgetHeaderClass: null,                                                                                              // 7045\n\twidgetContentClass: null,                                                                                             // 7046\n\thighlightStateClass: null,                                                                                            // 7047\n                                                                                                                       // 7048\n\t// for date utils, computed from options                                                                              // 7049\n\tnextDayThreshold: null,                                                                                               // 7050\n\tisHiddenDayHash: null,                                                                                                // 7051\n                                                                                                                       // 7052\n\t// document handlers, bound to `this` object                                                                          // 7053\n\tdocumentMousedownProxy: null, // TODO: doesn't work with touch                                                        // 7054\n                                                                                                                       // 7055\n                                                                                                                       // 7056\n\tconstructor: function(calendar, type, options, intervalDuration) {                                                    // 7057\n                                                                                                                       // 7058\n\t\tthis.calendar = calendar;                                                                                            // 7059\n\t\tthis.type = this.name = type; // .name is deprecated                                                                 // 7060\n\t\tthis.options = options;                                                                                              // 7061\n\t\tthis.intervalDuration = intervalDuration || moment.duration(1, 'day');                                               // 7062\n                                                                                                                       // 7063\n\t\tthis.nextDayThreshold = moment.duration(this.opt('nextDayThreshold'));                                               // 7064\n\t\tthis.initThemingProps();                                                                                             // 7065\n\t\tthis.initHiddenDays();                                                                                               // 7066\n\t\tthis.isRTL = this.opt('isRTL');                                                                                      // 7067\n                                                                                                                       // 7068\n\t\tthis.eventOrderSpecs = parseFieldSpecs(this.opt('eventOrder'));                                                      // 7069\n                                                                                                                       // 7070\n\t\tthis.documentMousedownProxy = proxy(this, 'documentMousedown');                                                      // 7071\n                                                                                                                       // 7072\n\t\tthis.initialize();                                                                                                   // 7073\n\t},                                                                                                                    // 7074\n                                                                                                                       // 7075\n                                                                                                                       // 7076\n\t// A good place for subclasses to initialize member variables                                                         // 7077\n\tinitialize: function() {                                                                                              // 7078\n\t\t// subclasses can implement                                                                                          // 7079\n\t},                                                                                                                    // 7080\n                                                                                                                       // 7081\n                                                                                                                       // 7082\n\t// Retrieves an option with the given name                                                                            // 7083\n\topt: function(name) {                                                                                                 // 7084\n\t\treturn this.options[name];                                                                                           // 7085\n\t},                                                                                                                    // 7086\n                                                                                                                       // 7087\n                                                                                                                       // 7088\n\t// Triggers handlers that are view-related. Modifies args before passing to calendar.                                 // 7089\n\ttrigger: function(name, thisObj) { // arguments beyond thisObj are passed along                                       // 7090\n\t\tvar calendar = this.calendar;                                                                                        // 7091\n                                                                                                                       // 7092\n\t\treturn calendar.trigger.apply(                                                                                       // 7093\n\t\t\tcalendar,                                                                                                           // 7094\n\t\t\t[name, thisObj || this].concat(                                                                                     // 7095\n\t\t\t\tArray.prototype.slice.call(arguments, 2), // arguments beyond thisObj                                              // 7096\n\t\t\t\t[ this ] // always make the last argument a reference to the view. TODO: deprecate                                 // 7097\n\t\t\t)                                                                                                                   // 7098\n\t\t);                                                                                                                   // 7099\n\t},                                                                                                                    // 7100\n                                                                                                                       // 7101\n                                                                                                                       // 7102\n\t/* Dates                                                                                                              // 7103\n\t------------------------------------------------------------------------------------------------------------------*/  // 7104\n                                                                                                                       // 7105\n                                                                                                                       // 7106\n\t// Updates all internal dates to center around the given current unzoned date.                                        // 7107\n\tsetDate: function(date) {                                                                                             // 7108\n\t\tthis.setRange(this.computeRange(date));                                                                              // 7109\n\t},                                                                                                                    // 7110\n                                                                                                                       // 7111\n                                                                                                                       // 7112\n\t// Updates all internal dates for displaying the given unzoned range.                                                 // 7113\n\tsetRange: function(range) {                                                                                           // 7114\n\t\t$.extend(this, range); // assigns every property to this object's member variables                                   // 7115\n\t\tthis.updateTitle();                                                                                                  // 7116\n\t},                                                                                                                    // 7117\n                                                                                                                       // 7118\n                                                                                                                       // 7119\n\t// Given a single current unzoned date, produce information about what range to display.                              // 7120\n\t// Subclasses can override. Must return all properties.                                                               // 7121\n\tcomputeRange: function(date) {                                                                                        // 7122\n\t\tvar intervalUnit = computeIntervalUnit(this.intervalDuration);                                                       // 7123\n\t\tvar intervalStart = date.clone().startOf(intervalUnit);                                                              // 7124\n\t\tvar intervalEnd = intervalStart.clone().add(this.intervalDuration);                                                  // 7125\n\t\tvar start, end;                                                                                                      // 7126\n                                                                                                                       // 7127\n\t\t// normalize the range's time-ambiguity                                                                              // 7128\n\t\tif (/year|month|week|day/.test(intervalUnit)) { // whole-days?                                                       // 7129\n\t\t\tintervalStart.stripTime();                                                                                          // 7130\n\t\t\tintervalEnd.stripTime();                                                                                            // 7131\n\t\t}                                                                                                                    // 7132\n\t\telse { // needs to have a time?                                                                                      // 7133\n\t\t\tif (!intervalStart.hasTime()) {                                                                                     // 7134\n\t\t\t\tintervalStart = this.calendar.time(0); // give 00:00 time                                                          // 7135\n\t\t\t}                                                                                                                   // 7136\n\t\t\tif (!intervalEnd.hasTime()) {                                                                                       // 7137\n\t\t\t\tintervalEnd = this.calendar.time(0); // give 00:00 time                                                            // 7138\n\t\t\t}                                                                                                                   // 7139\n\t\t}                                                                                                                    // 7140\n                                                                                                                       // 7141\n\t\tstart = intervalStart.clone();                                                                                       // 7142\n\t\tstart = this.skipHiddenDays(start);                                                                                  // 7143\n\t\tend = intervalEnd.clone();                                                                                           // 7144\n\t\tend = this.skipHiddenDays(end, -1, true); // exclusively move backwards                                              // 7145\n                                                                                                                       // 7146\n\t\treturn {                                                                                                             // 7147\n\t\t\tintervalUnit: intervalUnit,                                                                                         // 7148\n\t\t\tintervalStart: intervalStart,                                                                                       // 7149\n\t\t\tintervalEnd: intervalEnd,                                                                                           // 7150\n\t\t\tstart: start,                                                                                                       // 7151\n\t\t\tend: end                                                                                                            // 7152\n\t\t};                                                                                                                   // 7153\n\t},                                                                                                                    // 7154\n                                                                                                                       // 7155\n                                                                                                                       // 7156\n\t// Computes the new date when the user hits the prev button, given the current date                                   // 7157\n\tcomputePrevDate: function(date) {                                                                                     // 7158\n\t\treturn this.massageCurrentDate(                                                                                      // 7159\n\t\t\tdate.clone().startOf(this.intervalUnit).subtract(this.intervalDuration), -1                                         // 7160\n\t\t);                                                                                                                   // 7161\n\t},                                                                                                                    // 7162\n                                                                                                                       // 7163\n                                                                                                                       // 7164\n\t// Computes the new date when the user hits the next button, given the current date                                   // 7165\n\tcomputeNextDate: function(date) {                                                                                     // 7166\n\t\treturn this.massageCurrentDate(                                                                                      // 7167\n\t\t\tdate.clone().startOf(this.intervalUnit).add(this.intervalDuration)                                                  // 7168\n\t\t);                                                                                                                   // 7169\n\t},                                                                                                                    // 7170\n                                                                                                                       // 7171\n                                                                                                                       // 7172\n\t// Given an arbitrarily calculated current date of the calendar, returns a date that is ensured to be completely      // 7173\n\t// visible. `direction` is optional and indicates which direction the current date was being                          // 7174\n\t// incremented or decremented (1 or -1).                                                                              // 7175\n\tmassageCurrentDate: function(date, direction) {                                                                       // 7176\n\t\tif (this.intervalDuration.as('days') <= 1) { // if the view displays a single day or smaller                         // 7177\n\t\t\tif (this.isHiddenDay(date)) {                                                                                       // 7178\n\t\t\t\tdate = this.skipHiddenDays(date, direction);                                                                       // 7179\n\t\t\t\tdate.startOf('day');                                                                                               // 7180\n\t\t\t}                                                                                                                   // 7181\n\t\t}                                                                                                                    // 7182\n                                                                                                                       // 7183\n\t\treturn date;                                                                                                         // 7184\n\t},                                                                                                                    // 7185\n                                                                                                                       // 7186\n                                                                                                                       // 7187\n\t/* Title and Date Formatting                                                                                          // 7188\n\t------------------------------------------------------------------------------------------------------------------*/  // 7189\n                                                                                                                       // 7190\n                                                                                                                       // 7191\n\t// Sets the view's title property to the most updated computed value                                                  // 7192\n\tupdateTitle: function() {                                                                                             // 7193\n\t\tthis.title = this.computeTitle();                                                                                    // 7194\n\t},                                                                                                                    // 7195\n                                                                                                                       // 7196\n                                                                                                                       // 7197\n\t// Computes what the title at the top of the calendar should be for this view                                         // 7198\n\tcomputeTitle: function() {                                                                                            // 7199\n\t\treturn this.formatRange(                                                                                             // 7200\n\t\t\t{                                                                                                                   // 7201\n\t\t\t\t// in case intervalStart/End has a time, make sure timezone is correct                                             // 7202\n\t\t\t\tstart: this.calendar.applyTimezone(this.intervalStart),                                                            // 7203\n\t\t\t\tend: this.calendar.applyTimezone(this.intervalEnd)                                                                 // 7204\n\t\t\t},                                                                                                                  // 7205\n\t\t\tthis.opt('titleFormat') || this.computeTitleFormat(),                                                               // 7206\n\t\t\tthis.opt('titleRangeSeparator')                                                                                     // 7207\n\t\t);                                                                                                                   // 7208\n\t},                                                                                                                    // 7209\n                                                                                                                       // 7210\n                                                                                                                       // 7211\n\t// Generates the format string that should be used to generate the title for the current date range.                  // 7212\n\t// Attempts to compute the most appropriate format if not explicitly specified with `titleFormat`.                    // 7213\n\tcomputeTitleFormat: function() {                                                                                      // 7214\n\t\tif (this.intervalUnit == 'year') {                                                                                   // 7215\n\t\t\treturn 'YYYY';                                                                                                      // 7216\n\t\t}                                                                                                                    // 7217\n\t\telse if (this.intervalUnit == 'month') {                                                                             // 7218\n\t\t\treturn this.opt('monthYearFormat'); // like \"September 2014\"                                                        // 7219\n\t\t}                                                                                                                    // 7220\n\t\telse if (this.intervalDuration.as('days') > 1) {                                                                     // 7221\n\t\t\treturn 'll'; // multi-day range. shorter, like \"Sep 9 - 10 2014\"                                                    // 7222\n\t\t}                                                                                                                    // 7223\n\t\telse {                                                                                                               // 7224\n\t\t\treturn 'LL'; // one day. longer, like \"September 9 2014\"                                                            // 7225\n\t\t}                                                                                                                    // 7226\n\t},                                                                                                                    // 7227\n                                                                                                                       // 7228\n                                                                                                                       // 7229\n\t// Utility for formatting a range. Accepts a range object, formatting string, and optional separator.                 // 7230\n\t// Displays all-day ranges naturally, with an inclusive end. Takes the current isRTL into account.                    // 7231\n\t// The timezones of the dates within `range` will be respected.                                                       // 7232\n\tformatRange: function(range, formatStr, separator) {                                                                  // 7233\n\t\tvar end = range.end;                                                                                                 // 7234\n                                                                                                                       // 7235\n\t\tif (!end.hasTime()) { // all-day?                                                                                    // 7236\n\t\t\tend = end.clone().subtract(1); // convert to inclusive. last ms of previous day                                     // 7237\n\t\t}                                                                                                                    // 7238\n                                                                                                                       // 7239\n\t\treturn formatRange(range.start, end, formatStr, separator, this.opt('isRTL'));                                       // 7240\n\t},                                                                                                                    // 7241\n                                                                                                                       // 7242\n                                                                                                                       // 7243\n\t/* Rendering                                                                                                          // 7244\n\t------------------------------------------------------------------------------------------------------------------*/  // 7245\n                                                                                                                       // 7246\n                                                                                                                       // 7247\n\t// Sets the container element that the view should render inside of.                                                  // 7248\n\t// Does other DOM-related initializations.                                                                            // 7249\n\tsetElement: function(el) {                                                                                            // 7250\n\t\tthis.el = el;                                                                                                        // 7251\n\t\tthis.bindGlobalHandlers();                                                                                           // 7252\n\t},                                                                                                                    // 7253\n                                                                                                                       // 7254\n                                                                                                                       // 7255\n\t// Removes the view's container element from the DOM, clearing any content beforehand.                                // 7256\n\t// Undoes any other DOM-related attachments.                                                                          // 7257\n\tremoveElement: function() {                                                                                           // 7258\n\t\tthis.clear(); // clears all content                                                                                  // 7259\n                                                                                                                       // 7260\n\t\t// clean up the skeleton                                                                                             // 7261\n\t\tif (this.isSkeletonRendered) {                                                                                       // 7262\n\t\t\tthis.unrenderSkeleton();                                                                                            // 7263\n\t\t\tthis.isSkeletonRendered = false;                                                                                    // 7264\n\t\t}                                                                                                                    // 7265\n                                                                                                                       // 7266\n\t\tthis.unbindGlobalHandlers();                                                                                         // 7267\n                                                                                                                       // 7268\n\t\tthis.el.remove();                                                                                                    // 7269\n                                                                                                                       // 7270\n\t\t// NOTE: don't null-out this.el in case the View was destroyed within an API callback.                               // 7271\n\t\t// We don't null-out the View's other jQuery element references upon destroy,                                        // 7272\n\t\t//  so we shouldn't kill this.el either.                                                                             // 7273\n\t},                                                                                                                    // 7274\n                                                                                                                       // 7275\n                                                                                                                       // 7276\n\t// Does everything necessary to display the view centered around the given unzoned date.                              // 7277\n\t// Does every type of rendering EXCEPT rendering events.                                                              // 7278\n\t// Is asychronous and returns a promise.                                                                              // 7279\n\tdisplay: function(date) {                                                                                             // 7280\n\t\tvar _this = this;                                                                                                    // 7281\n\t\tvar scrollState = null;                                                                                              // 7282\n                                                                                                                       // 7283\n\t\tif (this.displaying) {                                                                                               // 7284\n\t\t\tscrollState = this.queryScroll();                                                                                   // 7285\n\t\t}                                                                                                                    // 7286\n                                                                                                                       // 7287\n\t\tthis.calendar.freezeContentHeight();                                                                                 // 7288\n                                                                                                                       // 7289\n\t\treturn this.clear().then(function() { // clear the content first (async)                                             // 7290\n\t\t\treturn (                                                                                                            // 7291\n\t\t\t\t_this.displaying =                                                                                                 // 7292\n\t\t\t\t\t$.when(_this.displayView(date)) // displayView might return a promise                                             // 7293\n\t\t\t\t\t\t.then(function() {                                                                                               // 7294\n\t\t\t\t\t\t\t_this.forceScroll(_this.computeInitialScroll(scrollState));                                                     // 7295\n\t\t\t\t\t\t\t_this.calendar.unfreezeContentHeight();                                                                         // 7296\n\t\t\t\t\t\t\t_this.triggerRender();                                                                                          // 7297\n\t\t\t\t\t\t})                                                                                                               // 7298\n\t\t\t);                                                                                                                  // 7299\n\t\t});                                                                                                                  // 7300\n\t},                                                                                                                    // 7301\n                                                                                                                       // 7302\n                                                                                                                       // 7303\n\t// Does everything necessary to clear the content of the view.                                                        // 7304\n\t// Clears dates and events. Does not clear the skeleton.                                                              // 7305\n\t// Is asychronous and returns a promise.                                                                              // 7306\n\tclear: function() {                                                                                                   // 7307\n\t\tvar _this = this;                                                                                                    // 7308\n\t\tvar displaying = this.displaying;                                                                                    // 7309\n                                                                                                                       // 7310\n\t\tif (displaying) { // previously displayed, or in the process of being displayed?                                     // 7311\n\t\t\treturn displaying.then(function() { // wait for the display to finish                                               // 7312\n\t\t\t\t_this.displaying = null;                                                                                           // 7313\n\t\t\t\t_this.clearEvents();                                                                                               // 7314\n\t\t\t\treturn _this.clearView(); // might return a promise. chain it                                                      // 7315\n\t\t\t});                                                                                                                 // 7316\n\t\t}                                                                                                                    // 7317\n\t\telse {                                                                                                               // 7318\n\t\t\treturn $.when(); // an immediately-resolved promise                                                                 // 7319\n\t\t}                                                                                                                    // 7320\n\t},                                                                                                                    // 7321\n                                                                                                                       // 7322\n                                                                                                                       // 7323\n\t// If the view has already been displayed, tears it down and displays it again.                                       // 7324\n\t// Will re-render the events if necessary, which display/clear DO NOT do.                                             // 7325\n\t// TODO: make behavior more consistent.                                                                               // 7326\n\tredisplay: function() {                                                                                               // 7327\n\t\tif (this.isSkeletonRendered) {                                                                                       // 7328\n\t\t\tvar wasEventsRendered = this.isEventsRendered;                                                                      // 7329\n\t\t\tthis.clearEvents(); // won't trigger handlers if events never rendered                                              // 7330\n\t\t\tthis.clearView();                                                                                                   // 7331\n\t\t\tthis.displayView();                                                                                                 // 7332\n\t\t\tif (wasEventsRendered) { // only render and trigger handlers if events previously rendered                          // 7333\n\t\t\t\tthis.displayEvents();                                                                                              // 7334\n\t\t\t}                                                                                                                   // 7335\n\t\t}                                                                                                                    // 7336\n\t},                                                                                                                    // 7337\n                                                                                                                       // 7338\n                                                                                                                       // 7339\n\t// Displays the view's non-event content, such as date-related content or anything required by events.                // 7340\n\t// Renders the view's non-content skeleton if necessary.                                                              // 7341\n\t// Can be asynchronous and return a promise.                                                                          // 7342\n\tdisplayView: function(date) {                                                                                         // 7343\n\t\tif (!this.isSkeletonRendered) {                                                                                      // 7344\n\t\t\tthis.renderSkeleton();                                                                                              // 7345\n\t\t\tthis.isSkeletonRendered = true;                                                                                     // 7346\n\t\t}                                                                                                                    // 7347\n\t\tif (date) {                                                                                                          // 7348\n\t\t\tthis.setDate(date);                                                                                                 // 7349\n\t\t}                                                                                                                    // 7350\n\t\tif (this.render) {                                                                                                   // 7351\n\t\t\tthis.render(); // TODO: deprecate                                                                                   // 7352\n\t\t}                                                                                                                    // 7353\n\t\tthis.renderDates();                                                                                                  // 7354\n\t\tthis.updateSize();                                                                                                   // 7355\n\t\tthis.renderBusinessHours(); // might need coordinates, so should go after updateSize()                               // 7356\n\t},                                                                                                                    // 7357\n                                                                                                                       // 7358\n                                                                                                                       // 7359\n\t// Unrenders the view content that was rendered in displayView.                                                       // 7360\n\t// Can be asynchronous and return a promise.                                                                          // 7361\n\tclearView: function() {                                                                                               // 7362\n\t\tthis.unselect();                                                                                                     // 7363\n\t\tthis.triggerUnrender();                                                                                              // 7364\n\t\tthis.unrenderBusinessHours();                                                                                        // 7365\n\t\tthis.unrenderDates();                                                                                                // 7366\n\t\tif (this.destroy) {                                                                                                  // 7367\n\t\t\tthis.destroy(); // TODO: deprecate                                                                                  // 7368\n\t\t}                                                                                                                    // 7369\n\t},                                                                                                                    // 7370\n                                                                                                                       // 7371\n                                                                                                                       // 7372\n\t// Renders the basic structure of the view before any content is rendered                                             // 7373\n\trenderSkeleton: function() {                                                                                          // 7374\n\t\t// subclasses should implement                                                                                       // 7375\n\t},                                                                                                                    // 7376\n                                                                                                                       // 7377\n                                                                                                                       // 7378\n\t// Unrenders the basic structure of the view                                                                          // 7379\n\tunrenderSkeleton: function() {                                                                                        // 7380\n\t\t// subclasses should implement                                                                                       // 7381\n\t},                                                                                                                    // 7382\n                                                                                                                       // 7383\n                                                                                                                       // 7384\n\t// Renders the view's date-related content.                                                                           // 7385\n\t// Assumes setRange has already been called and the skeleton has already been rendered.                               // 7386\n\trenderDates: function() {                                                                                             // 7387\n\t\t// subclasses should implement                                                                                       // 7388\n\t},                                                                                                                    // 7389\n                                                                                                                       // 7390\n                                                                                                                       // 7391\n\t// Unrenders the view's date-related content                                                                          // 7392\n\tunrenderDates: function() {                                                                                           // 7393\n\t\t// subclasses should override                                                                                        // 7394\n\t},                                                                                                                    // 7395\n                                                                                                                       // 7396\n                                                                                                                       // 7397\n\t// Renders business-hours onto the view. Assumes updateSize has already been called.                                  // 7398\n\trenderBusinessHours: function() {                                                                                     // 7399\n\t\t// subclasses should implement                                                                                       // 7400\n\t},                                                                                                                    // 7401\n                                                                                                                       // 7402\n                                                                                                                       // 7403\n\t// Unrenders previously-rendered business-hours                                                                       // 7404\n\tunrenderBusinessHours: function() {                                                                                   // 7405\n\t\t// subclasses should implement                                                                                       // 7406\n\t},                                                                                                                    // 7407\n                                                                                                                       // 7408\n                                                                                                                       // 7409\n\t// Signals that the view's content has been rendered                                                                  // 7410\n\ttriggerRender: function() {                                                                                           // 7411\n\t\tthis.trigger('viewRender', this, this, this.el);                                                                     // 7412\n\t},                                                                                                                    // 7413\n                                                                                                                       // 7414\n                                                                                                                       // 7415\n\t// Signals that the view's content is about to be unrendered                                                          // 7416\n\ttriggerUnrender: function() {                                                                                         // 7417\n\t\tthis.trigger('viewDestroy', this, this, this.el);                                                                    // 7418\n\t},                                                                                                                    // 7419\n                                                                                                                       // 7420\n                                                                                                                       // 7421\n\t// Binds DOM handlers to elements that reside outside the view container, such as the document                        // 7422\n\tbindGlobalHandlers: function() {                                                                                      // 7423\n\t\t$(document).on('mousedown', this.documentMousedownProxy);                                                            // 7424\n\t},                                                                                                                    // 7425\n                                                                                                                       // 7426\n                                                                                                                       // 7427\n\t// Unbinds DOM handlers from elements that reside outside the view container                                          // 7428\n\tunbindGlobalHandlers: function() {                                                                                    // 7429\n\t\t$(document).off('mousedown', this.documentMousedownProxy);                                                           // 7430\n\t},                                                                                                                    // 7431\n                                                                                                                       // 7432\n                                                                                                                       // 7433\n\t// Initializes internal variables related to theming                                                                  // 7434\n\tinitThemingProps: function() {                                                                                        // 7435\n\t\tvar tm = this.opt('theme') ? 'ui' : 'fc';                                                                            // 7436\n                                                                                                                       // 7437\n\t\tthis.widgetHeaderClass = tm + '-widget-header';                                                                      // 7438\n\t\tthis.widgetContentClass = tm + '-widget-content';                                                                    // 7439\n\t\tthis.highlightStateClass = tm + '-state-highlight';                                                                  // 7440\n\t},                                                                                                                    // 7441\n                                                                                                                       // 7442\n                                                                                                                       // 7443\n\t/* Dimensions                                                                                                         // 7444\n\t------------------------------------------------------------------------------------------------------------------*/  // 7445\n                                                                                                                       // 7446\n                                                                                                                       // 7447\n\t// Refreshes anything dependant upon sizing of the container element of the grid                                      // 7448\n\tupdateSize: function(isResize) {                                                                                      // 7449\n\t\tvar scrollState;                                                                                                     // 7450\n                                                                                                                       // 7451\n\t\tif (isResize) {                                                                                                      // 7452\n\t\t\tscrollState = this.queryScroll();                                                                                   // 7453\n\t\t}                                                                                                                    // 7454\n                                                                                                                       // 7455\n\t\tthis.updateHeight(isResize);                                                                                         // 7456\n\t\tthis.updateWidth(isResize);                                                                                          // 7457\n                                                                                                                       // 7458\n\t\tif (isResize) {                                                                                                      // 7459\n\t\t\tthis.setScroll(scrollState);                                                                                        // 7460\n\t\t}                                                                                                                    // 7461\n\t},                                                                                                                    // 7462\n                                                                                                                       // 7463\n                                                                                                                       // 7464\n\t// Refreshes the horizontal dimensions of the calendar                                                                // 7465\n\tupdateWidth: function(isResize) {                                                                                     // 7466\n\t\t// subclasses should implement                                                                                       // 7467\n\t},                                                                                                                    // 7468\n                                                                                                                       // 7469\n                                                                                                                       // 7470\n\t// Refreshes the vertical dimensions of the calendar                                                                  // 7471\n\tupdateHeight: function(isResize) {                                                                                    // 7472\n\t\tvar calendar = this.calendar; // we poll the calendar for height information                                         // 7473\n                                                                                                                       // 7474\n\t\tthis.setHeight(                                                                                                      // 7475\n\t\t\tcalendar.getSuggestedViewHeight(),                                                                                  // 7476\n\t\t\tcalendar.isHeightAuto()                                                                                             // 7477\n\t\t);                                                                                                                   // 7478\n\t},                                                                                                                    // 7479\n                                                                                                                       // 7480\n                                                                                                                       // 7481\n\t// Updates the vertical dimensions of the calendar to the specified height.                                           // 7482\n\t// if `isAuto` is set to true, height becomes merely a suggestion and the view should use its \"natural\" height.       // 7483\n\tsetHeight: function(height, isAuto) {                                                                                 // 7484\n\t\t// subclasses should implement                                                                                       // 7485\n\t},                                                                                                                    // 7486\n                                                                                                                       // 7487\n                                                                                                                       // 7488\n\t/* Scroller                                                                                                           // 7489\n\t------------------------------------------------------------------------------------------------------------------*/  // 7490\n                                                                                                                       // 7491\n                                                                                                                       // 7492\n\t// Given the total height of the view, return the number of pixels that should be used for the scroller.              // 7493\n\t// Utility for subclasses.                                                                                            // 7494\n\tcomputeScrollerHeight: function(totalHeight) {                                                                        // 7495\n\t\tvar scrollerEl = this.scrollerEl;                                                                                    // 7496\n\t\tvar both;                                                                                                            // 7497\n\t\tvar otherHeight; // cumulative height of everything that is not the scrollerEl in the view (header+borders)          // 7498\n                                                                                                                       // 7499\n\t\tboth = this.el.add(scrollerEl);                                                                                      // 7500\n                                                                                                                       // 7501\n\t\t// fuckin IE8/9/10/11 sometimes returns 0 for dimensions. this weird hack was the only thing that worked             // 7502\n\t\tboth.css({                                                                                                           // 7503\n\t\t\tposition: 'relative', // cause a reflow, which will force fresh dimension recalculation                             // 7504\n\t\t\tleft: -1 // ensure reflow in case the el was already relative. negative is less likely to cause new scroll          // 7505\n\t\t});                                                                                                                  // 7506\n\t\totherHeight = this.el.outerHeight() - scrollerEl.height(); // grab the dimensions                                    // 7507\n\t\tboth.css({ position: '', left: '' }); // undo hack                                                                   // 7508\n                                                                                                                       // 7509\n\t\treturn totalHeight - otherHeight;                                                                                    // 7510\n\t},                                                                                                                    // 7511\n                                                                                                                       // 7512\n                                                                                                                       // 7513\n\t// Computes the initial pre-configured scroll state prior to allowing the user to change it.                          // 7514\n\t// Given the scroll state from the previous rendering. If first time rendering, given null.                           // 7515\n\tcomputeInitialScroll: function(previousScrollState) {                                                                 // 7516\n\t\treturn 0;                                                                                                            // 7517\n\t},                                                                                                                    // 7518\n                                                                                                                       // 7519\n                                                                                                                       // 7520\n\t// Retrieves the view's current natural scroll state. Can return an arbitrary format.                                 // 7521\n\tqueryScroll: function() {                                                                                             // 7522\n\t\tif (this.scrollerEl) {                                                                                               // 7523\n\t\t\treturn this.scrollerEl.scrollTop(); // operates on scrollerEl by default                                            // 7524\n\t\t}                                                                                                                    // 7525\n\t},                                                                                                                    // 7526\n                                                                                                                       // 7527\n                                                                                                                       // 7528\n\t// Sets the view's scroll state. Will accept the same format computeInitialScroll and queryScroll produce.            // 7529\n\tsetScroll: function(scrollState) {                                                                                    // 7530\n\t\tif (this.scrollerEl) {                                                                                               // 7531\n\t\t\treturn this.scrollerEl.scrollTop(scrollState); // operates on scrollerEl by default                                 // 7532\n\t\t}                                                                                                                    // 7533\n\t},                                                                                                                    // 7534\n                                                                                                                       // 7535\n                                                                                                                       // 7536\n\t// Sets the scroll state, making sure to overcome any predefined scroll value the browser has in mind                 // 7537\n\tforceScroll: function(scrollState) {                                                                                  // 7538\n\t\tvar _this = this;                                                                                                    // 7539\n                                                                                                                       // 7540\n\t\tthis.setScroll(scrollState);                                                                                         // 7541\n\t\tsetTimeout(function() {                                                                                              // 7542\n\t\t\t_this.setScroll(scrollState);                                                                                       // 7543\n\t\t}, 0);                                                                                                               // 7544\n\t},                                                                                                                    // 7545\n                                                                                                                       // 7546\n                                                                                                                       // 7547\n\t/* Event Elements / Segments                                                                                          // 7548\n\t------------------------------------------------------------------------------------------------------------------*/  // 7549\n                                                                                                                       // 7550\n                                                                                                                       // 7551\n\t// Does everything necessary to display the given events onto the current view                                        // 7552\n\tdisplayEvents: function(events) {                                                                                     // 7553\n\t\tvar scrollState = this.queryScroll();                                                                                // 7554\n                                                                                                                       // 7555\n\t\tthis.clearEvents();                                                                                                  // 7556\n\t\tthis.renderEvents(events);                                                                                           // 7557\n\t\tthis.isEventsRendered = true;                                                                                        // 7558\n\t\tthis.setScroll(scrollState);                                                                                         // 7559\n\t\tthis.triggerEventRender();                                                                                           // 7560\n\t},                                                                                                                    // 7561\n                                                                                                                       // 7562\n                                                                                                                       // 7563\n\t// Does everything necessary to clear the view's currently-rendered events                                            // 7564\n\tclearEvents: function() {                                                                                             // 7565\n\t\tif (this.isEventsRendered) {                                                                                         // 7566\n\t\t\tthis.triggerEventUnrender();                                                                                        // 7567\n\t\t\tif (this.destroyEvents) {                                                                                           // 7568\n\t\t\t\tthis.destroyEvents(); // TODO: deprecate                                                                           // 7569\n\t\t\t}                                                                                                                   // 7570\n\t\t\tthis.unrenderEvents();                                                                                              // 7571\n\t\t\tthis.isEventsRendered = false;                                                                                      // 7572\n\t\t}                                                                                                                    // 7573\n\t},                                                                                                                    // 7574\n                                                                                                                       // 7575\n                                                                                                                       // 7576\n\t// Renders the events onto the view.                                                                                  // 7577\n\trenderEvents: function(events) {                                                                                      // 7578\n\t\t// subclasses should implement                                                                                       // 7579\n\t},                                                                                                                    // 7580\n                                                                                                                       // 7581\n                                                                                                                       // 7582\n\t// Removes event elements from the view.                                                                              // 7583\n\tunrenderEvents: function() {                                                                                          // 7584\n\t\t// subclasses should implement                                                                                       // 7585\n\t},                                                                                                                    // 7586\n                                                                                                                       // 7587\n                                                                                                                       // 7588\n\t// Signals that all events have been rendered                                                                         // 7589\n\ttriggerEventRender: function() {                                                                                      // 7590\n\t\tthis.renderedEventSegEach(function(seg) {                                                                            // 7591\n\t\t\tthis.trigger('eventAfterRender', seg.event, seg.event, seg.el);                                                     // 7592\n\t\t});                                                                                                                  // 7593\n\t\tthis.trigger('eventAfterAllRender');                                                                                 // 7594\n\t},                                                                                                                    // 7595\n                                                                                                                       // 7596\n                                                                                                                       // 7597\n\t// Signals that all event elements are about to be removed                                                            // 7598\n\ttriggerEventUnrender: function() {                                                                                    // 7599\n\t\tthis.renderedEventSegEach(function(seg) {                                                                            // 7600\n\t\t\tthis.trigger('eventDestroy', seg.event, seg.event, seg.el);                                                         // 7601\n\t\t});                                                                                                                  // 7602\n\t},                                                                                                                    // 7603\n                                                                                                                       // 7604\n                                                                                                                       // 7605\n\t// Given an event and the default element used for rendering, returns the element that should actually be used.       // 7606\n\t// Basically runs events and elements through the eventRender hook.                                                   // 7607\n\tresolveEventEl: function(event, el) {                                                                                 // 7608\n\t\tvar custom = this.trigger('eventRender', event, event, el);                                                          // 7609\n                                                                                                                       // 7610\n\t\tif (custom === false) { // means don't render at all                                                                 // 7611\n\t\t\tel = null;                                                                                                          // 7612\n\t\t}                                                                                                                    // 7613\n\t\telse if (custom && custom !== true) {                                                                                // 7614\n\t\t\tel = $(custom);                                                                                                     // 7615\n\t\t}                                                                                                                    // 7616\n                                                                                                                       // 7617\n\t\treturn el;                                                                                                           // 7618\n\t},                                                                                                                    // 7619\n                                                                                                                       // 7620\n                                                                                                                       // 7621\n\t// Hides all rendered event segments linked to the given event                                                        // 7622\n\tshowEvent: function(event) {                                                                                          // 7623\n\t\tthis.renderedEventSegEach(function(seg) {                                                                            // 7624\n\t\t\tseg.el.css('visibility', '');                                                                                       // 7625\n\t\t}, event);                                                                                                           // 7626\n\t},                                                                                                                    // 7627\n                                                                                                                       // 7628\n                                                                                                                       // 7629\n\t// Shows all rendered event segments linked to the given event                                                        // 7630\n\thideEvent: function(event) {                                                                                          // 7631\n\t\tthis.renderedEventSegEach(function(seg) {                                                                            // 7632\n\t\t\tseg.el.css('visibility', 'hidden');                                                                                 // 7633\n\t\t}, event);                                                                                                           // 7634\n\t},                                                                                                                    // 7635\n                                                                                                                       // 7636\n                                                                                                                       // 7637\n\t// Iterates through event segments that have been rendered (have an el). Goes through all by default.                 // 7638\n\t// If the optional `event` argument is specified, only iterates through segments linked to that event.                // 7639\n\t// The `this` value of the callback function will be the view.                                                        // 7640\n\trenderedEventSegEach: function(func, event) {                                                                         // 7641\n\t\tvar segs = this.getEventSegs();                                                                                      // 7642\n\t\tvar i;                                                                                                               // 7643\n                                                                                                                       // 7644\n\t\tfor (i = 0; i < segs.length; i++) {                                                                                  // 7645\n\t\t\tif (!event || segs[i].event._id === event._id) {                                                                    // 7646\n\t\t\t\tif (segs[i].el) {                                                                                                  // 7647\n\t\t\t\t\tfunc.call(this, segs[i]);                                                                                         // 7648\n\t\t\t\t}                                                                                                                  // 7649\n\t\t\t}                                                                                                                   // 7650\n\t\t}                                                                                                                    // 7651\n\t},                                                                                                                    // 7652\n                                                                                                                       // 7653\n                                                                                                                       // 7654\n\t// Retrieves all the rendered segment objects for the view                                                            // 7655\n\tgetEventSegs: function() {                                                                                            // 7656\n\t\t// subclasses must implement                                                                                         // 7657\n\t\treturn [];                                                                                                           // 7658\n\t},                                                                                                                    // 7659\n                                                                                                                       // 7660\n                                                                                                                       // 7661\n\t/* Event Drag-n-Drop                                                                                                  // 7662\n\t------------------------------------------------------------------------------------------------------------------*/  // 7663\n                                                                                                                       // 7664\n                                                                                                                       // 7665\n\t// Computes if the given event is allowed to be dragged by the user                                                   // 7666\n\tisEventDraggable: function(event) {                                                                                   // 7667\n\t\tvar source = event.source || {};                                                                                     // 7668\n                                                                                                                       // 7669\n\t\treturn firstDefined(                                                                                                 // 7670\n\t\t\tevent.startEditable,                                                                                                // 7671\n\t\t\tsource.startEditable,                                                                                               // 7672\n\t\t\tthis.opt('eventStartEditable'),                                                                                     // 7673\n\t\t\tevent.editable,                                                                                                     // 7674\n\t\t\tsource.editable,                                                                                                    // 7675\n\t\t\tthis.opt('editable')                                                                                                // 7676\n\t\t);                                                                                                                   // 7677\n\t},                                                                                                                    // 7678\n                                                                                                                       // 7679\n                                                                                                                       // 7680\n\t// Must be called when an event in the view is dropped onto new location.                                             // 7681\n\t// `dropLocation` is an object that contains the new zoned start/end/allDay values for the event.                     // 7682\n\treportEventDrop: function(event, dropLocation, largeUnit, el, ev) {                                                   // 7683\n\t\tvar calendar = this.calendar;                                                                                        // 7684\n\t\tvar mutateResult = calendar.mutateEvent(event, dropLocation, largeUnit);                                             // 7685\n\t\tvar undoFunc = function() {                                                                                          // 7686\n\t\t\tmutateResult.undo();                                                                                                // 7687\n\t\t\tcalendar.reportEventChange();                                                                                       // 7688\n\t\t};                                                                                                                   // 7689\n                                                                                                                       // 7690\n\t\tthis.triggerEventDrop(event, mutateResult.dateDelta, undoFunc, el, ev);                                              // 7691\n\t\tcalendar.reportEventChange(); // will rerender events                                                                // 7692\n\t},                                                                                                                    // 7693\n                                                                                                                       // 7694\n                                                                                                                       // 7695\n\t// Triggers event-drop handlers that have subscribed via the API                                                      // 7696\n\ttriggerEventDrop: function(event, dateDelta, undoFunc, el, ev) {                                                      // 7697\n\t\tthis.trigger('eventDrop', el[0], event, dateDelta, undoFunc, ev, {}); // {} = jqui dummy                             // 7698\n\t},                                                                                                                    // 7699\n                                                                                                                       // 7700\n                                                                                                                       // 7701\n\t/* External Element Drag-n-Drop                                                                                       // 7702\n\t------------------------------------------------------------------------------------------------------------------*/  // 7703\n                                                                                                                       // 7704\n                                                                                                                       // 7705\n\t// Must be called when an external element, via jQuery UI, has been dropped onto the calendar.                        // 7706\n\t// `meta` is the parsed data that has been embedded into the dragging event.                                          // 7707\n\t// `dropLocation` is an object that contains the new zoned start/end/allDay values for the event.                     // 7708\n\treportExternalDrop: function(meta, dropLocation, el, ev, ui) {                                                        // 7709\n\t\tvar eventProps = meta.eventProps;                                                                                    // 7710\n\t\tvar eventInput;                                                                                                      // 7711\n\t\tvar event;                                                                                                           // 7712\n                                                                                                                       // 7713\n\t\t// Try to build an event object and render it. TODO: decouple the two                                                // 7714\n\t\tif (eventProps) {                                                                                                    // 7715\n\t\t\teventInput = $.extend({}, eventProps, dropLocation);                                                                // 7716\n\t\t\tevent = this.calendar.renderEvent(eventInput, meta.stick)[0]; // renderEvent returns an array                       // 7717\n\t\t}                                                                                                                    // 7718\n                                                                                                                       // 7719\n\t\tthis.triggerExternalDrop(event, dropLocation, el, ev, ui);                                                           // 7720\n\t},                                                                                                                    // 7721\n                                                                                                                       // 7722\n                                                                                                                       // 7723\n\t// Triggers external-drop handlers that have subscribed via the API                                                   // 7724\n\ttriggerExternalDrop: function(event, dropLocation, el, ev, ui) {                                                      // 7725\n                                                                                                                       // 7726\n\t\t// trigger 'drop' regardless of whether element represents an event                                                  // 7727\n\t\tthis.trigger('drop', el[0], dropLocation.start, ev, ui);                                                             // 7728\n                                                                                                                       // 7729\n\t\tif (event) {                                                                                                         // 7730\n\t\t\tthis.trigger('eventReceive', null, event); // signal an external event landed                                       // 7731\n\t\t}                                                                                                                    // 7732\n\t},                                                                                                                    // 7733\n                                                                                                                       // 7734\n                                                                                                                       // 7735\n\t/* Drag-n-Drop Rendering (for both events and external elements)                                                      // 7736\n\t------------------------------------------------------------------------------------------------------------------*/  // 7737\n                                                                                                                       // 7738\n                                                                                                                       // 7739\n\t// Renders a visual indication of a event or external-element drag over the given drop zone.                          // 7740\n\t// If an external-element, seg will be `null`                                                                         // 7741\n\trenderDrag: function(dropLocation, seg) {                                                                             // 7742\n\t\t// subclasses must implement                                                                                         // 7743\n\t},                                                                                                                    // 7744\n                                                                                                                       // 7745\n                                                                                                                       // 7746\n\t// Unrenders a visual indication of an event or external-element being dragged.                                       // 7747\n\tunrenderDrag: function() {                                                                                            // 7748\n\t\t// subclasses must implement                                                                                         // 7749\n\t},                                                                                                                    // 7750\n                                                                                                                       // 7751\n                                                                                                                       // 7752\n\t/* Event Resizing                                                                                                     // 7753\n\t------------------------------------------------------------------------------------------------------------------*/  // 7754\n                                                                                                                       // 7755\n                                                                                                                       // 7756\n\t// Computes if the given event is allowed to be resized from its starting edge                                        // 7757\n\tisEventResizableFromStart: function(event) {                                                                          // 7758\n\t\treturn this.opt('eventResizableFromStart') && this.isEventResizable(event);                                          // 7759\n\t},                                                                                                                    // 7760\n                                                                                                                       // 7761\n                                                                                                                       // 7762\n\t// Computes if the given event is allowed to be resized from its ending edge                                          // 7763\n\tisEventResizableFromEnd: function(event) {                                                                            // 7764\n\t\treturn this.isEventResizable(event);                                                                                 // 7765\n\t},                                                                                                                    // 7766\n                                                                                                                       // 7767\n                                                                                                                       // 7768\n\t// Computes if the given event is allowed to be resized by the user at all                                            // 7769\n\tisEventResizable: function(event) {                                                                                   // 7770\n\t\tvar source = event.source || {};                                                                                     // 7771\n                                                                                                                       // 7772\n\t\treturn firstDefined(                                                                                                 // 7773\n\t\t\tevent.durationEditable,                                                                                             // 7774\n\t\t\tsource.durationEditable,                                                                                            // 7775\n\t\t\tthis.opt('eventDurationEditable'),                                                                                  // 7776\n\t\t\tevent.editable,                                                                                                     // 7777\n\t\t\tsource.editable,                                                                                                    // 7778\n\t\t\tthis.opt('editable')                                                                                                // 7779\n\t\t);                                                                                                                   // 7780\n\t},                                                                                                                    // 7781\n                                                                                                                       // 7782\n                                                                                                                       // 7783\n\t// Must be called when an event in the view has been resized to a new length                                          // 7784\n\treportEventResize: function(event, resizeLocation, largeUnit, el, ev) {                                               // 7785\n\t\tvar calendar = this.calendar;                                                                                        // 7786\n\t\tvar mutateResult = calendar.mutateEvent(event, resizeLocation, largeUnit);                                           // 7787\n\t\tvar undoFunc = function() {                                                                                          // 7788\n\t\t\tmutateResult.undo();                                                                                                // 7789\n\t\t\tcalendar.reportEventChange();                                                                                       // 7790\n\t\t};                                                                                                                   // 7791\n                                                                                                                       // 7792\n\t\tthis.triggerEventResize(event, mutateResult.durationDelta, undoFunc, el, ev);                                        // 7793\n\t\tcalendar.reportEventChange(); // will rerender events                                                                // 7794\n\t},                                                                                                                    // 7795\n                                                                                                                       // 7796\n                                                                                                                       // 7797\n\t// Triggers event-resize handlers that have subscribed via the API                                                    // 7798\n\ttriggerEventResize: function(event, durationDelta, undoFunc, el, ev) {                                                // 7799\n\t\tthis.trigger('eventResize', el[0], event, durationDelta, undoFunc, ev, {}); // {} = jqui dummy                       // 7800\n\t},                                                                                                                    // 7801\n                                                                                                                       // 7802\n                                                                                                                       // 7803\n\t/* Selection                                                                                                          // 7804\n\t------------------------------------------------------------------------------------------------------------------*/  // 7805\n                                                                                                                       // 7806\n                                                                                                                       // 7807\n\t// Selects a date span on the view. `start` and `end` are both Moments.                                               // 7808\n\t// `ev` is the native mouse event that begin the interaction.                                                         // 7809\n\tselect: function(span, ev) {                                                                                          // 7810\n\t\tthis.unselect(ev);                                                                                                   // 7811\n\t\tthis.renderSelection(span);                                                                                          // 7812\n\t\tthis.reportSelection(span, ev);                                                                                      // 7813\n\t},                                                                                                                    // 7814\n                                                                                                                       // 7815\n                                                                                                                       // 7816\n\t// Renders a visual indication of the selection                                                                       // 7817\n\trenderSelection: function(span) {                                                                                     // 7818\n\t\t// subclasses should implement                                                                                       // 7819\n\t},                                                                                                                    // 7820\n                                                                                                                       // 7821\n                                                                                                                       // 7822\n\t// Called when a new selection is made. Updates internal state and triggers handlers.                                 // 7823\n\treportSelection: function(span, ev) {                                                                                 // 7824\n\t\tthis.isSelected = true;                                                                                              // 7825\n\t\tthis.triggerSelect(span, ev);                                                                                        // 7826\n\t},                                                                                                                    // 7827\n                                                                                                                       // 7828\n                                                                                                                       // 7829\n\t// Triggers handlers to 'select'                                                                                      // 7830\n\ttriggerSelect: function(span, ev) {                                                                                   // 7831\n\t\tthis.trigger(                                                                                                        // 7832\n\t\t\t'select',                                                                                                           // 7833\n\t\t\tnull,                                                                                                               // 7834\n\t\t\tthis.calendar.applyTimezone(span.start), // convert to calendar's tz for external API                               // 7835\n\t\t\tthis.calendar.applyTimezone(span.end), // \"                                                                         // 7836\n\t\t\tev                                                                                                                  // 7837\n\t\t);                                                                                                                   // 7838\n\t},                                                                                                                    // 7839\n                                                                                                                       // 7840\n                                                                                                                       // 7841\n\t// Undoes a selection. updates in the internal state and triggers handlers.                                           // 7842\n\t// `ev` is the native mouse event that began the interaction.                                                         // 7843\n\tunselect: function(ev) {                                                                                              // 7844\n\t\tif (this.isSelected) {                                                                                               // 7845\n\t\t\tthis.isSelected = false;                                                                                            // 7846\n\t\t\tif (this.destroySelection) {                                                                                        // 7847\n\t\t\t\tthis.destroySelection(); // TODO: deprecate                                                                        // 7848\n\t\t\t}                                                                                                                   // 7849\n\t\t\tthis.unrenderSelection();                                                                                           // 7850\n\t\t\tthis.trigger('unselect', null, ev);                                                                                 // 7851\n\t\t}                                                                                                                    // 7852\n\t},                                                                                                                    // 7853\n                                                                                                                       // 7854\n                                                                                                                       // 7855\n\t// Unrenders a visual indication of selection                                                                         // 7856\n\tunrenderSelection: function() {                                                                                       // 7857\n\t\t// subclasses should implement                                                                                       // 7858\n\t},                                                                                                                    // 7859\n                                                                                                                       // 7860\n                                                                                                                       // 7861\n\t// Handler for unselecting when the user clicks something and the 'unselectAuto' setting is on                        // 7862\n\tdocumentMousedown: function(ev) {                                                                                     // 7863\n\t\tvar ignore;                                                                                                          // 7864\n                                                                                                                       // 7865\n\t\t// is there a selection, and has the user made a proper left click?                                                  // 7866\n\t\tif (this.isSelected && this.opt('unselectAuto') && isPrimaryMouseButton(ev)) {                                       // 7867\n                                                                                                                       // 7868\n\t\t\t// only unselect if the clicked element is not identical to or inside of an 'unselectCancel' element                // 7869\n\t\t\tignore = this.opt('unselectCancel');                                                                                // 7870\n\t\t\tif (!ignore || !$(ev.target).closest(ignore).length) {                                                              // 7871\n\t\t\t\tthis.unselect(ev);                                                                                                 // 7872\n\t\t\t}                                                                                                                   // 7873\n\t\t}                                                                                                                    // 7874\n\t},                                                                                                                    // 7875\n                                                                                                                       // 7876\n                                                                                                                       // 7877\n\t/* Day Click                                                                                                          // 7878\n\t------------------------------------------------------------------------------------------------------------------*/  // 7879\n                                                                                                                       // 7880\n                                                                                                                       // 7881\n\t// Triggers handlers to 'dayClick'                                                                                    // 7882\n\t// Span has start/end of the clicked area. Only the start is useful.                                                  // 7883\n\ttriggerDayClick: function(span, dayEl, ev) {                                                                          // 7884\n\t\tthis.trigger(                                                                                                        // 7885\n\t\t\t'dayClick',                                                                                                         // 7886\n\t\t\tdayEl,                                                                                                              // 7887\n\t\t\tthis.calendar.applyTimezone(span.start), // convert to calendar's timezone for external API                         // 7888\n\t\t\tev                                                                                                                  // 7889\n\t\t);                                                                                                                   // 7890\n\t},                                                                                                                    // 7891\n                                                                                                                       // 7892\n                                                                                                                       // 7893\n\t/* Date Utils                                                                                                         // 7894\n\t------------------------------------------------------------------------------------------------------------------*/  // 7895\n                                                                                                                       // 7896\n                                                                                                                       // 7897\n\t// Initializes internal variables related to calculating hidden days-of-week                                          // 7898\n\tinitHiddenDays: function() {                                                                                          // 7899\n\t\tvar hiddenDays = this.opt('hiddenDays') || []; // array of day-of-week indices that are hidden                       // 7900\n\t\tvar isHiddenDayHash = []; // is the day-of-week hidden? (hash with day-of-week-index -> bool)                        // 7901\n\t\tvar dayCnt = 0;                                                                                                      // 7902\n\t\tvar i;                                                                                                               // 7903\n                                                                                                                       // 7904\n\t\tif (this.opt('weekends') === false) {                                                                                // 7905\n\t\t\thiddenDays.push(0, 6); // 0=sunday, 6=saturday                                                                      // 7906\n\t\t}                                                                                                                    // 7907\n                                                                                                                       // 7908\n\t\tfor (i = 0; i < 7; i++) {                                                                                            // 7909\n\t\t\tif (                                                                                                                // 7910\n\t\t\t\t!(isHiddenDayHash[i] = $.inArray(i, hiddenDays) !== -1)                                                            // 7911\n\t\t\t) {                                                                                                                 // 7912\n\t\t\t\tdayCnt++;                                                                                                          // 7913\n\t\t\t}                                                                                                                   // 7914\n\t\t}                                                                                                                    // 7915\n                                                                                                                       // 7916\n\t\tif (!dayCnt) {                                                                                                       // 7917\n\t\t\tthrow 'invalid hiddenDays'; // all days were hidden? bad.                                                           // 7918\n\t\t}                                                                                                                    // 7919\n                                                                                                                       // 7920\n\t\tthis.isHiddenDayHash = isHiddenDayHash;                                                                              // 7921\n\t},                                                                                                                    // 7922\n                                                                                                                       // 7923\n                                                                                                                       // 7924\n\t// Is the current day hidden?                                                                                         // 7925\n\t// `day` is a day-of-week index (0-6), or a Moment                                                                    // 7926\n\tisHiddenDay: function(day) {                                                                                          // 7927\n\t\tif (moment.isMoment(day)) {                                                                                          // 7928\n\t\t\tday = day.day();                                                                                                    // 7929\n\t\t}                                                                                                                    // 7930\n\t\treturn this.isHiddenDayHash[day];                                                                                    // 7931\n\t},                                                                                                                    // 7932\n                                                                                                                       // 7933\n                                                                                                                       // 7934\n\t// Incrementing the current day until it is no longer a hidden day, returning a copy.                                 // 7935\n\t// If the initial value of `date` is not a hidden day, don't do anything.                                             // 7936\n\t// Pass `isExclusive` as `true` if you are dealing with an end date.                                                  // 7937\n\t// `inc` defaults to `1` (increment one day forward each time)                                                        // 7938\n\tskipHiddenDays: function(date, inc, isExclusive) {                                                                    // 7939\n\t\tvar out = date.clone();                                                                                              // 7940\n\t\tinc = inc || 1;                                                                                                      // 7941\n\t\twhile (                                                                                                              // 7942\n\t\t\tthis.isHiddenDayHash[(out.day() + (isExclusive ? inc : 0) + 7) % 7]                                                 // 7943\n\t\t) {                                                                                                                  // 7944\n\t\t\tout.add(inc, 'days');                                                                                               // 7945\n\t\t}                                                                                                                    // 7946\n\t\treturn out;                                                                                                          // 7947\n\t},                                                                                                                    // 7948\n                                                                                                                       // 7949\n                                                                                                                       // 7950\n\t// Returns the date range of the full days the given range visually appears to occupy.                                // 7951\n\t// Returns a new range object.                                                                                        // 7952\n\tcomputeDayRange: function(range) {                                                                                    // 7953\n\t\tvar startDay = range.start.clone().stripTime(); // the beginning of the day the range starts                         // 7954\n\t\tvar end = range.end;                                                                                                 // 7955\n\t\tvar endDay = null;                                                                                                   // 7956\n\t\tvar endTimeMS;                                                                                                       // 7957\n                                                                                                                       // 7958\n\t\tif (end) {                                                                                                           // 7959\n\t\t\tendDay = end.clone().stripTime(); // the beginning of the day the range exclusively ends                            // 7960\n\t\t\tendTimeMS = +end.time(); // # of milliseconds into `endDay`                                                         // 7961\n                                                                                                                       // 7962\n\t\t\t// If the end time is actually inclusively part of the next day and is equal to or                                  // 7963\n\t\t\t// beyond the next day threshold, adjust the end to be the exclusive end of `endDay`.                               // 7964\n\t\t\t// Otherwise, leaving it as inclusive will cause it to exclude `endDay`.                                            // 7965\n\t\t\tif (endTimeMS && endTimeMS >= this.nextDayThreshold) {                                                              // 7966\n\t\t\t\tendDay.add(1, 'days');                                                                                             // 7967\n\t\t\t}                                                                                                                   // 7968\n\t\t}                                                                                                                    // 7969\n                                                                                                                       // 7970\n\t\t// If no end was specified, or if it is within `startDay` but not past nextDayThreshold,                             // 7971\n\t\t// assign the default duration of one day.                                                                           // 7972\n\t\tif (!end || endDay <= startDay) {                                                                                    // 7973\n\t\t\tendDay = startDay.clone().add(1, 'days');                                                                           // 7974\n\t\t}                                                                                                                    // 7975\n                                                                                                                       // 7976\n\t\treturn { start: startDay, end: endDay };                                                                             // 7977\n\t},                                                                                                                    // 7978\n                                                                                                                       // 7979\n                                                                                                                       // 7980\n\t// Does the given event visually appear to occupy more than one day?                                                  // 7981\n\tisMultiDayEvent: function(event) {                                                                                    // 7982\n\t\tvar range = this.computeDayRange(event); // event is range-ish                                                       // 7983\n                                                                                                                       // 7984\n\t\treturn range.end.diff(range.start, 'days') > 1;                                                                      // 7985\n\t}                                                                                                                     // 7986\n                                                                                                                       // 7987\n});                                                                                                                    // 7988\n                                                                                                                       // 7989\n;;                                                                                                                     // 7990\n                                                                                                                       // 7991\nvar Calendar = FC.Calendar = Class.extend({                                                                            // 7992\n                                                                                                                       // 7993\n\tdirDefaults: null, // option defaults related to LTR or RTL                                                           // 7994\n\tlangDefaults: null, // option defaults related to current locale                                                      // 7995\n\toverrides: null, // option overrides given to the fullCalendar constructor                                            // 7996\n\toptions: null, // all defaults combined with overrides                                                                // 7997\n\tviewSpecCache: null, // cache of view definitions                                                                     // 7998\n\tview: null, // current View object                                                                                    // 7999\n\theader: null,                                                                                                         // 8000\n\tloadingLevel: 0, // number of simultaneous loading tasks                                                              // 8001\n                                                                                                                       // 8002\n                                                                                                                       // 8003\n\t// a lot of this class' OOP logic is scoped within this constructor function,                                         // 8004\n\t// but in the future, write individual methods on the prototype.                                                      // 8005\n\tconstructor: Calendar_constructor,                                                                                    // 8006\n                                                                                                                       // 8007\n                                                                                                                       // 8008\n\t// Subclasses can override this for initialization logic after the constructor has been called                        // 8009\n\tinitialize: function() {                                                                                              // 8010\n\t},                                                                                                                    // 8011\n                                                                                                                       // 8012\n                                                                                                                       // 8013\n\t// Initializes `this.options` and other important options-related objects                                             // 8014\n\tinitOptions: function(overrides) {                                                                                    // 8015\n\t\tvar lang, langDefaults;                                                                                              // 8016\n\t\tvar isRTL, dirDefaults;                                                                                              // 8017\n                                                                                                                       // 8018\n\t\t// converts legacy options into non-legacy ones.                                                                     // 8019\n\t\t// in the future, when this is removed, don't use `overrides` reference. make a copy.                                // 8020\n\t\toverrides = massageOverrides(overrides);                                                                             // 8021\n                                                                                                                       // 8022\n\t\tlang = overrides.lang;                                                                                               // 8023\n\t\tlangDefaults = langOptionHash[lang];                                                                                 // 8024\n\t\tif (!langDefaults) {                                                                                                 // 8025\n\t\t\tlang = Calendar.defaults.lang;                                                                                      // 8026\n\t\t\tlangDefaults = langOptionHash[lang] || {};                                                                          // 8027\n\t\t}                                                                                                                    // 8028\n                                                                                                                       // 8029\n\t\tisRTL = firstDefined(                                                                                                // 8030\n\t\t\toverrides.isRTL,                                                                                                    // 8031\n\t\t\tlangDefaults.isRTL,                                                                                                 // 8032\n\t\t\tCalendar.defaults.isRTL                                                                                             // 8033\n\t\t);                                                                                                                   // 8034\n\t\tdirDefaults = isRTL ? Calendar.rtlDefaults : {};                                                                     // 8035\n                                                                                                                       // 8036\n\t\tthis.dirDefaults = dirDefaults;                                                                                      // 8037\n\t\tthis.langDefaults = langDefaults;                                                                                    // 8038\n\t\tthis.overrides = overrides;                                                                                          // 8039\n\t\tthis.options = mergeOptions([ // merge defaults and overrides. lowest to highest precedence                          // 8040\n\t\t\tCalendar.defaults, // global defaults                                                                               // 8041\n\t\t\tdirDefaults,                                                                                                        // 8042\n\t\t\tlangDefaults,                                                                                                       // 8043\n\t\t\toverrides                                                                                                           // 8044\n\t\t]);                                                                                                                  // 8045\n\t\tpopulateInstanceComputableOptions(this.options);                                                                     // 8046\n                                                                                                                       // 8047\n\t\tthis.viewSpecCache = {}; // somewhat unrelated                                                                       // 8048\n\t},                                                                                                                    // 8049\n                                                                                                                       // 8050\n                                                                                                                       // 8051\n\t// Gets information about how to create a view. Will use a cache.                                                     // 8052\n\tgetViewSpec: function(viewType) {                                                                                     // 8053\n\t\tvar cache = this.viewSpecCache;                                                                                      // 8054\n                                                                                                                       // 8055\n\t\treturn cache[viewType] || (cache[viewType] = this.buildViewSpec(viewType));                                          // 8056\n\t},                                                                                                                    // 8057\n                                                                                                                       // 8058\n                                                                                                                       // 8059\n\t// Given a duration singular unit, like \"week\" or \"day\", finds a matching view spec.                                  // 8060\n\t// Preference is given to views that have corresponding buttons.                                                      // 8061\n\tgetUnitViewSpec: function(unit) {                                                                                     // 8062\n\t\tvar viewTypes;                                                                                                       // 8063\n\t\tvar i;                                                                                                               // 8064\n\t\tvar spec;                                                                                                            // 8065\n                                                                                                                       // 8066\n\t\tif ($.inArray(unit, intervalUnits) != -1) {                                                                          // 8067\n                                                                                                                       // 8068\n\t\t\t// put views that have buttons first. there will be duplicates, but oh well                                         // 8069\n\t\t\tviewTypes = this.header.getViewsWithButtons();                                                                      // 8070\n\t\t\t$.each(FC.views, function(viewType) { // all views                                                                  // 8071\n\t\t\t\tviewTypes.push(viewType);                                                                                          // 8072\n\t\t\t});                                                                                                                 // 8073\n                                                                                                                       // 8074\n\t\t\tfor (i = 0; i < viewTypes.length; i++) {                                                                            // 8075\n\t\t\t\tspec = this.getViewSpec(viewTypes[i]);                                                                             // 8076\n\t\t\t\tif (spec) {                                                                                                        // 8077\n\t\t\t\t\tif (spec.singleUnit == unit) {                                                                                    // 8078\n\t\t\t\t\t\treturn spec;                                                                                                     // 8079\n\t\t\t\t\t}                                                                                                                 // 8080\n\t\t\t\t}                                                                                                                  // 8081\n\t\t\t}                                                                                                                   // 8082\n\t\t}                                                                                                                    // 8083\n\t},                                                                                                                    // 8084\n                                                                                                                       // 8085\n                                                                                                                       // 8086\n\t// Builds an object with information on how to create a given view                                                    // 8087\n\tbuildViewSpec: function(requestedViewType) {                                                                          // 8088\n\t\tvar viewOverrides = this.overrides.views || {};                                                                      // 8089\n\t\tvar specChain = []; // for the view. lowest to highest priority                                                      // 8090\n\t\tvar defaultsChain = []; // for the view. lowest to highest priority                                                  // 8091\n\t\tvar overridesChain = []; // for the view. lowest to highest priority                                                 // 8092\n\t\tvar viewType = requestedViewType;                                                                                    // 8093\n\t\tvar spec; // for the view                                                                                            // 8094\n\t\tvar overrides; // for the view                                                                                       // 8095\n\t\tvar duration;                                                                                                        // 8096\n\t\tvar unit;                                                                                                            // 8097\n                                                                                                                       // 8098\n\t\t// iterate from the specific view definition to a more general one until we hit an actual View class                 // 8099\n\t\twhile (viewType) {                                                                                                   // 8100\n\t\t\tspec = fcViews[viewType];                                                                                           // 8101\n\t\t\toverrides = viewOverrides[viewType];                                                                                // 8102\n\t\t\tviewType = null; // clear. might repopulate for another iteration                                                   // 8103\n                                                                                                                       // 8104\n\t\t\tif (typeof spec === 'function') { // TODO: deprecate                                                                // 8105\n\t\t\t\tspec = { 'class': spec };                                                                                          // 8106\n\t\t\t}                                                                                                                   // 8107\n                                                                                                                       // 8108\n\t\t\tif (spec) {                                                                                                         // 8109\n\t\t\t\tspecChain.unshift(spec);                                                                                           // 8110\n\t\t\t\tdefaultsChain.unshift(spec.defaults || {});                                                                        // 8111\n\t\t\t\tduration = duration || spec.duration;                                                                              // 8112\n\t\t\t\tviewType = viewType || spec.type;                                                                                  // 8113\n\t\t\t}                                                                                                                   // 8114\n                                                                                                                       // 8115\n\t\t\tif (overrides) {                                                                                                    // 8116\n\t\t\t\toverridesChain.unshift(overrides); // view-specific option hashes have options at zero-level                       // 8117\n\t\t\t\tduration = duration || overrides.duration;                                                                         // 8118\n\t\t\t\tviewType = viewType || overrides.type;                                                                             // 8119\n\t\t\t}                                                                                                                   // 8120\n\t\t}                                                                                                                    // 8121\n                                                                                                                       // 8122\n\t\tspec = mergeProps(specChain);                                                                                        // 8123\n\t\tspec.type = requestedViewType;                                                                                       // 8124\n\t\tif (!spec['class']) {                                                                                                // 8125\n\t\t\treturn false;                                                                                                       // 8126\n\t\t}                                                                                                                    // 8127\n                                                                                                                       // 8128\n\t\tif (duration) {                                                                                                      // 8129\n\t\t\tduration = moment.duration(duration);                                                                               // 8130\n\t\t\tif (duration.valueOf()) { // valid?                                                                                 // 8131\n\t\t\t\tspec.duration = duration;                                                                                          // 8132\n\t\t\t\tunit = computeIntervalUnit(duration);                                                                              // 8133\n                                                                                                                       // 8134\n\t\t\t\t// view is a single-unit duration, like \"week\" or \"day\"                                                            // 8135\n\t\t\t\t// incorporate options for this. lowest priority                                                                   // 8136\n\t\t\t\tif (duration.as(unit) === 1) {                                                                                     // 8137\n\t\t\t\t\tspec.singleUnit = unit;                                                                                           // 8138\n\t\t\t\t\toverridesChain.unshift(viewOverrides[unit] || {});                                                                // 8139\n\t\t\t\t}                                                                                                                  // 8140\n\t\t\t}                                                                                                                   // 8141\n\t\t}                                                                                                                    // 8142\n                                                                                                                       // 8143\n\t\tspec.defaults = mergeOptions(defaultsChain);                                                                         // 8144\n\t\tspec.overrides = mergeOptions(overridesChain);                                                                       // 8145\n                                                                                                                       // 8146\n\t\tthis.buildViewSpecOptions(spec);                                                                                     // 8147\n\t\tthis.buildViewSpecButtonText(spec, requestedViewType);                                                               // 8148\n                                                                                                                       // 8149\n\t\treturn spec;                                                                                                         // 8150\n\t},                                                                                                                    // 8151\n                                                                                                                       // 8152\n                                                                                                                       // 8153\n\t// Builds and assigns a view spec's options object from its already-assigned defaults and overrides                   // 8154\n\tbuildViewSpecOptions: function(spec) {                                                                                // 8155\n\t\tspec.options = mergeOptions([ // lowest to highest priority                                                          // 8156\n\t\t\tCalendar.defaults, // global defaults                                                                               // 8157\n\t\t\tspec.defaults, // view's defaults (from ViewSubclass.defaults)                                                      // 8158\n\t\t\tthis.dirDefaults,                                                                                                   // 8159\n\t\t\tthis.langDefaults, // locale and dir take precedence over view's defaults!                                          // 8160\n\t\t\tthis.overrides, // calendar's overrides (options given to constructor)                                              // 8161\n\t\t\tspec.overrides // view's overrides (view-specific options)                                                          // 8162\n\t\t]);                                                                                                                  // 8163\n\t\tpopulateInstanceComputableOptions(spec.options);                                                                     // 8164\n\t},                                                                                                                    // 8165\n                                                                                                                       // 8166\n                                                                                                                       // 8167\n\t// Computes and assigns a view spec's buttonText-related options                                                      // 8168\n\tbuildViewSpecButtonText: function(spec, requestedViewType) {                                                          // 8169\n                                                                                                                       // 8170\n\t\t// given an options object with a possible `buttonText` hash, lookup the buttonText for the                          // 8171\n\t\t// requested view, falling back to a generic unit entry like \"week\" or \"day\"                                         // 8172\n\t\tfunction queryButtonText(options) {                                                                                  // 8173\n\t\t\tvar buttonText = options.buttonText || {};                                                                          // 8174\n\t\t\treturn buttonText[requestedViewType] ||                                                                             // 8175\n\t\t\t\t(spec.singleUnit ? buttonText[spec.singleUnit] : null);                                                            // 8176\n\t\t}                                                                                                                    // 8177\n                                                                                                                       // 8178\n\t\t// highest to lowest priority                                                                                        // 8179\n\t\tspec.buttonTextOverride =                                                                                            // 8180\n\t\t\tqueryButtonText(this.overrides) || // constructor-specified buttonText lookup hash takes precedence                 // 8181\n\t\t\tspec.overrides.buttonText; // `buttonText` for view-specific options is a string                                    // 8182\n                                                                                                                       // 8183\n\t\t// highest to lowest priority. mirrors buildViewSpecOptions                                                          // 8184\n\t\tspec.buttonTextDefault =                                                                                             // 8185\n\t\t\tqueryButtonText(this.langDefaults) ||                                                                               // 8186\n\t\t\tqueryButtonText(this.dirDefaults) ||                                                                                // 8187\n\t\t\tspec.defaults.buttonText || // a single string. from ViewSubclass.defaults                                          // 8188\n\t\t\tqueryButtonText(Calendar.defaults) ||                                                                               // 8189\n\t\t\t(spec.duration ? this.humanizeDuration(spec.duration) : null) || // like \"3 days\"                                   // 8190\n\t\t\trequestedViewType; // fall back to given view name                                                                  // 8191\n\t},                                                                                                                    // 8192\n                                                                                                                       // 8193\n                                                                                                                       // 8194\n\t// Given a view name for a custom view or a standard view, creates a ready-to-go View object                          // 8195\n\tinstantiateView: function(viewType) {                                                                                 // 8196\n\t\tvar spec = this.getViewSpec(viewType);                                                                               // 8197\n                                                                                                                       // 8198\n\t\treturn new spec['class'](this, viewType, spec.options, spec.duration);                                               // 8199\n\t},                                                                                                                    // 8200\n                                                                                                                       // 8201\n                                                                                                                       // 8202\n\t// Returns a boolean about whether the view is okay to instantiate at some point                                      // 8203\n\tisValidViewType: function(viewType) {                                                                                 // 8204\n\t\treturn Boolean(this.getViewSpec(viewType));                                                                          // 8205\n\t},                                                                                                                    // 8206\n                                                                                                                       // 8207\n                                                                                                                       // 8208\n\t// Should be called when any type of async data fetching begins                                                       // 8209\n\tpushLoading: function() {                                                                                             // 8210\n\t\tif (!(this.loadingLevel++)) {                                                                                        // 8211\n\t\t\tthis.trigger('loading', null, true, this.view);                                                                     // 8212\n\t\t}                                                                                                                    // 8213\n\t},                                                                                                                    // 8214\n                                                                                                                       // 8215\n                                                                                                                       // 8216\n\t// Should be called when any type of async data fetching completes                                                    // 8217\n\tpopLoading: function() {                                                                                              // 8218\n\t\tif (!(--this.loadingLevel)) {                                                                                        // 8219\n\t\t\tthis.trigger('loading', null, false, this.view);                                                                    // 8220\n\t\t}                                                                                                                    // 8221\n\t},                                                                                                                    // 8222\n                                                                                                                       // 8223\n                                                                                                                       // 8224\n\t// Given arguments to the select method in the API, returns a span (unzoned start/end and other info)                 // 8225\n\tbuildSelectSpan: function(zonedStartInput, zonedEndInput) {                                                           // 8226\n\t\tvar start = this.moment(zonedStartInput).stripZone();                                                                // 8227\n\t\tvar end;                                                                                                             // 8228\n                                                                                                                       // 8229\n\t\tif (zonedEndInput) {                                                                                                 // 8230\n\t\t\tend = this.moment(zonedEndInput).stripZone();                                                                       // 8231\n\t\t}                                                                                                                    // 8232\n\t\telse if (start.hasTime()) {                                                                                          // 8233\n\t\t\tend = start.clone().add(this.defaultTimedEventDuration);                                                            // 8234\n\t\t}                                                                                                                    // 8235\n\t\telse {                                                                                                               // 8236\n\t\t\tend = start.clone().add(this.defaultAllDayEventDuration);                                                           // 8237\n\t\t}                                                                                                                    // 8238\n                                                                                                                       // 8239\n\t\treturn { start: start, end: end };                                                                                   // 8240\n\t}                                                                                                                     // 8241\n                                                                                                                       // 8242\n});                                                                                                                    // 8243\n                                                                                                                       // 8244\n                                                                                                                       // 8245\nCalendar.mixin(Emitter);                                                                                               // 8246\n                                                                                                                       // 8247\n                                                                                                                       // 8248\nfunction Calendar_constructor(element, overrides) {                                                                    // 8249\n\tvar t = this;                                                                                                         // 8250\n                                                                                                                       // 8251\n                                                                                                                       // 8252\n\tt.initOptions(overrides || {});                                                                                       // 8253\n\tvar options = this.options;                                                                                           // 8254\n                                                                                                                       // 8255\n\t                                                                                                                      // 8256\n\t// Exports                                                                                                            // 8257\n\t// -----------------------------------------------------------------------------------                                // 8258\n                                                                                                                       // 8259\n\tt.render = render;                                                                                                    // 8260\n\tt.destroy = destroy;                                                                                                  // 8261\n\tt.refetchEvents = refetchEvents;                                                                                      // 8262\n\tt.reportEvents = reportEvents;                                                                                        // 8263\n\tt.reportEventChange = reportEventChange;                                                                              // 8264\n\tt.rerenderEvents = renderEvents; // `renderEvents` serves as a rerender. an API method                                // 8265\n\tt.changeView = renderView; // `renderView` will switch to another view                                                // 8266\n\tt.select = select;                                                                                                    // 8267\n\tt.unselect = unselect;                                                                                                // 8268\n\tt.prev = prev;                                                                                                        // 8269\n\tt.next = next;                                                                                                        // 8270\n\tt.prevYear = prevYear;                                                                                                // 8271\n\tt.nextYear = nextYear;                                                                                                // 8272\n\tt.today = today;                                                                                                      // 8273\n\tt.gotoDate = gotoDate;                                                                                                // 8274\n\tt.incrementDate = incrementDate;                                                                                      // 8275\n\tt.zoomTo = zoomTo;                                                                                                    // 8276\n\tt.getDate = getDate;                                                                                                  // 8277\n\tt.getCalendar = getCalendar;                                                                                          // 8278\n\tt.getView = getView;                                                                                                  // 8279\n\tt.option = option;                                                                                                    // 8280\n\tt.trigger = trigger;                                                                                                  // 8281\n                                                                                                                       // 8282\n                                                                                                                       // 8283\n                                                                                                                       // 8284\n\t// Language-data Internals                                                                                            // 8285\n\t// -----------------------------------------------------------------------------------                                // 8286\n\t// Apply overrides to the current language's data                                                                     // 8287\n                                                                                                                       // 8288\n                                                                                                                       // 8289\n\tvar localeData = createObject( // make a cheap copy                                                                   // 8290\n\t\tgetMomentLocaleData(options.lang) // will fall back to en                                                            // 8291\n\t);                                                                                                                    // 8292\n                                                                                                                       // 8293\n\tif (options.monthNames) {                                                                                             // 8294\n\t\tlocaleData._months = options.monthNames;                                                                             // 8295\n\t}                                                                                                                     // 8296\n\tif (options.monthNamesShort) {                                                                                        // 8297\n\t\tlocaleData._monthsShort = options.monthNamesShort;                                                                   // 8298\n\t}                                                                                                                     // 8299\n\tif (options.dayNames) {                                                                                               // 8300\n\t\tlocaleData._weekdays = options.dayNames;                                                                             // 8301\n\t}                                                                                                                     // 8302\n\tif (options.dayNamesShort) {                                                                                          // 8303\n\t\tlocaleData._weekdaysShort = options.dayNamesShort;                                                                   // 8304\n\t}                                                                                                                     // 8305\n\tif (options.firstDay != null) {                                                                                       // 8306\n\t\tvar _week = createObject(localeData._week); // _week: { dow: # }                                                     // 8307\n\t\t_week.dow = options.firstDay;                                                                                        // 8308\n\t\tlocaleData._week = _week;                                                                                            // 8309\n\t}                                                                                                                     // 8310\n                                                                                                                       // 8311\n\t// assign a normalized value, to be used by our .week() moment extension                                              // 8312\n\tlocaleData._fullCalendar_weekCalc = (function(weekCalc) {                                                             // 8313\n\t\tif (typeof weekCalc === 'function') {                                                                                // 8314\n\t\t\treturn weekCalc;                                                                                                    // 8315\n\t\t}                                                                                                                    // 8316\n\t\telse if (weekCalc === 'local') {                                                                                     // 8317\n\t\t\treturn weekCalc;                                                                                                    // 8318\n\t\t}                                                                                                                    // 8319\n\t\telse if (weekCalc === 'iso' || weekCalc === 'ISO') {                                                                 // 8320\n\t\t\treturn 'ISO';                                                                                                       // 8321\n\t\t}                                                                                                                    // 8322\n\t})(options.weekNumberCalculation);                                                                                    // 8323\n                                                                                                                       // 8324\n                                                                                                                       // 8325\n                                                                                                                       // 8326\n\t// Calendar-specific Date Utilities                                                                                   // 8327\n\t// -----------------------------------------------------------------------------------                                // 8328\n                                                                                                                       // 8329\n                                                                                                                       // 8330\n\tt.defaultAllDayEventDuration = moment.duration(options.defaultAllDayEventDuration);                                   // 8331\n\tt.defaultTimedEventDuration = moment.duration(options.defaultTimedEventDuration);                                     // 8332\n                                                                                                                       // 8333\n                                                                                                                       // 8334\n\t// Builds a moment using the settings of the current calendar: timezone and language.                                 // 8335\n\t// Accepts anything the vanilla moment() constructor accepts.                                                         // 8336\n\tt.moment = function() {                                                                                               // 8337\n\t\tvar mom;                                                                                                             // 8338\n                                                                                                                       // 8339\n\t\tif (options.timezone === 'local') {                                                                                  // 8340\n\t\t\tmom = FC.moment.apply(null, arguments);                                                                             // 8341\n                                                                                                                       // 8342\n\t\t\t// Force the moment to be local, because FC.moment doesn't guarantee it.                                            // 8343\n\t\t\tif (mom.hasTime()) { // don't give ambiguously-timed moments a local zone                                           // 8344\n\t\t\t\tmom.local();                                                                                                       // 8345\n\t\t\t}                                                                                                                   // 8346\n\t\t}                                                                                                                    // 8347\n\t\telse if (options.timezone === 'UTC') {                                                                               // 8348\n\t\t\tmom = FC.moment.utc.apply(null, arguments); // process as UTC                                                       // 8349\n\t\t}                                                                                                                    // 8350\n\t\telse {                                                                                                               // 8351\n\t\t\tmom = FC.moment.parseZone.apply(null, arguments); // let the input decide the zone                                  // 8352\n\t\t}                                                                                                                    // 8353\n                                                                                                                       // 8354\n\t\tif ('_locale' in mom) { // moment 2.8 and above                                                                      // 8355\n\t\t\tmom._locale = localeData;                                                                                           // 8356\n\t\t}                                                                                                                    // 8357\n\t\telse { // pre-moment-2.8                                                                                             // 8358\n\t\t\tmom._lang = localeData;                                                                                             // 8359\n\t\t}                                                                                                                    // 8360\n                                                                                                                       // 8361\n\t\treturn mom;                                                                                                          // 8362\n\t};                                                                                                                    // 8363\n                                                                                                                       // 8364\n                                                                                                                       // 8365\n\t// Returns a boolean about whether or not the calendar knows how to calculate                                         // 8366\n\t// the timezone offset of arbitrary dates in the current timezone.                                                    // 8367\n\tt.getIsAmbigTimezone = function() {                                                                                   // 8368\n\t\treturn options.timezone !== 'local' && options.timezone !== 'UTC';                                                   // 8369\n\t};                                                                                                                    // 8370\n                                                                                                                       // 8371\n                                                                                                                       // 8372\n\t// Returns a copy of the given date in the current timezone. Has no effect on dates without times.                    // 8373\n\tt.applyTimezone = function(date) {                                                                                    // 8374\n\t\tif (!date.hasTime()) {                                                                                               // 8375\n\t\t\treturn date.clone();                                                                                                // 8376\n\t\t}                                                                                                                    // 8377\n                                                                                                                       // 8378\n\t\tvar zonedDate = t.moment(date.toArray());                                                                            // 8379\n\t\tvar timeAdjust = date.time() - zonedDate.time();                                                                     // 8380\n\t\tvar adjustedZonedDate;                                                                                               // 8381\n                                                                                                                       // 8382\n\t\t// Safari sometimes has problems with this coersion when near DST. Adjust if necessary. (bug #2396)                  // 8383\n\t\tif (timeAdjust) { // is the time result different than expected?                                                     // 8384\n\t\t\tadjustedZonedDate = zonedDate.clone().add(timeAdjust); // add milliseconds                                          // 8385\n\t\t\tif (date.time() - adjustedZonedDate.time() === 0) { // does it match perfectly now?                                 // 8386\n\t\t\t\tzonedDate = adjustedZonedDate;                                                                                     // 8387\n\t\t\t}                                                                                                                   // 8388\n\t\t}                                                                                                                    // 8389\n                                                                                                                       // 8390\n\t\treturn zonedDate;                                                                                                    // 8391\n\t};                                                                                                                    // 8392\n                                                                                                                       // 8393\n                                                                                                                       // 8394\n\t// Returns a moment for the current date, as defined by the client's computer or from the `now` option.               // 8395\n\t// Will return an moment with an ambiguous timezone.                                                                  // 8396\n\tt.getNow = function() {                                                                                               // 8397\n\t\tvar now = options.now;                                                                                               // 8398\n\t\tif (typeof now === 'function') {                                                                                     // 8399\n\t\t\tnow = now();                                                                                                        // 8400\n\t\t}                                                                                                                    // 8401\n\t\treturn t.moment(now).stripZone();                                                                                    // 8402\n\t};                                                                                                                    // 8403\n                                                                                                                       // 8404\n                                                                                                                       // 8405\n\t// Get an event's normalized end date. If not present, calculate it from the defaults.                                // 8406\n\tt.getEventEnd = function(event) {                                                                                     // 8407\n\t\tif (event.end) {                                                                                                     // 8408\n\t\t\treturn event.end.clone();                                                                                           // 8409\n\t\t}                                                                                                                    // 8410\n\t\telse {                                                                                                               // 8411\n\t\t\treturn t.getDefaultEventEnd(event.allDay, event.start);                                                             // 8412\n\t\t}                                                                                                                    // 8413\n\t};                                                                                                                    // 8414\n                                                                                                                       // 8415\n                                                                                                                       // 8416\n\t// Given an event's allDay status and start date, return what its fallback end date should be.                        // 8417\n\t// TODO: rename to computeDefaultEventEnd                                                                             // 8418\n\tt.getDefaultEventEnd = function(allDay, zonedStart) {                                                                 // 8419\n\t\tvar end = zonedStart.clone();                                                                                        // 8420\n                                                                                                                       // 8421\n\t\tif (allDay) {                                                                                                        // 8422\n\t\t\tend.stripTime().add(t.defaultAllDayEventDuration);                                                                  // 8423\n\t\t}                                                                                                                    // 8424\n\t\telse {                                                                                                               // 8425\n\t\t\tend.add(t.defaultTimedEventDuration);                                                                               // 8426\n\t\t}                                                                                                                    // 8427\n                                                                                                                       // 8428\n\t\tif (t.getIsAmbigTimezone()) {                                                                                        // 8429\n\t\t\tend.stripZone(); // we don't know what the tzo should be                                                            // 8430\n\t\t}                                                                                                                    // 8431\n                                                                                                                       // 8432\n\t\treturn end;                                                                                                          // 8433\n\t};                                                                                                                    // 8434\n                                                                                                                       // 8435\n                                                                                                                       // 8436\n\t// Produces a human-readable string for the given duration.                                                           // 8437\n\t// Side-effect: changes the locale of the given duration.                                                             // 8438\n\tt.humanizeDuration = function(duration) {                                                                             // 8439\n\t\treturn (duration.locale || duration.lang).call(duration, options.lang) // works moment-pre-2.8                       // 8440\n\t\t\t.humanize();                                                                                                        // 8441\n\t};                                                                                                                    // 8442\n                                                                                                                       // 8443\n                                                                                                                       // 8444\n\t                                                                                                                      // 8445\n\t// Imports                                                                                                            // 8446\n\t// -----------------------------------------------------------------------------------                                // 8447\n                                                                                                                       // 8448\n                                                                                                                       // 8449\n\tEventManager.call(t, options);                                                                                        // 8450\n\tvar isFetchNeeded = t.isFetchNeeded;                                                                                  // 8451\n\tvar fetchEvents = t.fetchEvents;                                                                                      // 8452\n                                                                                                                       // 8453\n                                                                                                                       // 8454\n                                                                                                                       // 8455\n\t// Locals                                                                                                             // 8456\n\t// -----------------------------------------------------------------------------------                                // 8457\n                                                                                                                       // 8458\n                                                                                                                       // 8459\n\tvar _element = element[0];                                                                                            // 8460\n\tvar header;                                                                                                           // 8461\n\tvar headerElement;                                                                                                    // 8462\n\tvar content;                                                                                                          // 8463\n\tvar tm; // for making theme classes                                                                                   // 8464\n\tvar currentView; // NOTE: keep this in sync with this.view                                                            // 8465\n\tvar viewsByType = {}; // holds all instantiated view instances, current or not                                        // 8466\n\tvar suggestedViewHeight;                                                                                              // 8467\n\tvar windowResizeProxy; // wraps the windowResize function                                                             // 8468\n\tvar ignoreWindowResize = 0;                                                                                           // 8469\n\tvar events = [];                                                                                                      // 8470\n\tvar date; // unzoned                                                                                                  // 8471\n\t                                                                                                                      // 8472\n\t                                                                                                                      // 8473\n\t                                                                                                                      // 8474\n\t// Main Rendering                                                                                                     // 8475\n\t// -----------------------------------------------------------------------------------                                // 8476\n                                                                                                                       // 8477\n                                                                                                                       // 8478\n\t// compute the initial ambig-timezone date                                                                            // 8479\n\tif (options.defaultDate != null) {                                                                                    // 8480\n\t\tdate = t.moment(options.defaultDate).stripZone();                                                                    // 8481\n\t}                                                                                                                     // 8482\n\telse {                                                                                                                // 8483\n\t\tdate = t.getNow(); // getNow already returns unzoned                                                                 // 8484\n\t}                                                                                                                     // 8485\n\t                                                                                                                      // 8486\n\t                                                                                                                      // 8487\n\tfunction render() {                                                                                                   // 8488\n\t\tif (!content) {                                                                                                      // 8489\n\t\t\tinitialRender();                                                                                                    // 8490\n\t\t}                                                                                                                    // 8491\n\t\telse if (elementVisible()) {                                                                                         // 8492\n\t\t\t// mainly for the public API                                                                                        // 8493\n\t\t\tcalcSize();                                                                                                         // 8494\n\t\t\trenderView();                                                                                                       // 8495\n\t\t}                                                                                                                    // 8496\n\t}                                                                                                                     // 8497\n\t                                                                                                                      // 8498\n\t                                                                                                                      // 8499\n\tfunction initialRender() {                                                                                            // 8500\n\t\ttm = options.theme ? 'ui' : 'fc';                                                                                    // 8501\n\t\telement.addClass('fc');                                                                                              // 8502\n                                                                                                                       // 8503\n\t\tif (options.isRTL) {                                                                                                 // 8504\n\t\t\telement.addClass('fc-rtl');                                                                                         // 8505\n\t\t}                                                                                                                    // 8506\n\t\telse {                                                                                                               // 8507\n\t\t\telement.addClass('fc-ltr');                                                                                         // 8508\n\t\t}                                                                                                                    // 8509\n                                                                                                                       // 8510\n\t\tif (options.theme) {                                                                                                 // 8511\n\t\t\telement.addClass('ui-widget');                                                                                      // 8512\n\t\t}                                                                                                                    // 8513\n\t\telse {                                                                                                               // 8514\n\t\t\telement.addClass('fc-unthemed');                                                                                    // 8515\n\t\t}                                                                                                                    // 8516\n                                                                                                                       // 8517\n\t\tcontent = $(\"<div class='fc-view-container'/>\").prependTo(element);                                                  // 8518\n                                                                                                                       // 8519\n\t\theader = t.header = new Header(t, options);                                                                          // 8520\n\t\theaderElement = header.render();                                                                                     // 8521\n\t\tif (headerElement) {                                                                                                 // 8522\n\t\t\telement.prepend(headerElement);                                                                                     // 8523\n\t\t}                                                                                                                    // 8524\n                                                                                                                       // 8525\n\t\trenderView(options.defaultView);                                                                                     // 8526\n                                                                                                                       // 8527\n\t\tif (options.handleWindowResize) {                                                                                    // 8528\n\t\t\twindowResizeProxy = debounce(windowResize, options.windowResizeDelay); // prevents rapid calls                      // 8529\n\t\t\t$(window).resize(windowResizeProxy);                                                                                // 8530\n\t\t}                                                                                                                    // 8531\n\t}                                                                                                                     // 8532\n\t                                                                                                                      // 8533\n\t                                                                                                                      // 8534\n\tfunction destroy() {                                                                                                  // 8535\n                                                                                                                       // 8536\n\t\tif (currentView) {                                                                                                   // 8537\n\t\t\tcurrentView.removeElement();                                                                                        // 8538\n                                                                                                                       // 8539\n\t\t\t// NOTE: don't null-out currentView/t.view in case API methods are called after destroy.                            // 8540\n\t\t\t// It is still the \"current\" view, just not rendered.                                                               // 8541\n\t\t}                                                                                                                    // 8542\n                                                                                                                       // 8543\n\t\theader.removeElement();                                                                                              // 8544\n\t\tcontent.remove();                                                                                                    // 8545\n\t\telement.removeClass('fc fc-ltr fc-rtl fc-unthemed ui-widget');                                                       // 8546\n                                                                                                                       // 8547\n\t\tif (windowResizeProxy) {                                                                                             // 8548\n\t\t\t$(window).unbind('resize', windowResizeProxy);                                                                      // 8549\n\t\t}                                                                                                                    // 8550\n\t}                                                                                                                     // 8551\n\t                                                                                                                      // 8552\n\t                                                                                                                      // 8553\n\tfunction elementVisible() {                                                                                           // 8554\n\t\treturn element.is(':visible');                                                                                       // 8555\n\t}                                                                                                                     // 8556\n\t                                                                                                                      // 8557\n\t                                                                                                                      // 8558\n                                                                                                                       // 8559\n\t// View Rendering                                                                                                     // 8560\n\t// -----------------------------------------------------------------------------------                                // 8561\n                                                                                                                       // 8562\n                                                                                                                       // 8563\n\t// Renders a view because of a date change, view-type change, or for the first time.                                  // 8564\n\t// If not given a viewType, keep the current view but render different dates.                                         // 8565\n\tfunction renderView(viewType) {                                                                                       // 8566\n\t\tignoreWindowResize++;                                                                                                // 8567\n                                                                                                                       // 8568\n\t\t// if viewType is changing, remove the old view's rendering                                                          // 8569\n\t\tif (currentView && viewType && currentView.type !== viewType) {                                                      // 8570\n\t\t\theader.deactivateButton(currentView.type);                                                                          // 8571\n\t\t\tfreezeContentHeight(); // prevent a scroll jump when view element is removed                                        // 8572\n\t\t\tcurrentView.removeElement();                                                                                        // 8573\n\t\t\tcurrentView = t.view = null;                                                                                        // 8574\n\t\t}                                                                                                                    // 8575\n                                                                                                                       // 8576\n\t\t// if viewType changed, or the view was never created, create a fresh view                                           // 8577\n\t\tif (!currentView && viewType) {                                                                                      // 8578\n\t\t\tcurrentView = t.view =                                                                                              // 8579\n\t\t\t\tviewsByType[viewType] ||                                                                                           // 8580\n\t\t\t\t(viewsByType[viewType] = t.instantiateView(viewType));                                                             // 8581\n                                                                                                                       // 8582\n\t\t\tcurrentView.setElement(                                                                                             // 8583\n\t\t\t\t$(\"<div class='fc-view fc-\" + viewType + \"-view' />\").appendTo(content)                                            // 8584\n\t\t\t);                                                                                                                  // 8585\n\t\t\theader.activateButton(viewType);                                                                                    // 8586\n\t\t}                                                                                                                    // 8587\n                                                                                                                       // 8588\n\t\tif (currentView) {                                                                                                   // 8589\n                                                                                                                       // 8590\n\t\t\t// in case the view should render a period of time that is completely hidden                                        // 8591\n\t\t\tdate = currentView.massageCurrentDate(date);                                                                        // 8592\n                                                                                                                       // 8593\n\t\t\t// render or rerender the view                                                                                      // 8594\n\t\t\tif (                                                                                                                // 8595\n\t\t\t\t!currentView.displaying ||                                                                                         // 8596\n\t\t\t\t!date.isWithin(currentView.intervalStart, currentView.intervalEnd) // implicit date window change                  // 8597\n\t\t\t) {                                                                                                                 // 8598\n\t\t\t\tif (elementVisible()) {                                                                                            // 8599\n                                                                                                                       // 8600\n\t\t\t\t\tcurrentView.display(date); // will call freezeContentHeight                                                       // 8601\n\t\t\t\t\tunfreezeContentHeight(); // immediately unfreeze regardless of whether display is async                           // 8602\n                                                                                                                       // 8603\n\t\t\t\t\t// need to do this after View::render, so dates are calculated                                                    // 8604\n\t\t\t\t\tupdateHeaderTitle();                                                                                              // 8605\n\t\t\t\t\tupdateTodayButton();                                                                                              // 8606\n                                                                                                                       // 8607\n\t\t\t\t\tgetAndRenderEvents();                                                                                             // 8608\n\t\t\t\t}                                                                                                                  // 8609\n\t\t\t}                                                                                                                   // 8610\n\t\t}                                                                                                                    // 8611\n                                                                                                                       // 8612\n\t\tunfreezeContentHeight(); // undo any lone freezeContentHeight calls                                                  // 8613\n\t\tignoreWindowResize--;                                                                                                // 8614\n\t}                                                                                                                     // 8615\n                                                                                                                       // 8616\n\t                                                                                                                      // 8617\n                                                                                                                       // 8618\n\t// Resizing                                                                                                           // 8619\n\t// -----------------------------------------------------------------------------------                                // 8620\n                                                                                                                       // 8621\n                                                                                                                       // 8622\n\tt.getSuggestedViewHeight = function() {                                                                               // 8623\n\t\tif (suggestedViewHeight === undefined) {                                                                             // 8624\n\t\t\tcalcSize();                                                                                                         // 8625\n\t\t}                                                                                                                    // 8626\n\t\treturn suggestedViewHeight;                                                                                          // 8627\n\t};                                                                                                                    // 8628\n                                                                                                                       // 8629\n                                                                                                                       // 8630\n\tt.isHeightAuto = function() {                                                                                         // 8631\n\t\treturn options.contentHeight === 'auto' || options.height === 'auto';                                                // 8632\n\t};                                                                                                                    // 8633\n\t                                                                                                                      // 8634\n\t                                                                                                                      // 8635\n\tfunction updateSize(shouldRecalc) {                                                                                   // 8636\n\t\tif (elementVisible()) {                                                                                              // 8637\n                                                                                                                       // 8638\n\t\t\tif (shouldRecalc) {                                                                                                 // 8639\n\t\t\t\t_calcSize();                                                                                                       // 8640\n\t\t\t}                                                                                                                   // 8641\n                                                                                                                       // 8642\n\t\t\tignoreWindowResize++;                                                                                               // 8643\n\t\t\tcurrentView.updateSize(true); // isResize=true. will poll getSuggestedViewHeight() and isHeightAuto()               // 8644\n\t\t\tignoreWindowResize--;                                                                                               // 8645\n                                                                                                                       // 8646\n\t\t\treturn true; // signal success                                                                                      // 8647\n\t\t}                                                                                                                    // 8648\n\t}                                                                                                                     // 8649\n                                                                                                                       // 8650\n                                                                                                                       // 8651\n\tfunction calcSize() {                                                                                                 // 8652\n\t\tif (elementVisible()) {                                                                                              // 8653\n\t\t\t_calcSize();                                                                                                        // 8654\n\t\t}                                                                                                                    // 8655\n\t}                                                                                                                     // 8656\n\t                                                                                                                      // 8657\n\t                                                                                                                      // 8658\n\tfunction _calcSize() { // assumes elementVisible                                                                      // 8659\n\t\tif (typeof options.contentHeight === 'number') { // exists and not 'auto'                                            // 8660\n\t\t\tsuggestedViewHeight = options.contentHeight;                                                                        // 8661\n\t\t}                                                                                                                    // 8662\n\t\telse if (typeof options.height === 'number') { // exists and not 'auto'                                              // 8663\n\t\t\tsuggestedViewHeight = options.height - (headerElement ? headerElement.outerHeight(true) : 0);                       // 8664\n\t\t}                                                                                                                    // 8665\n\t\telse {                                                                                                               // 8666\n\t\t\tsuggestedViewHeight = Math.round(content.width() / Math.max(options.aspectRatio, .5));                              // 8667\n\t\t}                                                                                                                    // 8668\n\t}                                                                                                                     // 8669\n\t                                                                                                                      // 8670\n\t                                                                                                                      // 8671\n\tfunction windowResize(ev) {                                                                                           // 8672\n\t\tif (                                                                                                                 // 8673\n\t\t\t!ignoreWindowResize &&                                                                                              // 8674\n\t\t\tev.target === window && // so we don't process jqui \"resize\" events that have bubbled up                            // 8675\n\t\t\tcurrentView.start // view has already been rendered                                                                 // 8676\n\t\t) {                                                                                                                  // 8677\n\t\t\tif (updateSize(true)) {                                                                                             // 8678\n\t\t\t\tcurrentView.trigger('windowResize', _element);                                                                     // 8679\n\t\t\t}                                                                                                                   // 8680\n\t\t}                                                                                                                    // 8681\n\t}                                                                                                                     // 8682\n\t                                                                                                                      // 8683\n\t                                                                                                                      // 8684\n\t                                                                                                                      // 8685\n\t/* Event Fetching/Rendering                                                                                           // 8686\n\t-----------------------------------------------------------------------------*/                                       // 8687\n\t// TODO: going forward, most of this stuff should be directly handled by the view                                     // 8688\n                                                                                                                       // 8689\n                                                                                                                       // 8690\n\tfunction refetchEvents() { // can be called as an API method                                                          // 8691\n\t\tdestroyEvents(); // so that events are cleared before user starts waiting for AJAX                                   // 8692\n\t\tfetchAndRenderEvents();                                                                                              // 8693\n\t}                                                                                                                     // 8694\n                                                                                                                       // 8695\n                                                                                                                       // 8696\n\tfunction renderEvents() { // destroys old events if previously rendered                                               // 8697\n\t\tif (elementVisible()) {                                                                                              // 8698\n\t\t\tfreezeContentHeight();                                                                                              // 8699\n\t\t\tcurrentView.displayEvents(events);                                                                                  // 8700\n\t\t\tunfreezeContentHeight();                                                                                            // 8701\n\t\t}                                                                                                                    // 8702\n\t}                                                                                                                     // 8703\n                                                                                                                       // 8704\n                                                                                                                       // 8705\n\tfunction destroyEvents() {                                                                                            // 8706\n\t\tfreezeContentHeight();                                                                                               // 8707\n\t\tcurrentView.clearEvents();                                                                                           // 8708\n\t\tunfreezeContentHeight();                                                                                             // 8709\n\t}                                                                                                                     // 8710\n\t                                                                                                                      // 8711\n                                                                                                                       // 8712\n\tfunction getAndRenderEvents() {                                                                                       // 8713\n\t\tif (!options.lazyFetching || isFetchNeeded(currentView.start, currentView.end)) {                                    // 8714\n\t\t\tfetchAndRenderEvents();                                                                                             // 8715\n\t\t}                                                                                                                    // 8716\n\t\telse {                                                                                                               // 8717\n\t\t\trenderEvents();                                                                                                     // 8718\n\t\t}                                                                                                                    // 8719\n\t}                                                                                                                     // 8720\n                                                                                                                       // 8721\n                                                                                                                       // 8722\n\tfunction fetchAndRenderEvents() {                                                                                     // 8723\n\t\tfetchEvents(currentView.start, currentView.end);                                                                     // 8724\n\t\t\t// ... will call reportEvents                                                                                       // 8725\n\t\t\t// ... which will call renderEvents                                                                                 // 8726\n\t}                                                                                                                     // 8727\n                                                                                                                       // 8728\n\t                                                                                                                      // 8729\n\t// called when event data arrives                                                                                     // 8730\n\tfunction reportEvents(_events) {                                                                                      // 8731\n\t\tevents = _events;                                                                                                    // 8732\n\t\trenderEvents();                                                                                                      // 8733\n\t}                                                                                                                     // 8734\n                                                                                                                       // 8735\n                                                                                                                       // 8736\n\t// called when a single event's data has been changed                                                                 // 8737\n\tfunction reportEventChange() {                                                                                        // 8738\n\t\trenderEvents();                                                                                                      // 8739\n\t}                                                                                                                     // 8740\n                                                                                                                       // 8741\n                                                                                                                       // 8742\n                                                                                                                       // 8743\n\t/* Header Updating                                                                                                    // 8744\n\t-----------------------------------------------------------------------------*/                                       // 8745\n                                                                                                                       // 8746\n                                                                                                                       // 8747\n\tfunction updateHeaderTitle() {                                                                                        // 8748\n\t\theader.updateTitle(currentView.title);                                                                               // 8749\n\t}                                                                                                                     // 8750\n                                                                                                                       // 8751\n                                                                                                                       // 8752\n\tfunction updateTodayButton() {                                                                                        // 8753\n\t\tvar now = t.getNow();                                                                                                // 8754\n\t\tif (now.isWithin(currentView.intervalStart, currentView.intervalEnd)) {                                              // 8755\n\t\t\theader.disableButton('today');                                                                                      // 8756\n\t\t}                                                                                                                    // 8757\n\t\telse {                                                                                                               // 8758\n\t\t\theader.enableButton('today');                                                                                       // 8759\n\t\t}                                                                                                                    // 8760\n\t}                                                                                                                     // 8761\n\t                                                                                                                      // 8762\n                                                                                                                       // 8763\n                                                                                                                       // 8764\n\t/* Selection                                                                                                          // 8765\n\t-----------------------------------------------------------------------------*/                                       // 8766\n\t                                                                                                                      // 8767\n                                                                                                                       // 8768\n\t// this public method receives start/end dates in any format, with any timezone                                       // 8769\n\tfunction select(zonedStartInput, zonedEndInput) {                                                                     // 8770\n\t\tcurrentView.select(                                                                                                  // 8771\n\t\t\tt.buildSelectSpan.apply(t, arguments)                                                                               // 8772\n\t\t);                                                                                                                   // 8773\n\t}                                                                                                                     // 8774\n\t                                                                                                                      // 8775\n                                                                                                                       // 8776\n\tfunction unselect() { // safe to be called before renderView                                                          // 8777\n\t\tif (currentView) {                                                                                                   // 8778\n\t\t\tcurrentView.unselect();                                                                                             // 8779\n\t\t}                                                                                                                    // 8780\n\t}                                                                                                                     // 8781\n\t                                                                                                                      // 8782\n\t                                                                                                                      // 8783\n\t                                                                                                                      // 8784\n\t/* Date                                                                                                               // 8785\n\t-----------------------------------------------------------------------------*/                                       // 8786\n\t                                                                                                                      // 8787\n\t                                                                                                                      // 8788\n\tfunction prev() {                                                                                                     // 8789\n\t\tdate = currentView.computePrevDate(date);                                                                            // 8790\n\t\trenderView();                                                                                                        // 8791\n\t}                                                                                                                     // 8792\n\t                                                                                                                      // 8793\n\t                                                                                                                      // 8794\n\tfunction next() {                                                                                                     // 8795\n\t\tdate = currentView.computeNextDate(date);                                                                            // 8796\n\t\trenderView();                                                                                                        // 8797\n\t}                                                                                                                     // 8798\n\t                                                                                                                      // 8799\n\t                                                                                                                      // 8800\n\tfunction prevYear() {                                                                                                 // 8801\n\t\tdate.add(-1, 'years');                                                                                               // 8802\n\t\trenderView();                                                                                                        // 8803\n\t}                                                                                                                     // 8804\n\t                                                                                                                      // 8805\n\t                                                                                                                      // 8806\n\tfunction nextYear() {                                                                                                 // 8807\n\t\tdate.add(1, 'years');                                                                                                // 8808\n\t\trenderView();                                                                                                        // 8809\n\t}                                                                                                                     // 8810\n\t                                                                                                                      // 8811\n\t                                                                                                                      // 8812\n\tfunction today() {                                                                                                    // 8813\n\t\tdate = t.getNow();                                                                                                   // 8814\n\t\trenderView();                                                                                                        // 8815\n\t}                                                                                                                     // 8816\n\t                                                                                                                      // 8817\n\t                                                                                                                      // 8818\n\tfunction gotoDate(zonedDateInput) {                                                                                   // 8819\n\t\tdate = t.moment(zonedDateInput).stripZone();                                                                         // 8820\n\t\trenderView();                                                                                                        // 8821\n\t}                                                                                                                     // 8822\n\t                                                                                                                      // 8823\n\t                                                                                                                      // 8824\n\tfunction incrementDate(delta) {                                                                                       // 8825\n\t\tdate.add(moment.duration(delta));                                                                                    // 8826\n\t\trenderView();                                                                                                        // 8827\n\t}                                                                                                                     // 8828\n                                                                                                                       // 8829\n                                                                                                                       // 8830\n\t// Forces navigation to a view for the given date.                                                                    // 8831\n\t// `viewType` can be a specific view name or a generic one like \"week\" or \"day\".                                      // 8832\n\tfunction zoomTo(newDate, viewType) {                                                                                  // 8833\n\t\tvar spec;                                                                                                            // 8834\n                                                                                                                       // 8835\n\t\tviewType = viewType || 'day'; // day is default zoom                                                                 // 8836\n\t\tspec = t.getViewSpec(viewType) || t.getUnitViewSpec(viewType);                                                       // 8837\n                                                                                                                       // 8838\n\t\tdate = newDate.clone();                                                                                              // 8839\n\t\trenderView(spec ? spec.type : null);                                                                                 // 8840\n\t}                                                                                                                     // 8841\n\t                                                                                                                      // 8842\n\t                                                                                                                      // 8843\n\t// for external API                                                                                                   // 8844\n\tfunction getDate() {                                                                                                  // 8845\n\t\treturn t.applyTimezone(date); // infuse the calendar's timezone                                                      // 8846\n\t}                                                                                                                     // 8847\n                                                                                                                       // 8848\n                                                                                                                       // 8849\n                                                                                                                       // 8850\n\t/* Height \"Freezing\"                                                                                                  // 8851\n\t-----------------------------------------------------------------------------*/                                       // 8852\n\t// TODO: move this into the view                                                                                      // 8853\n                                                                                                                       // 8854\n\tt.freezeContentHeight = freezeContentHeight;                                                                          // 8855\n\tt.unfreezeContentHeight = unfreezeContentHeight;                                                                      // 8856\n                                                                                                                       // 8857\n                                                                                                                       // 8858\n\tfunction freezeContentHeight() {                                                                                      // 8859\n\t\tcontent.css({                                                                                                        // 8860\n\t\t\twidth: '100%',                                                                                                      // 8861\n\t\t\theight: content.height(),                                                                                           // 8862\n\t\t\toverflow: 'hidden'                                                                                                  // 8863\n\t\t});                                                                                                                  // 8864\n\t}                                                                                                                     // 8865\n                                                                                                                       // 8866\n                                                                                                                       // 8867\n\tfunction unfreezeContentHeight() {                                                                                    // 8868\n\t\tcontent.css({                                                                                                        // 8869\n\t\t\twidth: '',                                                                                                          // 8870\n\t\t\theight: '',                                                                                                         // 8871\n\t\t\toverflow: ''                                                                                                        // 8872\n\t\t});                                                                                                                  // 8873\n\t}                                                                                                                     // 8874\n\t                                                                                                                      // 8875\n\t                                                                                                                      // 8876\n\t                                                                                                                      // 8877\n\t/* Misc                                                                                                               // 8878\n\t-----------------------------------------------------------------------------*/                                       // 8879\n\t                                                                                                                      // 8880\n                                                                                                                       // 8881\n\tfunction getCalendar() {                                                                                              // 8882\n\t\treturn t;                                                                                                            // 8883\n\t}                                                                                                                     // 8884\n                                                                                                                       // 8885\n\t                                                                                                                      // 8886\n\tfunction getView() {                                                                                                  // 8887\n\t\treturn currentView;                                                                                                  // 8888\n\t}                                                                                                                     // 8889\n\t                                                                                                                      // 8890\n\t                                                                                                                      // 8891\n\tfunction option(name, value) {                                                                                        // 8892\n\t\tif (value === undefined) {                                                                                           // 8893\n\t\t\treturn options[name];                                                                                               // 8894\n\t\t}                                                                                                                    // 8895\n\t\tif (name == 'height' || name == 'contentHeight' || name == 'aspectRatio') {                                          // 8896\n\t\t\toptions[name] = value;                                                                                              // 8897\n\t\t\tupdateSize(true); // true = allow recalculation of height                                                           // 8898\n\t\t}                                                                                                                    // 8899\n\t}                                                                                                                     // 8900\n\t                                                                                                                      // 8901\n\t                                                                                                                      // 8902\n\tfunction trigger(name, thisObj) { // overrides the Emitter's trigger method :(                                        // 8903\n\t\tvar args = Array.prototype.slice.call(arguments, 2);                                                                 // 8904\n                                                                                                                       // 8905\n\t\tthisObj = thisObj || _element;                                                                                       // 8906\n\t\tthis.triggerWith(name, thisObj, args); // Emitter's method                                                           // 8907\n                                                                                                                       // 8908\n\t\tif (options[name]) {                                                                                                 // 8909\n\t\t\treturn options[name].apply(thisObj, args);                                                                          // 8910\n\t\t}                                                                                                                    // 8911\n\t}                                                                                                                     // 8912\n                                                                                                                       // 8913\n\tt.initialize();                                                                                                       // 8914\n}                                                                                                                      // 8915\n                                                                                                                       // 8916\n;;                                                                                                                     // 8917\n                                                                                                                       // 8918\nCalendar.defaults = {                                                                                                  // 8919\n                                                                                                                       // 8920\n\ttitleRangeSeparator: ' \\u2014 ', // emphasized dash                                                                   // 8921\n\tmonthYearFormat: 'MMMM YYYY', // required for en. other languages rely on datepicker computable option                // 8922\n                                                                                                                       // 8923\n\tdefaultTimedEventDuration: '02:00:00',                                                                                // 8924\n\tdefaultAllDayEventDuration: { days: 1 },                                                                              // 8925\n\tforceEventDuration: false,                                                                                            // 8926\n\tnextDayThreshold: '09:00:00', // 9am                                                                                  // 8927\n                                                                                                                       // 8928\n\t// display                                                                                                            // 8929\n\tdefaultView: 'month',                                                                                                 // 8930\n\taspectRatio: 1.35,                                                                                                    // 8931\n\theader: {                                                                                                             // 8932\n\t\tleft: 'title',                                                                                                       // 8933\n\t\tcenter: '',                                                                                                          // 8934\n\t\tright: 'today prev,next'                                                                                             // 8935\n\t},                                                                                                                    // 8936\n\tweekends: true,                                                                                                       // 8937\n\tweekNumbers: false,                                                                                                   // 8938\n                                                                                                                       // 8939\n\tweekNumberTitle: 'W',                                                                                                 // 8940\n\tweekNumberCalculation: 'local',                                                                                       // 8941\n\t                                                                                                                      // 8942\n\t//editable: false,                                                                                                    // 8943\n                                                                                                                       // 8944\n\tscrollTime: '06:00:00',                                                                                               // 8945\n\t                                                                                                                      // 8946\n\t// event ajax                                                                                                         // 8947\n\tlazyFetching: true,                                                                                                   // 8948\n\tstartParam: 'start',                                                                                                  // 8949\n\tendParam: 'end',                                                                                                      // 8950\n\ttimezoneParam: 'timezone',                                                                                            // 8951\n                                                                                                                       // 8952\n\ttimezone: false,                                                                                                      // 8953\n                                                                                                                       // 8954\n\t//allDayDefault: undefined,                                                                                           // 8955\n                                                                                                                       // 8956\n\t// locale                                                                                                             // 8957\n\tisRTL: false,                                                                                                         // 8958\n\tbuttonText: {                                                                                                         // 8959\n\t\tprev: \"prev\",                                                                                                        // 8960\n\t\tnext: \"next\",                                                                                                        // 8961\n\t\tprevYear: \"prev year\",                                                                                               // 8962\n\t\tnextYear: \"next year\",                                                                                               // 8963\n\t\tyear: 'year', // TODO: locale files need to specify this                                                             // 8964\n\t\ttoday: 'today',                                                                                                      // 8965\n\t\tmonth: 'month',                                                                                                      // 8966\n\t\tweek: 'week',                                                                                                        // 8967\n\t\tday: 'day'                                                                                                           // 8968\n\t},                                                                                                                    // 8969\n                                                                                                                       // 8970\n\tbuttonIcons: {                                                                                                        // 8971\n\t\tprev: 'left-single-arrow',                                                                                           // 8972\n\t\tnext: 'right-single-arrow',                                                                                          // 8973\n\t\tprevYear: 'left-double-arrow',                                                                                       // 8974\n\t\tnextYear: 'right-double-arrow'                                                                                       // 8975\n\t},                                                                                                                    // 8976\n\t                                                                                                                      // 8977\n\t// jquery-ui theming                                                                                                  // 8978\n\ttheme: false,                                                                                                         // 8979\n\tthemeButtonIcons: {                                                                                                   // 8980\n\t\tprev: 'circle-triangle-w',                                                                                           // 8981\n\t\tnext: 'circle-triangle-e',                                                                                           // 8982\n\t\tprevYear: 'seek-prev',                                                                                               // 8983\n\t\tnextYear: 'seek-next'                                                                                                // 8984\n\t},                                                                                                                    // 8985\n                                                                                                                       // 8986\n\t//eventResizableFromStart: false,                                                                                     // 8987\n\tdragOpacity: .75,                                                                                                     // 8988\n\tdragRevertDuration: 500,                                                                                              // 8989\n\tdragScroll: true,                                                                                                     // 8990\n\t                                                                                                                      // 8991\n\t//selectable: false,                                                                                                  // 8992\n\tunselectAuto: true,                                                                                                   // 8993\n\t                                                                                                                      // 8994\n\tdropAccept: '*',                                                                                                      // 8995\n                                                                                                                       // 8996\n\teventOrder: 'title',                                                                                                  // 8997\n                                                                                                                       // 8998\n\teventLimit: false,                                                                                                    // 8999\n\teventLimitText: 'more',                                                                                               // 9000\n\teventLimitClick: 'popover',                                                                                           // 9001\n\tdayPopoverFormat: 'LL',                                                                                               // 9002\n\t                                                                                                                      // 9003\n\thandleWindowResize: true,                                                                                             // 9004\n\twindowResizeDelay: 200 // milliseconds before an updateSize happens                                                   // 9005\n\t                                                                                                                      // 9006\n};                                                                                                                     // 9007\n                                                                                                                       // 9008\n                                                                                                                       // 9009\nCalendar.englishDefaults = { // used by lang.js                                                                        // 9010\n\tdayPopoverFormat: 'dddd, MMMM D'                                                                                      // 9011\n};                                                                                                                     // 9012\n                                                                                                                       // 9013\n                                                                                                                       // 9014\nCalendar.rtlDefaults = { // right-to-left defaults                                                                     // 9015\n\theader: { // TODO: smarter solution (first/center/last ?)                                                             // 9016\n\t\tleft: 'next,prev today',                                                                                             // 9017\n\t\tcenter: '',                                                                                                          // 9018\n\t\tright: 'title'                                                                                                       // 9019\n\t},                                                                                                                    // 9020\n\tbuttonIcons: {                                                                                                        // 9021\n\t\tprev: 'right-single-arrow',                                                                                          // 9022\n\t\tnext: 'left-single-arrow',                                                                                           // 9023\n\t\tprevYear: 'right-double-arrow',                                                                                      // 9024\n\t\tnextYear: 'left-double-arrow'                                                                                        // 9025\n\t},                                                                                                                    // 9026\n\tthemeButtonIcons: {                                                                                                   // 9027\n\t\tprev: 'circle-triangle-e',                                                                                           // 9028\n\t\tnext: 'circle-triangle-w',                                                                                           // 9029\n\t\tnextYear: 'seek-prev',                                                                                               // 9030\n\t\tprevYear: 'seek-next'                                                                                                // 9031\n\t}                                                                                                                     // 9032\n};                                                                                                                     // 9033\n                                                                                                                       // 9034\n;;                                                                                                                     // 9035\n                                                                                                                       // 9036\nvar langOptionHash = FC.langs = {}; // initialize and expose                                                           // 9037\n                                                                                                                       // 9038\n                                                                                                                       // 9039\n// TODO: document the structure and ordering of a FullCalendar lang file                                               // 9040\n// TODO: rename everything \"lang\" to \"locale\", like what the moment project did                                        // 9041\n                                                                                                                       // 9042\n                                                                                                                       // 9043\n// Initialize jQuery UI datepicker translations while using some of the translations                                   // 9044\n// Will set this as the default language for datepicker.                                                               // 9045\nFC.datepickerLang = function(langCode, dpLangCode, dpOptions) {                                                        // 9046\n                                                                                                                       // 9047\n\t// get the FullCalendar internal option hash for this language. create if necessary                                   // 9048\n\tvar fcOptions = langOptionHash[langCode] || (langOptionHash[langCode] = {});                                          // 9049\n                                                                                                                       // 9050\n\t// transfer some simple options from datepicker to fc                                                                 // 9051\n\tfcOptions.isRTL = dpOptions.isRTL;                                                                                    // 9052\n\tfcOptions.weekNumberTitle = dpOptions.weekHeader;                                                                     // 9053\n                                                                                                                       // 9054\n\t// compute some more complex options from datepicker                                                                  // 9055\n\t$.each(dpComputableOptions, function(name, func) {                                                                    // 9056\n\t\tfcOptions[name] = func(dpOptions);                                                                                   // 9057\n\t});                                                                                                                   // 9058\n                                                                                                                       // 9059\n\t// is jQuery UI Datepicker is on the page?                                                                            // 9060\n\tif ($.datepicker) {                                                                                                   // 9061\n                                                                                                                       // 9062\n\t\t// Register the language data.                                                                                       // 9063\n\t\t// FullCalendar and MomentJS use language codes like \"pt-br\" but Datepicker                                          // 9064\n\t\t// does it like \"pt-BR\" or if it doesn't have the language, maybe just \"pt\".                                         // 9065\n\t\t// Make an alias so the language can be referenced either way.                                                       // 9066\n\t\t$.datepicker.regional[dpLangCode] =                                                                                  // 9067\n\t\t\t$.datepicker.regional[langCode] = // alias                                                                          // 9068\n\t\t\t\tdpOptions;                                                                                                         // 9069\n                                                                                                                       // 9070\n\t\t// Alias 'en' to the default language data. Do this every time.                                                      // 9071\n\t\t$.datepicker.regional.en = $.datepicker.regional[''];                                                                // 9072\n                                                                                                                       // 9073\n\t\t// Set as Datepicker's global defaults.                                                                              // 9074\n\t\t$.datepicker.setDefaults(dpOptions);                                                                                 // 9075\n\t}                                                                                                                     // 9076\n};                                                                                                                     // 9077\n                                                                                                                       // 9078\n                                                                                                                       // 9079\n// Sets FullCalendar-specific translations. Will set the language as the global default.                               // 9080\nFC.lang = function(langCode, newFcOptions) {                                                                           // 9081\n\tvar fcOptions;                                                                                                        // 9082\n\tvar momOptions;                                                                                                       // 9083\n                                                                                                                       // 9084\n\t// get the FullCalendar internal option hash for this language. create if necessary                                   // 9085\n\tfcOptions = langOptionHash[langCode] || (langOptionHash[langCode] = {});                                              // 9086\n                                                                                                                       // 9087\n\t// provided new options for this language? merge them in                                                              // 9088\n\tif (newFcOptions) {                                                                                                   // 9089\n\t\tfcOptions = langOptionHash[langCode] = mergeOptions([ fcOptions, newFcOptions ]);                                    // 9090\n\t}                                                                                                                     // 9091\n                                                                                                                       // 9092\n\t// compute language options that weren't defined.                                                                     // 9093\n\t// always do this. newFcOptions can be undefined when initializing from i18n file,                                    // 9094\n\t// so no way to tell if this is an initialization or a default-setting.                                               // 9095\n\tmomOptions = getMomentLocaleData(langCode); // will fall back to en                                                   // 9096\n\t$.each(momComputableOptions, function(name, func) {                                                                   // 9097\n\t\tif (fcOptions[name] == null) {                                                                                       // 9098\n\t\t\tfcOptions[name] = func(momOptions, fcOptions);                                                                      // 9099\n\t\t}                                                                                                                    // 9100\n\t});                                                                                                                   // 9101\n                                                                                                                       // 9102\n\t// set it as the default language for FullCalendar                                                                    // 9103\n\tCalendar.defaults.lang = langCode;                                                                                    // 9104\n};                                                                                                                     // 9105\n                                                                                                                       // 9106\n                                                                                                                       // 9107\n// NOTE: can't guarantee any of these computations will run because not every language has datepicker                  // 9108\n// configs, so make sure there are English fallbacks for these in the defaults file.                                   // 9109\nvar dpComputableOptions = {                                                                                            // 9110\n                                                                                                                       // 9111\n\tbuttonText: function(dpOptions) {                                                                                     // 9112\n\t\treturn {                                                                                                             // 9113\n\t\t\t// the translations sometimes wrongly contain HTML entities                                                         // 9114\n\t\t\tprev: stripHtmlEntities(dpOptions.prevText),                                                                        // 9115\n\t\t\tnext: stripHtmlEntities(dpOptions.nextText),                                                                        // 9116\n\t\t\ttoday: stripHtmlEntities(dpOptions.currentText)                                                                     // 9117\n\t\t};                                                                                                                   // 9118\n\t},                                                                                                                    // 9119\n                                                                                                                       // 9120\n\t// Produces format strings like \"MMMM YYYY\" -> \"September 2014\"                                                       // 9121\n\tmonthYearFormat: function(dpOptions) {                                                                                // 9122\n\t\treturn dpOptions.showMonthAfterYear ?                                                                                // 9123\n\t\t\t'YYYY[' + dpOptions.yearSuffix + '] MMMM' :                                                                         // 9124\n\t\t\t'MMMM YYYY[' + dpOptions.yearSuffix + ']';                                                                          // 9125\n\t}                                                                                                                     // 9126\n                                                                                                                       // 9127\n};                                                                                                                     // 9128\n                                                                                                                       // 9129\nvar momComputableOptions = {                                                                                           // 9130\n                                                                                                                       // 9131\n\t// Produces format strings like \"ddd M/D\" -> \"Fri 9/15\"                                                               // 9132\n\tdayOfMonthFormat: function(momOptions, fcOptions) {                                                                   // 9133\n\t\tvar format = momOptions.longDateFormat('l'); // for the format like \"M/D/YYYY\"                                       // 9134\n                                                                                                                       // 9135\n\t\t// strip the year off the edge, as well as other misc non-whitespace chars                                           // 9136\n\t\tformat = format.replace(/^Y+[^\\w\\s]*|[^\\w\\s]*Y+$/g, '');                                                             // 9137\n                                                                                                                       // 9138\n\t\tif (fcOptions.isRTL) {                                                                                               // 9139\n\t\t\tformat += ' ddd'; // for RTL, add day-of-week to end                                                                // 9140\n\t\t}                                                                                                                    // 9141\n\t\telse {                                                                                                               // 9142\n\t\t\tformat = 'ddd ' + format; // for LTR, add day-of-week to beginning                                                  // 9143\n\t\t}                                                                                                                    // 9144\n\t\treturn format;                                                                                                       // 9145\n\t},                                                                                                                    // 9146\n                                                                                                                       // 9147\n\t// Produces format strings like \"h:mma\" -> \"6:00pm\"                                                                   // 9148\n\tmediumTimeFormat: function(momOptions) { // can't be called `timeFormat` because collides with option                 // 9149\n\t\treturn momOptions.longDateFormat('LT')                                                                               // 9150\n\t\t\t.replace(/\\s*a$/i, 'a'); // convert AM/PM/am/pm to lowercase. remove any spaces beforehand                          // 9151\n\t},                                                                                                                    // 9152\n                                                                                                                       // 9153\n\t// Produces format strings like \"h(:mm)a\" -> \"6pm\" / \"6:30pm\"                                                         // 9154\n\tsmallTimeFormat: function(momOptions) {                                                                               // 9155\n\t\treturn momOptions.longDateFormat('LT')                                                                               // 9156\n\t\t\t.replace(':mm', '(:mm)')                                                                                            // 9157\n\t\t\t.replace(/(\\Wmm)$/, '($1)') // like above, but for foreign langs                                                    // 9158\n\t\t\t.replace(/\\s*a$/i, 'a'); // convert AM/PM/am/pm to lowercase. remove any spaces beforehand                          // 9159\n\t},                                                                                                                    // 9160\n                                                                                                                       // 9161\n\t// Produces format strings like \"h(:mm)t\" -> \"6p\" / \"6:30p\"                                                           // 9162\n\textraSmallTimeFormat: function(momOptions) {                                                                          // 9163\n\t\treturn momOptions.longDateFormat('LT')                                                                               // 9164\n\t\t\t.replace(':mm', '(:mm)')                                                                                            // 9165\n\t\t\t.replace(/(\\Wmm)$/, '($1)') // like above, but for foreign langs                                                    // 9166\n\t\t\t.replace(/\\s*a$/i, 't'); // convert to AM/PM/am/pm to lowercase one-letter. remove any spaces beforehand            // 9167\n\t},                                                                                                                    // 9168\n                                                                                                                       // 9169\n\t// Produces format strings like \"ha\" / \"H\" -> \"6pm\" / \"18\"                                                            // 9170\n\thourFormat: function(momOptions) {                                                                                    // 9171\n\t\treturn momOptions.longDateFormat('LT')                                                                               // 9172\n\t\t\t.replace(':mm', '')                                                                                                 // 9173\n\t\t\t.replace(/(\\Wmm)$/, '') // like above, but for foreign langs                                                        // 9174\n\t\t\t.replace(/\\s*a$/i, 'a'); // convert AM/PM/am/pm to lowercase. remove any spaces beforehand                          // 9175\n\t},                                                                                                                    // 9176\n                                                                                                                       // 9177\n\t// Produces format strings like \"h:mm\" -> \"6:30\" (with no AM/PM)                                                      // 9178\n\tnoMeridiemTimeFormat: function(momOptions) {                                                                          // 9179\n\t\treturn momOptions.longDateFormat('LT')                                                                               // 9180\n\t\t\t.replace(/\\s*a$/i, ''); // remove trailing AM/PM                                                                    // 9181\n\t}                                                                                                                     // 9182\n                                                                                                                       // 9183\n};                                                                                                                     // 9184\n                                                                                                                       // 9185\n                                                                                                                       // 9186\n// options that should be computed off live calendar options (considers override options)                              // 9187\n// TODO: best place for this? related to lang?                                                                         // 9188\n// TODO: flipping text based on isRTL is a bad idea because the CSS `direction` might want to handle it                // 9189\nvar instanceComputableOptions = {                                                                                      // 9190\n                                                                                                                       // 9191\n\t// Produces format strings for results like \"Mo 16\"                                                                   // 9192\n\tsmallDayDateFormat: function(options) {                                                                               // 9193\n\t\treturn options.isRTL ?                                                                                               // 9194\n\t\t\t'D dd' :                                                                                                            // 9195\n\t\t\t'dd D';                                                                                                             // 9196\n\t},                                                                                                                    // 9197\n                                                                                                                       // 9198\n\t// Produces format strings for results like \"Wk 5\"                                                                    // 9199\n\tweekFormat: function(options) {                                                                                       // 9200\n\t\treturn options.isRTL ?                                                                                               // 9201\n\t\t\t'w[ ' + options.weekNumberTitle + ']' :                                                                             // 9202\n\t\t\t'[' + options.weekNumberTitle + ' ]w';                                                                              // 9203\n\t},                                                                                                                    // 9204\n                                                                                                                       // 9205\n\t// Produces format strings for results like \"Wk5\"                                                                     // 9206\n\tsmallWeekFormat: function(options) {                                                                                  // 9207\n\t\treturn options.isRTL ?                                                                                               // 9208\n\t\t\t'w[' + options.weekNumberTitle + ']' :                                                                              // 9209\n\t\t\t'[' + options.weekNumberTitle + ']w';                                                                               // 9210\n\t}                                                                                                                     // 9211\n                                                                                                                       // 9212\n};                                                                                                                     // 9213\n                                                                                                                       // 9214\nfunction populateInstanceComputableOptions(options) {                                                                  // 9215\n\t$.each(instanceComputableOptions, function(name, func) {                                                              // 9216\n\t\tif (options[name] == null) {                                                                                         // 9217\n\t\t\toptions[name] = func(options);                                                                                      // 9218\n\t\t}                                                                                                                    // 9219\n\t});                                                                                                                   // 9220\n}                                                                                                                      // 9221\n                                                                                                                       // 9222\n                                                                                                                       // 9223\n// Returns moment's internal locale data. If doesn't exist, returns English.                                           // 9224\n// Works with moment-pre-2.8                                                                                           // 9225\nfunction getMomentLocaleData(langCode) {                                                                               // 9226\n\tvar func = moment.localeData || moment.langData;                                                                      // 9227\n\treturn func.call(moment, langCode) ||                                                                                 // 9228\n\t\tfunc.call(moment, 'en'); // the newer localData could return null, so fall back to en                                // 9229\n}                                                                                                                      // 9230\n                                                                                                                       // 9231\n                                                                                                                       // 9232\n// Initialize English by forcing computation of moment-derived options.                                                // 9233\n// Also, sets it as the default.                                                                                       // 9234\nFC.lang('en', Calendar.englishDefaults);                                                                               // 9235\n                                                                                                                       // 9236\n;;                                                                                                                     // 9237\n                                                                                                                       // 9238\n/* Top toolbar area with buttons and title                                                                             // 9239\n----------------------------------------------------------------------------------------------------------------------*/\n// TODO: rename all header-related things to \"toolbar\"                                                                 // 9241\n                                                                                                                       // 9242\nfunction Header(calendar, options) {                                                                                   // 9243\n\tvar t = this;                                                                                                         // 9244\n\t                                                                                                                      // 9245\n\t// exports                                                                                                            // 9246\n\tt.render = render;                                                                                                    // 9247\n\tt.removeElement = removeElement;                                                                                      // 9248\n\tt.updateTitle = updateTitle;                                                                                          // 9249\n\tt.activateButton = activateButton;                                                                                    // 9250\n\tt.deactivateButton = deactivateButton;                                                                                // 9251\n\tt.disableButton = disableButton;                                                                                      // 9252\n\tt.enableButton = enableButton;                                                                                        // 9253\n\tt.getViewsWithButtons = getViewsWithButtons;                                                                          // 9254\n\t                                                                                                                      // 9255\n\t// locals                                                                                                             // 9256\n\tvar el = $();                                                                                                         // 9257\n\tvar viewsWithButtons = [];                                                                                            // 9258\n\tvar tm;                                                                                                               // 9259\n                                                                                                                       // 9260\n                                                                                                                       // 9261\n\tfunction render() {                                                                                                   // 9262\n\t\tvar sections = options.header;                                                                                       // 9263\n                                                                                                                       // 9264\n\t\ttm = options.theme ? 'ui' : 'fc';                                                                                    // 9265\n                                                                                                                       // 9266\n\t\tif (sections) {                                                                                                      // 9267\n\t\t\tel = $(\"<div class='fc-toolbar'/>\")                                                                                 // 9268\n\t\t\t\t.append(renderSection('left'))                                                                                     // 9269\n\t\t\t\t.append(renderSection('right'))                                                                                    // 9270\n\t\t\t\t.append(renderSection('center'))                                                                                   // 9271\n\t\t\t\t.append('<div class=\"fc-clear\"/>');                                                                                // 9272\n                                                                                                                       // 9273\n\t\t\treturn el;                                                                                                          // 9274\n\t\t}                                                                                                                    // 9275\n\t}                                                                                                                     // 9276\n\t                                                                                                                      // 9277\n\t                                                                                                                      // 9278\n\tfunction removeElement() {                                                                                            // 9279\n\t\tel.remove();                                                                                                         // 9280\n\t\tel = $();                                                                                                            // 9281\n\t}                                                                                                                     // 9282\n\t                                                                                                                      // 9283\n\t                                                                                                                      // 9284\n\tfunction renderSection(position) {                                                                                    // 9285\n\t\tvar sectionEl = $('<div class=\"fc-' + position + '\"/>');                                                             // 9286\n\t\tvar buttonStr = options.header[position];                                                                            // 9287\n                                                                                                                       // 9288\n\t\tif (buttonStr) {                                                                                                     // 9289\n\t\t\t$.each(buttonStr.split(' '), function(i) {                                                                          // 9290\n\t\t\t\tvar groupChildren = $();                                                                                           // 9291\n\t\t\t\tvar isOnlyButtons = true;                                                                                          // 9292\n\t\t\t\tvar groupEl;                                                                                                       // 9293\n                                                                                                                       // 9294\n\t\t\t\t$.each(this.split(','), function(j, buttonName) {                                                                  // 9295\n\t\t\t\t\tvar customButtonProps;                                                                                            // 9296\n\t\t\t\t\tvar viewSpec;                                                                                                     // 9297\n\t\t\t\t\tvar buttonClick;                                                                                                  // 9298\n\t\t\t\t\tvar overrideText; // text explicitly set by calendar's constructor options. overcomes icons                       // 9299\n\t\t\t\t\tvar defaultText;                                                                                                  // 9300\n\t\t\t\t\tvar themeIcon;                                                                                                    // 9301\n\t\t\t\t\tvar normalIcon;                                                                                                   // 9302\n\t\t\t\t\tvar innerHtml;                                                                                                    // 9303\n\t\t\t\t\tvar classes;                                                                                                      // 9304\n\t\t\t\t\tvar button; // the element                                                                                        // 9305\n                                                                                                                       // 9306\n\t\t\t\t\tif (buttonName == 'title') {                                                                                      // 9307\n\t\t\t\t\t\tgroupChildren = groupChildren.add($('<h2>&nbsp;</h2>')); // we always want it to take up height                  // 9308\n\t\t\t\t\t\tisOnlyButtons = false;                                                                                           // 9309\n\t\t\t\t\t}                                                                                                                 // 9310\n\t\t\t\t\telse {                                                                                                            // 9311\n\t\t\t\t\t\tif ((customButtonProps = (calendar.options.customButtons || {})[buttonName])) {                                  // 9312\n\t\t\t\t\t\t\tbuttonClick = function(ev) {                                                                                    // 9313\n\t\t\t\t\t\t\t\tif (customButtonProps.click) {                                                                                 // 9314\n\t\t\t\t\t\t\t\t\tcustomButtonProps.click.call(button[0], ev);                                                                  // 9315\n\t\t\t\t\t\t\t\t}                                                                                                              // 9316\n\t\t\t\t\t\t\t};                                                                                                              // 9317\n\t\t\t\t\t\t\toverrideText = ''; // icons will override text                                                                  // 9318\n\t\t\t\t\t\t\tdefaultText = customButtonProps.text;                                                                           // 9319\n\t\t\t\t\t\t}                                                                                                                // 9320\n\t\t\t\t\t\telse if ((viewSpec = calendar.getViewSpec(buttonName))) {                                                        // 9321\n\t\t\t\t\t\t\tbuttonClick = function() {                                                                                      // 9322\n\t\t\t\t\t\t\t\tcalendar.changeView(buttonName);                                                                               // 9323\n\t\t\t\t\t\t\t};                                                                                                              // 9324\n\t\t\t\t\t\t\tviewsWithButtons.push(buttonName);                                                                              // 9325\n\t\t\t\t\t\t\toverrideText = viewSpec.buttonTextOverride;                                                                     // 9326\n\t\t\t\t\t\t\tdefaultText = viewSpec.buttonTextDefault;                                                                       // 9327\n\t\t\t\t\t\t}                                                                                                                // 9328\n\t\t\t\t\t\telse if (calendar[buttonName]) { // a calendar method                                                            // 9329\n\t\t\t\t\t\t\tbuttonClick = function() {                                                                                      // 9330\n\t\t\t\t\t\t\t\tcalendar[buttonName]();                                                                                        // 9331\n\t\t\t\t\t\t\t};                                                                                                              // 9332\n\t\t\t\t\t\t\toverrideText = (calendar.overrides.buttonText || {})[buttonName];                                               // 9333\n\t\t\t\t\t\t\tdefaultText = options.buttonText[buttonName]; // everything else is considered default                          // 9334\n\t\t\t\t\t\t}                                                                                                                // 9335\n                                                                                                                       // 9336\n\t\t\t\t\t\tif (buttonClick) {                                                                                               // 9337\n                                                                                                                       // 9338\n\t\t\t\t\t\t\tthemeIcon =                                                                                                     // 9339\n\t\t\t\t\t\t\t\tcustomButtonProps ?                                                                                            // 9340\n\t\t\t\t\t\t\t\t\tcustomButtonProps.themeIcon :                                                                                 // 9341\n\t\t\t\t\t\t\t\t\toptions.themeButtonIcons[buttonName];                                                                         // 9342\n                                                                                                                       // 9343\n\t\t\t\t\t\t\tnormalIcon =                                                                                                    // 9344\n\t\t\t\t\t\t\t\tcustomButtonProps ?                                                                                            // 9345\n\t\t\t\t\t\t\t\t\tcustomButtonProps.icon :                                                                                      // 9346\n\t\t\t\t\t\t\t\t\toptions.buttonIcons[buttonName];                                                                              // 9347\n                                                                                                                       // 9348\n\t\t\t\t\t\t\tif (overrideText) {                                                                                             // 9349\n\t\t\t\t\t\t\t\tinnerHtml = htmlEscape(overrideText);                                                                          // 9350\n\t\t\t\t\t\t\t}                                                                                                               // 9351\n\t\t\t\t\t\t\telse if (themeIcon && options.theme) {                                                                          // 9352\n\t\t\t\t\t\t\t\tinnerHtml = \"<span class='ui-icon ui-icon-\" + themeIcon + \"'></span>\";                                         // 9353\n\t\t\t\t\t\t\t}                                                                                                               // 9354\n\t\t\t\t\t\t\telse if (normalIcon && !options.theme) {                                                                        // 9355\n\t\t\t\t\t\t\t\tinnerHtml = \"<span class='fc-icon fc-icon-\" + normalIcon + \"'></span>\";                                        // 9356\n\t\t\t\t\t\t\t}                                                                                                               // 9357\n\t\t\t\t\t\t\telse {                                                                                                          // 9358\n\t\t\t\t\t\t\t\tinnerHtml = htmlEscape(defaultText);                                                                           // 9359\n\t\t\t\t\t\t\t}                                                                                                               // 9360\n                                                                                                                       // 9361\n\t\t\t\t\t\t\tclasses = [                                                                                                     // 9362\n\t\t\t\t\t\t\t\t'fc-' + buttonName + '-button',                                                                                // 9363\n\t\t\t\t\t\t\t\ttm + '-button',                                                                                                // 9364\n\t\t\t\t\t\t\t\ttm + '-state-default'                                                                                          // 9365\n\t\t\t\t\t\t\t];                                                                                                              // 9366\n                                                                                                                       // 9367\n\t\t\t\t\t\t\tbutton = $( // type=\"button\" so that it doesn't submit a form                                                   // 9368\n\t\t\t\t\t\t\t\t'<button type=\"button\" class=\"' + classes.join(' ') + '\">' +                                                   // 9369\n\t\t\t\t\t\t\t\t\tinnerHtml +                                                                                                   // 9370\n\t\t\t\t\t\t\t\t'</button>'                                                                                                    // 9371\n\t\t\t\t\t\t\t\t)                                                                                                              // 9372\n\t\t\t\t\t\t\t\t.click(function(ev) {                                                                                          // 9373\n\t\t\t\t\t\t\t\t\t// don't process clicks for disabled buttons                                                                  // 9374\n\t\t\t\t\t\t\t\t\tif (!button.hasClass(tm + '-state-disabled')) {                                                               // 9375\n                                                                                                                       // 9376\n\t\t\t\t\t\t\t\t\t\tbuttonClick(ev);                                                                                             // 9377\n                                                                                                                       // 9378\n\t\t\t\t\t\t\t\t\t\t// after the click action, if the button becomes the \"active\" tab, or disabled,                              // 9379\n\t\t\t\t\t\t\t\t\t\t// it should never have a hover class, so remove it now.                                                     // 9380\n\t\t\t\t\t\t\t\t\t\tif (                                                                                                         // 9381\n\t\t\t\t\t\t\t\t\t\t\tbutton.hasClass(tm + '-state-active') ||                                                                    // 9382\n\t\t\t\t\t\t\t\t\t\t\tbutton.hasClass(tm + '-state-disabled')                                                                     // 9383\n\t\t\t\t\t\t\t\t\t\t) {                                                                                                          // 9384\n\t\t\t\t\t\t\t\t\t\t\tbutton.removeClass(tm + '-state-hover');                                                                    // 9385\n\t\t\t\t\t\t\t\t\t\t}                                                                                                            // 9386\n\t\t\t\t\t\t\t\t\t}                                                                                                             // 9387\n\t\t\t\t\t\t\t\t})                                                                                                             // 9388\n\t\t\t\t\t\t\t\t.mousedown(function() {                                                                                        // 9389\n\t\t\t\t\t\t\t\t\t// the *down* effect (mouse pressed in).                                                                      // 9390\n\t\t\t\t\t\t\t\t\t// only on buttons that are not the \"active\" tab, or disabled                                                 // 9391\n\t\t\t\t\t\t\t\t\tbutton                                                                                                        // 9392\n\t\t\t\t\t\t\t\t\t\t.not('.' + tm + '-state-active')                                                                             // 9393\n\t\t\t\t\t\t\t\t\t\t.not('.' + tm + '-state-disabled')                                                                           // 9394\n\t\t\t\t\t\t\t\t\t\t.addClass(tm + '-state-down');                                                                               // 9395\n\t\t\t\t\t\t\t\t})                                                                                                             // 9396\n\t\t\t\t\t\t\t\t.mouseup(function() {                                                                                          // 9397\n\t\t\t\t\t\t\t\t\t// undo the *down* effect                                                                                     // 9398\n\t\t\t\t\t\t\t\t\tbutton.removeClass(tm + '-state-down');                                                                       // 9399\n\t\t\t\t\t\t\t\t})                                                                                                             // 9400\n\t\t\t\t\t\t\t\t.hover(                                                                                                        // 9401\n\t\t\t\t\t\t\t\t\tfunction() {                                                                                                  // 9402\n\t\t\t\t\t\t\t\t\t\t// the *hover* effect.                                                                                       // 9403\n\t\t\t\t\t\t\t\t\t\t// only on buttons that are not the \"active\" tab, or disabled                                                // 9404\n\t\t\t\t\t\t\t\t\t\tbutton                                                                                                       // 9405\n\t\t\t\t\t\t\t\t\t\t\t.not('.' + tm + '-state-active')                                                                            // 9406\n\t\t\t\t\t\t\t\t\t\t\t.not('.' + tm + '-state-disabled')                                                                          // 9407\n\t\t\t\t\t\t\t\t\t\t\t.addClass(tm + '-state-hover');                                                                             // 9408\n\t\t\t\t\t\t\t\t\t},                                                                                                            // 9409\n\t\t\t\t\t\t\t\t\tfunction() {                                                                                                  // 9410\n\t\t\t\t\t\t\t\t\t\t// undo the *hover* effect                                                                                   // 9411\n\t\t\t\t\t\t\t\t\t\tbutton                                                                                                       // 9412\n\t\t\t\t\t\t\t\t\t\t\t.removeClass(tm + '-state-hover')                                                                           // 9413\n\t\t\t\t\t\t\t\t\t\t\t.removeClass(tm + '-state-down'); // if mouseleave happens before mouseup                                   // 9414\n\t\t\t\t\t\t\t\t\t}                                                                                                             // 9415\n\t\t\t\t\t\t\t\t);                                                                                                             // 9416\n                                                                                                                       // 9417\n\t\t\t\t\t\t\tgroupChildren = groupChildren.add(button);                                                                      // 9418\n\t\t\t\t\t\t}                                                                                                                // 9419\n\t\t\t\t\t}                                                                                                                 // 9420\n\t\t\t\t});                                                                                                                // 9421\n                                                                                                                       // 9422\n\t\t\t\tif (isOnlyButtons) {                                                                                               // 9423\n\t\t\t\t\tgroupChildren                                                                                                     // 9424\n\t\t\t\t\t\t.first().addClass(tm + '-corner-left').end()                                                                     // 9425\n\t\t\t\t\t\t.last().addClass(tm + '-corner-right').end();                                                                    // 9426\n\t\t\t\t}                                                                                                                  // 9427\n                                                                                                                       // 9428\n\t\t\t\tif (groupChildren.length > 1) {                                                                                    // 9429\n\t\t\t\t\tgroupEl = $('<div/>');                                                                                            // 9430\n\t\t\t\t\tif (isOnlyButtons) {                                                                                              // 9431\n\t\t\t\t\t\tgroupEl.addClass('fc-button-group');                                                                             // 9432\n\t\t\t\t\t}                                                                                                                 // 9433\n\t\t\t\t\tgroupEl.append(groupChildren);                                                                                    // 9434\n\t\t\t\t\tsectionEl.append(groupEl);                                                                                        // 9435\n\t\t\t\t}                                                                                                                  // 9436\n\t\t\t\telse {                                                                                                             // 9437\n\t\t\t\t\tsectionEl.append(groupChildren); // 1 or 0 children                                                               // 9438\n\t\t\t\t}                                                                                                                  // 9439\n\t\t\t});                                                                                                                 // 9440\n\t\t}                                                                                                                    // 9441\n                                                                                                                       // 9442\n\t\treturn sectionEl;                                                                                                    // 9443\n\t}                                                                                                                     // 9444\n\t                                                                                                                      // 9445\n\t                                                                                                                      // 9446\n\tfunction updateTitle(text) {                                                                                          // 9447\n\t\tel.find('h2').text(text);                                                                                            // 9448\n\t}                                                                                                                     // 9449\n\t                                                                                                                      // 9450\n\t                                                                                                                      // 9451\n\tfunction activateButton(buttonName) {                                                                                 // 9452\n\t\tel.find('.fc-' + buttonName + '-button')                                                                             // 9453\n\t\t\t.addClass(tm + '-state-active');                                                                                    // 9454\n\t}                                                                                                                     // 9455\n\t                                                                                                                      // 9456\n\t                                                                                                                      // 9457\n\tfunction deactivateButton(buttonName) {                                                                               // 9458\n\t\tel.find('.fc-' + buttonName + '-button')                                                                             // 9459\n\t\t\t.removeClass(tm + '-state-active');                                                                                 // 9460\n\t}                                                                                                                     // 9461\n\t                                                                                                                      // 9462\n\t                                                                                                                      // 9463\n\tfunction disableButton(buttonName) {                                                                                  // 9464\n\t\tel.find('.fc-' + buttonName + '-button')                                                                             // 9465\n\t\t\t.attr('disabled', 'disabled')                                                                                       // 9466\n\t\t\t.addClass(tm + '-state-disabled');                                                                                  // 9467\n\t}                                                                                                                     // 9468\n\t                                                                                                                      // 9469\n\t                                                                                                                      // 9470\n\tfunction enableButton(buttonName) {                                                                                   // 9471\n\t\tel.find('.fc-' + buttonName + '-button')                                                                             // 9472\n\t\t\t.removeAttr('disabled')                                                                                             // 9473\n\t\t\t.removeClass(tm + '-state-disabled');                                                                               // 9474\n\t}                                                                                                                     // 9475\n                                                                                                                       // 9476\n                                                                                                                       // 9477\n\tfunction getViewsWithButtons() {                                                                                      // 9478\n\t\treturn viewsWithButtons;                                                                                             // 9479\n\t}                                                                                                                     // 9480\n                                                                                                                       // 9481\n}                                                                                                                      // 9482\n                                                                                                                       // 9483\n;;                                                                                                                     // 9484\n                                                                                                                       // 9485\nFC.sourceNormalizers = [];                                                                                             // 9486\nFC.sourceFetchers = [];                                                                                                // 9487\n                                                                                                                       // 9488\nvar ajaxDefaults = {                                                                                                   // 9489\n\tdataType: 'json',                                                                                                     // 9490\n\tcache: false                                                                                                          // 9491\n};                                                                                                                     // 9492\n                                                                                                                       // 9493\nvar eventGUID = 1;                                                                                                     // 9494\n                                                                                                                       // 9495\n                                                                                                                       // 9496\nfunction EventManager(options) { // assumed to be a calendar                                                           // 9497\n\tvar t = this;                                                                                                         // 9498\n\t                                                                                                                      // 9499\n\t                                                                                                                      // 9500\n\t// exports                                                                                                            // 9501\n\tt.isFetchNeeded = isFetchNeeded;                                                                                      // 9502\n\tt.fetchEvents = fetchEvents;                                                                                          // 9503\n\tt.addEventSource = addEventSource;                                                                                    // 9504\n\tt.removeEventSource = removeEventSource;                                                                              // 9505\n\tt.updateEvent = updateEvent;                                                                                          // 9506\n\tt.renderEvent = renderEvent;                                                                                          // 9507\n\tt.removeEvents = removeEvents;                                                                                        // 9508\n\tt.clientEvents = clientEvents;                                                                                        // 9509\n\tt.mutateEvent = mutateEvent;                                                                                          // 9510\n\tt.normalizeEventDates = normalizeEventDates;                                                                          // 9511\n\tt.normalizeEventTimes = normalizeEventTimes;                                                                          // 9512\n\t                                                                                                                      // 9513\n\t                                                                                                                      // 9514\n\t// imports                                                                                                            // 9515\n\tvar reportEvents = t.reportEvents;                                                                                    // 9516\n\t                                                                                                                      // 9517\n\t                                                                                                                      // 9518\n\t// locals                                                                                                             // 9519\n\tvar stickySource = { events: [] };                                                                                    // 9520\n\tvar sources = [ stickySource ];                                                                                       // 9521\n\tvar rangeStart, rangeEnd;                                                                                             // 9522\n\tvar currentFetchID = 0;                                                                                               // 9523\n\tvar pendingSourceCnt = 0;                                                                                             // 9524\n\tvar cache = []; // holds events that have already been expanded                                                       // 9525\n                                                                                                                       // 9526\n                                                                                                                       // 9527\n\t$.each(                                                                                                               // 9528\n\t\t(options.events ? [ options.events ] : []).concat(options.eventSources || []),                                       // 9529\n\t\tfunction(i, sourceInput) {                                                                                           // 9530\n\t\t\tvar source = buildEventSource(sourceInput);                                                                         // 9531\n\t\t\tif (source) {                                                                                                       // 9532\n\t\t\t\tsources.push(source);                                                                                              // 9533\n\t\t\t}                                                                                                                   // 9534\n\t\t}                                                                                                                    // 9535\n\t);                                                                                                                    // 9536\n\t                                                                                                                      // 9537\n\t                                                                                                                      // 9538\n\t                                                                                                                      // 9539\n\t/* Fetching                                                                                                           // 9540\n\t-----------------------------------------------------------------------------*/                                       // 9541\n                                                                                                                       // 9542\n                                                                                                                       // 9543\n\t// start and end are assumed to be unzoned                                                                            // 9544\n\tfunction isFetchNeeded(start, end) {                                                                                  // 9545\n\t\treturn !rangeStart || // nothing has been fetched yet?                                                               // 9546\n\t\t\tstart < rangeStart || end > rangeEnd; // is part of the new range outside of the old range?                         // 9547\n\t}                                                                                                                     // 9548\n\t                                                                                                                      // 9549\n\t                                                                                                                      // 9550\n\tfunction fetchEvents(start, end) {                                                                                    // 9551\n\t\trangeStart = start;                                                                                                  // 9552\n\t\trangeEnd = end;                                                                                                      // 9553\n\t\tcache = [];                                                                                                          // 9554\n\t\tvar fetchID = ++currentFetchID;                                                                                      // 9555\n\t\tvar len = sources.length;                                                                                            // 9556\n\t\tpendingSourceCnt = len;                                                                                              // 9557\n\t\tfor (var i=0; i<len; i++) {                                                                                          // 9558\n\t\t\tfetchEventSource(sources[i], fetchID);                                                                              // 9559\n\t\t}                                                                                                                    // 9560\n\t}                                                                                                                     // 9561\n\t                                                                                                                      // 9562\n\t                                                                                                                      // 9563\n\tfunction fetchEventSource(source, fetchID) {                                                                          // 9564\n\t\t_fetchEventSource(source, function(eventInputs) {                                                                    // 9565\n\t\t\tvar isArraySource = $.isArray(source.events);                                                                       // 9566\n\t\t\tvar i, eventInput;                                                                                                  // 9567\n\t\t\tvar abstractEvent;                                                                                                  // 9568\n                                                                                                                       // 9569\n\t\t\tif (fetchID == currentFetchID) {                                                                                    // 9570\n                                                                                                                       // 9571\n\t\t\t\tif (eventInputs) {                                                                                                 // 9572\n\t\t\t\t\tfor (i = 0; i < eventInputs.length; i++) {                                                                        // 9573\n\t\t\t\t\t\teventInput = eventInputs[i];                                                                                     // 9574\n                                                                                                                       // 9575\n\t\t\t\t\t\tif (isArraySource) { // array sources have already been convert to Event Objects                                 // 9576\n\t\t\t\t\t\t\tabstractEvent = eventInput;                                                                                     // 9577\n\t\t\t\t\t\t}                                                                                                                // 9578\n\t\t\t\t\t\telse {                                                                                                           // 9579\n\t\t\t\t\t\t\tabstractEvent = buildEventFromInput(eventInput, source);                                                        // 9580\n\t\t\t\t\t\t}                                                                                                                // 9581\n                                                                                                                       // 9582\n\t\t\t\t\t\tif (abstractEvent) { // not false (an invalid event)                                                             // 9583\n\t\t\t\t\t\t\tcache.push.apply(                                                                                               // 9584\n\t\t\t\t\t\t\t\tcache,                                                                                                         // 9585\n\t\t\t\t\t\t\t\texpandEvent(abstractEvent) // add individual expanded events to the cache                                      // 9586\n\t\t\t\t\t\t\t);                                                                                                              // 9587\n\t\t\t\t\t\t}                                                                                                                // 9588\n\t\t\t\t\t}                                                                                                                 // 9589\n\t\t\t\t}                                                                                                                  // 9590\n                                                                                                                       // 9591\n\t\t\t\tpendingSourceCnt--;                                                                                                // 9592\n\t\t\t\tif (!pendingSourceCnt) {                                                                                           // 9593\n\t\t\t\t\treportEvents(cache);                                                                                              // 9594\n\t\t\t\t}                                                                                                                  // 9595\n\t\t\t}                                                                                                                   // 9596\n\t\t});                                                                                                                  // 9597\n\t}                                                                                                                     // 9598\n\t                                                                                                                      // 9599\n\t                                                                                                                      // 9600\n\tfunction _fetchEventSource(source, callback) {                                                                        // 9601\n\t\tvar i;                                                                                                               // 9602\n\t\tvar fetchers = FC.sourceFetchers;                                                                                    // 9603\n\t\tvar res;                                                                                                             // 9604\n                                                                                                                       // 9605\n\t\tfor (i=0; i<fetchers.length; i++) {                                                                                  // 9606\n\t\t\tres = fetchers[i].call(                                                                                             // 9607\n\t\t\t\tt, // this, the Calendar object                                                                                    // 9608\n\t\t\t\tsource,                                                                                                            // 9609\n\t\t\t\trangeStart.clone(),                                                                                                // 9610\n\t\t\t\trangeEnd.clone(),                                                                                                  // 9611\n\t\t\t\toptions.timezone,                                                                                                  // 9612\n\t\t\t\tcallback                                                                                                           // 9613\n\t\t\t);                                                                                                                  // 9614\n                                                                                                                       // 9615\n\t\t\tif (res === true) {                                                                                                 // 9616\n\t\t\t\t// the fetcher is in charge. made its own async request                                                            // 9617\n\t\t\t\treturn;                                                                                                            // 9618\n\t\t\t}                                                                                                                   // 9619\n\t\t\telse if (typeof res == 'object') {                                                                                  // 9620\n\t\t\t\t// the fetcher returned a new source. process it                                                                   // 9621\n\t\t\t\t_fetchEventSource(res, callback);                                                                                  // 9622\n\t\t\t\treturn;                                                                                                            // 9623\n\t\t\t}                                                                                                                   // 9624\n\t\t}                                                                                                                    // 9625\n                                                                                                                       // 9626\n\t\tvar events = source.events;                                                                                          // 9627\n\t\tif (events) {                                                                                                        // 9628\n\t\t\tif ($.isFunction(events)) {                                                                                         // 9629\n\t\t\t\tt.pushLoading();                                                                                                   // 9630\n\t\t\t\tevents.call(                                                                                                       // 9631\n\t\t\t\t\tt, // this, the Calendar object                                                                                   // 9632\n\t\t\t\t\trangeStart.clone(),                                                                                               // 9633\n\t\t\t\t\trangeEnd.clone(),                                                                                                 // 9634\n\t\t\t\t\toptions.timezone,                                                                                                 // 9635\n\t\t\t\t\tfunction(events) {                                                                                                // 9636\n\t\t\t\t\t\tcallback(events);                                                                                                // 9637\n\t\t\t\t\t\tt.popLoading();                                                                                                  // 9638\n\t\t\t\t\t}                                                                                                                 // 9639\n\t\t\t\t);                                                                                                                 // 9640\n\t\t\t}                                                                                                                   // 9641\n\t\t\telse if ($.isArray(events)) {                                                                                       // 9642\n\t\t\t\tcallback(events);                                                                                                  // 9643\n\t\t\t}                                                                                                                   // 9644\n\t\t\telse {                                                                                                              // 9645\n\t\t\t\tcallback();                                                                                                        // 9646\n\t\t\t}                                                                                                                   // 9647\n\t\t}else{                                                                                                               // 9648\n\t\t\tvar url = source.url;                                                                                               // 9649\n\t\t\tif (url) {                                                                                                          // 9650\n\t\t\t\tvar success = source.success;                                                                                      // 9651\n\t\t\t\tvar error = source.error;                                                                                          // 9652\n\t\t\t\tvar complete = source.complete;                                                                                    // 9653\n                                                                                                                       // 9654\n\t\t\t\t// retrieve any outbound GET/POST $.ajax data from the options                                                     // 9655\n\t\t\t\tvar customData;                                                                                                    // 9656\n\t\t\t\tif ($.isFunction(source.data)) {                                                                                   // 9657\n\t\t\t\t\t// supplied as a function that returns a key/value object                                                         // 9658\n\t\t\t\t\tcustomData = source.data();                                                                                       // 9659\n\t\t\t\t}                                                                                                                  // 9660\n\t\t\t\telse {                                                                                                             // 9661\n\t\t\t\t\t// supplied as a straight key/value object                                                                        // 9662\n\t\t\t\t\tcustomData = source.data;                                                                                         // 9663\n\t\t\t\t}                                                                                                                  // 9664\n                                                                                                                       // 9665\n\t\t\t\t// use a copy of the custom data so we can modify the parameters                                                   // 9666\n\t\t\t\t// and not affect the passed-in object.                                                                            // 9667\n\t\t\t\tvar data = $.extend({}, customData || {});                                                                         // 9668\n                                                                                                                       // 9669\n\t\t\t\tvar startParam = firstDefined(source.startParam, options.startParam);                                              // 9670\n\t\t\t\tvar endParam = firstDefined(source.endParam, options.endParam);                                                    // 9671\n\t\t\t\tvar timezoneParam = firstDefined(source.timezoneParam, options.timezoneParam);                                     // 9672\n                                                                                                                       // 9673\n\t\t\t\tif (startParam) {                                                                                                  // 9674\n\t\t\t\t\tdata[startParam] = rangeStart.format();                                                                           // 9675\n\t\t\t\t}                                                                                                                  // 9676\n\t\t\t\tif (endParam) {                                                                                                    // 9677\n\t\t\t\t\tdata[endParam] = rangeEnd.format();                                                                               // 9678\n\t\t\t\t}                                                                                                                  // 9679\n\t\t\t\tif (options.timezone && options.timezone != 'local') {                                                             // 9680\n\t\t\t\t\tdata[timezoneParam] = options.timezone;                                                                           // 9681\n\t\t\t\t}                                                                                                                  // 9682\n                                                                                                                       // 9683\n\t\t\t\tt.pushLoading();                                                                                                   // 9684\n\t\t\t\t$.ajax($.extend({}, ajaxDefaults, source, {                                                                        // 9685\n\t\t\t\t\tdata: data,                                                                                                       // 9686\n\t\t\t\t\tsuccess: function(events) {                                                                                       // 9687\n\t\t\t\t\t\tevents = events || [];                                                                                           // 9688\n\t\t\t\t\t\tvar res = applyAll(success, this, arguments);                                                                    // 9689\n\t\t\t\t\t\tif ($.isArray(res)) {                                                                                            // 9690\n\t\t\t\t\t\t\tevents = res;                                                                                                   // 9691\n\t\t\t\t\t\t}                                                                                                                // 9692\n\t\t\t\t\t\tcallback(events);                                                                                                // 9693\n\t\t\t\t\t},                                                                                                                // 9694\n\t\t\t\t\terror: function() {                                                                                               // 9695\n\t\t\t\t\t\tapplyAll(error, this, arguments);                                                                                // 9696\n\t\t\t\t\t\tcallback();                                                                                                      // 9697\n\t\t\t\t\t},                                                                                                                // 9698\n\t\t\t\t\tcomplete: function() {                                                                                            // 9699\n\t\t\t\t\t\tapplyAll(complete, this, arguments);                                                                             // 9700\n\t\t\t\t\t\tt.popLoading();                                                                                                  // 9701\n\t\t\t\t\t}                                                                                                                 // 9702\n\t\t\t\t}));                                                                                                               // 9703\n\t\t\t}else{                                                                                                              // 9704\n\t\t\t\tcallback();                                                                                                        // 9705\n\t\t\t}                                                                                                                   // 9706\n\t\t}                                                                                                                    // 9707\n\t}                                                                                                                     // 9708\n\t                                                                                                                      // 9709\n\t                                                                                                                      // 9710\n\t                                                                                                                      // 9711\n\t/* Sources                                                                                                            // 9712\n\t-----------------------------------------------------------------------------*/                                       // 9713\n\t                                                                                                                      // 9714\n                                                                                                                       // 9715\n\tfunction addEventSource(sourceInput) {                                                                                // 9716\n\t\tvar source = buildEventSource(sourceInput);                                                                          // 9717\n\t\tif (source) {                                                                                                        // 9718\n\t\t\tsources.push(source);                                                                                               // 9719\n\t\t\tpendingSourceCnt++;                                                                                                 // 9720\n\t\t\tfetchEventSource(source, currentFetchID); // will eventually call reportEvents                                      // 9721\n\t\t}                                                                                                                    // 9722\n\t}                                                                                                                     // 9723\n                                                                                                                       // 9724\n                                                                                                                       // 9725\n\tfunction buildEventSource(sourceInput) { // will return undefined if invalid source                                   // 9726\n\t\tvar normalizers = FC.sourceNormalizers;                                                                              // 9727\n\t\tvar source;                                                                                                          // 9728\n\t\tvar i;                                                                                                               // 9729\n                                                                                                                       // 9730\n\t\tif ($.isFunction(sourceInput) || $.isArray(sourceInput)) {                                                           // 9731\n\t\t\tsource = { events: sourceInput };                                                                                   // 9732\n\t\t}                                                                                                                    // 9733\n\t\telse if (typeof sourceInput === 'string') {                                                                          // 9734\n\t\t\tsource = { url: sourceInput };                                                                                      // 9735\n\t\t}                                                                                                                    // 9736\n\t\telse if (typeof sourceInput === 'object') {                                                                          // 9737\n\t\t\tsource = $.extend({}, sourceInput); // shallow copy                                                                 // 9738\n\t\t}                                                                                                                    // 9739\n                                                                                                                       // 9740\n\t\tif (source) {                                                                                                        // 9741\n                                                                                                                       // 9742\n\t\t\t// TODO: repeat code, same code for event classNames                                                                // 9743\n\t\t\tif (source.className) {                                                                                             // 9744\n\t\t\t\tif (typeof source.className === 'string') {                                                                        // 9745\n\t\t\t\t\tsource.className = source.className.split(/\\s+/);                                                                 // 9746\n\t\t\t\t}                                                                                                                  // 9747\n\t\t\t\t// otherwise, assumed to be an array                                                                               // 9748\n\t\t\t}                                                                                                                   // 9749\n\t\t\telse {                                                                                                              // 9750\n\t\t\t\tsource.className = [];                                                                                             // 9751\n\t\t\t}                                                                                                                   // 9752\n                                                                                                                       // 9753\n\t\t\t// for array sources, we convert to standard Event Objects up front                                                 // 9754\n\t\t\tif ($.isArray(source.events)) {                                                                                     // 9755\n\t\t\t\tsource.origArray = source.events; // for removeEventSource                                                         // 9756\n\t\t\t\tsource.events = $.map(source.events, function(eventInput) {                                                        // 9757\n\t\t\t\t\treturn buildEventFromInput(eventInput, source);                                                                   // 9758\n\t\t\t\t});                                                                                                                // 9759\n\t\t\t}                                                                                                                   // 9760\n                                                                                                                       // 9761\n\t\t\tfor (i=0; i<normalizers.length; i++) {                                                                              // 9762\n\t\t\t\tnormalizers[i].call(t, source);                                                                                    // 9763\n\t\t\t}                                                                                                                   // 9764\n                                                                                                                       // 9765\n\t\t\treturn source;                                                                                                      // 9766\n\t\t}                                                                                                                    // 9767\n\t}                                                                                                                     // 9768\n                                                                                                                       // 9769\n                                                                                                                       // 9770\n\tfunction removeEventSource(source) {                                                                                  // 9771\n\t\tsources = $.grep(sources, function(src) {                                                                            // 9772\n\t\t\treturn !isSourcesEqual(src, source);                                                                                // 9773\n\t\t});                                                                                                                  // 9774\n\t\t// remove all client events from that source                                                                         // 9775\n\t\tcache = $.grep(cache, function(e) {                                                                                  // 9776\n\t\t\treturn !isSourcesEqual(e.source, source);                                                                           // 9777\n\t\t});                                                                                                                  // 9778\n\t\treportEvents(cache);                                                                                                 // 9779\n\t}                                                                                                                     // 9780\n                                                                                                                       // 9781\n                                                                                                                       // 9782\n\tfunction isSourcesEqual(source1, source2) {                                                                           // 9783\n\t\treturn source1 && source2 && getSourcePrimitive(source1) == getSourcePrimitive(source2);                             // 9784\n\t}                                                                                                                     // 9785\n                                                                                                                       // 9786\n                                                                                                                       // 9787\n\tfunction getSourcePrimitive(source) {                                                                                 // 9788\n\t\treturn (                                                                                                             // 9789\n\t\t\t(typeof source === 'object') ? // a normalized event source?                                                        // 9790\n\t\t\t\t(source.origArray || source.googleCalendarId || source.url || source.events) : // get the primitive                // 9791\n\t\t\t\tnull                                                                                                               // 9792\n\t\t) ||                                                                                                                 // 9793\n\t\tsource; // the given argument *is* the primitive                                                                     // 9794\n\t}                                                                                                                     // 9795\n\t                                                                                                                      // 9796\n\t                                                                                                                      // 9797\n\t                                                                                                                      // 9798\n\t/* Manipulation                                                                                                       // 9799\n\t-----------------------------------------------------------------------------*/                                       // 9800\n                                                                                                                       // 9801\n                                                                                                                       // 9802\n\t// Only ever called from the externally-facing API                                                                    // 9803\n\tfunction updateEvent(event) {                                                                                         // 9804\n                                                                                                                       // 9805\n\t\t// massage start/end values, even if date string values                                                              // 9806\n\t\tevent.start = t.moment(event.start);                                                                                 // 9807\n\t\tif (event.end) {                                                                                                     // 9808\n\t\t\tevent.end = t.moment(event.end);                                                                                    // 9809\n\t\t}                                                                                                                    // 9810\n\t\telse {                                                                                                               // 9811\n\t\t\tevent.end = null;                                                                                                   // 9812\n\t\t}                                                                                                                    // 9813\n                                                                                                                       // 9814\n\t\tmutateEvent(event, getMiscEventProps(event)); // will handle start/end/allDay normalization                          // 9815\n\t\treportEvents(cache); // reports event modifications (so we can redraw)                                               // 9816\n\t}                                                                                                                     // 9817\n                                                                                                                       // 9818\n                                                                                                                       // 9819\n\t// Returns a hash of misc event properties that should be copied over to related events.                              // 9820\n\tfunction getMiscEventProps(event) {                                                                                   // 9821\n\t\tvar props = {};                                                                                                      // 9822\n                                                                                                                       // 9823\n\t\t$.each(event, function(name, val) {                                                                                  // 9824\n\t\t\tif (isMiscEventPropName(name)) {                                                                                    // 9825\n\t\t\t\tif (val !== undefined && isAtomic(val)) { // a defined non-object                                                  // 9826\n\t\t\t\t\tprops[name] = val;                                                                                                // 9827\n\t\t\t\t}                                                                                                                  // 9828\n\t\t\t}                                                                                                                   // 9829\n\t\t});                                                                                                                  // 9830\n                                                                                                                       // 9831\n\t\treturn props;                                                                                                        // 9832\n\t}                                                                                                                     // 9833\n                                                                                                                       // 9834\n\t// non-date-related, non-id-related, non-secret                                                                       // 9835\n\tfunction isMiscEventPropName(name) {                                                                                  // 9836\n\t\treturn !/^_|^(id|allDay|start|end)$/.test(name);                                                                     // 9837\n\t}                                                                                                                     // 9838\n                                                                                                                       // 9839\n\t                                                                                                                      // 9840\n\t// returns the expanded events that were created                                                                      // 9841\n\tfunction renderEvent(eventInput, stick) {                                                                             // 9842\n\t\tvar abstractEvent = buildEventFromInput(eventInput);                                                                 // 9843\n\t\tvar events;                                                                                                          // 9844\n\t\tvar i, event;                                                                                                        // 9845\n                                                                                                                       // 9846\n\t\tif (abstractEvent) { // not false (a valid input)                                                                    // 9847\n\t\t\tevents = expandEvent(abstractEvent);                                                                                // 9848\n                                                                                                                       // 9849\n\t\t\tfor (i = 0; i < events.length; i++) {                                                                               // 9850\n\t\t\t\tevent = events[i];                                                                                                 // 9851\n                                                                                                                       // 9852\n\t\t\t\tif (!event.source) {                                                                                               // 9853\n\t\t\t\t\tif (stick) {                                                                                                      // 9854\n\t\t\t\t\t\tstickySource.events.push(event);                                                                                 // 9855\n\t\t\t\t\t\tevent.source = stickySource;                                                                                     // 9856\n\t\t\t\t\t}                                                                                                                 // 9857\n\t\t\t\t\tcache.push(event);                                                                                                // 9858\n\t\t\t\t}                                                                                                                  // 9859\n\t\t\t}                                                                                                                   // 9860\n                                                                                                                       // 9861\n\t\t\treportEvents(cache);                                                                                                // 9862\n                                                                                                                       // 9863\n\t\t\treturn events;                                                                                                      // 9864\n\t\t}                                                                                                                    // 9865\n                                                                                                                       // 9866\n\t\treturn [];                                                                                                           // 9867\n\t}                                                                                                                     // 9868\n\t                                                                                                                      // 9869\n\t                                                                                                                      // 9870\n\tfunction removeEvents(filter) {                                                                                       // 9871\n\t\tvar eventID;                                                                                                         // 9872\n\t\tvar i;                                                                                                               // 9873\n                                                                                                                       // 9874\n\t\tif (filter == null) { // null or undefined. remove all events                                                        // 9875\n\t\t\tfilter = function() { return true; }; // will always match                                                          // 9876\n\t\t}                                                                                                                    // 9877\n\t\telse if (!$.isFunction(filter)) { // an event ID                                                                     // 9878\n\t\t\teventID = filter + '';                                                                                              // 9879\n\t\t\tfilter = function(event) {                                                                                          // 9880\n\t\t\t\treturn event._id == eventID;                                                                                       // 9881\n\t\t\t};                                                                                                                  // 9882\n\t\t}                                                                                                                    // 9883\n                                                                                                                       // 9884\n\t\t// Purge event(s) from our local cache                                                                               // 9885\n\t\tcache = $.grep(cache, filter, true); // inverse=true                                                                 // 9886\n                                                                                                                       // 9887\n\t\t// Remove events from array sources.                                                                                 // 9888\n\t\t// This works because they have been converted to official Event Objects up front.                                   // 9889\n\t\t// (and as a result, event._id has been calculated).                                                                 // 9890\n\t\tfor (i=0; i<sources.length; i++) {                                                                                   // 9891\n\t\t\tif ($.isArray(sources[i].events)) {                                                                                 // 9892\n\t\t\t\tsources[i].events = $.grep(sources[i].events, filter, true);                                                       // 9893\n\t\t\t}                                                                                                                   // 9894\n\t\t}                                                                                                                    // 9895\n                                                                                                                       // 9896\n\t\treportEvents(cache);                                                                                                 // 9897\n\t}                                                                                                                     // 9898\n\t                                                                                                                      // 9899\n\t                                                                                                                      // 9900\n\tfunction clientEvents(filter) {                                                                                       // 9901\n\t\tif ($.isFunction(filter)) {                                                                                          // 9902\n\t\t\treturn $.grep(cache, filter);                                                                                       // 9903\n\t\t}                                                                                                                    // 9904\n\t\telse if (filter != null) { // not null, not undefined. an event ID                                                   // 9905\n\t\t\tfilter += '';                                                                                                       // 9906\n\t\t\treturn $.grep(cache, function(e) {                                                                                  // 9907\n\t\t\t\treturn e._id == filter;                                                                                            // 9908\n\t\t\t});                                                                                                                 // 9909\n\t\t}                                                                                                                    // 9910\n\t\treturn cache; // else, return all                                                                                    // 9911\n\t}                                                                                                                     // 9912\n\t                                                                                                                      // 9913\n\t                                                                                                                      // 9914\n\t                                                                                                                      // 9915\n\t/* Event Normalization                                                                                                // 9916\n\t-----------------------------------------------------------------------------*/                                       // 9917\n                                                                                                                       // 9918\n                                                                                                                       // 9919\n\t// Given a raw object with key/value properties, returns an \"abstract\" Event object.                                  // 9920\n\t// An \"abstract\" event is an event that, if recurring, will not have been expanded yet.                               // 9921\n\t// Will return `false` when input is invalid.                                                                         // 9922\n\t// `source` is optional                                                                                               // 9923\n\tfunction buildEventFromInput(input, source) {                                                                         // 9924\n\t\tvar out = {};                                                                                                        // 9925\n\t\tvar start, end;                                                                                                      // 9926\n\t\tvar allDay;                                                                                                          // 9927\n                                                                                                                       // 9928\n\t\tif (options.eventDataTransform) {                                                                                    // 9929\n\t\t\tinput = options.eventDataTransform(input);                                                                          // 9930\n\t\t}                                                                                                                    // 9931\n\t\tif (source && source.eventDataTransform) {                                                                           // 9932\n\t\t\tinput = source.eventDataTransform(input);                                                                           // 9933\n\t\t}                                                                                                                    // 9934\n                                                                                                                       // 9935\n\t\t// Copy all properties over to the resulting object.                                                                 // 9936\n\t\t// The special-case properties will be copied over afterwards.                                                       // 9937\n\t\t$.extend(out, input);                                                                                                // 9938\n                                                                                                                       // 9939\n\t\tif (source) {                                                                                                        // 9940\n\t\t\tout.source = source;                                                                                                // 9941\n\t\t}                                                                                                                    // 9942\n                                                                                                                       // 9943\n\t\tout._id = input._id || (input.id === undefined ? '_fc' + eventGUID++ : input.id + '');                               // 9944\n                                                                                                                       // 9945\n\t\tif (input.className) {                                                                                               // 9946\n\t\t\tif (typeof input.className == 'string') {                                                                           // 9947\n\t\t\t\tout.className = input.className.split(/\\s+/);                                                                      // 9948\n\t\t\t}                                                                                                                   // 9949\n\t\t\telse { // assumed to be an array                                                                                    // 9950\n\t\t\t\tout.className = input.className;                                                                                   // 9951\n\t\t\t}                                                                                                                   // 9952\n\t\t}                                                                                                                    // 9953\n\t\telse {                                                                                                               // 9954\n\t\t\tout.className = [];                                                                                                 // 9955\n\t\t}                                                                                                                    // 9956\n                                                                                                                       // 9957\n\t\tstart = input.start || input.date; // \"date\" is an alias for \"start\"                                                 // 9958\n\t\tend = input.end;                                                                                                     // 9959\n                                                                                                                       // 9960\n\t\t// parse as a time (Duration) if applicable                                                                          // 9961\n\t\tif (isTimeString(start)) {                                                                                           // 9962\n\t\t\tstart = moment.duration(start);                                                                                     // 9963\n\t\t}                                                                                                                    // 9964\n\t\tif (isTimeString(end)) {                                                                                             // 9965\n\t\t\tend = moment.duration(end);                                                                                         // 9966\n\t\t}                                                                                                                    // 9967\n                                                                                                                       // 9968\n\t\tif (input.dow || moment.isDuration(start) || moment.isDuration(end)) {                                               // 9969\n                                                                                                                       // 9970\n\t\t\t// the event is \"abstract\" (recurring) so don't calculate exact start/end dates just yet                            // 9971\n\t\t\tout.start = start ? moment.duration(start) : null; // will be a Duration or null                                    // 9972\n\t\t\tout.end = end ? moment.duration(end) : null; // will be a Duration or null                                          // 9973\n\t\t\tout._recurring = true; // our internal marker                                                                       // 9974\n\t\t}                                                                                                                    // 9975\n\t\telse {                                                                                                               // 9976\n                                                                                                                       // 9977\n\t\t\tif (start) {                                                                                                        // 9978\n\t\t\t\tstart = t.moment(start);                                                                                           // 9979\n\t\t\t\tif (!start.isValid()) {                                                                                            // 9980\n\t\t\t\t\treturn false;                                                                                                     // 9981\n\t\t\t\t}                                                                                                                  // 9982\n\t\t\t}                                                                                                                   // 9983\n                                                                                                                       // 9984\n\t\t\tif (end) {                                                                                                          // 9985\n\t\t\t\tend = t.moment(end);                                                                                               // 9986\n\t\t\t\tif (!end.isValid()) {                                                                                              // 9987\n\t\t\t\t\tend = null; // let defaults take over                                                                             // 9988\n\t\t\t\t}                                                                                                                  // 9989\n\t\t\t}                                                                                                                   // 9990\n                                                                                                                       // 9991\n\t\t\tallDay = input.allDay;                                                                                              // 9992\n\t\t\tif (allDay === undefined) { // still undefined? fallback to default                                                 // 9993\n\t\t\t\tallDay = firstDefined(                                                                                             // 9994\n\t\t\t\t\tsource ? source.allDayDefault : undefined,                                                                        // 9995\n\t\t\t\t\toptions.allDayDefault                                                                                             // 9996\n\t\t\t\t);                                                                                                                 // 9997\n\t\t\t\t// still undefined? normalizeEventDates will calculate it                                                          // 9998\n\t\t\t}                                                                                                                   // 9999\n                                                                                                                       // 10000\n\t\t\tassignDatesToEvent(start, end, allDay, out);                                                                        // 10001\n\t\t}                                                                                                                    // 10002\n                                                                                                                       // 10003\n\t\treturn out;                                                                                                          // 10004\n\t}                                                                                                                     // 10005\n                                                                                                                       // 10006\n                                                                                                                       // 10007\n\t// Normalizes and assigns the given dates to the given partially-formed event object.                                 // 10008\n\t// NOTE: mutates the given start/end moments. does not make a copy.                                                   // 10009\n\tfunction assignDatesToEvent(start, end, allDay, event) {                                                              // 10010\n\t\tevent.start = start;                                                                                                 // 10011\n\t\tevent.end = end;                                                                                                     // 10012\n\t\tevent.allDay = allDay;                                                                                               // 10013\n\t\tnormalizeEventDates(event);                                                                                          // 10014\n\t\tbackupEventDates(event);                                                                                             // 10015\n\t}                                                                                                                     // 10016\n                                                                                                                       // 10017\n                                                                                                                       // 10018\n\t// Ensures proper values for allDay/start/end. Accepts an Event object, or a plain object with event-ish properties.  // 10019\n\t// NOTE: Will modify the given object.                                                                                // 10020\n\tfunction normalizeEventDates(eventProps) {                                                                            // 10021\n                                                                                                                       // 10022\n\t\tnormalizeEventTimes(eventProps);                                                                                     // 10023\n                                                                                                                       // 10024\n\t\tif (eventProps.end && !eventProps.end.isAfter(eventProps.start)) {                                                   // 10025\n\t\t\teventProps.end = null;                                                                                              // 10026\n\t\t}                                                                                                                    // 10027\n                                                                                                                       // 10028\n\t\tif (!eventProps.end) {                                                                                               // 10029\n\t\t\tif (options.forceEventDuration) {                                                                                   // 10030\n\t\t\t\teventProps.end = t.getDefaultEventEnd(eventProps.allDay, eventProps.start);                                        // 10031\n\t\t\t}                                                                                                                   // 10032\n\t\t\telse {                                                                                                              // 10033\n\t\t\t\teventProps.end = null;                                                                                             // 10034\n\t\t\t}                                                                                                                   // 10035\n\t\t}                                                                                                                    // 10036\n\t}                                                                                                                     // 10037\n                                                                                                                       // 10038\n                                                                                                                       // 10039\n\t// Ensures the allDay property exists and the timeliness of the start/end dates are consistent                        // 10040\n\tfunction normalizeEventTimes(eventProps) {                                                                            // 10041\n\t\tif (eventProps.allDay == null) {                                                                                     // 10042\n\t\t\teventProps.allDay = !(eventProps.start.hasTime() || (eventProps.end && eventProps.end.hasTime()));                  // 10043\n\t\t}                                                                                                                    // 10044\n                                                                                                                       // 10045\n\t\tif (eventProps.allDay) {                                                                                             // 10046\n\t\t\teventProps.start.stripTime();                                                                                       // 10047\n\t\t\tif (eventProps.end) {                                                                                               // 10048\n\t\t\t\t// TODO: consider nextDayThreshold here? If so, will require a lot of testing and adjustment                       // 10049\n\t\t\t\teventProps.end.stripTime();                                                                                        // 10050\n\t\t\t}                                                                                                                   // 10051\n\t\t}                                                                                                                    // 10052\n\t\telse {                                                                                                               // 10053\n\t\t\tif (!eventProps.start.hasTime()) {                                                                                  // 10054\n\t\t\t\teventProps.start = t.applyTimezone(eventProps.start.time(0)); // will assign a 00:00 time                          // 10055\n\t\t\t}                                                                                                                   // 10056\n\t\t\tif (eventProps.end && !eventProps.end.hasTime()) {                                                                  // 10057\n\t\t\t\teventProps.end = t.applyTimezone(eventProps.end.time(0)); // will assign a 00:00 time                              // 10058\n\t\t\t}                                                                                                                   // 10059\n\t\t}                                                                                                                    // 10060\n\t}                                                                                                                     // 10061\n                                                                                                                       // 10062\n                                                                                                                       // 10063\n\t// If the given event is a recurring event, break it down into an array of individual instances.                      // 10064\n\t// If not a recurring event, return an array with the single original event.                                          // 10065\n\t// If given a falsy input (probably because of a failed buildEventFromInput call), returns an empty array.            // 10066\n\t// HACK: can override the recurring window by providing custom rangeStart/rangeEnd (for businessHours).               // 10067\n\tfunction expandEvent(abstractEvent, _rangeStart, _rangeEnd) {                                                         // 10068\n\t\tvar events = [];                                                                                                     // 10069\n\t\tvar dowHash;                                                                                                         // 10070\n\t\tvar dow;                                                                                                             // 10071\n\t\tvar i;                                                                                                               // 10072\n\t\tvar date;                                                                                                            // 10073\n\t\tvar startTime, endTime;                                                                                              // 10074\n\t\tvar start, end;                                                                                                      // 10075\n\t\tvar event;                                                                                                           // 10076\n                                                                                                                       // 10077\n\t\t_rangeStart = _rangeStart || rangeStart;                                                                             // 10078\n\t\t_rangeEnd = _rangeEnd || rangeEnd;                                                                                   // 10079\n                                                                                                                       // 10080\n\t\tif (abstractEvent) {                                                                                                 // 10081\n\t\t\tif (abstractEvent._recurring) {                                                                                     // 10082\n                                                                                                                       // 10083\n\t\t\t\t// make a boolean hash as to whether the event occurs on each day-of-week                                          // 10084\n\t\t\t\tif ((dow = abstractEvent.dow)) {                                                                                   // 10085\n\t\t\t\t\tdowHash = {};                                                                                                     // 10086\n\t\t\t\t\tfor (i = 0; i < dow.length; i++) {                                                                                // 10087\n\t\t\t\t\t\tdowHash[dow[i]] = true;                                                                                          // 10088\n\t\t\t\t\t}                                                                                                                 // 10089\n\t\t\t\t}                                                                                                                  // 10090\n                                                                                                                       // 10091\n\t\t\t\t// iterate through every day in the current range                                                                  // 10092\n\t\t\t\tdate = _rangeStart.clone().stripTime(); // holds the date of the current day                                       // 10093\n\t\t\t\twhile (date.isBefore(_rangeEnd)) {                                                                                 // 10094\n                                                                                                                       // 10095\n\t\t\t\t\tif (!dowHash || dowHash[date.day()]) { // if everyday, or this particular day-of-week                             // 10096\n                                                                                                                       // 10097\n\t\t\t\t\t\tstartTime = abstractEvent.start; // the stored start and end properties are times (Durations)                    // 10098\n\t\t\t\t\t\tendTime = abstractEvent.end; // \"                                                                                // 10099\n\t\t\t\t\t\tstart = date.clone();                                                                                            // 10100\n\t\t\t\t\t\tend = null;                                                                                                      // 10101\n                                                                                                                       // 10102\n\t\t\t\t\t\tif (startTime) {                                                                                                 // 10103\n\t\t\t\t\t\t\tstart = start.time(startTime);                                                                                  // 10104\n\t\t\t\t\t\t}                                                                                                                // 10105\n\t\t\t\t\t\tif (endTime) {                                                                                                   // 10106\n\t\t\t\t\t\t\tend = date.clone().time(endTime);                                                                               // 10107\n\t\t\t\t\t\t}                                                                                                                // 10108\n                                                                                                                       // 10109\n\t\t\t\t\t\tevent = $.extend({}, abstractEvent); // make a copy of the original                                              // 10110\n\t\t\t\t\t\tassignDatesToEvent(                                                                                              // 10111\n\t\t\t\t\t\t\tstart, end,                                                                                                     // 10112\n\t\t\t\t\t\t\t!startTime && !endTime, // allDay?                                                                              // 10113\n\t\t\t\t\t\t\tevent                                                                                                           // 10114\n\t\t\t\t\t\t);                                                                                                               // 10115\n\t\t\t\t\t\tevents.push(event);                                                                                              // 10116\n\t\t\t\t\t}                                                                                                                 // 10117\n                                                                                                                       // 10118\n\t\t\t\t\tdate.add(1, 'days');                                                                                              // 10119\n\t\t\t\t}                                                                                                                  // 10120\n\t\t\t}                                                                                                                   // 10121\n\t\t\telse {                                                                                                              // 10122\n\t\t\t\tevents.push(abstractEvent); // return the original event. will be a one-item array                                 // 10123\n\t\t\t}                                                                                                                   // 10124\n\t\t}                                                                                                                    // 10125\n                                                                                                                       // 10126\n\t\treturn events;                                                                                                       // 10127\n\t}                                                                                                                     // 10128\n                                                                                                                       // 10129\n                                                                                                                       // 10130\n                                                                                                                       // 10131\n\t/* Event Modification Math                                                                                            // 10132\n\t-----------------------------------------------------------------------------------------*/                           // 10133\n                                                                                                                       // 10134\n                                                                                                                       // 10135\n\t// Modifies an event and all related events by applying the given properties.                                         // 10136\n\t// Special date-diffing logic is used for manipulation of dates.                                                      // 10137\n\t// If `props` does not contain start/end dates, the updated values are assumed to be the event's current start/end.   // 10138\n\t// All date comparisons are done against the event's pristine _start and _end dates.                                  // 10139\n\t// Returns an object with delta information and a function to undo all operations.                                    // 10140\n\t// For making computations in a granularity greater than day/time, specify largeUnit.                                 // 10141\n\t// NOTE: The given `newProps` might be mutated for normalization purposes.                                            // 10142\n\tfunction mutateEvent(event, newProps, largeUnit) {                                                                    // 10143\n\t\tvar miscProps = {};                                                                                                  // 10144\n\t\tvar oldProps;                                                                                                        // 10145\n\t\tvar clearEnd;                                                                                                        // 10146\n\t\tvar startDelta;                                                                                                      // 10147\n\t\tvar endDelta;                                                                                                        // 10148\n\t\tvar durationDelta;                                                                                                   // 10149\n\t\tvar undoFunc;                                                                                                        // 10150\n                                                                                                                       // 10151\n\t\t// diffs the dates in the appropriate way, returning a duration                                                      // 10152\n\t\tfunction diffDates(date1, date0) { // date1 - date0                                                                  // 10153\n\t\t\tif (largeUnit) {                                                                                                    // 10154\n\t\t\t\treturn diffByUnit(date1, date0, largeUnit);                                                                        // 10155\n\t\t\t}                                                                                                                   // 10156\n\t\t\telse if (newProps.allDay) {                                                                                         // 10157\n\t\t\t\treturn diffDay(date1, date0);                                                                                      // 10158\n\t\t\t}                                                                                                                   // 10159\n\t\t\telse {                                                                                                              // 10160\n\t\t\t\treturn diffDayTime(date1, date0);                                                                                  // 10161\n\t\t\t}                                                                                                                   // 10162\n\t\t}                                                                                                                    // 10163\n                                                                                                                       // 10164\n\t\tnewProps = newProps || {};                                                                                           // 10165\n                                                                                                                       // 10166\n\t\t// normalize new date-related properties                                                                             // 10167\n\t\tif (!newProps.start) {                                                                                               // 10168\n\t\t\tnewProps.start = event.start.clone();                                                                               // 10169\n\t\t}                                                                                                                    // 10170\n\t\tif (newProps.end === undefined) {                                                                                    // 10171\n\t\t\tnewProps.end = event.end ? event.end.clone() : null;                                                                // 10172\n\t\t}                                                                                                                    // 10173\n\t\tif (newProps.allDay == null) { // is null or undefined?                                                              // 10174\n\t\t\tnewProps.allDay = event.allDay;                                                                                     // 10175\n\t\t}                                                                                                                    // 10176\n\t\tnormalizeEventDates(newProps);                                                                                       // 10177\n                                                                                                                       // 10178\n\t\t// create normalized versions of the original props to compare against                                               // 10179\n\t\t// need a real end value, for diffing                                                                                // 10180\n\t\toldProps = {                                                                                                         // 10181\n\t\t\tstart: event._start.clone(),                                                                                        // 10182\n\t\t\tend: event._end ? event._end.clone() : t.getDefaultEventEnd(event._allDay, event._start),                           // 10183\n\t\t\tallDay: newProps.allDay // normalize the dates in the same regard as the new properties                             // 10184\n\t\t};                                                                                                                   // 10185\n\t\tnormalizeEventDates(oldProps);                                                                                       // 10186\n                                                                                                                       // 10187\n\t\t// need to clear the end date if explicitly changed to null                                                          // 10188\n\t\tclearEnd = event._end !== null && newProps.end === null;                                                             // 10189\n                                                                                                                       // 10190\n\t\t// compute the delta for moving the start date                                                                       // 10191\n\t\tstartDelta = diffDates(newProps.start, oldProps.start);                                                              // 10192\n                                                                                                                       // 10193\n\t\t// compute the delta for moving the end date                                                                         // 10194\n\t\tif (newProps.end) {                                                                                                  // 10195\n\t\t\tendDelta = diffDates(newProps.end, oldProps.end);                                                                   // 10196\n\t\t\tdurationDelta = endDelta.subtract(startDelta);                                                                      // 10197\n\t\t}                                                                                                                    // 10198\n\t\telse {                                                                                                               // 10199\n\t\t\tdurationDelta = null;                                                                                               // 10200\n\t\t}                                                                                                                    // 10201\n                                                                                                                       // 10202\n\t\t// gather all non-date-related properties                                                                            // 10203\n\t\t$.each(newProps, function(name, val) {                                                                               // 10204\n\t\t\tif (isMiscEventPropName(name)) {                                                                                    // 10205\n\t\t\t\tif (val !== undefined) {                                                                                           // 10206\n\t\t\t\t\tmiscProps[name] = val;                                                                                            // 10207\n\t\t\t\t}                                                                                                                  // 10208\n\t\t\t}                                                                                                                   // 10209\n\t\t});                                                                                                                  // 10210\n                                                                                                                       // 10211\n\t\t// apply the operations to the event and all related events                                                          // 10212\n\t\tundoFunc = mutateEvents(                                                                                             // 10213\n\t\t\tclientEvents(event._id), // get events with this ID                                                                 // 10214\n\t\t\tclearEnd,                                                                                                           // 10215\n\t\t\tnewProps.allDay,                                                                                                    // 10216\n\t\t\tstartDelta,                                                                                                         // 10217\n\t\t\tdurationDelta,                                                                                                      // 10218\n\t\t\tmiscProps                                                                                                           // 10219\n\t\t);                                                                                                                   // 10220\n                                                                                                                       // 10221\n\t\treturn {                                                                                                             // 10222\n\t\t\tdateDelta: startDelta,                                                                                              // 10223\n\t\t\tdurationDelta: durationDelta,                                                                                       // 10224\n\t\t\tundo: undoFunc                                                                                                      // 10225\n\t\t};                                                                                                                   // 10226\n\t}                                                                                                                     // 10227\n                                                                                                                       // 10228\n                                                                                                                       // 10229\n\t// Modifies an array of events in the following ways (operations are in order):                                       // 10230\n\t// - clear the event's `end`                                                                                          // 10231\n\t// - convert the event to allDay                                                                                      // 10232\n\t// - add `dateDelta` to the start and end                                                                             // 10233\n\t// - add `durationDelta` to the event's duration                                                                      // 10234\n\t// - assign `miscProps` to the event                                                                                  // 10235\n\t//                                                                                                                    // 10236\n\t// Returns a function that can be called to undo all the operations.                                                  // 10237\n\t//                                                                                                                    // 10238\n\t// TODO: don't use so many closures. possible memory issues when lots of events with same ID.                         // 10239\n\t//                                                                                                                    // 10240\n\tfunction mutateEvents(events, clearEnd, allDay, dateDelta, durationDelta, miscProps) {                                // 10241\n\t\tvar isAmbigTimezone = t.getIsAmbigTimezone();                                                                        // 10242\n\t\tvar undoFunctions = [];                                                                                              // 10243\n                                                                                                                       // 10244\n\t\t// normalize zero-length deltas to be null                                                                           // 10245\n\t\tif (dateDelta && !dateDelta.valueOf()) { dateDelta = null; }                                                         // 10246\n\t\tif (durationDelta && !durationDelta.valueOf()) { durationDelta = null; }                                             // 10247\n                                                                                                                       // 10248\n\t\t$.each(events, function(i, event) {                                                                                  // 10249\n\t\t\tvar oldProps;                                                                                                       // 10250\n\t\t\tvar newProps;                                                                                                       // 10251\n                                                                                                                       // 10252\n\t\t\t// build an object holding all the old values, both date-related and misc.                                          // 10253\n\t\t\t// for the undo function.                                                                                           // 10254\n\t\t\toldProps = {                                                                                                        // 10255\n\t\t\t\tstart: event.start.clone(),                                                                                        // 10256\n\t\t\t\tend: event.end ? event.end.clone() : null,                                                                         // 10257\n\t\t\t\tallDay: event.allDay                                                                                               // 10258\n\t\t\t};                                                                                                                  // 10259\n\t\t\t$.each(miscProps, function(name) {                                                                                  // 10260\n\t\t\t\toldProps[name] = event[name];                                                                                      // 10261\n\t\t\t});                                                                                                                 // 10262\n                                                                                                                       // 10263\n\t\t\t// new date-related properties. work off the original date snapshot.                                                // 10264\n\t\t\t// ok to use references because they will be thrown away when backupEventDates is called.                           // 10265\n\t\t\tnewProps = {                                                                                                        // 10266\n\t\t\t\tstart: event._start,                                                                                               // 10267\n\t\t\t\tend: event._end,                                                                                                   // 10268\n\t\t\t\tallDay: allDay // normalize the dates in the same regard as the new properties                                     // 10269\n\t\t\t};                                                                                                                  // 10270\n\t\t\tnormalizeEventDates(newProps); // massages start/end/allDay                                                         // 10271\n                                                                                                                       // 10272\n\t\t\t// strip or ensure the end date                                                                                     // 10273\n\t\t\tif (clearEnd) {                                                                                                     // 10274\n\t\t\t\tnewProps.end = null;                                                                                               // 10275\n\t\t\t}                                                                                                                   // 10276\n\t\t\telse if (durationDelta && !newProps.end) { // the duration translation requires an end date                         // 10277\n\t\t\t\tnewProps.end = t.getDefaultEventEnd(newProps.allDay, newProps.start);                                              // 10278\n\t\t\t}                                                                                                                   // 10279\n                                                                                                                       // 10280\n\t\t\tif (dateDelta) {                                                                                                    // 10281\n\t\t\t\tnewProps.start.add(dateDelta);                                                                                     // 10282\n\t\t\t\tif (newProps.end) {                                                                                                // 10283\n\t\t\t\t\tnewProps.end.add(dateDelta);                                                                                      // 10284\n\t\t\t\t}                                                                                                                  // 10285\n\t\t\t}                                                                                                                   // 10286\n                                                                                                                       // 10287\n\t\t\tif (durationDelta) {                                                                                                // 10288\n\t\t\t\tnewProps.end.add(durationDelta); // end already ensured above                                                      // 10289\n\t\t\t}                                                                                                                   // 10290\n                                                                                                                       // 10291\n\t\t\t// if the dates have changed, and we know it is impossible to recompute the                                         // 10292\n\t\t\t// timezone offsets, strip the zone.                                                                                // 10293\n\t\t\tif (                                                                                                                // 10294\n\t\t\t\tisAmbigTimezone &&                                                                                                 // 10295\n\t\t\t\t!newProps.allDay &&                                                                                                // 10296\n\t\t\t\t(dateDelta || durationDelta)                                                                                       // 10297\n\t\t\t) {                                                                                                                 // 10298\n\t\t\t\tnewProps.start.stripZone();                                                                                        // 10299\n\t\t\t\tif (newProps.end) {                                                                                                // 10300\n\t\t\t\t\tnewProps.end.stripZone();                                                                                         // 10301\n\t\t\t\t}                                                                                                                  // 10302\n\t\t\t}                                                                                                                   // 10303\n                                                                                                                       // 10304\n\t\t\t$.extend(event, miscProps, newProps); // copy over misc props, then date-related props                              // 10305\n\t\t\tbackupEventDates(event); // regenerate internal _start/_end/_allDay                                                 // 10306\n                                                                                                                       // 10307\n\t\t\tundoFunctions.push(function() {                                                                                     // 10308\n\t\t\t\t$.extend(event, oldProps);                                                                                         // 10309\n\t\t\t\tbackupEventDates(event); // regenerate internal _start/_end/_allDay                                                // 10310\n\t\t\t});                                                                                                                 // 10311\n\t\t});                                                                                                                  // 10312\n                                                                                                                       // 10313\n\t\treturn function() {                                                                                                  // 10314\n\t\t\tfor (var i = 0; i < undoFunctions.length; i++) {                                                                    // 10315\n\t\t\t\tundoFunctions[i]();                                                                                                // 10316\n\t\t\t}                                                                                                                   // 10317\n\t\t};                                                                                                                   // 10318\n\t}                                                                                                                     // 10319\n                                                                                                                       // 10320\n                                                                                                                       // 10321\n\t/* Business Hours                                                                                                     // 10322\n\t-----------------------------------------------------------------------------------------*/                           // 10323\n                                                                                                                       // 10324\n\tt.getBusinessHoursEvents = getBusinessHoursEvents;                                                                    // 10325\n                                                                                                                       // 10326\n                                                                                                                       // 10327\n\t// Returns an array of events as to when the business hours occur in the given view.                                  // 10328\n\t// Abuse of our event system :(                                                                                       // 10329\n\tfunction getBusinessHoursEvents(wholeDay) {                                                                           // 10330\n\t\tvar optionVal = options.businessHours;                                                                               // 10331\n\t\tvar defaultVal = {                                                                                                   // 10332\n\t\t\tclassName: 'fc-nonbusiness',                                                                                        // 10333\n\t\t\tstart: '09:00',                                                                                                     // 10334\n\t\t\tend: '17:00',                                                                                                       // 10335\n\t\t\tdow: [ 1, 2, 3, 4, 5 ], // monday - friday                                                                          // 10336\n\t\t\trendering: 'inverse-background'                                                                                     // 10337\n\t\t};                                                                                                                   // 10338\n\t\tvar view = t.getView();                                                                                              // 10339\n\t\tvar eventInput;                                                                                                      // 10340\n                                                                                                                       // 10341\n\t\tif (optionVal) { // `true` (which means \"use the defaults\") or an override object                                    // 10342\n\t\t\teventInput = $.extend(                                                                                              // 10343\n\t\t\t\t{}, // copy to a new object in either case                                                                         // 10344\n\t\t\t\tdefaultVal,                                                                                                        // 10345\n\t\t\t\ttypeof optionVal === 'object' ? optionVal : {} // override the defaults                                            // 10346\n\t\t\t);                                                                                                                  // 10347\n\t\t}                                                                                                                    // 10348\n                                                                                                                       // 10349\n\t\tif (eventInput) {                                                                                                    // 10350\n                                                                                                                       // 10351\n\t\t\t// if a whole-day series is requested, clear the start/end times                                                    // 10352\n\t\t\tif (wholeDay) {                                                                                                     // 10353\n\t\t\t\teventInput.start = null;                                                                                           // 10354\n\t\t\t\teventInput.end = null;                                                                                             // 10355\n\t\t\t}                                                                                                                   // 10356\n                                                                                                                       // 10357\n\t\t\treturn expandEvent(                                                                                                 // 10358\n\t\t\t\tbuildEventFromInput(eventInput),                                                                                   // 10359\n\t\t\t\tview.start,                                                                                                        // 10360\n\t\t\t\tview.end                                                                                                           // 10361\n\t\t\t);                                                                                                                  // 10362\n\t\t}                                                                                                                    // 10363\n                                                                                                                       // 10364\n\t\treturn [];                                                                                                           // 10365\n\t}                                                                                                                     // 10366\n                                                                                                                       // 10367\n                                                                                                                       // 10368\n\t/* Overlapping / Constraining                                                                                         // 10369\n\t-----------------------------------------------------------------------------------------*/                           // 10370\n                                                                                                                       // 10371\n\tt.isEventSpanAllowed = isEventSpanAllowed;                                                                            // 10372\n\tt.isExternalSpanAllowed = isExternalSpanAllowed;                                                                      // 10373\n\tt.isSelectionSpanAllowed = isSelectionSpanAllowed;                                                                    // 10374\n                                                                                                                       // 10375\n                                                                                                                       // 10376\n\t// Determines if the given event can be relocated to the given span (unzoned start/end with other misc data)          // 10377\n\tfunction isEventSpanAllowed(span, event) {                                                                            // 10378\n\t\tvar source = event.source || {};                                                                                     // 10379\n\t\tvar constraint = firstDefined(                                                                                       // 10380\n\t\t\tevent.constraint,                                                                                                   // 10381\n\t\t\tsource.constraint,                                                                                                  // 10382\n\t\t\toptions.eventConstraint                                                                                             // 10383\n\t\t);                                                                                                                   // 10384\n\t\tvar overlap = firstDefined(                                                                                          // 10385\n\t\t\tevent.overlap,                                                                                                      // 10386\n\t\t\tsource.overlap,                                                                                                     // 10387\n\t\t\toptions.eventOverlap                                                                                                // 10388\n\t\t);                                                                                                                   // 10389\n\t\treturn isSpanAllowed(span, constraint, overlap, event);                                                              // 10390\n\t}                                                                                                                     // 10391\n                                                                                                                       // 10392\n                                                                                                                       // 10393\n\t// Determines if an external event can be relocated to the given span (unzoned start/end with other misc data)        // 10394\n\tfunction isExternalSpanAllowed(eventSpan, eventLocation, eventProps) {                                                // 10395\n\t\tvar eventInput;                                                                                                      // 10396\n\t\tvar event;                                                                                                           // 10397\n                                                                                                                       // 10398\n\t\t// note: very similar logic is in View's reportExternalDrop                                                          // 10399\n\t\tif (eventProps) {                                                                                                    // 10400\n\t\t\teventInput = $.extend({}, eventProps, eventLocation);                                                               // 10401\n\t\t\tevent = expandEvent(buildEventFromInput(eventInput))[0];                                                            // 10402\n\t\t}                                                                                                                    // 10403\n                                                                                                                       // 10404\n\t\tif (event) {                                                                                                         // 10405\n\t\t\treturn isEventSpanAllowed(eventSpan, event);                                                                        // 10406\n\t\t}                                                                                                                    // 10407\n\t\telse { // treat it as a selection                                                                                    // 10408\n                                                                                                                       // 10409\n\t\t\treturn isSelectionSpanAllowed(eventSpan);                                                                           // 10410\n\t\t}                                                                                                                    // 10411\n\t}                                                                                                                     // 10412\n                                                                                                                       // 10413\n                                                                                                                       // 10414\n\t// Determines the given span (unzoned start/end with other misc data) can be selected.                                // 10415\n\tfunction isSelectionSpanAllowed(span) {                                                                               // 10416\n\t\treturn isSpanAllowed(span, options.selectConstraint, options.selectOverlap);                                         // 10417\n\t}                                                                                                                     // 10418\n                                                                                                                       // 10419\n                                                                                                                       // 10420\n\t// Returns true if the given span (caused by an event drop/resize or a selection) is allowed to exist                 // 10421\n\t// according to the constraint/overlap settings.                                                                      // 10422\n\t// `event` is not required if checking a selection.                                                                   // 10423\n\tfunction isSpanAllowed(span, constraint, overlap, event) {                                                            // 10424\n\t\tvar constraintEvents;                                                                                                // 10425\n\t\tvar anyContainment;                                                                                                  // 10426\n\t\tvar peerEvents;                                                                                                      // 10427\n\t\tvar i, peerEvent;                                                                                                    // 10428\n\t\tvar peerOverlap;                                                                                                     // 10429\n                                                                                                                       // 10430\n\t\t// the range must be fully contained by at least one of produced constraint events                                   // 10431\n\t\tif (constraint != null) {                                                                                            // 10432\n                                                                                                                       // 10433\n\t\t\t// not treated as an event! intermediate data structure                                                             // 10434\n\t\t\t// TODO: use ranges in the future                                                                                   // 10435\n\t\t\tconstraintEvents = constraintToEvents(constraint);                                                                  // 10436\n                                                                                                                       // 10437\n\t\t\tanyContainment = false;                                                                                             // 10438\n\t\t\tfor (i = 0; i < constraintEvents.length; i++) {                                                                     // 10439\n\t\t\t\tif (eventContainsRange(constraintEvents[i], span)) {                                                               // 10440\n\t\t\t\t\tanyContainment = true;                                                                                            // 10441\n\t\t\t\t\tbreak;                                                                                                            // 10442\n\t\t\t\t}                                                                                                                  // 10443\n\t\t\t}                                                                                                                   // 10444\n                                                                                                                       // 10445\n\t\t\tif (!anyContainment) {                                                                                              // 10446\n\t\t\t\treturn false;                                                                                                      // 10447\n\t\t\t}                                                                                                                   // 10448\n\t\t}                                                                                                                    // 10449\n                                                                                                                       // 10450\n\t\tpeerEvents = t.getPeerEvents(span, event);                                                                           // 10451\n                                                                                                                       // 10452\n\t\tfor (i = 0; i < peerEvents.length; i++)  {                                                                           // 10453\n\t\t\tpeerEvent = peerEvents[i];                                                                                          // 10454\n                                                                                                                       // 10455\n\t\t\t// there needs to be an actual intersection before disallowing anything                                             // 10456\n\t\t\tif (eventIntersectsRange(peerEvent, span)) {                                                                        // 10457\n                                                                                                                       // 10458\n\t\t\t\t// evaluate overlap for the given range and short-circuit if necessary                                             // 10459\n\t\t\t\tif (overlap === false) {                                                                                           // 10460\n\t\t\t\t\treturn false;                                                                                                     // 10461\n\t\t\t\t}                                                                                                                  // 10462\n\t\t\t\t// if the event's overlap is a test function, pass the peer event in question as the first param                   // 10463\n\t\t\t\telse if (typeof overlap === 'function' && !overlap(peerEvent, event)) {                                            // 10464\n\t\t\t\t\treturn false;                                                                                                     // 10465\n\t\t\t\t}                                                                                                                  // 10466\n                                                                                                                       // 10467\n\t\t\t\t// if we are computing if the given range is allowable for an event, consider the other event's                    // 10468\n\t\t\t\t// EventObject-specific or Source-specific `overlap` property                                                      // 10469\n\t\t\t\tif (event) {                                                                                                       // 10470\n\t\t\t\t\tpeerOverlap = firstDefined(                                                                                       // 10471\n\t\t\t\t\t\tpeerEvent.overlap,                                                                                               // 10472\n\t\t\t\t\t\t(peerEvent.source || {}).overlap                                                                                 // 10473\n\t\t\t\t\t\t// we already considered the global `eventOverlap`                                                               // 10474\n\t\t\t\t\t);                                                                                                                // 10475\n\t\t\t\t\tif (peerOverlap === false) {                                                                                      // 10476\n\t\t\t\t\t\treturn false;                                                                                                    // 10477\n\t\t\t\t\t}                                                                                                                 // 10478\n\t\t\t\t\t// if the peer event's overlap is a test function, pass the subject event as the first param                      // 10479\n\t\t\t\t\tif (typeof peerOverlap === 'function' && !peerOverlap(event, peerEvent)) {                                        // 10480\n\t\t\t\t\t\treturn false;                                                                                                    // 10481\n\t\t\t\t\t}                                                                                                                 // 10482\n\t\t\t\t}                                                                                                                  // 10483\n\t\t\t}                                                                                                                   // 10484\n\t\t}                                                                                                                    // 10485\n                                                                                                                       // 10486\n\t\treturn true;                                                                                                         // 10487\n\t}                                                                                                                     // 10488\n                                                                                                                       // 10489\n                                                                                                                       // 10490\n\t// Given an event input from the API, produces an array of event objects. Possible event inputs:                      // 10491\n\t// 'businessHours'                                                                                                    // 10492\n\t// An event ID (number or string)                                                                                     // 10493\n\t// An object with specific start/end dates or a recurring event (like what businessHours accepts)                     // 10494\n\tfunction constraintToEvents(constraintInput) {                                                                        // 10495\n                                                                                                                       // 10496\n\t\tif (constraintInput === 'businessHours') {                                                                           // 10497\n\t\t\treturn getBusinessHoursEvents();                                                                                    // 10498\n\t\t}                                                                                                                    // 10499\n                                                                                                                       // 10500\n\t\tif (typeof constraintInput === 'object') {                                                                           // 10501\n\t\t\treturn expandEvent(buildEventFromInput(constraintInput));                                                           // 10502\n\t\t}                                                                                                                    // 10503\n                                                                                                                       // 10504\n\t\treturn clientEvents(constraintInput); // probably an ID                                                              // 10505\n\t}                                                                                                                     // 10506\n                                                                                                                       // 10507\n                                                                                                                       // 10508\n\t// Does the event's date range fully contain the given range?                                                         // 10509\n\t// start/end already assumed to have stripped zones :(                                                                // 10510\n\tfunction eventContainsRange(event, range) {                                                                           // 10511\n\t\tvar eventStart = event.start.clone().stripZone();                                                                    // 10512\n\t\tvar eventEnd = t.getEventEnd(event).stripZone();                                                                     // 10513\n                                                                                                                       // 10514\n\t\treturn range.start >= eventStart && range.end <= eventEnd;                                                           // 10515\n\t}                                                                                                                     // 10516\n                                                                                                                       // 10517\n                                                                                                                       // 10518\n\t// Does the event's date range intersect with the given range?                                                        // 10519\n\t// start/end already assumed to have stripped zones :(                                                                // 10520\n\tfunction eventIntersectsRange(event, range) {                                                                         // 10521\n\t\tvar eventStart = event.start.clone().stripZone();                                                                    // 10522\n\t\tvar eventEnd = t.getEventEnd(event).stripZone();                                                                     // 10523\n                                                                                                                       // 10524\n\t\treturn range.start < eventEnd && range.end > eventStart;                                                             // 10525\n\t}                                                                                                                     // 10526\n                                                                                                                       // 10527\n                                                                                                                       // 10528\n\tt.getEventCache = function() {                                                                                        // 10529\n\t\treturn cache;                                                                                                        // 10530\n\t};                                                                                                                    // 10531\n                                                                                                                       // 10532\n}                                                                                                                      // 10533\n                                                                                                                       // 10534\n                                                                                                                       // 10535\n// Returns a list of events that the given event should be compared against when being considered for a move to        // 10536\n// the specified span. Attached to the Calendar's prototype because EventManager is a mixin for a Calendar.            // 10537\nCalendar.prototype.getPeerEvents = function(span, event) {                                                             // 10538\n\tvar cache = this.getEventCache();                                                                                     // 10539\n\tvar peerEvents = [];                                                                                                  // 10540\n\tvar i, otherEvent;                                                                                                    // 10541\n                                                                                                                       // 10542\n\tfor (i = 0; i < cache.length; i++) {                                                                                  // 10543\n\t\totherEvent = cache[i];                                                                                               // 10544\n\t\tif (                                                                                                                 // 10545\n\t\t\t!event ||                                                                                                           // 10546\n\t\t\tevent._id !== otherEvent._id // don't compare the event to itself or other related [repeating] events               // 10547\n\t\t) {                                                                                                                  // 10548\n\t\t\tpeerEvents.push(otherEvent);                                                                                        // 10549\n\t\t}                                                                                                                    // 10550\n\t}                                                                                                                     // 10551\n                                                                                                                       // 10552\n\treturn peerEvents;                                                                                                    // 10553\n};                                                                                                                     // 10554\n                                                                                                                       // 10555\n                                                                                                                       // 10556\n// updates the \"backup\" properties, which are preserved in order to compute diffs later on.                            // 10557\nfunction backupEventDates(event) {                                                                                     // 10558\n\tevent._allDay = event.allDay;                                                                                         // 10559\n\tevent._start = event.start.clone();                                                                                   // 10560\n\tevent._end = event.end ? event.end.clone() : null;                                                                    // 10561\n}                                                                                                                      // 10562\n                                                                                                                       // 10563\n;;                                                                                                                     // 10564\n                                                                                                                       // 10565\n/* An abstract class for the \"basic\" views, as well as month view. Renders one or more rows of day cells.              // 10566\n----------------------------------------------------------------------------------------------------------------------*/\n// It is a manager for a DayGrid subcomponent, which does most of the heavy lifting.                                   // 10568\n// It is responsible for managing width/height.                                                                        // 10569\n                                                                                                                       // 10570\nvar BasicView = FC.BasicView = View.extend({                                                                           // 10571\n                                                                                                                       // 10572\n\tdayGridClass: DayGrid, // class the dayGrid will be instantiated from (overridable by subclasses)                     // 10573\n\tdayGrid: null, // the main subcomponent that does most of the heavy lifting                                           // 10574\n                                                                                                                       // 10575\n\tdayNumbersVisible: false, // display day numbers on each day cell?                                                    // 10576\n\tweekNumbersVisible: false, // display week numbers along the side?                                                    // 10577\n                                                                                                                       // 10578\n\tweekNumberWidth: null, // width of all the week-number cells running down the side                                    // 10579\n                                                                                                                       // 10580\n\theadContainerEl: null, // div that hold's the dayGrid's rendered date header                                          // 10581\n\theadRowEl: null, // the fake row element of the day-of-week header                                                    // 10582\n                                                                                                                       // 10583\n                                                                                                                       // 10584\n\tinitialize: function() {                                                                                              // 10585\n\t\tthis.dayGrid = this.instantiateDayGrid();                                                                            // 10586\n\t},                                                                                                                    // 10587\n                                                                                                                       // 10588\n                                                                                                                       // 10589\n\t// Generates the DayGrid object this view needs. Draws from this.dayGridClass                                         // 10590\n\tinstantiateDayGrid: function() {                                                                                      // 10591\n\t\t// generate a subclass on the fly with BasicView-specific behavior                                                   // 10592\n\t\t// TODO: cache this subclass                                                                                         // 10593\n\t\tvar subclass = this.dayGridClass.extend(basicDayGridMethods);                                                        // 10594\n                                                                                                                       // 10595\n\t\treturn new subclass(this);                                                                                           // 10596\n\t},                                                                                                                    // 10597\n                                                                                                                       // 10598\n                                                                                                                       // 10599\n\t// Sets the display range and computes all necessary dates                                                            // 10600\n\tsetRange: function(range) {                                                                                           // 10601\n\t\tView.prototype.setRange.call(this, range); // call the super-method                                                  // 10602\n                                                                                                                       // 10603\n\t\tthis.dayGrid.breakOnWeeks = /year|month|week/.test(this.intervalUnit); // do before setRange                         // 10604\n\t\tthis.dayGrid.setRange(range);                                                                                        // 10605\n\t},                                                                                                                    // 10606\n                                                                                                                       // 10607\n                                                                                                                       // 10608\n\t// Compute the value to feed into setRange. Overrides superclass.                                                     // 10609\n\tcomputeRange: function(date) {                                                                                        // 10610\n\t\tvar range = View.prototype.computeRange.call(this, date); // get value from the super-method                         // 10611\n                                                                                                                       // 10612\n\t\t// year and month views should be aligned with weeks. this is already done for week                                  // 10613\n\t\tif (/year|month/.test(range.intervalUnit)) {                                                                         // 10614\n\t\t\trange.start.startOf('week');                                                                                        // 10615\n\t\t\trange.start = this.skipHiddenDays(range.start);                                                                     // 10616\n                                                                                                                       // 10617\n\t\t\t// make end-of-week if not already                                                                                  // 10618\n\t\t\tif (range.end.weekday()) {                                                                                          // 10619\n\t\t\t\trange.end.add(1, 'week').startOf('week');                                                                          // 10620\n\t\t\t\trange.end = this.skipHiddenDays(range.end, -1, true); // exclusively move backwards                                // 10621\n\t\t\t}                                                                                                                   // 10622\n\t\t}                                                                                                                    // 10623\n                                                                                                                       // 10624\n\t\treturn range;                                                                                                        // 10625\n\t},                                                                                                                    // 10626\n                                                                                                                       // 10627\n                                                                                                                       // 10628\n\t// Renders the view into `this.el`, which should already be assigned                                                  // 10629\n\trenderDates: function() {                                                                                             // 10630\n                                                                                                                       // 10631\n\t\tthis.dayNumbersVisible = this.dayGrid.rowCnt > 1; // TODO: make grid responsible                                     // 10632\n\t\tthis.weekNumbersVisible = this.opt('weekNumbers');                                                                   // 10633\n\t\tthis.dayGrid.numbersVisible = this.dayNumbersVisible || this.weekNumbersVisible;                                     // 10634\n                                                                                                                       // 10635\n\t\tthis.el.addClass('fc-basic-view').html(this.renderSkeletonHtml());                                                   // 10636\n\t\tthis.renderHead();                                                                                                   // 10637\n                                                                                                                       // 10638\n\t\tthis.scrollerEl = this.el.find('.fc-day-grid-container');                                                            // 10639\n                                                                                                                       // 10640\n\t\tthis.dayGrid.setElement(this.el.find('.fc-day-grid'));                                                               // 10641\n\t\tthis.dayGrid.renderDates(this.hasRigidRows());                                                                       // 10642\n\t},                                                                                                                    // 10643\n                                                                                                                       // 10644\n                                                                                                                       // 10645\n\t// render the day-of-week headers                                                                                     // 10646\n\trenderHead: function() {                                                                                              // 10647\n\t\tthis.headContainerEl =                                                                                               // 10648\n\t\t\tthis.el.find('.fc-head-container')                                                                                  // 10649\n\t\t\t\t.html(this.dayGrid.renderHeadHtml());                                                                              // 10650\n\t\tthis.headRowEl = this.headContainerEl.find('.fc-row');                                                               // 10651\n\t},                                                                                                                    // 10652\n                                                                                                                       // 10653\n                                                                                                                       // 10654\n\t// Unrenders the content of the view. Since we haven't separated skeleton rendering from date rendering,              // 10655\n\t// always completely kill the dayGrid's rendering.                                                                    // 10656\n\tunrenderDates: function() {                                                                                           // 10657\n\t\tthis.dayGrid.unrenderDates();                                                                                        // 10658\n\t\tthis.dayGrid.removeElement();                                                                                        // 10659\n\t},                                                                                                                    // 10660\n                                                                                                                       // 10661\n                                                                                                                       // 10662\n\trenderBusinessHours: function() {                                                                                     // 10663\n\t\tthis.dayGrid.renderBusinessHours();                                                                                  // 10664\n\t},                                                                                                                    // 10665\n                                                                                                                       // 10666\n                                                                                                                       // 10667\n\t// Builds the HTML skeleton for the view.                                                                             // 10668\n\t// The day-grid component will render inside of a container defined by this HTML.                                     // 10669\n\trenderSkeletonHtml: function() {                                                                                      // 10670\n\t\treturn '' +                                                                                                          // 10671\n\t\t\t'<table>' +                                                                                                         // 10672\n\t\t\t\t'<thead class=\"fc-head\">' +                                                                                        // 10673\n\t\t\t\t\t'<tr>' +                                                                                                          // 10674\n\t\t\t\t\t\t'<td class=\"fc-head-container ' + this.widgetHeaderClass + '\"></td>' +                                           // 10675\n\t\t\t\t\t'</tr>' +                                                                                                         // 10676\n\t\t\t\t'</thead>' +                                                                                                       // 10677\n\t\t\t\t'<tbody class=\"fc-body\">' +                                                                                        // 10678\n\t\t\t\t\t'<tr>' +                                                                                                          // 10679\n\t\t\t\t\t\t'<td class=\"' + this.widgetContentClass + '\">' +                                                                 // 10680\n\t\t\t\t\t\t\t'<div class=\"fc-day-grid-container\">' +                                                                         // 10681\n\t\t\t\t\t\t\t\t'<div class=\"fc-day-grid\"/>' +                                                                                 // 10682\n\t\t\t\t\t\t\t'</div>' +                                                                                                      // 10683\n\t\t\t\t\t\t'</td>' +                                                                                                        // 10684\n\t\t\t\t\t'</tr>' +                                                                                                         // 10685\n\t\t\t\t'</tbody>' +                                                                                                       // 10686\n\t\t\t'</table>';                                                                                                         // 10687\n\t},                                                                                                                    // 10688\n                                                                                                                       // 10689\n                                                                                                                       // 10690\n\t// Generates an HTML attribute string for setting the width of the week number column, if it is known                 // 10691\n\tweekNumberStyleAttr: function() {                                                                                     // 10692\n\t\tif (this.weekNumberWidth !== null) {                                                                                 // 10693\n\t\t\treturn 'style=\"width:' + this.weekNumberWidth + 'px\"';                                                              // 10694\n\t\t}                                                                                                                    // 10695\n\t\treturn '';                                                                                                           // 10696\n\t},                                                                                                                    // 10697\n                                                                                                                       // 10698\n                                                                                                                       // 10699\n\t// Determines whether each row should have a constant height                                                          // 10700\n\thasRigidRows: function() {                                                                                            // 10701\n\t\tvar eventLimit = this.opt('eventLimit');                                                                             // 10702\n\t\treturn eventLimit && typeof eventLimit !== 'number';                                                                 // 10703\n\t},                                                                                                                    // 10704\n                                                                                                                       // 10705\n                                                                                                                       // 10706\n\t/* Dimensions                                                                                                         // 10707\n\t------------------------------------------------------------------------------------------------------------------*/  // 10708\n                                                                                                                       // 10709\n                                                                                                                       // 10710\n\t// Refreshes the horizontal dimensions of the view                                                                    // 10711\n\tupdateWidth: function() {                                                                                             // 10712\n\t\tif (this.weekNumbersVisible) {                                                                                       // 10713\n\t\t\t// Make sure all week number cells running down the side have the same width.                                       // 10714\n\t\t\t// Record the width for cells created later.                                                                        // 10715\n\t\t\tthis.weekNumberWidth = matchCellWidths(                                                                             // 10716\n\t\t\t\tthis.el.find('.fc-week-number')                                                                                    // 10717\n\t\t\t);                                                                                                                  // 10718\n\t\t}                                                                                                                    // 10719\n\t},                                                                                                                    // 10720\n                                                                                                                       // 10721\n                                                                                                                       // 10722\n\t// Adjusts the vertical dimensions of the view to the specified values                                                // 10723\n\tsetHeight: function(totalHeight, isAuto) {                                                                            // 10724\n\t\tvar eventLimit = this.opt('eventLimit');                                                                             // 10725\n\t\tvar scrollerHeight;                                                                                                  // 10726\n                                                                                                                       // 10727\n\t\t// reset all heights to be natural                                                                                   // 10728\n\t\tunsetScroller(this.scrollerEl);                                                                                      // 10729\n\t\tuncompensateScroll(this.headRowEl);                                                                                  // 10730\n                                                                                                                       // 10731\n\t\tthis.dayGrid.removeSegPopover(); // kill the \"more\" popover if displayed                                             // 10732\n                                                                                                                       // 10733\n\t\t// is the event limit a constant level number?                                                                       // 10734\n\t\tif (eventLimit && typeof eventLimit === 'number') {                                                                  // 10735\n\t\t\tthis.dayGrid.limitRows(eventLimit); // limit the levels first so the height can redistribute after                  // 10736\n\t\t}                                                                                                                    // 10737\n                                                                                                                       // 10738\n\t\tscrollerHeight = this.computeScrollerHeight(totalHeight);                                                            // 10739\n\t\tthis.setGridHeight(scrollerHeight, isAuto);                                                                          // 10740\n                                                                                                                       // 10741\n\t\t// is the event limit dynamically calculated?                                                                        // 10742\n\t\tif (eventLimit && typeof eventLimit !== 'number') {                                                                  // 10743\n\t\t\tthis.dayGrid.limitRows(eventLimit); // limit the levels after the grid's row heights have been set                  // 10744\n\t\t}                                                                                                                    // 10745\n                                                                                                                       // 10746\n\t\tif (!isAuto && setPotentialScroller(this.scrollerEl, scrollerHeight)) { // using scrollbars?                         // 10747\n                                                                                                                       // 10748\n\t\t\tcompensateScroll(this.headRowEl, getScrollbarWidths(this.scrollerEl));                                              // 10749\n                                                                                                                       // 10750\n\t\t\t// doing the scrollbar compensation might have created text overflow which created more height. redo                // 10751\n\t\t\tscrollerHeight = this.computeScrollerHeight(totalHeight);                                                           // 10752\n\t\t\tthis.scrollerEl.height(scrollerHeight);                                                                             // 10753\n\t\t}                                                                                                                    // 10754\n\t},                                                                                                                    // 10755\n                                                                                                                       // 10756\n                                                                                                                       // 10757\n\t// Sets the height of just the DayGrid component in this view                                                         // 10758\n\tsetGridHeight: function(height, isAuto) {                                                                             // 10759\n\t\tif (isAuto) {                                                                                                        // 10760\n\t\t\tundistributeHeight(this.dayGrid.rowEls); // let the rows be their natural height with no expanding                  // 10761\n\t\t}                                                                                                                    // 10762\n\t\telse {                                                                                                               // 10763\n\t\t\tdistributeHeight(this.dayGrid.rowEls, height, true); // true = compensate for height-hogging rows                   // 10764\n\t\t}                                                                                                                    // 10765\n\t},                                                                                                                    // 10766\n                                                                                                                       // 10767\n                                                                                                                       // 10768\n\t/* Hit Areas                                                                                                          // 10769\n\t------------------------------------------------------------------------------------------------------------------*/  // 10770\n\t// forward all hit-related method calls to dayGrid                                                                    // 10771\n                                                                                                                       // 10772\n                                                                                                                       // 10773\n\tprepareHits: function() {                                                                                             // 10774\n\t\tthis.dayGrid.prepareHits();                                                                                          // 10775\n\t},                                                                                                                    // 10776\n                                                                                                                       // 10777\n                                                                                                                       // 10778\n\treleaseHits: function() {                                                                                             // 10779\n\t\tthis.dayGrid.releaseHits();                                                                                          // 10780\n\t},                                                                                                                    // 10781\n                                                                                                                       // 10782\n                                                                                                                       // 10783\n\tqueryHit: function(left, top) {                                                                                       // 10784\n\t\treturn this.dayGrid.queryHit(left, top);                                                                             // 10785\n\t},                                                                                                                    // 10786\n                                                                                                                       // 10787\n                                                                                                                       // 10788\n\tgetHitSpan: function(hit) {                                                                                           // 10789\n\t\treturn this.dayGrid.getHitSpan(hit);                                                                                 // 10790\n\t},                                                                                                                    // 10791\n                                                                                                                       // 10792\n                                                                                                                       // 10793\n\tgetHitEl: function(hit) {                                                                                             // 10794\n\t\treturn this.dayGrid.getHitEl(hit);                                                                                   // 10795\n\t},                                                                                                                    // 10796\n                                                                                                                       // 10797\n                                                                                                                       // 10798\n\t/* Events                                                                                                             // 10799\n\t------------------------------------------------------------------------------------------------------------------*/  // 10800\n                                                                                                                       // 10801\n                                                                                                                       // 10802\n\t// Renders the given events onto the view and populates the segments array                                            // 10803\n\trenderEvents: function(events) {                                                                                      // 10804\n\t\tthis.dayGrid.renderEvents(events);                                                                                   // 10805\n                                                                                                                       // 10806\n\t\tthis.updateHeight(); // must compensate for events that overflow the row                                             // 10807\n\t},                                                                                                                    // 10808\n                                                                                                                       // 10809\n                                                                                                                       // 10810\n\t// Retrieves all segment objects that are rendered in the view                                                        // 10811\n\tgetEventSegs: function() {                                                                                            // 10812\n\t\treturn this.dayGrid.getEventSegs();                                                                                  // 10813\n\t},                                                                                                                    // 10814\n                                                                                                                       // 10815\n                                                                                                                       // 10816\n\t// Unrenders all event elements and clears internal segment data                                                      // 10817\n\tunrenderEvents: function() {                                                                                          // 10818\n\t\tthis.dayGrid.unrenderEvents();                                                                                       // 10819\n                                                                                                                       // 10820\n\t\t// we DON'T need to call updateHeight() because:                                                                     // 10821\n\t\t// A) a renderEvents() call always happens after this, which will eventually call updateHeight()                     // 10822\n\t\t// B) in IE8, this causes a flash whenever events are rerendered                                                     // 10823\n\t},                                                                                                                    // 10824\n                                                                                                                       // 10825\n                                                                                                                       // 10826\n\t/* Dragging (for both events and external elements)                                                                   // 10827\n\t------------------------------------------------------------------------------------------------------------------*/  // 10828\n                                                                                                                       // 10829\n                                                                                                                       // 10830\n\t// A returned value of `true` signals that a mock \"helper\" event has been rendered.                                   // 10831\n\trenderDrag: function(dropLocation, seg) {                                                                             // 10832\n\t\treturn this.dayGrid.renderDrag(dropLocation, seg);                                                                   // 10833\n\t},                                                                                                                    // 10834\n                                                                                                                       // 10835\n                                                                                                                       // 10836\n\tunrenderDrag: function() {                                                                                            // 10837\n\t\tthis.dayGrid.unrenderDrag();                                                                                         // 10838\n\t},                                                                                                                    // 10839\n                                                                                                                       // 10840\n                                                                                                                       // 10841\n\t/* Selection                                                                                                          // 10842\n\t------------------------------------------------------------------------------------------------------------------*/  // 10843\n                                                                                                                       // 10844\n                                                                                                                       // 10845\n\t// Renders a visual indication of a selection                                                                         // 10846\n\trenderSelection: function(span) {                                                                                     // 10847\n\t\tthis.dayGrid.renderSelection(span);                                                                                  // 10848\n\t},                                                                                                                    // 10849\n                                                                                                                       // 10850\n                                                                                                                       // 10851\n\t// Unrenders a visual indications of a selection                                                                      // 10852\n\tunrenderSelection: function() {                                                                                       // 10853\n\t\tthis.dayGrid.unrenderSelection();                                                                                    // 10854\n\t}                                                                                                                     // 10855\n                                                                                                                       // 10856\n});                                                                                                                    // 10857\n                                                                                                                       // 10858\n                                                                                                                       // 10859\n// Methods that will customize the rendering behavior of the BasicView's dayGrid                                       // 10860\nvar basicDayGridMethods = {                                                                                            // 10861\n                                                                                                                       // 10862\n                                                                                                                       // 10863\n\t// Generates the HTML that will go before the day-of week header cells                                                // 10864\n\trenderHeadIntroHtml: function() {                                                                                     // 10865\n\t\tvar view = this.view;                                                                                                // 10866\n                                                                                                                       // 10867\n\t\tif (view.weekNumbersVisible) {                                                                                       // 10868\n\t\t\treturn '' +                                                                                                         // 10869\n\t\t\t\t'<th class=\"fc-week-number ' + view.widgetHeaderClass + '\" ' + view.weekNumberStyleAttr() + '>' +                  // 10870\n\t\t\t\t\t'<span>' + // needed for matchCellWidths                                                                          // 10871\n\t\t\t\t\t\thtmlEscape(view.opt('weekNumberTitle')) +                                                                        // 10872\n\t\t\t\t\t'</span>' +                                                                                                       // 10873\n\t\t\t\t'</th>';                                                                                                           // 10874\n\t\t}                                                                                                                    // 10875\n                                                                                                                       // 10876\n\t\treturn '';                                                                                                           // 10877\n\t},                                                                                                                    // 10878\n                                                                                                                       // 10879\n                                                                                                                       // 10880\n\t// Generates the HTML that will go before content-skeleton cells that display the day/week numbers                    // 10881\n\trenderNumberIntroHtml: function(row) {                                                                                // 10882\n\t\tvar view = this.view;                                                                                                // 10883\n                                                                                                                       // 10884\n\t\tif (view.weekNumbersVisible) {                                                                                       // 10885\n\t\t\treturn '' +                                                                                                         // 10886\n\t\t\t\t'<td class=\"fc-week-number\" ' + view.weekNumberStyleAttr() + '>' +                                                 // 10887\n\t\t\t\t\t'<span>' + // needed for matchCellWidths                                                                          // 10888\n\t\t\t\t\t\tthis.getCellDate(row, 0).format('w') +                                                                           // 10889\n\t\t\t\t\t'</span>' +                                                                                                       // 10890\n\t\t\t\t'</td>';                                                                                                           // 10891\n\t\t}                                                                                                                    // 10892\n                                                                                                                       // 10893\n\t\treturn '';                                                                                                           // 10894\n\t},                                                                                                                    // 10895\n                                                                                                                       // 10896\n                                                                                                                       // 10897\n\t// Generates the HTML that goes before the day bg cells for each day-row                                              // 10898\n\trenderBgIntroHtml: function() {                                                                                       // 10899\n\t\tvar view = this.view;                                                                                                // 10900\n                                                                                                                       // 10901\n\t\tif (view.weekNumbersVisible) {                                                                                       // 10902\n\t\t\treturn '<td class=\"fc-week-number ' + view.widgetContentClass + '\" ' +                                              // 10903\n\t\t\t\tview.weekNumberStyleAttr() + '></td>';                                                                             // 10904\n\t\t}                                                                                                                    // 10905\n                                                                                                                       // 10906\n\t\treturn '';                                                                                                           // 10907\n\t},                                                                                                                    // 10908\n                                                                                                                       // 10909\n                                                                                                                       // 10910\n\t// Generates the HTML that goes before every other type of row generated by DayGrid.                                  // 10911\n\t// Affects helper-skeleton and highlight-skeleton rows.                                                               // 10912\n\trenderIntroHtml: function() {                                                                                         // 10913\n\t\tvar view = this.view;                                                                                                // 10914\n                                                                                                                       // 10915\n\t\tif (view.weekNumbersVisible) {                                                                                       // 10916\n\t\t\treturn '<td class=\"fc-week-number\" ' + view.weekNumberStyleAttr() + '></td>';                                       // 10917\n\t\t}                                                                                                                    // 10918\n                                                                                                                       // 10919\n\t\treturn '';                                                                                                           // 10920\n\t}                                                                                                                     // 10921\n                                                                                                                       // 10922\n};                                                                                                                     // 10923\n                                                                                                                       // 10924\n;;                                                                                                                     // 10925\n                                                                                                                       // 10926\n/* A month view with day cells running in rows (one-per-week) and columns                                              // 10927\n----------------------------------------------------------------------------------------------------------------------*/\n                                                                                                                       // 10929\nvar MonthView = FC.MonthView = BasicView.extend({                                                                      // 10930\n                                                                                                                       // 10931\n\t// Produces information about what range to display                                                                   // 10932\n\tcomputeRange: function(date) {                                                                                        // 10933\n\t\tvar range = BasicView.prototype.computeRange.call(this, date); // get value from super-method                        // 10934\n\t\tvar rowCnt;                                                                                                          // 10935\n                                                                                                                       // 10936\n\t\t// ensure 6 weeks                                                                                                    // 10937\n\t\tif (this.isFixedWeeks()) {                                                                                           // 10938\n\t\t\trowCnt = Math.ceil(range.end.diff(range.start, 'weeks', true)); // could be partial weeks due to hiddenDays         // 10939\n\t\t\trange.end.add(6 - rowCnt, 'weeks');                                                                                 // 10940\n\t\t}                                                                                                                    // 10941\n                                                                                                                       // 10942\n\t\treturn range;                                                                                                        // 10943\n\t},                                                                                                                    // 10944\n                                                                                                                       // 10945\n                                                                                                                       // 10946\n\t// Overrides the default BasicView behavior to have special multi-week auto-height logic                              // 10947\n\tsetGridHeight: function(height, isAuto) {                                                                             // 10948\n                                                                                                                       // 10949\n\t\tisAuto = isAuto || this.opt('weekMode') === 'variable'; // LEGACY: weekMode is deprecated                            // 10950\n                                                                                                                       // 10951\n\t\t// if auto, make the height of each row the height that it would be if there were 6 weeks                            // 10952\n\t\tif (isAuto) {                                                                                                        // 10953\n\t\t\theight *= this.rowCnt / 6;                                                                                          // 10954\n\t\t}                                                                                                                    // 10955\n                                                                                                                       // 10956\n\t\tdistributeHeight(this.dayGrid.rowEls, height, !isAuto); // if auto, don't compensate for height-hogging rows         // 10957\n\t},                                                                                                                    // 10958\n                                                                                                                       // 10959\n                                                                                                                       // 10960\n\tisFixedWeeks: function() {                                                                                            // 10961\n\t\tvar weekMode = this.opt('weekMode'); // LEGACY: weekMode is deprecated                                               // 10962\n\t\tif (weekMode) {                                                                                                      // 10963\n\t\t\treturn weekMode === 'fixed'; // if any other type of weekMode, assume NOT fixed                                     // 10964\n\t\t}                                                                                                                    // 10965\n                                                                                                                       // 10966\n\t\treturn this.opt('fixedWeekCount');                                                                                   // 10967\n\t}                                                                                                                     // 10968\n                                                                                                                       // 10969\n});                                                                                                                    // 10970\n                                                                                                                       // 10971\n;;                                                                                                                     // 10972\n                                                                                                                       // 10973\nfcViews.basic = {                                                                                                      // 10974\n\t'class': BasicView                                                                                                    // 10975\n};                                                                                                                     // 10976\n                                                                                                                       // 10977\nfcViews.basicDay = {                                                                                                   // 10978\n\ttype: 'basic',                                                                                                        // 10979\n\tduration: { days: 1 }                                                                                                 // 10980\n};                                                                                                                     // 10981\n                                                                                                                       // 10982\nfcViews.basicWeek = {                                                                                                  // 10983\n\ttype: 'basic',                                                                                                        // 10984\n\tduration: { weeks: 1 }                                                                                                // 10985\n};                                                                                                                     // 10986\n                                                                                                                       // 10987\nfcViews.month = {                                                                                                      // 10988\n\t'class': MonthView,                                                                                                   // 10989\n\tduration: { months: 1 }, // important for prev/next                                                                   // 10990\n\tdefaults: {                                                                                                           // 10991\n\t\tfixedWeekCount: true                                                                                                 // 10992\n\t}                                                                                                                     // 10993\n};                                                                                                                     // 10994\n;;                                                                                                                     // 10995\n                                                                                                                       // 10996\n/* An abstract class for all agenda-related views. Displays one more columns with time slots running vertically.       // 10997\n----------------------------------------------------------------------------------------------------------------------*/\n// Is a manager for the TimeGrid subcomponent and possibly the DayGrid subcomponent (if allDaySlot is on).             // 10999\n// Responsible for managing width/height.                                                                              // 11000\n                                                                                                                       // 11001\nvar AgendaView = FC.AgendaView = View.extend({                                                                         // 11002\n                                                                                                                       // 11003\n\ttimeGridClass: TimeGrid, // class used to instantiate the timeGrid. subclasses can override                           // 11004\n\ttimeGrid: null, // the main time-grid subcomponent of this view                                                       // 11005\n                                                                                                                       // 11006\n\tdayGridClass: DayGrid, // class used to instantiate the dayGrid. subclasses can override                              // 11007\n\tdayGrid: null, // the \"all-day\" subcomponent. if all-day is turned off, this will be null                             // 11008\n                                                                                                                       // 11009\n\taxisWidth: null, // the width of the time axis running down the side                                                  // 11010\n                                                                                                                       // 11011\n\theadContainerEl: null, // div that hold's the timeGrid's rendered date header                                         // 11012\n\tnoScrollRowEls: null, // set of fake row elements that must compensate when scrollerEl has scrollbars                 // 11013\n                                                                                                                       // 11014\n\t// when the time-grid isn't tall enough to occupy the given height, we render an <hr> underneath                      // 11015\n\tbottomRuleEl: null,                                                                                                   // 11016\n\tbottomRuleHeight: null,                                                                                               // 11017\n                                                                                                                       // 11018\n                                                                                                                       // 11019\n\tinitialize: function() {                                                                                              // 11020\n\t\tthis.timeGrid = this.instantiateTimeGrid();                                                                          // 11021\n                                                                                                                       // 11022\n\t\tif (this.opt('allDaySlot')) { // should we display the \"all-day\" area?                                               // 11023\n\t\t\tthis.dayGrid = this.instantiateDayGrid(); // the all-day subcomponent of this view                                  // 11024\n\t\t}                                                                                                                    // 11025\n\t},                                                                                                                    // 11026\n                                                                                                                       // 11027\n                                                                                                                       // 11028\n\t// Instantiates the TimeGrid object this view needs. Draws from this.timeGridClass                                    // 11029\n\tinstantiateTimeGrid: function() {                                                                                     // 11030\n\t\tvar subclass = this.timeGridClass.extend(agendaTimeGridMethods);                                                     // 11031\n                                                                                                                       // 11032\n\t\treturn new subclass(this);                                                                                           // 11033\n\t},                                                                                                                    // 11034\n                                                                                                                       // 11035\n                                                                                                                       // 11036\n\t// Instantiates the DayGrid object this view might need. Draws from this.dayGridClass                                 // 11037\n\tinstantiateDayGrid: function() {                                                                                      // 11038\n\t\tvar subclass = this.dayGridClass.extend(agendaDayGridMethods);                                                       // 11039\n                                                                                                                       // 11040\n\t\treturn new subclass(this);                                                                                           // 11041\n\t},                                                                                                                    // 11042\n                                                                                                                       // 11043\n                                                                                                                       // 11044\n\t/* Rendering                                                                                                          // 11045\n\t------------------------------------------------------------------------------------------------------------------*/  // 11046\n                                                                                                                       // 11047\n                                                                                                                       // 11048\n\t// Sets the display range and computes all necessary dates                                                            // 11049\n\tsetRange: function(range) {                                                                                           // 11050\n\t\tView.prototype.setRange.call(this, range); // call the super-method                                                  // 11051\n                                                                                                                       // 11052\n\t\tthis.timeGrid.setRange(range);                                                                                       // 11053\n\t\tif (this.dayGrid) {                                                                                                  // 11054\n\t\t\tthis.dayGrid.setRange(range);                                                                                       // 11055\n\t\t}                                                                                                                    // 11056\n\t},                                                                                                                    // 11057\n                                                                                                                       // 11058\n                                                                                                                       // 11059\n\t// Renders the view into `this.el`, which has already been assigned                                                   // 11060\n\trenderDates: function() {                                                                                             // 11061\n                                                                                                                       // 11062\n\t\tthis.el.addClass('fc-agenda-view').html(this.renderSkeletonHtml());                                                  // 11063\n\t\tthis.renderHead();                                                                                                   // 11064\n                                                                                                                       // 11065\n\t\t// the element that wraps the time-grid that will probably scroll                                                    // 11066\n\t\tthis.scrollerEl = this.el.find('.fc-time-grid-container');                                                           // 11067\n                                                                                                                       // 11068\n\t\tthis.timeGrid.setElement(this.el.find('.fc-time-grid'));                                                             // 11069\n\t\tthis.timeGrid.renderDates();                                                                                         // 11070\n                                                                                                                       // 11071\n\t\t// the <hr> that sometimes displays under the time-grid                                                              // 11072\n\t\tthis.bottomRuleEl = $('<hr class=\"fc-divider ' + this.widgetHeaderClass + '\"/>')                                     // 11073\n\t\t\t.appendTo(this.timeGrid.el); // inject it into the time-grid                                                        // 11074\n                                                                                                                       // 11075\n\t\tif (this.dayGrid) {                                                                                                  // 11076\n\t\t\tthis.dayGrid.setElement(this.el.find('.fc-day-grid'));                                                              // 11077\n\t\t\tthis.dayGrid.renderDates();                                                                                         // 11078\n                                                                                                                       // 11079\n\t\t\t// have the day-grid extend it's coordinate area over the <hr> dividing the two grids                               // 11080\n\t\t\tthis.dayGrid.bottomCoordPadding = this.dayGrid.el.next('hr').outerHeight();                                         // 11081\n\t\t}                                                                                                                    // 11082\n                                                                                                                       // 11083\n\t\tthis.noScrollRowEls = this.el.find('.fc-row:not(.fc-scroller *)'); // fake rows not within the scroller              // 11084\n\t},                                                                                                                    // 11085\n                                                                                                                       // 11086\n                                                                                                                       // 11087\n\t// render the day-of-week headers                                                                                     // 11088\n\trenderHead: function() {                                                                                              // 11089\n\t\tthis.headContainerEl =                                                                                               // 11090\n\t\t\tthis.el.find('.fc-head-container')                                                                                  // 11091\n\t\t\t\t.html(this.timeGrid.renderHeadHtml());                                                                             // 11092\n\t},                                                                                                                    // 11093\n                                                                                                                       // 11094\n                                                                                                                       // 11095\n\t// Unrenders the content of the view. Since we haven't separated skeleton rendering from date rendering,              // 11096\n\t// always completely kill each grid's rendering.                                                                      // 11097\n\tunrenderDates: function() {                                                                                           // 11098\n\t\tthis.timeGrid.unrenderDates();                                                                                       // 11099\n\t\tthis.timeGrid.removeElement();                                                                                       // 11100\n                                                                                                                       // 11101\n\t\tif (this.dayGrid) {                                                                                                  // 11102\n\t\t\tthis.dayGrid.unrenderDates();                                                                                       // 11103\n\t\t\tthis.dayGrid.removeElement();                                                                                       // 11104\n\t\t}                                                                                                                    // 11105\n\t},                                                                                                                    // 11106\n                                                                                                                       // 11107\n                                                                                                                       // 11108\n\trenderBusinessHours: function() {                                                                                     // 11109\n\t\tthis.timeGrid.renderBusinessHours();                                                                                 // 11110\n                                                                                                                       // 11111\n\t\tif (this.dayGrid) {                                                                                                  // 11112\n\t\t\tthis.dayGrid.renderBusinessHours();                                                                                 // 11113\n\t\t}                                                                                                                    // 11114\n\t},                                                                                                                    // 11115\n                                                                                                                       // 11116\n                                                                                                                       // 11117\n\t// Builds the HTML skeleton for the view.                                                                             // 11118\n\t// The day-grid and time-grid components will render inside containers defined by this HTML.                          // 11119\n\trenderSkeletonHtml: function() {                                                                                      // 11120\n\t\treturn '' +                                                                                                          // 11121\n\t\t\t'<table>' +                                                                                                         // 11122\n\t\t\t\t'<thead class=\"fc-head\">' +                                                                                        // 11123\n\t\t\t\t\t'<tr>' +                                                                                                          // 11124\n\t\t\t\t\t\t'<td class=\"fc-head-container ' + this.widgetHeaderClass + '\"></td>' +                                           // 11125\n\t\t\t\t\t'</tr>' +                                                                                                         // 11126\n\t\t\t\t'</thead>' +                                                                                                       // 11127\n\t\t\t\t'<tbody class=\"fc-body\">' +                                                                                        // 11128\n\t\t\t\t\t'<tr>' +                                                                                                          // 11129\n\t\t\t\t\t\t'<td class=\"' + this.widgetContentClass + '\">' +                                                                 // 11130\n\t\t\t\t\t\t\t(this.dayGrid ?                                                                                                 // 11131\n\t\t\t\t\t\t\t\t'<div class=\"fc-day-grid\"/>' +                                                                                 // 11132\n\t\t\t\t\t\t\t\t'<hr class=\"fc-divider ' + this.widgetHeaderClass + '\"/>' :                                                    // 11133\n\t\t\t\t\t\t\t\t''                                                                                                             // 11134\n\t\t\t\t\t\t\t\t) +                                                                                                            // 11135\n\t\t\t\t\t\t\t'<div class=\"fc-time-grid-container\">' +                                                                        // 11136\n\t\t\t\t\t\t\t\t'<div class=\"fc-time-grid\"/>' +                                                                                // 11137\n\t\t\t\t\t\t\t'</div>' +                                                                                                      // 11138\n\t\t\t\t\t\t'</td>' +                                                                                                        // 11139\n\t\t\t\t\t'</tr>' +                                                                                                         // 11140\n\t\t\t\t'</tbody>' +                                                                                                       // 11141\n\t\t\t'</table>';                                                                                                         // 11142\n\t},                                                                                                                    // 11143\n                                                                                                                       // 11144\n                                                                                                                       // 11145\n\t// Generates an HTML attribute string for setting the width of the axis, if it is known                               // 11146\n\taxisStyleAttr: function() {                                                                                           // 11147\n\t\tif (this.axisWidth !== null) {                                                                                       // 11148\n\t\t\t return 'style=\"width:' + this.axisWidth + 'px\"';                                                                   // 11149\n\t\t}                                                                                                                    // 11150\n\t\treturn '';                                                                                                           // 11151\n\t},                                                                                                                    // 11152\n                                                                                                                       // 11153\n                                                                                                                       // 11154\n\t/* Dimensions                                                                                                         // 11155\n\t------------------------------------------------------------------------------------------------------------------*/  // 11156\n                                                                                                                       // 11157\n                                                                                                                       // 11158\n\tupdateSize: function(isResize) {                                                                                      // 11159\n\t\tthis.timeGrid.updateSize(isResize);                                                                                  // 11160\n                                                                                                                       // 11161\n\t\tView.prototype.updateSize.call(this, isResize); // call the super-method                                             // 11162\n\t},                                                                                                                    // 11163\n                                                                                                                       // 11164\n                                                                                                                       // 11165\n\t// Refreshes the horizontal dimensions of the view                                                                    // 11166\n\tupdateWidth: function() {                                                                                             // 11167\n\t\t// make all axis cells line up, and record the width so newly created axis cells will have it                        // 11168\n\t\tthis.axisWidth = matchCellWidths(this.el.find('.fc-axis'));                                                          // 11169\n\t},                                                                                                                    // 11170\n                                                                                                                       // 11171\n                                                                                                                       // 11172\n\t// Adjusts the vertical dimensions of the view to the specified values                                                // 11173\n\tsetHeight: function(totalHeight, isAuto) {                                                                            // 11174\n\t\tvar eventLimit;                                                                                                      // 11175\n\t\tvar scrollerHeight;                                                                                                  // 11176\n                                                                                                                       // 11177\n\t\tif (this.bottomRuleHeight === null) {                                                                                // 11178\n\t\t\t// calculate the height of the rule the very first time                                                             // 11179\n\t\t\tthis.bottomRuleHeight = this.bottomRuleEl.outerHeight();                                                            // 11180\n\t\t}                                                                                                                    // 11181\n\t\tthis.bottomRuleEl.hide(); // .show() will be called later if this <hr> is necessary                                  // 11182\n                                                                                                                       // 11183\n\t\t// reset all dimensions back to the original state                                                                   // 11184\n\t\tthis.scrollerEl.css('overflow', '');                                                                                 // 11185\n\t\tunsetScroller(this.scrollerEl);                                                                                      // 11186\n\t\tuncompensateScroll(this.noScrollRowEls);                                                                             // 11187\n                                                                                                                       // 11188\n\t\t// limit number of events in the all-day area                                                                        // 11189\n\t\tif (this.dayGrid) {                                                                                                  // 11190\n\t\t\tthis.dayGrid.removeSegPopover(); // kill the \"more\" popover if displayed                                            // 11191\n                                                                                                                       // 11192\n\t\t\teventLimit = this.opt('eventLimit');                                                                                // 11193\n\t\t\tif (eventLimit && typeof eventLimit !== 'number') {                                                                 // 11194\n\t\t\t\teventLimit = AGENDA_ALL_DAY_EVENT_LIMIT; // make sure \"auto\" goes to a real number                                 // 11195\n\t\t\t}                                                                                                                   // 11196\n\t\t\tif (eventLimit) {                                                                                                   // 11197\n\t\t\t\tthis.dayGrid.limitRows(eventLimit);                                                                                // 11198\n\t\t\t}                                                                                                                   // 11199\n\t\t}                                                                                                                    // 11200\n                                                                                                                       // 11201\n\t\tif (!isAuto) { // should we force dimensions of the scroll container, or let the contents be natural height?         // 11202\n                                                                                                                       // 11203\n\t\t\tscrollerHeight = this.computeScrollerHeight(totalHeight);                                                           // 11204\n\t\t\tif (setPotentialScroller(this.scrollerEl, scrollerHeight)) { // using scrollbars?                                   // 11205\n                                                                                                                       // 11206\n\t\t\t\t// make the all-day and header rows lines up                                                                       // 11207\n\t\t\t\tcompensateScroll(this.noScrollRowEls, getScrollbarWidths(this.scrollerEl));                                        // 11208\n                                                                                                                       // 11209\n\t\t\t\t// the scrollbar compensation might have changed text flow, which might affect height, so recalculate              // 11210\n\t\t\t\t// and reapply the desired height to the scroller.                                                                 // 11211\n\t\t\t\tscrollerHeight = this.computeScrollerHeight(totalHeight);                                                          // 11212\n\t\t\t\tthis.scrollerEl.height(scrollerHeight);                                                                            // 11213\n\t\t\t}                                                                                                                   // 11214\n\t\t\telse { // no scrollbars                                                                                             // 11215\n\t\t\t\t// still, force a height and display the bottom rule (marks the end of day)                                        // 11216\n\t\t\t\tthis.scrollerEl.height(scrollerHeight).css('overflow', 'hidden'); // in case <hr> goes outside                     // 11217\n\t\t\t\tthis.bottomRuleEl.show();                                                                                          // 11218\n\t\t\t}                                                                                                                   // 11219\n\t\t}                                                                                                                    // 11220\n\t},                                                                                                                    // 11221\n                                                                                                                       // 11222\n                                                                                                                       // 11223\n\t// Computes the initial pre-configured scroll state prior to allowing the user to change it                           // 11224\n\tcomputeInitialScroll: function() {                                                                                    // 11225\n\t\tvar scrollTime = moment.duration(this.opt('scrollTime'));                                                            // 11226\n\t\tvar top = this.timeGrid.computeTimeTop(scrollTime);                                                                  // 11227\n                                                                                                                       // 11228\n\t\t// zoom can give weird floating-point values. rather scroll a little bit further                                     // 11229\n\t\ttop = Math.ceil(top);                                                                                                // 11230\n                                                                                                                       // 11231\n\t\tif (top) {                                                                                                           // 11232\n\t\t\ttop++; // to overcome top border that slots beyond the first have. looks better                                     // 11233\n\t\t}                                                                                                                    // 11234\n                                                                                                                       // 11235\n\t\treturn top;                                                                                                          // 11236\n\t},                                                                                                                    // 11237\n                                                                                                                       // 11238\n                                                                                                                       // 11239\n\t/* Hit Areas                                                                                                          // 11240\n\t------------------------------------------------------------------------------------------------------------------*/  // 11241\n\t// forward all hit-related method calls to the grids (dayGrid might not be defined)                                   // 11242\n                                                                                                                       // 11243\n                                                                                                                       // 11244\n\tprepareHits: function() {                                                                                             // 11245\n\t\tthis.timeGrid.prepareHits();                                                                                         // 11246\n\t\tif (this.dayGrid) {                                                                                                  // 11247\n\t\t\tthis.dayGrid.prepareHits();                                                                                         // 11248\n\t\t}                                                                                                                    // 11249\n\t},                                                                                                                    // 11250\n                                                                                                                       // 11251\n                                                                                                                       // 11252\n\treleaseHits: function() {                                                                                             // 11253\n\t\tthis.timeGrid.releaseHits();                                                                                         // 11254\n\t\tif (this.dayGrid) {                                                                                                  // 11255\n\t\t\tthis.dayGrid.releaseHits();                                                                                         // 11256\n\t\t}                                                                                                                    // 11257\n\t},                                                                                                                    // 11258\n                                                                                                                       // 11259\n                                                                                                                       // 11260\n\tqueryHit: function(left, top) {                                                                                       // 11261\n\t\tvar hit = this.timeGrid.queryHit(left, top);                                                                         // 11262\n                                                                                                                       // 11263\n\t\tif (!hit && this.dayGrid) {                                                                                          // 11264\n\t\t\thit = this.dayGrid.queryHit(left, top);                                                                             // 11265\n\t\t}                                                                                                                    // 11266\n                                                                                                                       // 11267\n\t\treturn hit;                                                                                                          // 11268\n\t},                                                                                                                    // 11269\n                                                                                                                       // 11270\n                                                                                                                       // 11271\n\tgetHitSpan: function(hit) {                                                                                           // 11272\n\t\t// TODO: hit.component is set as a hack to identify where the hit came from                                          // 11273\n\t\treturn hit.component.getHitSpan(hit);                                                                                // 11274\n\t},                                                                                                                    // 11275\n                                                                                                                       // 11276\n                                                                                                                       // 11277\n\tgetHitEl: function(hit) {                                                                                             // 11278\n\t\t// TODO: hit.component is set as a hack to identify where the hit came from                                          // 11279\n\t\treturn hit.component.getHitEl(hit);                                                                                  // 11280\n\t},                                                                                                                    // 11281\n                                                                                                                       // 11282\n                                                                                                                       // 11283\n\t/* Events                                                                                                             // 11284\n\t------------------------------------------------------------------------------------------------------------------*/  // 11285\n                                                                                                                       // 11286\n                                                                                                                       // 11287\n\t// Renders events onto the view and populates the View's segment array                                                // 11288\n\trenderEvents: function(events) {                                                                                      // 11289\n\t\tvar dayEvents = [];                                                                                                  // 11290\n\t\tvar timedEvents = [];                                                                                                // 11291\n\t\tvar daySegs = [];                                                                                                    // 11292\n\t\tvar timedSegs;                                                                                                       // 11293\n\t\tvar i;                                                                                                               // 11294\n                                                                                                                       // 11295\n\t\t// separate the events into all-day and timed                                                                        // 11296\n\t\tfor (i = 0; i < events.length; i++) {                                                                                // 11297\n\t\t\tif (events[i].allDay) {                                                                                             // 11298\n\t\t\t\tdayEvents.push(events[i]);                                                                                         // 11299\n\t\t\t}                                                                                                                   // 11300\n\t\t\telse {                                                                                                              // 11301\n\t\t\t\ttimedEvents.push(events[i]);                                                                                       // 11302\n\t\t\t}                                                                                                                   // 11303\n\t\t}                                                                                                                    // 11304\n                                                                                                                       // 11305\n\t\t// render the events in the subcomponents                                                                            // 11306\n\t\ttimedSegs = this.timeGrid.renderEvents(timedEvents);                                                                 // 11307\n\t\tif (this.dayGrid) {                                                                                                  // 11308\n\t\t\tdaySegs = this.dayGrid.renderEvents(dayEvents);                                                                     // 11309\n\t\t}                                                                                                                    // 11310\n                                                                                                                       // 11311\n\t\t// the all-day area is flexible and might have a lot of events, so shift the height                                  // 11312\n\t\tthis.updateHeight();                                                                                                 // 11313\n\t},                                                                                                                    // 11314\n                                                                                                                       // 11315\n                                                                                                                       // 11316\n\t// Retrieves all segment objects that are rendered in the view                                                        // 11317\n\tgetEventSegs: function() {                                                                                            // 11318\n\t\treturn this.timeGrid.getEventSegs().concat(                                                                          // 11319\n\t\t\tthis.dayGrid ? this.dayGrid.getEventSegs() : []                                                                     // 11320\n\t\t);                                                                                                                   // 11321\n\t},                                                                                                                    // 11322\n                                                                                                                       // 11323\n                                                                                                                       // 11324\n\t// Unrenders all event elements and clears internal segment data                                                      // 11325\n\tunrenderEvents: function() {                                                                                          // 11326\n                                                                                                                       // 11327\n\t\t// unrender the events in the subcomponents                                                                          // 11328\n\t\tthis.timeGrid.unrenderEvents();                                                                                      // 11329\n\t\tif (this.dayGrid) {                                                                                                  // 11330\n\t\t\tthis.dayGrid.unrenderEvents();                                                                                      // 11331\n\t\t}                                                                                                                    // 11332\n                                                                                                                       // 11333\n\t\t// we DON'T need to call updateHeight() because:                                                                     // 11334\n\t\t// A) a renderEvents() call always happens after this, which will eventually call updateHeight()                     // 11335\n\t\t// B) in IE8, this causes a flash whenever events are rerendered                                                     // 11336\n\t},                                                                                                                    // 11337\n                                                                                                                       // 11338\n                                                                                                                       // 11339\n\t/* Dragging (for events and external elements)                                                                        // 11340\n\t------------------------------------------------------------------------------------------------------------------*/  // 11341\n                                                                                                                       // 11342\n                                                                                                                       // 11343\n\t// A returned value of `true` signals that a mock \"helper\" event has been rendered.                                   // 11344\n\trenderDrag: function(dropLocation, seg) {                                                                             // 11345\n\t\tif (dropLocation.start.hasTime()) {                                                                                  // 11346\n\t\t\treturn this.timeGrid.renderDrag(dropLocation, seg);                                                                 // 11347\n\t\t}                                                                                                                    // 11348\n\t\telse if (this.dayGrid) {                                                                                             // 11349\n\t\t\treturn this.dayGrid.renderDrag(dropLocation, seg);                                                                  // 11350\n\t\t}                                                                                                                    // 11351\n\t},                                                                                                                    // 11352\n                                                                                                                       // 11353\n                                                                                                                       // 11354\n\tunrenderDrag: function() {                                                                                            // 11355\n\t\tthis.timeGrid.unrenderDrag();                                                                                        // 11356\n\t\tif (this.dayGrid) {                                                                                                  // 11357\n\t\t\tthis.dayGrid.unrenderDrag();                                                                                        // 11358\n\t\t}                                                                                                                    // 11359\n\t},                                                                                                                    // 11360\n                                                                                                                       // 11361\n                                                                                                                       // 11362\n\t/* Selection                                                                                                          // 11363\n\t------------------------------------------------------------------------------------------------------------------*/  // 11364\n                                                                                                                       // 11365\n                                                                                                                       // 11366\n\t// Renders a visual indication of a selection                                                                         // 11367\n\trenderSelection: function(span) {                                                                                     // 11368\n\t\tif (span.start.hasTime() || span.end.hasTime()) {                                                                    // 11369\n\t\t\tthis.timeGrid.renderSelection(span);                                                                                // 11370\n\t\t}                                                                                                                    // 11371\n\t\telse if (this.dayGrid) {                                                                                             // 11372\n\t\t\tthis.dayGrid.renderSelection(span);                                                                                 // 11373\n\t\t}                                                                                                                    // 11374\n\t},                                                                                                                    // 11375\n                                                                                                                       // 11376\n                                                                                                                       // 11377\n\t// Unrenders a visual indications of a selection                                                                      // 11378\n\tunrenderSelection: function() {                                                                                       // 11379\n\t\tthis.timeGrid.unrenderSelection();                                                                                   // 11380\n\t\tif (this.dayGrid) {                                                                                                  // 11381\n\t\t\tthis.dayGrid.unrenderSelection();                                                                                   // 11382\n\t\t}                                                                                                                    // 11383\n\t}                                                                                                                     // 11384\n                                                                                                                       // 11385\n});                                                                                                                    // 11386\n                                                                                                                       // 11387\n                                                                                                                       // 11388\n// Methods that will customize the rendering behavior of the AgendaView's timeGrid                                     // 11389\nvar agendaTimeGridMethods = {                                                                                          // 11390\n                                                                                                                       // 11391\n                                                                                                                       // 11392\n\t// Generates the HTML that will go before the day-of week header cells                                                // 11393\n\trenderHeadIntroHtml: function() {                                                                                     // 11394\n\t\tvar view = this.view;                                                                                                // 11395\n\t\tvar weekText;                                                                                                        // 11396\n                                                                                                                       // 11397\n\t\tif (view.opt('weekNumbers')) {                                                                                       // 11398\n\t\t\tweekText = this.start.format(view.opt('smallWeekFormat'));                                                          // 11399\n                                                                                                                       // 11400\n\t\t\treturn '' +                                                                                                         // 11401\n\t\t\t\t'<th class=\"fc-axis fc-week-number ' + view.widgetHeaderClass + '\" ' + view.axisStyleAttr() + '>' +                // 11402\n\t\t\t\t\t'<span>' + // needed for matchCellWidths                                                                          // 11403\n\t\t\t\t\t\thtmlEscape(weekText) +                                                                                           // 11404\n\t\t\t\t\t'</span>' +                                                                                                       // 11405\n\t\t\t\t'</th>';                                                                                                           // 11406\n\t\t}                                                                                                                    // 11407\n\t\telse {                                                                                                               // 11408\n\t\t\treturn '<th class=\"fc-axis ' + view.widgetHeaderClass + '\" ' + view.axisStyleAttr() + '></th>';                     // 11409\n\t\t}                                                                                                                    // 11410\n\t},                                                                                                                    // 11411\n                                                                                                                       // 11412\n                                                                                                                       // 11413\n\t// Generates the HTML that goes before the bg of the TimeGrid slot area. Long vertical column.                        // 11414\n\trenderBgIntroHtml: function() {                                                                                       // 11415\n\t\tvar view = this.view;                                                                                                // 11416\n                                                                                                                       // 11417\n\t\treturn '<td class=\"fc-axis ' + view.widgetContentClass + '\" ' + view.axisStyleAttr() + '></td>';                     // 11418\n\t},                                                                                                                    // 11419\n                                                                                                                       // 11420\n                                                                                                                       // 11421\n\t// Generates the HTML that goes before all other types of cells.                                                      // 11422\n\t// Affects content-skeleton, helper-skeleton, highlight-skeleton for both the time-grid and day-grid.                 // 11423\n\trenderIntroHtml: function() {                                                                                         // 11424\n\t\tvar view = this.view;                                                                                                // 11425\n                                                                                                                       // 11426\n\t\treturn '<td class=\"fc-axis\" ' + view.axisStyleAttr() + '></td>';                                                     // 11427\n\t}                                                                                                                     // 11428\n                                                                                                                       // 11429\n};                                                                                                                     // 11430\n                                                                                                                       // 11431\n                                                                                                                       // 11432\n// Methods that will customize the rendering behavior of the AgendaView's dayGrid                                      // 11433\nvar agendaDayGridMethods = {                                                                                           // 11434\n                                                                                                                       // 11435\n                                                                                                                       // 11436\n\t// Generates the HTML that goes before the all-day cells                                                              // 11437\n\trenderBgIntroHtml: function() {                                                                                       // 11438\n\t\tvar view = this.view;                                                                                                // 11439\n                                                                                                                       // 11440\n\t\treturn '' +                                                                                                          // 11441\n\t\t\t'<td class=\"fc-axis ' + view.widgetContentClass + '\" ' + view.axisStyleAttr() + '>' +                               // 11442\n\t\t\t\t'<span>' + // needed for matchCellWidths                                                                           // 11443\n\t\t\t\t\t(view.opt('allDayHtml') || htmlEscape(view.opt('allDayText'))) +                                                  // 11444\n\t\t\t\t'</span>' +                                                                                                        // 11445\n\t\t\t'</td>';                                                                                                            // 11446\n\t},                                                                                                                    // 11447\n                                                                                                                       // 11448\n                                                                                                                       // 11449\n\t// Generates the HTML that goes before all other types of cells.                                                      // 11450\n\t// Affects content-skeleton, helper-skeleton, highlight-skeleton for both the time-grid and day-grid.                 // 11451\n\trenderIntroHtml: function() {                                                                                         // 11452\n\t\tvar view = this.view;                                                                                                // 11453\n                                                                                                                       // 11454\n\t\treturn '<td class=\"fc-axis\" ' + view.axisStyleAttr() + '></td>';                                                     // 11455\n\t}                                                                                                                     // 11456\n                                                                                                                       // 11457\n};                                                                                                                     // 11458\n                                                                                                                       // 11459\n;;                                                                                                                     // 11460\n                                                                                                                       // 11461\nvar AGENDA_ALL_DAY_EVENT_LIMIT = 5;                                                                                    // 11462\n                                                                                                                       // 11463\n// potential nice values for the slot-duration and interval-duration                                                   // 11464\n// from largest to smallest                                                                                            // 11465\nvar AGENDA_STOCK_SUB_DURATIONS = [                                                                                     // 11466\n\t{ hours: 1 },                                                                                                         // 11467\n\t{ minutes: 30 },                                                                                                      // 11468\n\t{ minutes: 15 },                                                                                                      // 11469\n\t{ seconds: 30 },                                                                                                      // 11470\n\t{ seconds: 15 }                                                                                                       // 11471\n];                                                                                                                     // 11472\n                                                                                                                       // 11473\nfcViews.agenda = {                                                                                                     // 11474\n\t'class': AgendaView,                                                                                                  // 11475\n\tdefaults: {                                                                                                           // 11476\n\t\tallDaySlot: true,                                                                                                    // 11477\n\t\tallDayText: 'all-day',                                                                                               // 11478\n\t\tslotDuration: '00:30:00',                                                                                            // 11479\n\t\tminTime: '00:00:00',                                                                                                 // 11480\n\t\tmaxTime: '24:00:00',                                                                                                 // 11481\n\t\tslotEventOverlap: true // a bad name. confused with overlap/constraint system                                        // 11482\n\t}                                                                                                                     // 11483\n};                                                                                                                     // 11484\n                                                                                                                       // 11485\nfcViews.agendaDay = {                                                                                                  // 11486\n\ttype: 'agenda',                                                                                                       // 11487\n\tduration: { days: 1 }                                                                                                 // 11488\n};                                                                                                                     // 11489\n                                                                                                                       // 11490\nfcViews.agendaWeek = {                                                                                                 // 11491\n\ttype: 'agenda',                                                                                                       // 11492\n\tduration: { weeks: 1 }                                                                                                // 11493\n};                                                                                                                     // 11494\n;;                                                                                                                     // 11495\n                                                                                                                       // 11496\nreturn FC; // export for Node/CommonJS                                                                                 // 11497\n});                                                                                                                    // 11498\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/rzymek_fullcalendar/fullcalendar/dist/lang-all.js                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n!function(a){\"function\"==typeof define&&define.amd?define([\"jquery\",\"moment\"],a):a(jQuery,moment)}(function(a,b){!function(){(b.defineLocale||b.lang).call(b,\"ar-ma\",{months:\"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر\".split(\"_\"),monthsShort:\"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر\".split(\"_\"),weekdays:\"الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت\".split(\"_\"),weekdaysShort:\"احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت\".split(\"_\"),weekdaysMin:\"ح_ن_ث_ر_خ_ج_س\".split(\"_\"),longDateFormat:{LT:\"HH:mm\",LTS:\"LT:ss\",L:\"DD/MM/YYYY\",LL:\"D MMMM YYYY\",LLL:\"D MMMM YYYY LT\",LLLL:\"dddd D MMMM YYYY LT\"},calendar:{sameDay:\"[اليوم على الساعة] LT\",nextDay:\"[غدا على الساعة] LT\",nextWeek:\"dddd [على الساعة] LT\",lastDay:\"[أمس على الساعة] LT\",lastWeek:\"dddd [على الساعة] LT\",sameElse:\"L\"},relativeTime:{future:\"في %s\",past:\"منذ %s\",s:\"ثوان\",m:\"دقيقة\",mm:\"%d دقائق\",h:\"ساعة\",hh:\"%d ساعات\",d:\"يوم\",dd:\"%d أيام\",M:\"شهر\",MM:\"%d أشهر\",y:\"سنة\",yy:\"%d سنوات\"},week:{dow:6,doy:12}}),a.fullCalendar.datepickerLang(\"ar-ma\",\"ar\",{closeText:\"إغلاق\",prevText:\"&#x3C;السابق\",nextText:\"التالي&#x3E;\",currentText:\"اليوم\",monthNames:[\"كانون الثاني\",\"شباط\",\"آذار\",\"نيسان\",\"مايو\",\"حزيران\",\"تموز\",\"آب\",\"أيلول\",\"تشرين الأول\",\"تشرين الثاني\",\"كانون الأول\"],monthNamesShort:[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\"],dayNames:[\"الأحد\",\"الاثنين\",\"الثلاثاء\",\"الأربعاء\",\"الخميس\",\"الجمعة\",\"السبت\"],dayNamesShort:[\"الأحد\",\"الاثنين\",\"الثلاثاء\",\"الأربعاء\",\"الخميس\",\"الجمعة\",\"السبت\"],dayNamesMin:[\"ح\",\"ن\",\"ث\",\"ر\",\"خ\",\"ج\",\"س\"],weekHeader:\"أسبوع\",dateFormat:\"dd/mm/yy\",firstDay:6,isRTL:!0,showMonthAfterYear:!1,yearSuffix:\"\"}),a.fullCalendar.lang(\"ar-ma\",{buttonText:{month:\"شهر\",week:\"أسبوع\",day:\"يوم\",list:\"أجندة\"},allDayText:\"اليوم كله\",eventLimitText:\"أخرى\"})}(),function(){var c={1:\"١\",2:\"٢\",3:\"٣\",4:\"٤\",5:\"٥\",6:\"٦\",7:\"٧\",8:\"٨\",9:\"٩\",0:\"٠\"},d={\"١\":\"1\",\"٢\":\"2\",\"٣\":\"3\",\"٤\":\"4\",\"٥\":\"5\",\"٦\":\"6\",\"٧\":\"7\",\"٨\":\"8\",\"٩\":\"9\",\"٠\":\"0\"};(b.defineLocale||b.lang).call(b,\"ar-sa\",{months:\"يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر\".split(\"_\"),monthsShort:\"يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر\".split(\"_\"),weekdays:\"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت\".split(\"_\"),weekdaysShort:\"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت\".split(\"_\"),weekdaysMin:\"ح_ن_ث_ر_خ_ج_س\".split(\"_\"),longDateFormat:{LT:\"HH:mm\",LTS:\"HH:mm:ss\",L:\"DD/MM/YYYY\",LL:\"D MMMM YYYY\",LLL:\"D MMMM YYYY LT\",LLLL:\"dddd D MMMM YYYY LT\"},meridiemParse:/ص|م/,isPM:function(a){return\"م\"===a},meridiem:function(a,b,c){return 12>a?\"ص\":\"م\"},calendar:{sameDay:\"[اليوم على الساعة] LT\",nextDay:\"[غدا على الساعة] LT\",nextWeek:\"dddd [على الساعة] LT\",lastDay:\"[أمس على الساعة] LT\",lastWeek:\"dddd [على الساعة] LT\",sameElse:\"L\"},relativeTime:{future:\"في %s\",past:\"منذ %s\",s:\"ثوان\",m:\"دقيقة\",mm:\"%d دقائق\",h:\"ساعة\",hh:\"%d ساعات\",d:\"يوم\",dd:\"%d أيام\",M:\"شهر\",MM:\"%d أشهر\",y:\"سنة\",yy:\"%d سنوات\"},preparse:function(a){return a.replace(/[١٢٣٤٥٦٧٨٩٠]/g,function(a){return d[a]}).replace(/،/g,\",\")},postformat:function(a){return a.replace(/\\d/g,function(a){return c[a]}).replace(/,/g,\"،\")},week:{dow:6,doy:12}}),a.fullCalendar.datepickerLang(\"ar-sa\",\"ar\",{closeText:\"إغلاق\",prevText:\"&#x3C;السابق\",nextText:\"التالي&#x3E;\",currentText:\"اليوم\",monthNames:[\"كانون الثاني\",\"شباط\",\"آذار\",\"نيسان\",\"مايو\",\"حزيران\",\"تموز\",\"آب\",\"أيلول\",\"تشرين الأول\",\"تشرين الثاني\",\"كانون الأول\"],monthNamesShort:[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\"],dayNames:[\"الأحد\",\"الاثنين\",\"الثلاثاء\",\"الأربعاء\",\"الخميس\",\"الجمعة\",\"السبت\"],dayNamesShort:[\"الأحد\",\"الاثنين\",\"الثلاثاء\",\"الأربعاء\",\"الخميس\",\"الجمعة\",\"السبت\"],dayNamesMin:[\"ح\",\"ن\",\"ث\",\"ر\",\"خ\",\"ج\",\"س\"],weekHeader:\"أسبوع\",dateFormat:\"dd/mm/yy\",firstDay:6,isRTL:!0,showMonthAfterYear:!1,yearSuffix:\"\"}),a.fullCalendar.lang(\"ar-sa\",{buttonText:{month:\"شهر\",week:\"أسبوع\",day:\"يوم\",list:\"أجندة\"},allDayText:\"اليوم كله\",eventLimitText:\"أخرى\"})}(),function(){(b.defineLocale||b.lang).call(b,\"ar-tn\",{months:\"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر\".split(\"_\"),monthsShort:\"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر\".split(\"_\"),weekdays:\"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت\".split(\"_\"),weekdaysShort:\"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت\".split(\"_\"),weekdaysMin:\"ح_ن_ث_ر_خ_ج_س\".split(\"_\"),longDateFormat:{LT:\"HH:mm\",LTS:\"LT:ss\",L:\"DD/MM/YYYY\",LL:\"D MMMM YYYY\",LLL:\"D MMMM YYYY LT\",LLLL:\"dddd D MMMM YYYY LT\"},calendar:{sameDay:\"[اليوم على الساعة] LT\",nextDay:\"[غدا على الساعة] LT\",nextWeek:\"dddd [على الساعة] LT\",lastDay:\"[أمس على الساعة] LT\",lastWeek:\"dddd [على الساعة] LT\",sameElse:\"L\"},relativeTime:{future:\"في %s\",past:\"منذ %s\",s:\"ثوان\",m:\"دقيقة\",mm:\"%d دقائق\",h:\"ساعة\",hh:\"%d ساعات\",d:\"يوم\",dd:\"%d أيام\",M:\"شهر\",MM:\"%d أشهر\",y:\"سنة\",yy:\"%d سنوات\"},week:{dow:1,doy:4}}),a.fullCalendar.datepickerLang(\"ar-tn\",\"ar\",{closeText:\"إغلاق\",prevText:\"&#x3C;السابق\",nextText:\"التالي&#x3E;\",currentText:\"اليوم\",monthNames:[\"كانون الثاني\",\"شباط\",\"آذار\",\"نيسان\",\"مايو\",\"حزيران\",\"تموز\",\"آب\",\"أيلول\",\"تشرين الأول\",\"تشرين الثاني\",\"كانون الأول\"],monthNamesShort:[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\"],dayNames:[\"الأحد\",\"الاثنين\",\"الثلاثاء\",\"الأربعاء\",\"الخميس\",\"الجمعة\",\"السبت\"],dayNamesShort:[\"الأحد\",\"الاثنين\",\"الثلاثاء\",\"الأربعاء\",\"الخميس\",\"الجمعة\",\"السبت\"],dayNamesMin:[\"ح\",\"ن\",\"ث\",\"ر\",\"خ\",\"ج\",\"س\"],weekHeader:\"أسبوع\",dateFormat:\"dd/mm/yy\",firstDay:6,isRTL:!0,showMonthAfterYear:!1,yearSuffix:\"\"}),a.fullCalendar.lang(\"ar-tn\",{buttonText:{month:\"شهر\",week:\"أسبوع\",day:\"يوم\",list:\"أجندة\"},allDayText:\"اليوم كله\",eventLimitText:\"أخرى\"})}(),function(){var c={1:\"١\",2:\"٢\",3:\"٣\",4:\"٤\",5:\"٥\",6:\"٦\",7:\"٧\",8:\"٨\",9:\"٩\",0:\"٠\"},d={\"١\":\"1\",\"٢\":\"2\",\"٣\":\"3\",\"٤\":\"4\",\"٥\":\"5\",\"٦\":\"6\",\"٧\":\"7\",\"٨\":\"8\",\"٩\":\"9\",\"٠\":\"0\"},e=function(a){return 0===a?0:1===a?1:2===a?2:a%100>=3&&10>=a%100?3:a%100>=11?4:5},f={s:[\"أقل من ثانية\",\"ثانية واحدة\",[\"ثانيتان\",\"ثانيتين\"],\"%d ثوان\",\"%d ثانية\",\"%d ثانية\"],m:[\"أقل من دقيقة\",\"دقيقة واحدة\",[\"دقيقتان\",\"دقيقتين\"],\"%d دقائق\",\"%d دقيقة\",\"%d دقيقة\"],h:[\"أقل من ساعة\",\"ساعة واحدة\",[\"ساعتان\",\"ساعتين\"],\"%d ساعات\",\"%d ساعة\",\"%d ساعة\"],d:[\"أقل من يوم\",\"يوم واحد\",[\"يومان\",\"يومين\"],\"%d أيام\",\"%d يومًا\",\"%d يوم\"],M:[\"أقل من شهر\",\"شهر واحد\",[\"شهران\",\"شهرين\"],\"%d أشهر\",\"%d شهرا\",\"%d شهر\"],y:[\"أقل من عام\",\"عام واحد\",[\"عامان\",\"عامين\"],\"%d أعوام\",\"%d عامًا\",\"%d عام\"]},g=function(a){return function(b,c,d,g){var h=e(b),i=f[a][e(b)];return 2===h&&(i=i[c?0:1]),i.replace(/%d/i,b)}},h=[\"كانون الثاني يناير\",\"شباط فبراير\",\"آذار مارس\",\"نيسان أبريل\",\"أيار مايو\",\"حزيران يونيو\",\"تموز يوليو\",\"آب أغسطس\",\"أيلول سبتمبر\",\"تشرين الأول أكتوبر\",\"تشرين الثاني نوفمبر\",\"كانون الأول ديسمبر\"];(b.defineLocale||b.lang).call(b,\"ar\",{months:h,monthsShort:h,weekdays:\"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت\".split(\"_\"),weekdaysShort:\"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت\".split(\"_\"),weekdaysMin:\"ح_ن_ث_ر_خ_ج_س\".split(\"_\"),longDateFormat:{LT:\"HH:mm\",LTS:\"HH:mm:ss\",L:\"DD/MM/YYYY\",LL:\"D MMMM YYYY\",LLL:\"D MMMM YYYY LT\",LLLL:\"dddd D MMMM YYYY LT\"},meridiemParse:/ص|م/,isPM:function(a){return\"م\"===a},meridiem:function(a,b,c){return 12>a?\"ص\":\"م\"},calendar:{sameDay:\"[اليوم عند الساعة] LT\",nextDay:\"[غدًا عند الساعة] LT\",nextWeek:\"dddd [عند الساعة] LT\",lastDay:\"[أمس عند الساعة] LT\",lastWeek:\"dddd [عند الساعة] LT\",sameElse:\"L\"},relativeTime:{future:\"بعد %s\",past:\"منذ %s\",s:g(\"s\"),m:g(\"m\"),mm:g(\"m\"),h:g(\"h\"),hh:g(\"h\"),d:g(\"d\"),dd:g(\"d\"),M:g(\"M\"),MM:g(\"M\"),y:g(\"y\"),yy:g(\"y\")},preparse:function(a){return a.replace(/[١٢٣٤٥٦٧٨٩٠]/g,function(a){return d[a]}).replace(/،/g,\",\")},postformat:function(a){return a.replace(/\\d/g,function(a){return c[a]}).replace(/,/g,\"،\")},week:{dow:6,doy:12}}),a.fullCalendar.datepickerLang(\"ar\",\"ar\",{closeText:\"إغلاق\",prevText:\"&#x3C;السابق\",nextText:\"التالي&#x3E;\",currentText:\"اليوم\",monthNames:[\"كانون الثاني\",\"شباط\",\"آذار\",\"نيسان\",\"مايو\",\"حزيران\",\"تموز\",\"آب\",\"أيلول\",\"تشرين الأول\",\"تشرين الثاني\",\"كانون الأول\"],monthNamesShort:[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\"],dayNames:[\"الأحد\",\"الاثنين\",\"الثلاثاء\",\"الأربعاء\",\"الخميس\",\"الجمعة\",\"السبت\"],dayNamesShort:[\"الأحد\",\"الاثنين\",\"الثلاثاء\",\"الأربعاء\",\"الخميس\",\"الجمعة\",\"السبت\"],dayNamesMin:[\"ح\",\"ن\",\"ث\",\"ر\",\"خ\",\"ج\",\"س\"],weekHeader:\"أسبوع\",dateFormat:\"dd/mm/yy\",firstDay:6,isRTL:!0,showMonthAfterYear:!1,yearSuffix:\"\"}),a.fullCalendar.lang(\"ar\",{buttonText:{month:\"شهر\",week:\"أسبوع\",day:\"يوم\",list:\"أجندة\"},allDayText:\"اليوم كله\",eventLimitText:\"أخرى\"})}(),function(){(b.defineLocale||b.lang).call(b,\"bg\",{months:\"януари_февруари_март_април_май_юни_юли_август_септември_октомври_ноември_декември\".split(\"_\"),monthsShort:\"янр_фев_мар_апр_май_юни_юли_авг_сеп_окт_ное_дек\".split(\"_\"),weekdays:\"неделя_понеделник_вторник_сряда_четвъртък_петък_събота\".split(\"_\"),weekdaysShort:\"нед_пон_вто_сря_чет_пет_съб\".split(\"_\"),weekdaysMin:\"нд_пн_вт_ср_чт_пт_сб\".split(\"_\"),longDateFormat:{LT:\"H:mm\",LTS:\"LT:ss\",L:\"D.MM.YYYY\",LL:\"D MMMM YYYY\",LLL:\"D MMMM YYYY LT\",LLLL:\"dddd, D MMMM YYYY LT\"},calendar:{sameDay:\"[Днес в] LT\",nextDay:\"[Утре в] LT\",nextWeek:\"dddd [в] LT\",lastDay:\"[Вчера в] LT\",lastWeek:function(){switch(this.day()){case 0:case 3:case 6:return\"[В изминалата] dddd [в] LT\";case 1:case 2:case 4:case 5:return\"[В изминалия] dddd [в] LT\"}},sameElse:\"L\"},relativeTime:{future:\"след %s\",past:\"преди %s\",s:\"няколко секунди\",m:\"минута\",mm:\"%d минути\",h:\"час\",hh:\"%d часа\",d:\"ден\",dd:\"%d дни\",M:\"месец\",MM:\"%d месеца\",y:\"година\",yy:\"%d години\"},ordinalParse:/\\d{1,2}-(ев|ен|ти|ви|ри|ми)/,ordinal:function(a){var b=a%10,c=a%100;return 0===a?a+\"-ев\":0===c?a+\"-ен\":c>10&&20>c?a+\"-ти\":1===b?a+\"-ви\":2===b?a+\"-ри\":7===b||8===b?a+\"-ми\":a+\"-ти\"},week:{dow:1,doy:7}}),a.fullCalendar.datepickerLang(\"bg\",\"bg\",{closeText:\"затвори\",prevText:\"&#x3C;назад\",nextText:\"напред&#x3E;\",nextBigText:\"&#x3E;&#x3E;\",currentText:\"днес\",monthNames:[\"Януари\",\"Февруари\",\"Март\",\"Април\",\"Май\",\"Юни\",\"Юли\",\"Август\",\"Септември\",\"Октомври\",\"Ноември\",\"Декември\"],monthNamesShort:[\"Яну\",\"Фев\",\"Мар\",\"Апр\",\"Май\",\"Юни\",\"Юли\",\"Авг\",\"Сеп\",\"Окт\",\"Нов\",\"Дек\"],dayNames:[\"Неделя\",\"Понеделник\",\"Вторник\",\"Сряда\",\"Четвъртък\",\"Петък\",\"Събота\"],dayNamesShort:[\"Нед\",\"Пон\",\"Вто\",\"Сря\",\"Чет\",\"Пет\",\"Съб\"],dayNamesMin:[\"Не\",\"По\",\"Вт\",\"Ср\",\"Че\",\"Пе\",\"Съ\"],weekHeader:\"Wk\",dateFormat:\"dd.mm.yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),a.fullCalendar.lang(\"bg\",{buttonText:{month:\"Месец\",week:\"Седмица\",day:\"Ден\",list:\"График\"},allDayText:\"Цял ден\",eventLimitText:function(a){return\"+още \"+a}})}(),function(){(b.defineLocale||b.lang).call(b,\"ca\",{months:\"gener_febrer_març_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre\".split(\"_\"),monthsShort:\"gen._febr._mar._abr._mai._jun._jul._ag._set._oct._nov._des.\".split(\"_\"),weekdays:\"diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte\".split(\"_\"),weekdaysShort:\"dg._dl._dt._dc._dj._dv._ds.\".split(\"_\"),weekdaysMin:\"Dg_Dl_Dt_Dc_Dj_Dv_Ds\".split(\"_\"),longDateFormat:{LT:\"H:mm\",LTS:\"LT:ss\",L:\"DD/MM/YYYY\",LL:\"D MMMM YYYY\",LLL:\"D MMMM YYYY LT\",LLLL:\"dddd D MMMM YYYY LT\"},calendar:{sameDay:function(){return\"[avui a \"+(1!==this.hours()?\"les\":\"la\")+\"] LT\"},nextDay:function(){return\"[demà a \"+(1!==this.hours()?\"les\":\"la\")+\"] LT\"},nextWeek:function(){return\"dddd [a \"+(1!==this.hours()?\"les\":\"la\")+\"] LT\"},lastDay:function(){return\"[ahir a \"+(1!==this.hours()?\"les\":\"la\")+\"] LT\"},lastWeek:function(){return\"[el] dddd [passat a \"+(1!==this.hours()?\"les\":\"la\")+\"] LT\"},sameElse:\"L\"},relativeTime:{future:\"en %s\",past:\"fa %s\",s:\"uns segons\",m:\"un minut\",mm:\"%d minuts\",h:\"una hora\",hh:\"%d hores\",d:\"un dia\",dd:\"%d dies\",M:\"un mes\",MM:\"%d mesos\",y:\"un any\",yy:\"%d anys\"},ordinalParse:/\\d{1,2}(r|n|t|è|a)/,ordinal:function(a,b){var c=1===a?\"r\":2===a?\"n\":3===a?\"r\":4===a?\"t\":\"è\";return(\"w\"===b||\"W\"===b)&&(c=\"a\"),a+c},week:{dow:1,doy:4}}),a.fullCalendar.datepickerLang(\"ca\",\"ca\",{closeText:\"Tanca\",prevText:\"Anterior\",nextText:\"Següent\",currentText:\"Avui\",monthNames:[\"gener\",\"febrer\",\"març\",\"abril\",\"maig\",\"juny\",\"juliol\",\"agost\",\"setembre\",\"octubre\",\"novembre\",\"desembre\"],monthNamesShort:[\"gen\",\"feb\",\"març\",\"abr\",\"maig\",\"juny\",\"jul\",\"ag\",\"set\",\"oct\",\"nov\",\"des\"],dayNames:[\"diumenge\",\"dilluns\",\"dimarts\",\"dimecres\",\"dijous\",\"divendres\",\"dissabte\"],dayNamesShort:[\"dg\",\"dl\",\"dt\",\"dc\",\"dj\",\"dv\",\"ds\"],dayNamesMin:[\"dg\",\"dl\",\"dt\",\"dc\",\"dj\",\"dv\",\"ds\"],weekHeader:\"Set\",dateFormat:\"dd/mm/yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),a.fullCalendar.lang(\"ca\",{buttonText:{month:\"Mes\",week:\"Setmana\",day:\"Dia\",list:\"Agenda\"},allDayText:\"Tot el dia\",eventLimitText:\"més\"})}(),function(){function c(a){return a>1&&5>a&&1!==~~(a/10)}function d(a,b,d,e){var f=a+\" \";switch(d){case\"s\":return b||e?\"pár sekund\":\"pár sekundami\";case\"m\":return b?\"minuta\":e?\"minutu\":\"minutou\";case\"mm\":return b||e?f+(c(a)?\"minuty\":\"minut\"):f+\"minutami\";case\"h\":return b?\"hodina\":e?\"hodinu\":\"hodinou\";case\"hh\":return b||e?f+(c(a)?\"hodiny\":\"hodin\"):f+\"hodinami\";case\"d\":return b||e?\"den\":\"dnem\";case\"dd\":return b||e?f+(c(a)?\"dny\":\"dní\"):f+\"dny\";case\"M\":return b||e?\"měsíc\":\"měsícem\";case\"MM\":return b||e?f+(c(a)?\"měsíce\":\"měsíců\"):f+\"měsíci\";case\"y\":return b||e?\"rok\":\"rokem\";case\"yy\":return b||e?f+(c(a)?\"roky\":\"let\"):f+\"lety\"}}var e=\"leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec\".split(\"_\"),f=\"led_úno_bře_dub_kvě_čvn_čvc_srp_zář_říj_lis_pro\".split(\"_\");(b.defineLocale||b.lang).call(b,\"cs\",{months:e,monthsShort:f,monthsParse:function(a,b){var c,d=[];for(c=0;12>c;c++)d[c]=new RegExp(\"^\"+a[c]+\"$|^\"+b[c]+\"$\",\"i\");return d}(e,f),weekdays:\"neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota\".split(\"_\"),weekdaysShort:\"ne_po_út_st_čt_pá_so\".split(\"_\"),weekdaysMin:\"ne_po_út_st_čt_pá_so\".split(\"_\"),longDateFormat:{LT:\"H:mm\",LTS:\"LT:ss\",L:\"DD.MM.YYYY\",LL:\"D. MMMM YYYY\",LLL:\"D. MMMM YYYY LT\",LLLL:\"dddd D. MMMM YYYY LT\"},calendar:{sameDay:\"[dnes v] LT\",nextDay:\"[zítra v] LT\",nextWeek:function(){switch(this.day()){case 0:return\"[v neděli v] LT\";case 1:case 2:return\"[v] dddd [v] LT\";case 3:return\"[ve středu v] LT\";case 4:return\"[ve čtvrtek v] LT\";case 5:return\"[v pátek v] LT\";case 6:return\"[v sobotu v] LT\"}},lastDay:\"[včera v] LT\",lastWeek:function(){switch(this.day()){case 0:return\"[minulou neděli v] LT\";case 1:case 2:return\"[minulé] dddd [v] LT\";case 3:return\"[minulou středu v] LT\";case 4:case 5:return\"[minulý] dddd [v] LT\";case 6:return\"[minulou sobotu v] LT\"}},sameElse:\"L\"},relativeTime:{future:\"za %s\",past:\"před %s\",s:d,m:d,mm:d,h:d,hh:d,d:d,dd:d,M:d,MM:d,y:d,yy:d},ordinalParse:/\\d{1,2}\\./,ordinal:\"%d.\",week:{dow:1,doy:4}}),a.fullCalendar.datepickerLang(\"cs\",\"cs\",{closeText:\"Zavřít\",prevText:\"&#x3C;Dříve\",nextText:\"Později&#x3E;\",currentText:\"Nyní\",monthNames:[\"leden\",\"únor\",\"březen\",\"duben\",\"květen\",\"červen\",\"červenec\",\"srpen\",\"září\",\"říjen\",\"listopad\",\"prosinec\"],monthNamesShort:[\"led\",\"úno\",\"bře\",\"dub\",\"kvě\",\"čer\",\"čvc\",\"srp\",\"zář\",\"říj\",\"lis\",\"pro\"],dayNames:[\"neděle\",\"pondělí\",\"úterý\",\"středa\",\"čtvrtek\",\"pátek\",\"sobota\"],dayNamesShort:[\"ne\",\"po\",\"út\",\"st\",\"čt\",\"pá\",\"so\"],dayNamesMin:[\"ne\",\"po\",\"út\",\"st\",\"čt\",\"pá\",\"so\"],weekHeader:\"Týd\",dateFormat:\"dd.mm.yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),a.fullCalendar.lang(\"cs\",{buttonText:{month:\"Měsíc\",week:\"Týden\",day:\"Den\",list:\"Agenda\"},allDayText:\"Celý den\",eventLimitText:function(a){return\"+další: \"+a}})}(),function(){(b.defineLocale||b.lang).call(b,\"da\",{months:\"januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december\".split(\"_\"),monthsShort:\"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec\".split(\"_\"),weekdays:\"søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag\".split(\"_\"),weekdaysShort:\"søn_man_tir_ons_tor_fre_lør\".split(\"_\"),weekdaysMin:\"sø_ma_ti_on_to_fr_lø\".split(\"_\"),longDateFormat:{LT:\"HH:mm\",LTS:\"LT:ss\",L:\"DD/MM/YYYY\",LL:\"D. MMMM YYYY\",LLL:\"D. MMMM YYYY LT\",LLLL:\"dddd [d.] D. MMMM YYYY LT\"},calendar:{sameDay:\"[I dag kl.] LT\",nextDay:\"[I morgen kl.] LT\",nextWeek:\"dddd [kl.] LT\",lastDay:\"[I går kl.] LT\",lastWeek:\"[sidste] dddd [kl] LT\",sameElse:\"L\"},relativeTime:{future:\"om %s\",past:\"%s siden\",s:\"få sekunder\",m:\"et minut\",mm:\"%d minutter\",h:\"en time\",hh:\"%d timer\",d:\"en dag\",dd:\"%d dage\",M:\"en måned\",MM:\"%d måneder\",y:\"et år\",yy:\"%d år\"},ordinalParse:/\\d{1,2}\\./,ordinal:\"%d.\",week:{dow:1,doy:4}}),a.fullCalendar.datepickerLang(\"da\",\"da\",{closeText:\"Luk\",prevText:\"&#x3C;Forrige\",nextText:\"Næste&#x3E;\",currentText:\"Idag\",monthNames:[\"Januar\",\"Februar\",\"Marts\",\"April\",\"Maj\",\"Juni\",\"Juli\",\"August\",\"September\",\"Oktober\",\"November\",\"December\"],monthNamesShort:[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"Maj\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Okt\",\"Nov\",\"Dec\"],dayNames:[\"Søndag\",\"Mandag\",\"Tirsdag\",\"Onsdag\",\"Torsdag\",\"Fredag\",\"Lørdag\"],dayNamesShort:[\"Søn\",\"Man\",\"Tir\",\"Ons\",\"Tor\",\"Fre\",\"Lør\"],dayNamesMin:[\"Sø\",\"Ma\",\"Ti\",\"On\",\"To\",\"Fr\",\"Lø\"],weekHeader:\"Uge\",dateFormat:\"dd-mm-yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),a.fullCalendar.lang(\"da\",{buttonText:{month:\"Måned\",week:\"Uge\",day:\"Dag\",list:\"Agenda\"},allDayText:\"Hele dagen\",eventLimitText:\"flere\"})}(),function(){function c(a,b,c,d){var e={m:[\"eine Minute\",\"einer Minute\"],h:[\"eine Stunde\",\"einer Stunde\"],d:[\"ein Tag\",\"einem Tag\"],dd:[a+\" Tage\",a+\" Tagen\"],M:[\"ein Monat\",\"einem Monat\"],MM:[a+\" Monate\",a+\" Monaten\"],y:[\"ein Jahr\",\"einem Jahr\"],yy:[a+\" Jahre\",a+\" Jahren\"]};return b?e[c][0]:e[c][1]}(b.defineLocale||b.lang).call(b,\"de-at\",{months:\"Jänner_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember\".split(\"_\"),monthsShort:\"Jän._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.\".split(\"_\"),weekdays:\"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag\".split(\"_\"),weekdaysShort:\"So._Mo._Di._Mi._Do._Fr._Sa.\".split(\"_\"),weekdaysMin:\"So_Mo_Di_Mi_Do_Fr_Sa\".split(\"_\"),longDateFormat:{LT:\"HH:mm\",LTS:\"HH:mm:ss\",L:\"DD.MM.YYYY\",LL:\"D. MMMM YYYY\",LLL:\"D. MMMM YYYY LT\",LLLL:\"dddd, D. MMMM YYYY LT\"},calendar:{sameDay:\"[Heute um] LT [Uhr]\",sameElse:\"L\",nextDay:\"[Morgen um] LT [Uhr]\",nextWeek:\"dddd [um] LT [Uhr]\",lastDay:\"[Gestern um] LT [Uhr]\",lastWeek:\"[letzten] dddd [um] LT [Uhr]\"},relativeTime:{future:\"in %s\",past:\"vor %s\",s:\"ein paar Sekunden\",m:c,mm:\"%d Minuten\",h:c,hh:\"%d Stunden\",d:c,dd:c,M:c,MM:c,y:c,yy:c},ordinalParse:/\\d{1,2}\\./,ordinal:\"%d.\",week:{dow:1,doy:4}}),a.fullCalendar.datepickerLang(\"de-at\",\"de\",{closeText:\"Schließen\",prevText:\"&#x3C;Zurück\",nextText:\"Vor&#x3E;\",currentText:\"Heute\",monthNames:[\"Januar\",\"Februar\",\"März\",\"April\",\"Mai\",\"Juni\",\"Juli\",\"August\",\"September\",\"Oktober\",\"November\",\"Dezember\"],monthNamesShort:[\"Jan\",\"Feb\",\"Mär\",\"Apr\",\"Mai\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Okt\",\"Nov\",\"Dez\"],dayNames:[\"Sonntag\",\"Montag\",\"Dienstag\",\"Mittwoch\",\"Donnerstag\",\"Freitag\",\"Samstag\"],dayNamesShort:[\"So\",\"Mo\",\"Di\",\"Mi\",\"Do\",\"Fr\",\"Sa\"],dayNamesMin:[\"So\",\"Mo\",\"Di\",\"Mi\",\"Do\",\"Fr\",\"Sa\"],weekHeader:\"KW\",dateFormat:\"dd.mm.yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),a.fullCalendar.lang(\"de-at\",{buttonText:{month:\"Monat\",week:\"Woche\",day:\"Tag\",list:\"Terminübersicht\"},allDayText:\"Ganztägig\",eventLimitText:function(a){return\"+ weitere \"+a}})}(),function(){function c(a,b,c,d){var e={m:[\"eine Minute\",\"einer Minute\"],h:[\"eine Stunde\",\"einer Stunde\"],d:[\"ein Tag\",\"einem Tag\"],dd:[a+\" Tage\",a+\" Tagen\"],M:[\"ein Monat\",\"einem Monat\"],MM:[a+\" Monate\",a+\" Monaten\"],y:[\"ein Jahr\",\"einem Jahr\"],yy:[a+\" Jahre\",a+\" Jahren\"]};return b?e[c][0]:e[c][1]}(b.defineLocale||b.lang).call(b,\"de\",{months:\"Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember\".split(\"_\"),monthsShort:\"Jan._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.\".split(\"_\"),weekdays:\"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag\".split(\"_\"),weekdaysShort:\"So._Mo._Di._Mi._Do._Fr._Sa.\".split(\"_\"),weekdaysMin:\"So_Mo_Di_Mi_Do_Fr_Sa\".split(\"_\"),longDateFormat:{LT:\"HH:mm\",LTS:\"HH:mm:ss\",L:\"DD.MM.YYYY\",LL:\"D. MMMM YYYY\",LLL:\"D. MMMM YYYY LT\",LLLL:\"dddd, D. MMMM YYYY LT\"},calendar:{sameDay:\"[Heute um] LT [Uhr]\",sameElse:\"L\",nextDay:\"[Morgen um] LT [Uhr]\",nextWeek:\"dddd [um] LT [Uhr]\",lastDay:\"[Gestern um] LT [Uhr]\",lastWeek:\"[letzten] dddd [um] LT [Uhr]\"},relativeTime:{future:\"in %s\",past:\"vor %s\",s:\"ein paar Sekunden\",m:c,mm:\"%d Minuten\",h:c,hh:\"%d Stunden\",d:c,dd:c,M:c,MM:c,y:c,yy:c},ordinalParse:/\\d{1,2}\\./,ordinal:\"%d.\",week:{dow:1,doy:4}}),a.fullCalendar.datepickerLang(\"de\",\"de\",{closeText:\"Schließen\",prevText:\"&#x3C;Zurück\",nextText:\"Vor&#x3E;\",currentText:\"Heute\",monthNames:[\"Januar\",\"Februar\",\"März\",\"April\",\"Mai\",\"Juni\",\"Juli\",\"August\",\"September\",\"Oktober\",\"November\",\"Dezember\"],monthNamesShort:[\"Jan\",\"Feb\",\"Mär\",\"Apr\",\"Mai\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Okt\",\"Nov\",\"Dez\"],dayNames:[\"Sonntag\",\"Montag\",\"Dienstag\",\"Mittwoch\",\"Donnerstag\",\"Freitag\",\"Samstag\"],dayNamesShort:[\"So\",\"Mo\",\"Di\",\"Mi\",\"Do\",\"Fr\",\"Sa\"],dayNamesMin:[\"So\",\"Mo\",\"Di\",\"Mi\",\"Do\",\"Fr\",\"Sa\"],weekHeader:\"KW\",dateFormat:\"dd.mm.yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),a.fullCalendar.lang(\"de\",{buttonText:{month:\"Monat\",week:\"Woche\",day:\"Tag\",list:\"Terminübersicht\"},allDayText:\"Ganztägig\",eventLimitText:function(a){return\"+ weitere \"+a}})}(),function(){(b.defineLocale||b.lang).call(b,\"el\",{monthsNominativeEl:\"Ιανουάριος_Φεβρουάριος_Μάρτιος_Απρίλιος_Μάιος_Ιούνιος_Ιούλιος_Αύγουστος_Σεπτέμβριος_Οκτώβριος_Νοέμβριος_Δεκέμβριος\".split(\"_\"),monthsGenitiveEl:\"Ιανουαρίου_Φεβρουαρίου_Μαρτίου_Απριλίου_Μαΐου_Ιουνίου_Ιουλίου_Αυγούστου_Σεπτεμβρίου_Οκτωβρίου_Νοεμβρίου_Δεκεμβρίου\".split(\"_\"),months:function(a,b){return/D/.test(b.substring(0,b.indexOf(\"MMMM\")))?this._monthsGenitiveEl[a.month()]:this._monthsNominativeEl[a.month()]},monthsShort:\"Ιαν_Φεβ_Μαρ_Απρ_Μαϊ_Ιουν_Ιουλ_Αυγ_Σεπ_Οκτ_Νοε_Δεκ\".split(\"_\"),weekdays:\"Κυριακή_Δευτέρα_Τρίτη_Τετάρτη_Πέμπτη_Παρασκευή_Σάββατο\".split(\"_\"),weekdaysShort:\"Κυρ_Δευ_Τρι_Τετ_Πεμ_Παρ_Σαβ\".split(\"_\"),weekdaysMin:\"Κυ_Δε_Τρ_Τε_Πε_Πα_Σα\".split(\"_\"),meridiem:function(a,b,c){return a>11?c?\"μμ\":\"ΜΜ\":c?\"πμ\":\"ΠΜ\"},isPM:function(a){return\"μ\"===(a+\"\").toLowerCase()[0]},meridiemParse:/[ΠΜ]\\.?Μ?\\.?/i,longDateFormat:{LT:\"h:mm A\",LTS:\"h:mm:ss A\",L:\"DD/MM/YYYY\",LL:\"D MMMM YYYY\",LLL:\"D MMMM YYYY LT\",LLLL:\"dddd, D MMMM YYYY LT\"},calendarEl:{sameDay:\"[Σήμερα {}] LT\",nextDay:\"[Αύριο {}] LT\",nextWeek:\"dddd [{}] LT\",lastDay:\"[Χθες {}] LT\",lastWeek:function(){switch(this.day()){case 6:return\"[το προηγούμενο] dddd [{}] LT\";default:return\"[την προηγούμενη] dddd [{}] LT\"}},sameElse:\"L\"},calendar:function(a,b){var c=this._calendarEl[a],d=b&&b.hours();return\"function\"==typeof c&&(c=c.apply(b)),c.replace(\"{}\",d%12===1?\"στη\":\"στις\")},relativeTime:{future:\"σε %s\",past:\"%s πριν\",s:\"λίγα δευτερόλεπτα\",m:\"ένα λεπτό\",mm:\"%d λεπτά\",h:\"μία ώρα\",hh:\"%d ώρες\",d:\"μία μέρα\",dd:\"%d μέρες\",M:\"ένας μήνας\",MM:\"%d μήνες\",y:\"ένας χρόνος\",yy:\"%d χρόνια\"},ordinalParse:/\\d{1,2}η/,ordinal:\"%dη\",week:{dow:1,doy:4}}),a.fullCalendar.datepickerLang(\"el\",\"el\",{closeText:\"Κλείσιμο\",prevText:\"Προηγούμενος\",nextText:\"Επόμενος\",currentText:\"Σήμερα\",monthNames:[\"Ιανουάριος\",\"Φεβρουάριος\",\"Μάρτιος\",\"Απρίλιος\",\"Μάιος\",\"Ιούνιος\",\"Ιούλιος\",\"Αύγουστος\",\"Σεπτέμβριος\",\"Οκτώβριος\",\"Νοέμβριος\",\"Δεκέμβριος\"],monthNamesShort:[\"Ιαν\",\"Φεβ\",\"Μαρ\",\"Απρ\",\"Μαι\",\"Ιουν\",\"Ιουλ\",\"Αυγ\",\"Σεπ\",\"Οκτ\",\"Νοε\",\"Δεκ\"],dayNames:[\"Κυριακή\",\"Δευτέρα\",\"Τρίτη\",\"Τετάρτη\",\"Πέμπτη\",\"Παρασκευή\",\"Σάββατο\"],dayNamesShort:[\"Κυρ\",\"Δευ\",\"Τρι\",\"Τετ\",\"Πεμ\",\"Παρ\",\"Σαβ\"],dayNamesMin:[\"Κυ\",\"Δε\",\"Τρ\",\"Τε\",\"Πε\",\"Πα\",\"Σα\"],weekHeader:\"Εβδ\",dateFormat:\"dd/mm/yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),a.fullCalendar.lang(\"el\",{buttonText:{month:\"Μήνας\",week:\"Εβδομάδα\",day:\"Ημέρα\",list:\"Ατζέντα\"},allDayText:\"Ολοήμερο\",eventLimitText:\"περισσότερα\"})}(),function(){(b.defineLocale||b.lang).call(b,\"en-au\",{months:\"January_February_March_April_May_June_July_August_September_October_November_December\".split(\"_\"),monthsShort:\"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec\".split(\"_\"),weekdays:\"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday\".split(\"_\"),weekdaysShort:\"Sun_Mon_Tue_Wed_Thu_Fri_Sat\".split(\"_\"),weekdaysMin:\"Su_Mo_Tu_We_Th_Fr_Sa\".split(\"_\"),longDateFormat:{LT:\"h:mm A\",LTS:\"h:mm:ss A\",L:\"DD/MM/YYYY\",LL:\"D MMMM YYYY\",LLL:\"D MMMM YYYY LT\",LLLL:\"dddd, D MMMM YYYY LT\"},calendar:{sameDay:\"[Today at] LT\",nextDay:\"[Tomorrow at] LT\",nextWeek:\"dddd [at] LT\",lastDay:\"[Yesterday at] LT\",lastWeek:\"[Last] dddd [at] LT\",sameElse:\"L\"},relativeTime:{future:\"in %s\",past:\"%s ago\",s:\"a few seconds\",m:\"a minute\",mm:\"%d minutes\",h:\"an hour\",hh:\"%d hours\",d:\"a day\",dd:\"%d days\",M:\"a month\",MM:\"%d months\",y:\"a year\",yy:\"%d years\"},ordinalParse:/\\d{1,2}(st|nd|rd|th)/,ordinal:function(a){var b=a%10,c=1===~~(a%100/10)?\"th\":1===b?\"st\":2===b?\"nd\":3===b?\"rd\":\"th\";return a+c},week:{dow:1,doy:4}}),a.fullCalendar.datepickerLang(\"en-au\",\"en-AU\",{closeText:\"Done\",prevText:\"Prev\",nextText:\"Next\",currentText:\"Today\",monthNames:[\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"],monthNamesShort:[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"],dayNames:[\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"],dayNamesShort:[\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"],dayNamesMin:[\"Su\",\"Mo\",\"Tu\",\"We\",\"Th\",\"Fr\",\"Sa\"],weekHeader:\"Wk\",dateFormat:\"dd/mm/yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),a.fullCalendar.lang(\"en-au\")}(),function(){(b.defineLocale||b.lang).call(b,\"en-ca\",{months:\"January_February_March_April_May_June_July_August_September_October_November_December\".split(\"_\"),monthsShort:\"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec\".split(\"_\"),weekdays:\"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday\".split(\"_\"),weekdaysShort:\"Sun_Mon_Tue_Wed_Thu_Fri_Sat\".split(\"_\"),weekdaysMin:\"Su_Mo_Tu_We_Th_Fr_Sa\".split(\"_\"),longDateFormat:{LT:\"h:mm A\",LTS:\"h:mm:ss A\",L:\"YYYY-MM-DD\",LL:\"D MMMM, YYYY\",LLL:\"D MMMM, YYYY LT\",LLLL:\"dddd, D MMMM, YYYY LT\"},calendar:{sameDay:\"[Today at] LT\",nextDay:\"[Tomorrow at] LT\",nextWeek:\"dddd [at] LT\",lastDay:\"[Yesterday at] LT\",lastWeek:\"[Last] dddd [at] LT\",sameElse:\"L\"},relativeTime:{future:\"in %s\",past:\"%s ago\",s:\"a few seconds\",m:\"a minute\",mm:\"%d minutes\",h:\"an hour\",hh:\"%d hours\",d:\"a day\",dd:\"%d days\",M:\"a month\",MM:\"%d months\",y:\"a year\",yy:\"%d years\"},ordinalParse:/\\d{1,2}(st|nd|rd|th)/,ordinal:function(a){var b=a%10,c=1===~~(a%100/10)?\"th\":1===b?\"st\":2===b?\"nd\":3===b?\"rd\":\"th\";return a+c}}),a.fullCalendar.lang(\"en-ca\")}(),function(){(b.defineLocale||b.lang).call(b,\"en-gb\",{months:\"January_February_March_April_May_June_July_August_September_October_November_December\".split(\"_\"),monthsShort:\"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec\".split(\"_\"),weekdays:\"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday\".split(\"_\"),weekdaysShort:\"Sun_Mon_Tue_Wed_Thu_Fri_Sat\".split(\"_\"),weekdaysMin:\"Su_Mo_Tu_We_Th_Fr_Sa\".split(\"_\"),longDateFormat:{LT:\"HH:mm\",LTS:\"HH:mm:ss\",L:\"DD/MM/YYYY\",LL:\"D MMMM YYYY\",LLL:\"D MMMM YYYY LT\",LLLL:\"dddd, D MMMM YYYY LT\"},calendar:{sameDay:\"[Today at] LT\",nextDay:\"[Tomorrow at] LT\",nextWeek:\"dddd [at] LT\",lastDay:\"[Yesterday at] LT\",lastWeek:\"[Last] dddd [at] LT\",sameElse:\"L\"},relativeTime:{future:\"in %s\",past:\"%s ago\",s:\"a few seconds\",m:\"a minute\",mm:\"%d minutes\",h:\"an hour\",hh:\"%d hours\",d:\"a day\",dd:\"%d days\",M:\"a month\",MM:\"%d months\",y:\"a year\",yy:\"%d years\"},ordinalParse:/\\d{1,2}(st|nd|rd|th)/,ordinal:function(a){var b=a%10,c=1===~~(a%100/10)?\"th\":1===b?\"st\":2===b?\"nd\":3===b?\"rd\":\"th\";return a+c},week:{dow:1,doy:4}}),a.fullCalendar.datepickerLang(\"en-gb\",\"en-GB\",{closeText:\"Done\",prevText:\"Prev\",nextText:\"Next\",currentText:\"Today\",monthNames:[\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"],monthNamesShort:[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"],dayNames:[\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"],dayNamesShort:[\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"],dayNamesMin:[\"Su\",\"Mo\",\"Tu\",\"We\",\"Th\",\"Fr\",\"Sa\"],weekHeader:\"Wk\",dateFormat:\"dd/mm/yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),a.fullCalendar.lang(\"en-gb\")}(),function(){var c=\"ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.\".split(\"_\"),d=\"ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic\".split(\"_\");(b.defineLocale||b.lang).call(b,\"es\",{months:\"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre\".split(\"_\"),monthsShort:function(a,b){return/-MMM-/.test(b)?d[a.month()]:c[a.month()]},weekdays:\"domingo_lunes_martes_miércoles_jueves_viernes_sábado\".split(\"_\"),weekdaysShort:\"dom._lun._mar._mié._jue._vie._sáb.\".split(\"_\"),weekdaysMin:\"Do_Lu_Ma_Mi_Ju_Vi_Sá\".split(\"_\"),longDateFormat:{LT:\"H:mm\",LTS:\"LT:ss\",L:\"DD/MM/YYYY\",LL:\"D [de] MMMM [de] YYYY\",LLL:\"D [de] MMMM [de] YYYY LT\",LLLL:\"dddd, D [de] MMMM [de] YYYY LT\"},calendar:{sameDay:function(){return\"[hoy a la\"+(1!==this.hours()?\"s\":\"\")+\"] LT\"},nextDay:function(){return\"[mañana a la\"+(1!==this.hours()?\"s\":\"\")+\"] LT\"},nextWeek:function(){return\"dddd [a la\"+(1!==this.hours()?\"s\":\"\")+\"] LT\"},lastDay:function(){return\"[ayer a la\"+(1!==this.hours()?\"s\":\"\")+\"] LT\"},lastWeek:function(){return\"[el] dddd [pasado a la\"+(1!==this.hours()?\"s\":\"\")+\"] LT\"},sameElse:\"L\"},relativeTime:{future:\"en %s\",past:\"hace %s\",s:\"unos segundos\",m:\"un minuto\",mm:\"%d minutos\",h:\"una hora\",hh:\"%d horas\",d:\"un día\",dd:\"%d días\",M:\"un mes\",MM:\"%d meses\",y:\"un año\",yy:\"%d años\"},ordinalParse:/\\d{1,2}º/,ordinal:\"%dº\",week:{dow:1,doy:4}}),a.fullCalendar.datepickerLang(\"es\",\"es\",{closeText:\"Cerrar\",prevText:\"&#x3C;Ant\",nextText:\"Sig&#x3E;\",currentText:\"Hoy\",monthNames:[\"enero\",\"febrero\",\"marzo\",\"abril\",\"mayo\",\"junio\",\"julio\",\"agosto\",\"septiembre\",\"octubre\",\"noviembre\",\"diciembre\"],monthNamesShort:[\"ene\",\"feb\",\"mar\",\"abr\",\"may\",\"jun\",\"jul\",\"ago\",\"sep\",\"oct\",\"nov\",\"dic\"],dayNames:[\"domingo\",\"lunes\",\"martes\",\"miércoles\",\"jueves\",\"viernes\",\"sábado\"],dayNamesShort:[\"dom\",\"lun\",\"mar\",\"mié\",\"jue\",\"vie\",\"sáb\"],dayNamesMin:[\"D\",\"L\",\"M\",\"X\",\"J\",\"V\",\"S\"],weekHeader:\"Sm\",dateFormat:\"dd/mm/yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),a.fullCalendar.lang(\"es\",{buttonText:{month:\"Mes\",week:\"Semana\",day:\"Día\",list:\"Agenda\"},allDayHtml:\"Todo<br/>el día\",eventLimitText:\"más\"})}(),function(){var c={1:\"۱\",2:\"۲\",3:\"۳\",4:\"۴\",5:\"۵\",6:\"۶\",7:\"۷\",8:\"۸\",9:\"۹\",0:\"۰\"},d={\"۱\":\"1\",\"۲\":\"2\",\"۳\":\"3\",\"۴\":\"4\",\"۵\":\"5\",\"۶\":\"6\",\"۷\":\"7\",\"۸\":\"8\",\"۹\":\"9\",\"۰\":\"0\"};(b.defineLocale||b.lang).call(b,\"fa\",{months:\"ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر\".split(\"_\"),monthsShort:\"ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر\".split(\"_\"),weekdays:\"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه\".split(\"_\"),weekdaysShort:\"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه\".split(\"_\"),weekdaysMin:\"ی_د_س_چ_پ_ج_ش\".split(\"_\"),longDateFormat:{LT:\"HH:mm\",LTS:\"LT:ss\",L:\"DD/MM/YYYY\",LL:\"D MMMM YYYY\",LLL:\"D MMMM YYYY LT\",LLLL:\"dddd, D MMMM YYYY LT\"},meridiemParse:/قبل از ظهر|بعد از ظهر/,isPM:function(a){return/بعد از ظهر/.test(a)},meridiem:function(a,b,c){return 12>a?\"قبل از ظهر\":\"بعد از ظهر\"},calendar:{sameDay:\"[امروز ساعت] LT\",nextDay:\"[فردا ساعت] LT\",nextWeek:\"dddd [ساعت] LT\",lastDay:\"[دیروز ساعت] LT\",lastWeek:\"dddd [پیش] [ساعت] LT\",sameElse:\"L\"},relativeTime:{future:\"در %s\",past:\"%s پیش\",s:\"چندین ثانیه\",m:\"یک دقیقه\",mm:\"%d دقیقه\",h:\"یک ساعت\",hh:\"%d ساعت\",d:\"یک روز\",dd:\"%d روز\",M:\"یک ماه\",MM:\"%d ماه\",y:\"یک سال\",yy:\"%d سال\"},preparse:function(a){return a.replace(/[۰-۹]/g,function(a){return d[a]}).replace(/،/g,\",\")},postformat:function(a){return a.replace(/\\d/g,function(a){return c[a]}).replace(/,/g,\"،\")},ordinalParse:/\\d{1,2}م/,ordinal:\"%dم\",week:{dow:6,doy:12}}),a.fullCalendar.datepickerLang(\"fa\",\"fa\",{closeText:\"بستن\",prevText:\"&#x3C;قبلی\",nextText:\"بعدی&#x3E;\",currentText:\"امروز\",monthNames:[\"ژانویه\",\"فوریه\",\"مارس\",\"آوریل\",\"مه\",\"ژوئن\",\"ژوئیه\",\"اوت\",\"سپتامبر\",\"اکتبر\",\"نوامبر\",\"دسامبر\"],monthNamesShort:[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\"],dayNames:[\"يکشنبه\",\"دوشنبه\",\"سه‌شنبه\",\"چهارشنبه\",\"پنجشنبه\",\"جمعه\",\"شنبه\"],dayNamesShort:[\"ی\",\"د\",\"س\",\"چ\",\"پ\",\"ج\",\"ش\"],dayNamesMin:[\"ی\",\"د\",\"س\",\"چ\",\"پ\",\"ج\",\"ش\"],weekHeader:\"هف\",dateFormat:\"yy/mm/dd\",firstDay:6,isRTL:!0,showMonthAfterYear:!1,yearSuffix:\"\"}),a.fullCalendar.lang(\"fa\",{buttonText:{month:\"ماه\",week:\"هفته\",day:\"روز\",list:\"برنامه\"\n},allDayText:\"تمام روز\",eventLimitText:function(a){return\"بیش از \"+a}})}(),function(){function c(a,b,c,e){var f=\"\";switch(c){case\"s\":return e?\"muutaman sekunnin\":\"muutama sekunti\";case\"m\":return e?\"minuutin\":\"minuutti\";case\"mm\":f=e?\"minuutin\":\"minuuttia\";break;case\"h\":return e?\"tunnin\":\"tunti\";case\"hh\":f=e?\"tunnin\":\"tuntia\";break;case\"d\":return e?\"päivän\":\"päivä\";case\"dd\":f=e?\"päivän\":\"päivää\";break;case\"M\":return e?\"kuukauden\":\"kuukausi\";case\"MM\":f=e?\"kuukauden\":\"kuukautta\";break;case\"y\":return e?\"vuoden\":\"vuosi\";case\"yy\":f=e?\"vuoden\":\"vuotta\"}return f=d(a,e)+\" \"+f}function d(a,b){return 10>a?b?f[a]:e[a]:a}var e=\"nolla yksi kaksi kolme neljä viisi kuusi seitsemän kahdeksan yhdeksän\".split(\" \"),f=[\"nolla\",\"yhden\",\"kahden\",\"kolmen\",\"neljän\",\"viiden\",\"kuuden\",e[7],e[8],e[9]];(b.defineLocale||b.lang).call(b,\"fi\",{months:\"tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesäkuu_heinäkuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu\".split(\"_\"),monthsShort:\"tammi_helmi_maalis_huhti_touko_kesä_heinä_elo_syys_loka_marras_joulu\".split(\"_\"),weekdays:\"sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai\".split(\"_\"),weekdaysShort:\"su_ma_ti_ke_to_pe_la\".split(\"_\"),weekdaysMin:\"su_ma_ti_ke_to_pe_la\".split(\"_\"),longDateFormat:{LT:\"HH.mm\",LTS:\"HH.mm.ss\",L:\"DD.MM.YYYY\",LL:\"Do MMMM[ta] YYYY\",LLL:\"Do MMMM[ta] YYYY, [klo] LT\",LLLL:\"dddd, Do MMMM[ta] YYYY, [klo] LT\",l:\"D.M.YYYY\",ll:\"Do MMM YYYY\",lll:\"Do MMM YYYY, [klo] LT\",llll:\"ddd, Do MMM YYYY, [klo] LT\"},calendar:{sameDay:\"[tänään] [klo] LT\",nextDay:\"[huomenna] [klo] LT\",nextWeek:\"dddd [klo] LT\",lastDay:\"[eilen] [klo] LT\",lastWeek:\"[viime] dddd[na] [klo] LT\",sameElse:\"L\"},relativeTime:{future:\"%s päästä\",past:\"%s sitten\",s:c,m:c,mm:c,h:c,hh:c,d:c,dd:c,M:c,MM:c,y:c,yy:c},ordinalParse:/\\d{1,2}\\./,ordinal:\"%d.\",week:{dow:1,doy:4}}),a.fullCalendar.datepickerLang(\"fi\",\"fi\",{closeText:\"Sulje\",prevText:\"&#xAB;Edellinen\",nextText:\"Seuraava&#xBB;\",currentText:\"Tänään\",monthNames:[\"Tammikuu\",\"Helmikuu\",\"Maaliskuu\",\"Huhtikuu\",\"Toukokuu\",\"Kesäkuu\",\"Heinäkuu\",\"Elokuu\",\"Syyskuu\",\"Lokakuu\",\"Marraskuu\",\"Joulukuu\"],monthNamesShort:[\"Tammi\",\"Helmi\",\"Maalis\",\"Huhti\",\"Touko\",\"Kesä\",\"Heinä\",\"Elo\",\"Syys\",\"Loka\",\"Marras\",\"Joulu\"],dayNamesShort:[\"Su\",\"Ma\",\"Ti\",\"Ke\",\"To\",\"Pe\",\"La\"],dayNames:[\"Sunnuntai\",\"Maanantai\",\"Tiistai\",\"Keskiviikko\",\"Torstai\",\"Perjantai\",\"Lauantai\"],dayNamesMin:[\"Su\",\"Ma\",\"Ti\",\"Ke\",\"To\",\"Pe\",\"La\"],weekHeader:\"Vk\",dateFormat:\"d.m.yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),a.fullCalendar.lang(\"fi\",{buttonText:{month:\"Kuukausi\",week:\"Viikko\",day:\"Päivä\",list:\"Tapahtumat\"},allDayText:\"Koko päivä\",eventLimitText:\"lisää\"})}(),function(){(b.defineLocale||b.lang).call(b,\"fr-ca\",{months:\"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre\".split(\"_\"),monthsShort:\"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.\".split(\"_\"),weekdays:\"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi\".split(\"_\"),weekdaysShort:\"dim._lun._mar._mer._jeu._ven._sam.\".split(\"_\"),weekdaysMin:\"Di_Lu_Ma_Me_Je_Ve_Sa\".split(\"_\"),longDateFormat:{LT:\"HH:mm\",LTS:\"LT:ss\",L:\"YYYY-MM-DD\",LL:\"D MMMM YYYY\",LLL:\"D MMMM YYYY LT\",LLLL:\"dddd D MMMM YYYY LT\"},calendar:{sameDay:\"[Aujourd'hui à] LT\",nextDay:\"[Demain à] LT\",nextWeek:\"dddd [à] LT\",lastDay:\"[Hier à] LT\",lastWeek:\"dddd [dernier à] LT\",sameElse:\"L\"},relativeTime:{future:\"dans %s\",past:\"il y a %s\",s:\"quelques secondes\",m:\"une minute\",mm:\"%d minutes\",h:\"une heure\",hh:\"%d heures\",d:\"un jour\",dd:\"%d jours\",M:\"un mois\",MM:\"%d mois\",y:\"un an\",yy:\"%d ans\"},ordinalParse:/\\d{1,2}(er|)/,ordinal:function(a){return a+(1===a?\"er\":\"\")}}),a.fullCalendar.datepickerLang(\"fr-ca\",\"fr-CA\",{closeText:\"Fermer\",prevText:\"Précédent\",nextText:\"Suivant\",currentText:\"Aujourd'hui\",monthNames:[\"janvier\",\"février\",\"mars\",\"avril\",\"mai\",\"juin\",\"juillet\",\"août\",\"septembre\",\"octobre\",\"novembre\",\"décembre\"],monthNamesShort:[\"janv.\",\"févr.\",\"mars\",\"avril\",\"mai\",\"juin\",\"juil.\",\"août\",\"sept.\",\"oct.\",\"nov.\",\"déc.\"],dayNames:[\"dimanche\",\"lundi\",\"mardi\",\"mercredi\",\"jeudi\",\"vendredi\",\"samedi\"],dayNamesShort:[\"dim.\",\"lun.\",\"mar.\",\"mer.\",\"jeu.\",\"ven.\",\"sam.\"],dayNamesMin:[\"D\",\"L\",\"M\",\"M\",\"J\",\"V\",\"S\"],weekHeader:\"Sem.\",dateFormat:\"yy-mm-dd\",firstDay:0,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),a.fullCalendar.lang(\"fr-ca\",{buttonText:{month:\"Mois\",week:\"Semaine\",day:\"Jour\",list:\"Mon planning\"},allDayHtml:\"Toute la<br/>journée\",eventLimitText:\"en plus\"})}(),function(){(b.defineLocale||b.lang).call(b,\"fr\",{months:\"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre\".split(\"_\"),monthsShort:\"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.\".split(\"_\"),weekdays:\"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi\".split(\"_\"),weekdaysShort:\"dim._lun._mar._mer._jeu._ven._sam.\".split(\"_\"),weekdaysMin:\"Di_Lu_Ma_Me_Je_Ve_Sa\".split(\"_\"),longDateFormat:{LT:\"HH:mm\",LTS:\"LT:ss\",L:\"DD/MM/YYYY\",LL:\"D MMMM YYYY\",LLL:\"D MMMM YYYY LT\",LLLL:\"dddd D MMMM YYYY LT\"},calendar:{sameDay:\"[Aujourd'hui à] LT\",nextDay:\"[Demain à] LT\",nextWeek:\"dddd [à] LT\",lastDay:\"[Hier à] LT\",lastWeek:\"dddd [dernier à] LT\",sameElse:\"L\"},relativeTime:{future:\"dans %s\",past:\"il y a %s\",s:\"quelques secondes\",m:\"une minute\",mm:\"%d minutes\",h:\"une heure\",hh:\"%d heures\",d:\"un jour\",dd:\"%d jours\",M:\"un mois\",MM:\"%d mois\",y:\"un an\",yy:\"%d ans\"},ordinalParse:/\\d{1,2}(er|)/,ordinal:function(a){return a+(1===a?\"er\":\"\")},week:{dow:1,doy:4}}),a.fullCalendar.datepickerLang(\"fr\",\"fr\",{closeText:\"Fermer\",prevText:\"Précédent\",nextText:\"Suivant\",currentText:\"Aujourd'hui\",monthNames:[\"janvier\",\"février\",\"mars\",\"avril\",\"mai\",\"juin\",\"juillet\",\"août\",\"septembre\",\"octobre\",\"novembre\",\"décembre\"],monthNamesShort:[\"janv.\",\"févr.\",\"mars\",\"avr.\",\"mai\",\"juin\",\"juil.\",\"août\",\"sept.\",\"oct.\",\"nov.\",\"déc.\"],dayNames:[\"dimanche\",\"lundi\",\"mardi\",\"mercredi\",\"jeudi\",\"vendredi\",\"samedi\"],dayNamesShort:[\"dim.\",\"lun.\",\"mar.\",\"mer.\",\"jeu.\",\"ven.\",\"sam.\"],dayNamesMin:[\"D\",\"L\",\"M\",\"M\",\"J\",\"V\",\"S\"],weekHeader:\"Sem.\",dateFormat:\"dd/mm/yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),a.fullCalendar.lang(\"fr\",{buttonText:{month:\"Mois\",week:\"Semaine\",day:\"Jour\",list:\"Mon planning\"},allDayHtml:\"Toute la<br/>journée\",eventLimitText:\"en plus\"})}(),function(){(b.defineLocale||b.lang).call(b,\"he\",{months:\"ינואר_פברואר_מרץ_אפריל_מאי_יוני_יולי_אוגוסט_ספטמבר_אוקטובר_נובמבר_דצמבר\".split(\"_\"),monthsShort:\"ינו׳_פבר׳_מרץ_אפר׳_מאי_יוני_יולי_אוג׳_ספט׳_אוק׳_נוב׳_דצמ׳\".split(\"_\"),weekdays:\"ראשון_שני_שלישי_רביעי_חמישי_שישי_שבת\".split(\"_\"),weekdaysShort:\"א׳_ב׳_ג׳_ד׳_ה׳_ו׳_ש׳\".split(\"_\"),weekdaysMin:\"א_ב_ג_ד_ה_ו_ש\".split(\"_\"),longDateFormat:{LT:\"HH:mm\",LTS:\"LT:ss\",L:\"DD/MM/YYYY\",LL:\"D [ב]MMMM YYYY\",LLL:\"D [ב]MMMM YYYY LT\",LLLL:\"dddd, D [ב]MMMM YYYY LT\",l:\"D/M/YYYY\",ll:\"D MMM YYYY\",lll:\"D MMM YYYY LT\",llll:\"ddd, D MMM YYYY LT\"},calendar:{sameDay:\"[היום ב־]LT\",nextDay:\"[מחר ב־]LT\",nextWeek:\"dddd [בשעה] LT\",lastDay:\"[אתמול ב־]LT\",lastWeek:\"[ביום] dddd [האחרון בשעה] LT\",sameElse:\"L\"},relativeTime:{future:\"בעוד %s\",past:\"לפני %s\",s:\"מספר שניות\",m:\"דקה\",mm:\"%d דקות\",h:\"שעה\",hh:function(a){return 2===a?\"שעתיים\":a+\" שעות\"},d:\"יום\",dd:function(a){return 2===a?\"יומיים\":a+\" ימים\"},M:\"חודש\",MM:function(a){return 2===a?\"חודשיים\":a+\" חודשים\"},y:\"שנה\",yy:function(a){return 2===a?\"שנתיים\":a%10===0&&10!==a?a+\" שנה\":a+\" שנים\"}}}),a.fullCalendar.datepickerLang(\"he\",\"he\",{closeText:\"סגור\",prevText:\"&#x3C;הקודם\",nextText:\"הבא&#x3E;\",currentText:\"היום\",monthNames:[\"ינואר\",\"פברואר\",\"מרץ\",\"אפריל\",\"מאי\",\"יוני\",\"יולי\",\"אוגוסט\",\"ספטמבר\",\"אוקטובר\",\"נובמבר\",\"דצמבר\"],monthNamesShort:[\"ינו\",\"פבר\",\"מרץ\",\"אפר\",\"מאי\",\"יוני\",\"יולי\",\"אוג\",\"ספט\",\"אוק\",\"נוב\",\"דצמ\"],dayNames:[\"ראשון\",\"שני\",\"שלישי\",\"רביעי\",\"חמישי\",\"שישי\",\"שבת\"],dayNamesShort:[\"א'\",\"ב'\",\"ג'\",\"ד'\",\"ה'\",\"ו'\",\"שבת\"],dayNamesMin:[\"א'\",\"ב'\",\"ג'\",\"ד'\",\"ה'\",\"ו'\",\"שבת\"],weekHeader:\"Wk\",dateFormat:\"dd/mm/yy\",firstDay:0,isRTL:!0,showMonthAfterYear:!1,yearSuffix:\"\"}),a.fullCalendar.lang(\"he\",{defaultButtonText:{month:\"חודש\",week:\"שבוע\",day:\"יום\",list:\"סדר יום\"},weekNumberTitle:\"שבוע\",allDayText:\"כל היום\",eventLimitText:\"אחר\"})}(),function(){var c={1:\"१\",2:\"२\",3:\"३\",4:\"४\",5:\"५\",6:\"६\",7:\"७\",8:\"८\",9:\"९\",0:\"०\"},d={\"१\":\"1\",\"२\":\"2\",\"३\":\"3\",\"४\":\"4\",\"५\":\"5\",\"६\":\"6\",\"७\":\"7\",\"८\":\"8\",\"९\":\"9\",\"०\":\"0\"};(b.defineLocale||b.lang).call(b,\"hi\",{months:\"जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर\".split(\"_\"),monthsShort:\"जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.\".split(\"_\"),weekdays:\"रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार\".split(\"_\"),weekdaysShort:\"रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि\".split(\"_\"),weekdaysMin:\"र_सो_मं_बु_गु_शु_श\".split(\"_\"),longDateFormat:{LT:\"A h:mm बजे\",LTS:\"A h:mm:ss बजे\",L:\"DD/MM/YYYY\",LL:\"D MMMM YYYY\",LLL:\"D MMMM YYYY, LT\",LLLL:\"dddd, D MMMM YYYY, LT\"},calendar:{sameDay:\"[आज] LT\",nextDay:\"[कल] LT\",nextWeek:\"dddd, LT\",lastDay:\"[कल] LT\",lastWeek:\"[पिछले] dddd, LT\",sameElse:\"L\"},relativeTime:{future:\"%s में\",past:\"%s पहले\",s:\"कुछ ही क्षण\",m:\"एक मिनट\",mm:\"%d मिनट\",h:\"एक घंटा\",hh:\"%d घंटे\",d:\"एक दिन\",dd:\"%d दिन\",M:\"एक महीने\",MM:\"%d महीने\",y:\"एक वर्ष\",yy:\"%d वर्ष\"},preparse:function(a){return a.replace(/[१२३४५६७८९०]/g,function(a){return d[a]})},postformat:function(a){return a.replace(/\\d/g,function(a){return c[a]})},meridiemParse:/रात|सुबह|दोपहर|शाम/,meridiemHour:function(a,b){return 12===a&&(a=0),\"रात\"===b?4>a?a:a+12:\"सुबह\"===b?a:\"दोपहर\"===b?a>=10?a:a+12:\"शाम\"===b?a+12:void 0},meridiem:function(a,b,c){return 4>a?\"रात\":10>a?\"सुबह\":17>a?\"दोपहर\":20>a?\"शाम\":\"रात\"},week:{dow:0,doy:6}}),a.fullCalendar.datepickerLang(\"hi\",\"hi\",{closeText:\"बंद\",prevText:\"पिछला\",nextText:\"अगला\",currentText:\"आज\",monthNames:[\"जनवरी \",\"फरवरी\",\"मार्च\",\"अप्रेल\",\"मई\",\"जून\",\"जूलाई\",\"अगस्त \",\"सितम्बर\",\"अक्टूबर\",\"नवम्बर\",\"दिसम्बर\"],monthNamesShort:[\"जन\",\"फर\",\"मार्च\",\"अप्रेल\",\"मई\",\"जून\",\"जूलाई\",\"अग\",\"सित\",\"अक्ट\",\"नव\",\"दि\"],dayNames:[\"रविवार\",\"सोमवार\",\"मंगलवार\",\"बुधवार\",\"गुरुवार\",\"शुक्रवार\",\"शनिवार\"],dayNamesShort:[\"रवि\",\"सोम\",\"मंगल\",\"बुध\",\"गुरु\",\"शुक्र\",\"शनि\"],dayNamesMin:[\"रवि\",\"सोम\",\"मंगल\",\"बुध\",\"गुरु\",\"शुक्र\",\"शनि\"],weekHeader:\"हफ्ता\",dateFormat:\"dd/mm/yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),a.fullCalendar.lang(\"hi\",{buttonText:{month:\"महीना\",week:\"सप्ताह\",day:\"दिन\",list:\"कार्यसूची\"},allDayText:\"सभी दिन\",eventLimitText:function(a){return\"+अधिक \"+a}})}(),function(){function c(a,b,c){var d=a+\" \";switch(c){case\"m\":return b?\"jedna minuta\":\"jedne minute\";case\"mm\":return d+=1===a?\"minuta\":2===a||3===a||4===a?\"minute\":\"minuta\";case\"h\":return b?\"jedan sat\":\"jednog sata\";case\"hh\":return d+=1===a?\"sat\":2===a||3===a||4===a?\"sata\":\"sati\";case\"dd\":return d+=1===a?\"dan\":\"dana\";case\"MM\":return d+=1===a?\"mjesec\":2===a||3===a||4===a?\"mjeseca\":\"mjeseci\";case\"yy\":return d+=1===a?\"godina\":2===a||3===a||4===a?\"godine\":\"godina\"}}(b.defineLocale||b.lang).call(b,\"hr\",{months:\"sječanj_veljača_ožujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac\".split(\"_\"),monthsShort:\"sje._vel._ožu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.\".split(\"_\"),weekdays:\"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota\".split(\"_\"),weekdaysShort:\"ned._pon._uto._sri._čet._pet._sub.\".split(\"_\"),weekdaysMin:\"ne_po_ut_sr_če_pe_su\".split(\"_\"),longDateFormat:{LT:\"H:mm\",LTS:\"LT:ss\",L:\"DD. MM. YYYY\",LL:\"D. MMMM YYYY\",LLL:\"D. MMMM YYYY LT\",LLLL:\"dddd, D. MMMM YYYY LT\"},calendar:{sameDay:\"[danas u] LT\",nextDay:\"[sutra u] LT\",nextWeek:function(){switch(this.day()){case 0:return\"[u] [nedjelju] [u] LT\";case 3:return\"[u] [srijedu] [u] LT\";case 6:return\"[u] [subotu] [u] LT\";case 1:case 2:case 4:case 5:return\"[u] dddd [u] LT\"}},lastDay:\"[jučer u] LT\",lastWeek:function(){switch(this.day()){case 0:case 3:return\"[prošlu] dddd [u] LT\";case 6:return\"[prošle] [subote] [u] LT\";case 1:case 2:case 4:case 5:return\"[prošli] dddd [u] LT\"}},sameElse:\"L\"},relativeTime:{future:\"za %s\",past:\"prije %s\",s:\"par sekundi\",m:c,mm:c,h:c,hh:c,d:\"dan\",dd:c,M:\"mjesec\",MM:c,y:\"godinu\",yy:c},ordinalParse:/\\d{1,2}\\./,ordinal:\"%d.\",week:{dow:1,doy:7}}),a.fullCalendar.datepickerLang(\"hr\",\"hr\",{closeText:\"Zatvori\",prevText:\"&#x3C;\",nextText:\"&#x3E;\",currentText:\"Danas\",monthNames:[\"Siječanj\",\"Veljača\",\"Ožujak\",\"Travanj\",\"Svibanj\",\"Lipanj\",\"Srpanj\",\"Kolovoz\",\"Rujan\",\"Listopad\",\"Studeni\",\"Prosinac\"],monthNamesShort:[\"Sij\",\"Velj\",\"Ožu\",\"Tra\",\"Svi\",\"Lip\",\"Srp\",\"Kol\",\"Ruj\",\"Lis\",\"Stu\",\"Pro\"],dayNames:[\"Nedjelja\",\"Ponedjeljak\",\"Utorak\",\"Srijeda\",\"Četvrtak\",\"Petak\",\"Subota\"],dayNamesShort:[\"Ned\",\"Pon\",\"Uto\",\"Sri\",\"Čet\",\"Pet\",\"Sub\"],dayNamesMin:[\"Ne\",\"Po\",\"Ut\",\"Sr\",\"Če\",\"Pe\",\"Su\"],weekHeader:\"Tje\",dateFormat:\"dd.mm.yy.\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),a.fullCalendar.lang(\"hr\",{buttonText:{month:\"Mjesec\",week:\"Tjedan\",day:\"Dan\",list:\"Raspored\"},allDayText:\"Cijeli dan\",eventLimitText:function(a){return\"+ još \"+a}})}(),function(){function c(a,b,c,d){var e=a;switch(c){case\"s\":return d||b?\"néhány másodperc\":\"néhány másodperce\";case\"m\":return\"egy\"+(d||b?\" perc\":\" perce\");case\"mm\":return e+(d||b?\" perc\":\" perce\");case\"h\":return\"egy\"+(d||b?\" óra\":\" órája\");case\"hh\":return e+(d||b?\" óra\":\" órája\");case\"d\":return\"egy\"+(d||b?\" nap\":\" napja\");case\"dd\":return e+(d||b?\" nap\":\" napja\");case\"M\":return\"egy\"+(d||b?\" hónap\":\" hónapja\");case\"MM\":return e+(d||b?\" hónap\":\" hónapja\");case\"y\":return\"egy\"+(d||b?\" év\":\" éve\");case\"yy\":return e+(d||b?\" év\":\" éve\")}return\"\"}function d(a){return(a?\"\":\"[múlt] \")+\"[\"+e[this.day()]+\"] LT[-kor]\"}var e=\"vasárnap hétfőn kedden szerdán csütörtökön pénteken szombaton\".split(\" \");(b.defineLocale||b.lang).call(b,\"hu\",{months:\"január_február_március_április_május_június_július_augusztus_szeptember_október_november_december\".split(\"_\"),monthsShort:\"jan_feb_márc_ápr_máj_jún_júl_aug_szept_okt_nov_dec\".split(\"_\"),weekdays:\"vasárnap_hétfő_kedd_szerda_csütörtök_péntek_szombat\".split(\"_\"),weekdaysShort:\"vas_hét_kedd_sze_csüt_pén_szo\".split(\"_\"),weekdaysMin:\"v_h_k_sze_cs_p_szo\".split(\"_\"),longDateFormat:{LT:\"H:mm\",LTS:\"LT:ss\",L:\"YYYY.MM.DD.\",LL:\"YYYY. MMMM D.\",LLL:\"YYYY. MMMM D., LT\",LLLL:\"YYYY. MMMM D., dddd LT\"},meridiemParse:/de|du/i,isPM:function(a){return\"u\"===a.charAt(1).toLowerCase()},meridiem:function(a,b,c){return 12>a?c===!0?\"de\":\"DE\":c===!0?\"du\":\"DU\"},calendar:{sameDay:\"[ma] LT[-kor]\",nextDay:\"[holnap] LT[-kor]\",nextWeek:function(){return d.call(this,!0)},lastDay:\"[tegnap] LT[-kor]\",lastWeek:function(){return d.call(this,!1)},sameElse:\"L\"},relativeTime:{future:\"%s múlva\",past:\"%s\",s:c,m:c,mm:c,h:c,hh:c,d:c,dd:c,M:c,MM:c,y:c,yy:c},ordinalParse:/\\d{1,2}\\./,ordinal:\"%d.\",week:{dow:1,doy:7}}),a.fullCalendar.datepickerLang(\"hu\",\"hu\",{closeText:\"bezár\",prevText:\"vissza\",nextText:\"előre\",currentText:\"ma\",monthNames:[\"Január\",\"Február\",\"Március\",\"Április\",\"Május\",\"Június\",\"Július\",\"Augusztus\",\"Szeptember\",\"Október\",\"November\",\"December\"],monthNamesShort:[\"Jan\",\"Feb\",\"Már\",\"Ápr\",\"Máj\",\"Jún\",\"Júl\",\"Aug\",\"Szep\",\"Okt\",\"Nov\",\"Dec\"],dayNames:[\"Vasárnap\",\"Hétfő\",\"Kedd\",\"Szerda\",\"Csütörtök\",\"Péntek\",\"Szombat\"],dayNamesShort:[\"Vas\",\"Hét\",\"Ked\",\"Sze\",\"Csü\",\"Pén\",\"Szo\"],dayNamesMin:[\"V\",\"H\",\"K\",\"Sze\",\"Cs\",\"P\",\"Szo\"],weekHeader:\"Hét\",dateFormat:\"yy.mm.dd.\",firstDay:1,isRTL:!1,showMonthAfterYear:!0,yearSuffix:\"\"}),a.fullCalendar.lang(\"hu\",{buttonText:{month:\"Hónap\",week:\"Hét\",day:\"Nap\",list:\"Napló\"},allDayText:\"Egész nap\",eventLimitText:\"további\"})}(),function(){(b.defineLocale||b.lang).call(b,\"id\",{months:\"Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember\".split(\"_\"),monthsShort:\"Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nov_Des\".split(\"_\"),weekdays:\"Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu\".split(\"_\"),weekdaysShort:\"Min_Sen_Sel_Rab_Kam_Jum_Sab\".split(\"_\"),weekdaysMin:\"Mg_Sn_Sl_Rb_Km_Jm_Sb\".split(\"_\"),longDateFormat:{LT:\"HH.mm\",LTS:\"LT.ss\",L:\"DD/MM/YYYY\",LL:\"D MMMM YYYY\",LLL:\"D MMMM YYYY [pukul] LT\",LLLL:\"dddd, D MMMM YYYY [pukul] LT\"},meridiemParse:/pagi|siang|sore|malam/,meridiemHour:function(a,b){return 12===a&&(a=0),\"pagi\"===b?a:\"siang\"===b?a>=11?a:a+12:\"sore\"===b||\"malam\"===b?a+12:void 0},meridiem:function(a,b,c){return 11>a?\"pagi\":15>a?\"siang\":19>a?\"sore\":\"malam\"},calendar:{sameDay:\"[Hari ini pukul] LT\",nextDay:\"[Besok pukul] LT\",nextWeek:\"dddd [pukul] LT\",lastDay:\"[Kemarin pukul] LT\",lastWeek:\"dddd [lalu pukul] LT\",sameElse:\"L\"},relativeTime:{future:\"dalam %s\",past:\"%s yang lalu\",s:\"beberapa detik\",m:\"semenit\",mm:\"%d menit\",h:\"sejam\",hh:\"%d jam\",d:\"sehari\",dd:\"%d hari\",M:\"sebulan\",MM:\"%d bulan\",y:\"setahun\",yy:\"%d tahun\"},week:{dow:1,doy:7}}),a.fullCalendar.datepickerLang(\"id\",\"id\",{closeText:\"Tutup\",prevText:\"&#x3C;mundur\",nextText:\"maju&#x3E;\",currentText:\"hari ini\",monthNames:[\"Januari\",\"Februari\",\"Maret\",\"April\",\"Mei\",\"Juni\",\"Juli\",\"Agustus\",\"September\",\"Oktober\",\"Nopember\",\"Desember\"],monthNamesShort:[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"Mei\",\"Jun\",\"Jul\",\"Agus\",\"Sep\",\"Okt\",\"Nop\",\"Des\"],dayNames:[\"Minggu\",\"Senin\",\"Selasa\",\"Rabu\",\"Kamis\",\"Jumat\",\"Sabtu\"],dayNamesShort:[\"Min\",\"Sen\",\"Sel\",\"Rab\",\"kam\",\"Jum\",\"Sab\"],dayNamesMin:[\"Mg\",\"Sn\",\"Sl\",\"Rb\",\"Km\",\"jm\",\"Sb\"],weekHeader:\"Mg\",dateFormat:\"dd/mm/yy\",firstDay:0,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),a.fullCalendar.lang(\"id\",{buttonText:{month:\"Bulan\",week:\"Minggu\",day:\"Hari\",list:\"Agenda\"},allDayHtml:\"Sehari<br/>penuh\",eventLimitText:\"lebih\"})}(),function(){function c(a){return a%100===11?!0:a%10===1?!1:!0}function d(a,b,d,e){var f=a+\" \";switch(d){case\"s\":return b||e?\"nokkrar sekúndur\":\"nokkrum sekúndum\";case\"m\":return b?\"mínúta\":\"mínútu\";case\"mm\":return c(a)?f+(b||e?\"mínútur\":\"mínútum\"):b?f+\"mínúta\":f+\"mínútu\";case\"hh\":return c(a)?f+(b||e?\"klukkustundir\":\"klukkustundum\"):f+\"klukkustund\";case\"d\":return b?\"dagur\":e?\"dag\":\"degi\";case\"dd\":return c(a)?b?f+\"dagar\":f+(e?\"daga\":\"dögum\"):b?f+\"dagur\":f+(e?\"dag\":\"degi\");case\"M\":return b?\"mánuður\":e?\"mánuð\":\"mánuði\";case\"MM\":return c(a)?b?f+\"mánuðir\":f+(e?\"mánuði\":\"mánuðum\"):b?f+\"mánuður\":f+(e?\"mánuð\":\"mánuði\");case\"y\":return b||e?\"ár\":\"ári\";case\"yy\":return c(a)?f+(b||e?\"ár\":\"árum\"):f+(b||e?\"ár\":\"ári\")}}(b.defineLocale||b.lang).call(b,\"is\",{months:\"janúar_febrúar_mars_apríl_maí_júní_júlí_ágúst_september_október_nóvember_desember\".split(\"_\"),monthsShort:\"jan_feb_mar_apr_maí_jún_júl_ágú_sep_okt_nóv_des\".split(\"_\"),weekdays:\"sunnudagur_mánudagur_þriðjudagur_miðvikudagur_fimmtudagur_föstudagur_laugardagur\".split(\"_\"),weekdaysShort:\"sun_mán_þri_mið_fim_fös_lau\".split(\"_\"),weekdaysMin:\"Su_Má_Þr_Mi_Fi_Fö_La\".split(\"_\"),longDateFormat:{LT:\"H:mm\",LTS:\"LT:ss\",L:\"DD/MM/YYYY\",LL:\"D. MMMM YYYY\",LLL:\"D. MMMM YYYY [kl.] LT\",LLLL:\"dddd, D. MMMM YYYY [kl.] LT\"},calendar:{sameDay:\"[í dag kl.] LT\",nextDay:\"[á morgun kl.] LT\",nextWeek:\"dddd [kl.] LT\",lastDay:\"[í gær kl.] LT\",lastWeek:\"[síðasta] dddd [kl.] LT\",sameElse:\"L\"},relativeTime:{future:\"eftir %s\",past:\"fyrir %s síðan\",s:d,m:d,mm:d,h:\"klukkustund\",hh:d,d:d,dd:d,M:d,MM:d,y:d,yy:d},ordinalParse:/\\d{1,2}\\./,ordinal:\"%d.\",week:{dow:1,doy:4}}),a.fullCalendar.datepickerLang(\"is\",\"is\",{closeText:\"Loka\",prevText:\"&#x3C; Fyrri\",nextText:\"Næsti &#x3E;\",currentText:\"Í dag\",monthNames:[\"Janúar\",\"Febrúar\",\"Mars\",\"Apríl\",\"Maí\",\"Júní\",\"Júlí\",\"Ágúst\",\"September\",\"Október\",\"Nóvember\",\"Desember\"],monthNamesShort:[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"Maí\",\"Jún\",\"Júl\",\"Ágú\",\"Sep\",\"Okt\",\"Nóv\",\"Des\"],dayNames:[\"Sunnudagur\",\"Mánudagur\",\"Þriðjudagur\",\"Miðvikudagur\",\"Fimmtudagur\",\"Föstudagur\",\"Laugardagur\"],dayNamesShort:[\"Sun\",\"Mán\",\"Þri\",\"Mið\",\"Fim\",\"Fös\",\"Lau\"],dayNamesMin:[\"Su\",\"Má\",\"Þr\",\"Mi\",\"Fi\",\"Fö\",\"La\"],weekHeader:\"Vika\",dateFormat:\"dd.mm.yy\",firstDay:0,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),a.fullCalendar.lang(\"is\",{buttonText:{month:\"Mánuður\",week:\"Vika\",day:\"Dagur\",list:\"Dagskrá\"},allDayHtml:\"Allan<br/>daginn\",eventLimitText:\"meira\"})}(),function(){(b.defineLocale||b.lang).call(b,\"it\",{months:\"gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre\".split(\"_\"),monthsShort:\"gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic\".split(\"_\"),weekdays:\"Domenica_Lunedì_Martedì_Mercoledì_Giovedì_Venerdì_Sabato\".split(\"_\"),weekdaysShort:\"Dom_Lun_Mar_Mer_Gio_Ven_Sab\".split(\"_\"),weekdaysMin:\"D_L_Ma_Me_G_V_S\".split(\"_\"),longDateFormat:{LT:\"HH:mm\",LTS:\"LT:ss\",L:\"DD/MM/YYYY\",LL:\"D MMMM YYYY\",LLL:\"D MMMM YYYY LT\",LLLL:\"dddd, D MMMM YYYY LT\"},calendar:{sameDay:\"[Oggi alle] LT\",nextDay:\"[Domani alle] LT\",nextWeek:\"dddd [alle] LT\",lastDay:\"[Ieri alle] LT\",lastWeek:function(){switch(this.day()){case 0:return\"[la scorsa] dddd [alle] LT\";default:return\"[lo scorso] dddd [alle] LT\"}},sameElse:\"L\"},relativeTime:{future:function(a){return(/^[0-9].+$/.test(a)?\"tra\":\"in\")+\" \"+a},past:\"%s fa\",s:\"alcuni secondi\",m:\"un minuto\",mm:\"%d minuti\",h:\"un'ora\",hh:\"%d ore\",d:\"un giorno\",dd:\"%d giorni\",M:\"un mese\",MM:\"%d mesi\",y:\"un anno\",yy:\"%d anni\"},ordinalParse:/\\d{1,2}º/,ordinal:\"%dº\",week:{dow:1,doy:4}}),a.fullCalendar.datepickerLang(\"it\",\"it\",{closeText:\"Chiudi\",prevText:\"&#x3C;Prec\",nextText:\"Succ&#x3E;\",currentText:\"Oggi\",monthNames:[\"Gennaio\",\"Febbraio\",\"Marzo\",\"Aprile\",\"Maggio\",\"Giugno\",\"Luglio\",\"Agosto\",\"Settembre\",\"Ottobre\",\"Novembre\",\"Dicembre\"],monthNamesShort:[\"Gen\",\"Feb\",\"Mar\",\"Apr\",\"Mag\",\"Giu\",\"Lug\",\"Ago\",\"Set\",\"Ott\",\"Nov\",\"Dic\"],dayNames:[\"Domenica\",\"Lunedì\",\"Martedì\",\"Mercoledì\",\"Giovedì\",\"Venerdì\",\"Sabato\"],dayNamesShort:[\"Dom\",\"Lun\",\"Mar\",\"Mer\",\"Gio\",\"Ven\",\"Sab\"],dayNamesMin:[\"Do\",\"Lu\",\"Ma\",\"Me\",\"Gi\",\"Ve\",\"Sa\"],weekHeader:\"Sm\",dateFormat:\"dd/mm/yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),a.fullCalendar.lang(\"it\",{buttonText:{month:\"Mese\",week:\"Settimana\",day:\"Giorno\",list:\"Agenda\"},allDayHtml:\"Tutto il<br/>giorno\",eventLimitText:function(a){return\"+altri \"+a}})}(),function(){(b.defineLocale||b.lang).call(b,\"ja\",{months:\"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月\".split(\"_\"),monthsShort:\"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月\".split(\"_\"),weekdays:\"日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日\".split(\"_\"),weekdaysShort:\"日_月_火_水_木_金_土\".split(\"_\"),weekdaysMin:\"日_月_火_水_木_金_土\".split(\"_\"),longDateFormat:{LT:\"Ah時m分\",LTS:\"LTs秒\",L:\"YYYY/MM/DD\",LL:\"YYYY年M月D日\",LLL:\"YYYY年M月D日LT\",LLLL:\"YYYY年M月D日LT dddd\"},meridiemParse:/午前|午後/i,isPM:function(a){return\"午後\"===a},meridiem:function(a,b,c){return 12>a?\"午前\":\"午後\"},calendar:{sameDay:\"[今日] LT\",nextDay:\"[明日] LT\",nextWeek:\"[来週]dddd LT\",lastDay:\"[昨日] LT\",lastWeek:\"[前週]dddd LT\",sameElse:\"L\"},relativeTime:{future:\"%s後\",past:\"%s前\",s:\"数秒\",m:\"1分\",mm:\"%d分\",h:\"1時間\",hh:\"%d時間\",d:\"1日\",dd:\"%d日\",M:\"1ヶ月\",MM:\"%dヶ月\",y:\"1年\",yy:\"%d年\"}}),a.fullCalendar.datepickerLang(\"ja\",\"ja\",{closeText:\"閉じる\",prevText:\"&#x3C;前\",nextText:\"次&#x3E;\",currentText:\"今日\",monthNames:[\"1月\",\"2月\",\"3月\",\"4月\",\"5月\",\"6月\",\"7月\",\"8月\",\"9月\",\"10月\",\"11月\",\"12月\"],monthNamesShort:[\"1月\",\"2月\",\"3月\",\"4月\",\"5月\",\"6月\",\"7月\",\"8月\",\"9月\",\"10月\",\"11月\",\"12月\"],dayNames:[\"日曜日\",\"月曜日\",\"火曜日\",\"水曜日\",\"木曜日\",\"金曜日\",\"土曜日\"],dayNamesShort:[\"日\",\"月\",\"火\",\"水\",\"木\",\"金\",\"土\"],dayNamesMin:[\"日\",\"月\",\"火\",\"水\",\"木\",\"金\",\"土\"],weekHeader:\"週\",dateFormat:\"yy/mm/dd\",firstDay:0,isRTL:!1,showMonthAfterYear:!0,yearSuffix:\"年\"}),a.fullCalendar.lang(\"ja\",{buttonText:{month:\"月\",week:\"週\",day:\"日\",list:\"予定リスト\"},allDayText:\"終日\",eventLimitText:function(a){return\"他 \"+a+\" 件\"}})}(),function(){(b.defineLocale||b.lang).call(b,\"ko\",{months:\"1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월\".split(\"_\"),monthsShort:\"1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월\".split(\"_\"),weekdays:\"일요일_월요일_화요일_수요일_목요일_금요일_토요일\".split(\"_\"),weekdaysShort:\"일_월_화_수_목_금_토\".split(\"_\"),weekdaysMin:\"일_월_화_수_목_금_토\".split(\"_\"),longDateFormat:{LT:\"A h시 m분\",LTS:\"A h시 m분 s초\",L:\"YYYY.MM.DD\",LL:\"YYYY년 MMMM D일\",LLL:\"YYYY년 MMMM D일 LT\",LLLL:\"YYYY년 MMMM D일 dddd LT\"},calendar:{sameDay:\"오늘 LT\",nextDay:\"내일 LT\",nextWeek:\"dddd LT\",lastDay:\"어제 LT\",lastWeek:\"지난주 dddd LT\",sameElse:\"L\"},relativeTime:{future:\"%s 후\",past:\"%s 전\",s:\"몇초\",ss:\"%d초\",m:\"일분\",mm:\"%d분\",h:\"한시간\",hh:\"%d시간\",d:\"하루\",dd:\"%d일\",M:\"한달\",MM:\"%d달\",y:\"일년\",yy:\"%d년\"},ordinalParse:/\\d{1,2}일/,ordinal:\"%d일\",meridiemParse:/오전|오후/,isPM:function(a){return\"오후\"===a},meridiem:function(a,b,c){return 12>a?\"오전\":\"오후\"}}),a.fullCalendar.datepickerLang(\"ko\",\"ko\",{closeText:\"닫기\",prevText:\"이전달\",nextText:\"다음달\",currentText:\"오늘\",monthNames:[\"1월\",\"2월\",\"3월\",\"4월\",\"5월\",\"6월\",\"7월\",\"8월\",\"9월\",\"10월\",\"11월\",\"12월\"],monthNamesShort:[\"1월\",\"2월\",\"3월\",\"4월\",\"5월\",\"6월\",\"7월\",\"8월\",\"9월\",\"10월\",\"11월\",\"12월\"],dayNames:[\"일요일\",\"월요일\",\"화요일\",\"수요일\",\"목요일\",\"금요일\",\"토요일\"],dayNamesShort:[\"일\",\"월\",\"화\",\"수\",\"목\",\"금\",\"토\"],dayNamesMin:[\"일\",\"월\",\"화\",\"수\",\"목\",\"금\",\"토\"],weekHeader:\"Wk\",dateFormat:\"yy-mm-dd\",firstDay:0,isRTL:!1,showMonthAfterYear:!0,yearSuffix:\"년\"}),a.fullCalendar.lang(\"ko\",{buttonText:{month:\"월\",week:\"주\",day:\"일\",list:\"일정목록\"},allDayText:\"종일\",eventLimitText:\"개\"})}(),function(){function c(a,b,c,d){return b?\"kelios sekundės\":d?\"kelių sekundžių\":\"kelias sekundes\"}function d(a,b,c,d){return b?f(c)[0]:d?f(c)[1]:f(c)[2]}function e(a){return a%10===0||a>10&&20>a}function f(a){return i[a].split(\"_\")}function g(a,b,c,g){var h=a+\" \";return 1===a?h+d(a,b,c[0],g):b?h+(e(a)?f(c)[1]:f(c)[0]):g?h+f(c)[1]:h+(e(a)?f(c)[1]:f(c)[2])}function h(a,b){var c=-1===b.indexOf(\"dddd HH:mm\"),d=j[a.day()];return c?d:d.substring(0,d.length-2)+\"į\"}var i={m:\"minutė_minutės_minutę\",mm:\"minutės_minučių_minutes\",h:\"valanda_valandos_valandą\",hh:\"valandos_valandų_valandas\",d:\"diena_dienos_dieną\",dd:\"dienos_dienų_dienas\",M:\"mėnuo_mėnesio_mėnesį\",MM:\"mėnesiai_mėnesių_mėnesius\",y:\"metai_metų_metus\",yy:\"metai_metų_metus\"},j=\"sekmadienis_pirmadienis_antradienis_trečiadienis_ketvirtadienis_penktadienis_šeštadienis\".split(\"_\");(b.defineLocale||b.lang).call(b,\"lt\",{months:\"sausio_vasario_kovo_balandžio_gegužės_birželio_liepos_rugpjūčio_rugsėjo_spalio_lapkričio_gruodžio\".split(\"_\"),monthsShort:\"sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd\".split(\"_\"),weekdays:h,weekdaysShort:\"Sek_Pir_Ant_Tre_Ket_Pen_Šeš\".split(\"_\"),weekdaysMin:\"S_P_A_T_K_Pn_Š\".split(\"_\"),longDateFormat:{LT:\"HH:mm\",LTS:\"LT:ss\",L:\"YYYY-MM-DD\",LL:\"YYYY [m.] MMMM D [d.]\",LLL:\"YYYY [m.] MMMM D [d.], LT [val.]\",LLLL:\"YYYY [m.] MMMM D [d.], dddd, LT [val.]\",l:\"YYYY-MM-DD\",ll:\"YYYY [m.] MMMM D [d.]\",lll:\"YYYY [m.] MMMM D [d.], LT [val.]\",llll:\"YYYY [m.] MMMM D [d.], ddd, LT [val.]\"},calendar:{sameDay:\"[Šiandien] LT\",nextDay:\"[Rytoj] LT\",nextWeek:\"dddd LT\",lastDay:\"[Vakar] LT\",lastWeek:\"[Praėjusį] dddd LT\",sameElse:\"L\"},relativeTime:{future:\"po %s\",past:\"prieš %s\",s:c,m:d,mm:g,h:d,hh:g,d:d,dd:g,M:d,MM:g,y:d,yy:g},ordinalParse:/\\d{1,2}-oji/,ordinal:function(a){return a+\"-oji\"},week:{dow:1,doy:4}}),a.fullCalendar.datepickerLang(\"lt\",\"lt\",{closeText:\"Uždaryti\",prevText:\"&#x3C;Atgal\",nextText:\"Pirmyn&#x3E;\",currentText:\"Šiandien\",monthNames:[\"Sausis\",\"Vasaris\",\"Kovas\",\"Balandis\",\"Gegužė\",\"Birželis\",\"Liepa\",\"Rugpjūtis\",\"Rugsėjis\",\"Spalis\",\"Lapkritis\",\"Gruodis\"],monthNamesShort:[\"Sau\",\"Vas\",\"Kov\",\"Bal\",\"Geg\",\"Bir\",\"Lie\",\"Rugp\",\"Rugs\",\"Spa\",\"Lap\",\"Gru\"],dayNames:[\"sekmadienis\",\"pirmadienis\",\"antradienis\",\"trečiadienis\",\"ketvirtadienis\",\"penktadienis\",\"šeštadienis\"],dayNamesShort:[\"sek\",\"pir\",\"ant\",\"tre\",\"ket\",\"pen\",\"šeš\"],dayNamesMin:[\"Se\",\"Pr\",\"An\",\"Tr\",\"Ke\",\"Pe\",\"Še\"],weekHeader:\"SAV\",dateFormat:\"yy-mm-dd\",firstDay:1,isRTL:!1,showMonthAfterYear:!0,yearSuffix:\"\"}),a.fullCalendar.lang(\"lt\",{buttonText:{month:\"Mėnuo\",week:\"Savaitė\",day:\"Diena\",list:\"Darbotvarkė\"},allDayText:\"Visą dieną\",eventLimitText:\"daugiau\"})}(),function(){function c(a,b,c){var d=a.split(\"_\");return c?b%10===1&&11!==b?d[2]:d[3]:b%10===1&&11!==b?d[0]:d[1]}function d(a,b,d){return a+\" \"+c(e[d],a,b)}var e={mm:\"minūti_minūtes_minūte_minūtes\",hh:\"stundu_stundas_stunda_stundas\",dd:\"dienu_dienas_diena_dienas\",MM:\"mēnesi_mēnešus_mēnesis_mēneši\",yy:\"gadu_gadus_gads_gadi\"};(b.defineLocale||b.lang).call(b,\"lv\",{months:\"janvāris_februāris_marts_aprīlis_maijs_jūnijs_jūlijs_augusts_septembris_oktobris_novembris_decembris\".split(\"_\"),monthsShort:\"jan_feb_mar_apr_mai_jūn_jūl_aug_sep_okt_nov_dec\".split(\"_\"),weekdays:\"svētdiena_pirmdiena_otrdiena_trešdiena_ceturtdiena_piektdiena_sestdiena\".split(\"_\"),weekdaysShort:\"Sv_P_O_T_C_Pk_S\".split(\"_\"),weekdaysMin:\"Sv_P_O_T_C_Pk_S\".split(\"_\"),longDateFormat:{LT:\"HH:mm\",LTS:\"LT:ss\",L:\"DD.MM.YYYY\",LL:\"YYYY. [gada] D. MMMM\",LLL:\"YYYY. [gada] D. MMMM, LT\",LLLL:\"YYYY. [gada] D. MMMM, dddd, LT\"},calendar:{sameDay:\"[Šodien pulksten] LT\",nextDay:\"[Rīt pulksten] LT\",nextWeek:\"dddd [pulksten] LT\",lastDay:\"[Vakar pulksten] LT\",lastWeek:\"[Pagājušā] dddd [pulksten] LT\",sameElse:\"L\"},relativeTime:{future:\"%s vēlāk\",past:\"%s agrāk\",s:\"dažas sekundes\",m:\"minūti\",mm:d,h:\"stundu\",hh:d,d:\"dienu\",dd:d,M:\"mēnesi\",MM:d,y:\"gadu\",yy:d},ordinalParse:/\\d{1,2}\\./,ordinal:\"%d.\",week:{dow:1,doy:4}}),a.fullCalendar.datepickerLang(\"lv\",\"lv\",{closeText:\"Aizvērt\",prevText:\"Iepr.\",nextText:\"Nāk.\",currentText:\"Šodien\",monthNames:[\"Janvāris\",\"Februāris\",\"Marts\",\"Aprīlis\",\"Maijs\",\"Jūnijs\",\"Jūlijs\",\"Augusts\",\"Septembris\",\"Oktobris\",\"Novembris\",\"Decembris\"],monthNamesShort:[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"Mai\",\"Jūn\",\"Jūl\",\"Aug\",\"Sep\",\"Okt\",\"Nov\",\"Dec\"],dayNames:[\"svētdiena\",\"pirmdiena\",\"otrdiena\",\"trešdiena\",\"ceturtdiena\",\"piektdiena\",\"sestdiena\"],dayNamesShort:[\"svt\",\"prm\",\"otr\",\"tre\",\"ctr\",\"pkt\",\"sst\"],dayNamesMin:[\"Sv\",\"Pr\",\"Ot\",\"Tr\",\"Ct\",\"Pk\",\"Ss\"],weekHeader:\"Ned.\",dateFormat:\"dd.mm.yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),a.fullCalendar.lang(\"lv\",{buttonText:{month:\"Mēnesis\",week:\"Nedēļa\",day:\"Diena\",list:\"Dienas kārtība\"},allDayText:\"Visu dienu\",eventLimitText:function(a){return\"+vēl \"+a}})}(),function(){(b.defineLocale||b.lang).call(b,\"nb\",{months:\"januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember\".split(\"_\"),monthsShort:\"jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des\".split(\"_\"),weekdays:\"søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag\".split(\"_\"),weekdaysShort:\"søn_man_tirs_ons_tors_fre_lør\".split(\"_\"),weekdaysMin:\"sø_ma_ti_on_to_fr_lø\".split(\"_\"),longDateFormat:{LT:\"H.mm\",LTS:\"LT.ss\",L:\"DD.MM.YYYY\",LL:\"D. MMMM YYYY\",LLL:\"D. MMMM YYYY [kl.] LT\",LLLL:\"dddd D. MMMM YYYY [kl.] LT\"},calendar:{sameDay:\"[i dag kl.] LT\",nextDay:\"[i morgen kl.] LT\",nextWeek:\"dddd [kl.] LT\",lastDay:\"[i går kl.] LT\",lastWeek:\"[forrige] dddd [kl.] LT\",sameElse:\"L\"},relativeTime:{future:\"om %s\",past:\"for %s siden\",s:\"noen sekunder\",m:\"ett minutt\",mm:\"%d minutter\",h:\"en time\",hh:\"%d timer\",d:\"en dag\",dd:\"%d dager\",M:\"en måned\",MM:\"%d måneder\",y:\"ett år\",yy:\"%d år\"},ordinalParse:/\\d{1,2}\\./,ordinal:\"%d.\",week:{dow:1,doy:4}}),a.fullCalendar.datepickerLang(\"nb\",\"nb\",{closeText:\"Lukk\",prevText:\"&#xAB;Forrige\",nextText:\"Neste&#xBB;\",currentText:\"I dag\",monthNames:[\"januar\",\"februar\",\"mars\",\"april\",\"mai\",\"juni\",\"juli\",\"august\",\"september\",\"oktober\",\"november\",\"desember\"],monthNamesShort:[\"jan\",\"feb\",\"mar\",\"apr\",\"mai\",\"jun\",\"jul\",\"aug\",\"sep\",\"okt\",\"nov\",\"des\"],dayNamesShort:[\"søn\",\"man\",\"tir\",\"ons\",\"tor\",\"fre\",\"lør\"],dayNames:[\"søndag\",\"mandag\",\"tirsdag\",\"onsdag\",\"torsdag\",\"fredag\",\"lørdag\"],dayNamesMin:[\"sø\",\"ma\",\"ti\",\"on\",\"to\",\"fr\",\"lø\"],weekHeader:\"Uke\",dateFormat:\"dd.mm.yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),a.fullCalendar.lang(\"nb\",{buttonText:{month:\"Måned\",week:\"Uke\",day:\"Dag\",list:\"Agenda\"},allDayText:\"Hele dagen\",eventLimitText:\"til\"})}(),function(){var c=\"jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.\".split(\"_\"),d=\"jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec\".split(\"_\");(b.defineLocale||b.lang).call(b,\"nl\",{months:\"januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december\".split(\"_\"),monthsShort:function(a,b){return/-MMM-/.test(b)?d[a.month()]:c[a.month()]},weekdays:\"zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag\".split(\"_\"),weekdaysShort:\"zo._ma._di._wo._do._vr._za.\".split(\"_\"),weekdaysMin:\"Zo_Ma_Di_Wo_Do_Vr_Za\".split(\"_\"),longDateFormat:{LT:\"HH:mm\",LTS:\"LT:ss\",L:\"DD-MM-YYYY\",LL:\"D MMMM YYYY\",LLL:\"D MMMM YYYY LT\",LLLL:\"dddd D MMMM YYYY LT\"},calendar:{sameDay:\"[vandaag om] LT\",nextDay:\"[morgen om] LT\",nextWeek:\"dddd [om] LT\",lastDay:\"[gisteren om] LT\",lastWeek:\"[afgelopen] dddd [om] LT\",sameElse:\"L\"},relativeTime:{future:\"over %s\",past:\"%s geleden\",s:\"een paar seconden\",m:\"één minuut\",mm:\"%d minuten\",h:\"één uur\",hh:\"%d uur\",d:\"één dag\",dd:\"%d dagen\",M:\"één maand\",MM:\"%d maanden\",y:\"één jaar\",yy:\"%d jaar\"},ordinalParse:/\\d{1,2}(ste|de)/,ordinal:function(a){return a+(1===a||8===a||a>=20?\"ste\":\"de\")},week:{dow:1,doy:4}}),a.fullCalendar.datepickerLang(\"nl\",\"nl\",{closeText:\"Sluiten\",prevText:\"←\",nextText:\"→\",currentText:\"Vandaag\",monthNames:[\"januari\",\"februari\",\"maart\",\"april\",\"mei\",\"juni\",\"juli\",\"augustus\",\"september\",\"oktober\",\"november\",\"december\"],\nmonthNamesShort:[\"jan\",\"feb\",\"mrt\",\"apr\",\"mei\",\"jun\",\"jul\",\"aug\",\"sep\",\"okt\",\"nov\",\"dec\"],dayNames:[\"zondag\",\"maandag\",\"dinsdag\",\"woensdag\",\"donderdag\",\"vrijdag\",\"zaterdag\"],dayNamesShort:[\"zon\",\"maa\",\"din\",\"woe\",\"don\",\"vri\",\"zat\"],dayNamesMin:[\"zo\",\"ma\",\"di\",\"wo\",\"do\",\"vr\",\"za\"],weekHeader:\"Wk\",dateFormat:\"dd-mm-yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),a.fullCalendar.lang(\"nl\",{buttonText:{month:\"Maand\",week:\"Week\",day:\"Dag\",list:\"Agenda\"},allDayText:\"Hele dag\",eventLimitText:\"extra\"})}(),function(){function c(a){return 5>a%10&&a%10>1&&~~(a/10)%10!==1}function d(a,b,d){var e=a+\" \";switch(d){case\"m\":return b?\"minuta\":\"minutę\";case\"mm\":return e+(c(a)?\"minuty\":\"minut\");case\"h\":return b?\"godzina\":\"godzinę\";case\"hh\":return e+(c(a)?\"godziny\":\"godzin\");case\"MM\":return e+(c(a)?\"miesiące\":\"miesięcy\");case\"yy\":return e+(c(a)?\"lata\":\"lat\")}}var e=\"styczeń_luty_marzec_kwiecień_maj_czerwiec_lipiec_sierpień_wrzesień_październik_listopad_grudzień\".split(\"_\"),f=\"stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_września_października_listopada_grudnia\".split(\"_\");(b.defineLocale||b.lang).call(b,\"pl\",{months:function(a,b){return/D MMMM/.test(b)?f[a.month()]:e[a.month()]},monthsShort:\"sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paź_lis_gru\".split(\"_\"),weekdays:\"niedziela_poniedziałek_wtorek_środa_czwartek_piątek_sobota\".split(\"_\"),weekdaysShort:\"nie_pon_wt_śr_czw_pt_sb\".split(\"_\"),weekdaysMin:\"N_Pn_Wt_Śr_Cz_Pt_So\".split(\"_\"),longDateFormat:{LT:\"HH:mm\",LTS:\"LT:ss\",L:\"DD.MM.YYYY\",LL:\"D MMMM YYYY\",LLL:\"D MMMM YYYY LT\",LLLL:\"dddd, D MMMM YYYY LT\"},calendar:{sameDay:\"[Dziś o] LT\",nextDay:\"[Jutro o] LT\",nextWeek:\"[W] dddd [o] LT\",lastDay:\"[Wczoraj o] LT\",lastWeek:function(){switch(this.day()){case 0:return\"[W zeszłą niedzielę o] LT\";case 3:return\"[W zeszłą środę o] LT\";case 6:return\"[W zeszłą sobotę o] LT\";default:return\"[W zeszły] dddd [o] LT\"}},sameElse:\"L\"},relativeTime:{future:\"za %s\",past:\"%s temu\",s:\"kilka sekund\",m:d,mm:d,h:d,hh:d,d:\"1 dzień\",dd:\"%d dni\",M:\"miesiąc\",MM:d,y:\"rok\",yy:d},ordinalParse:/\\d{1,2}\\./,ordinal:\"%d.\",week:{dow:1,doy:4}}),a.fullCalendar.datepickerLang(\"pl\",\"pl\",{closeText:\"Zamknij\",prevText:\"&#x3C;Poprzedni\",nextText:\"Następny&#x3E;\",currentText:\"Dziś\",monthNames:[\"Styczeń\",\"Luty\",\"Marzec\",\"Kwiecień\",\"Maj\",\"Czerwiec\",\"Lipiec\",\"Sierpień\",\"Wrzesień\",\"Październik\",\"Listopad\",\"Grudzień\"],monthNamesShort:[\"Sty\",\"Lu\",\"Mar\",\"Kw\",\"Maj\",\"Cze\",\"Lip\",\"Sie\",\"Wrz\",\"Pa\",\"Lis\",\"Gru\"],dayNames:[\"Niedziela\",\"Poniedziałek\",\"Wtorek\",\"Środa\",\"Czwartek\",\"Piątek\",\"Sobota\"],dayNamesShort:[\"Nie\",\"Pn\",\"Wt\",\"Śr\",\"Czw\",\"Pt\",\"So\"],dayNamesMin:[\"N\",\"Pn\",\"Wt\",\"Śr\",\"Cz\",\"Pt\",\"So\"],weekHeader:\"Tydz\",dateFormat:\"dd.mm.yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),a.fullCalendar.lang(\"pl\",{buttonText:{month:\"Miesiąc\",week:\"Tydzień\",day:\"Dzień\",list:\"Plan dnia\"},allDayText:\"Cały dzień\",eventLimitText:\"więcej\"})}(),function(){(b.defineLocale||b.lang).call(b,\"pt-br\",{months:\"janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro\".split(\"_\"),monthsShort:\"jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez\".split(\"_\"),weekdays:\"domingo_segunda-feira_terça-feira_quarta-feira_quinta-feira_sexta-feira_sábado\".split(\"_\"),weekdaysShort:\"dom_seg_ter_qua_qui_sex_sáb\".split(\"_\"),weekdaysMin:\"dom_2ª_3ª_4ª_5ª_6ª_sáb\".split(\"_\"),longDateFormat:{LT:\"HH:mm\",LTS:\"LT:ss\",L:\"DD/MM/YYYY\",LL:\"D [de] MMMM [de] YYYY\",LLL:\"D [de] MMMM [de] YYYY [às] LT\",LLLL:\"dddd, D [de] MMMM [de] YYYY [às] LT\"},calendar:{sameDay:\"[Hoje às] LT\",nextDay:\"[Amanhã às] LT\",nextWeek:\"dddd [às] LT\",lastDay:\"[Ontem às] LT\",lastWeek:function(){return 0===this.day()||6===this.day()?\"[Último] dddd [às] LT\":\"[Última] dddd [às] LT\"},sameElse:\"L\"},relativeTime:{future:\"em %s\",past:\"%s atrás\",s:\"segundos\",m:\"um minuto\",mm:\"%d minutos\",h:\"uma hora\",hh:\"%d horas\",d:\"um dia\",dd:\"%d dias\",M:\"um mês\",MM:\"%d meses\",y:\"um ano\",yy:\"%d anos\"},ordinalParse:/\\d{1,2}º/,ordinal:\"%dº\"}),a.fullCalendar.datepickerLang(\"pt-br\",\"pt-BR\",{closeText:\"Fechar\",prevText:\"&#x3C;Anterior\",nextText:\"Próximo&#x3E;\",currentText:\"Hoje\",monthNames:[\"Janeiro\",\"Fevereiro\",\"Março\",\"Abril\",\"Maio\",\"Junho\",\"Julho\",\"Agosto\",\"Setembro\",\"Outubro\",\"Novembro\",\"Dezembro\"],monthNamesShort:[\"Jan\",\"Fev\",\"Mar\",\"Abr\",\"Mai\",\"Jun\",\"Jul\",\"Ago\",\"Set\",\"Out\",\"Nov\",\"Dez\"],dayNames:[\"Domingo\",\"Segunda-feira\",\"Terça-feira\",\"Quarta-feira\",\"Quinta-feira\",\"Sexta-feira\",\"Sábado\"],dayNamesShort:[\"Dom\",\"Seg\",\"Ter\",\"Qua\",\"Qui\",\"Sex\",\"Sáb\"],dayNamesMin:[\"Dom\",\"Seg\",\"Ter\",\"Qua\",\"Qui\",\"Sex\",\"Sáb\"],weekHeader:\"Sm\",dateFormat:\"dd/mm/yy\",firstDay:0,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),a.fullCalendar.lang(\"pt-br\",{buttonText:{month:\"Mês\",week:\"Semana\",day:\"Dia\",list:\"Compromissos\"},allDayText:\"dia inteiro\",eventLimitText:function(a){return\"mais +\"+a}})}(),function(){(b.defineLocale||b.lang).call(b,\"pt\",{months:\"janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro\".split(\"_\"),monthsShort:\"jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez\".split(\"_\"),weekdays:\"domingo_segunda-feira_terça-feira_quarta-feira_quinta-feira_sexta-feira_sábado\".split(\"_\"),weekdaysShort:\"dom_seg_ter_qua_qui_sex_sáb\".split(\"_\"),weekdaysMin:\"dom_2ª_3ª_4ª_5ª_6ª_sáb\".split(\"_\"),longDateFormat:{LT:\"HH:mm\",LTS:\"LT:ss\",L:\"DD/MM/YYYY\",LL:\"D [de] MMMM [de] YYYY\",LLL:\"D [de] MMMM [de] YYYY LT\",LLLL:\"dddd, D [de] MMMM [de] YYYY LT\"},calendar:{sameDay:\"[Hoje às] LT\",nextDay:\"[Amanhã às] LT\",nextWeek:\"dddd [às] LT\",lastDay:\"[Ontem às] LT\",lastWeek:function(){return 0===this.day()||6===this.day()?\"[Último] dddd [às] LT\":\"[Última] dddd [às] LT\"},sameElse:\"L\"},relativeTime:{future:\"em %s\",past:\"há %s\",s:\"segundos\",m:\"um minuto\",mm:\"%d minutos\",h:\"uma hora\",hh:\"%d horas\",d:\"um dia\",dd:\"%d dias\",M:\"um mês\",MM:\"%d meses\",y:\"um ano\",yy:\"%d anos\"},ordinalParse:/\\d{1,2}º/,ordinal:\"%dº\",week:{dow:1,doy:4}}),a.fullCalendar.datepickerLang(\"pt\",\"pt\",{closeText:\"Fechar\",prevText:\"Anterior\",nextText:\"Seguinte\",currentText:\"Hoje\",monthNames:[\"Janeiro\",\"Fevereiro\",\"Março\",\"Abril\",\"Maio\",\"Junho\",\"Julho\",\"Agosto\",\"Setembro\",\"Outubro\",\"Novembro\",\"Dezembro\"],monthNamesShort:[\"Jan\",\"Fev\",\"Mar\",\"Abr\",\"Mai\",\"Jun\",\"Jul\",\"Ago\",\"Set\",\"Out\",\"Nov\",\"Dez\"],dayNames:[\"Domingo\",\"Segunda-feira\",\"Terça-feira\",\"Quarta-feira\",\"Quinta-feira\",\"Sexta-feira\",\"Sábado\"],dayNamesShort:[\"Dom\",\"Seg\",\"Ter\",\"Qua\",\"Qui\",\"Sex\",\"Sáb\"],dayNamesMin:[\"Dom\",\"Seg\",\"Ter\",\"Qua\",\"Qui\",\"Sex\",\"Sáb\"],weekHeader:\"Sem\",dateFormat:\"dd/mm/yy\",firstDay:0,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),a.fullCalendar.lang(\"pt\",{buttonText:{month:\"Mês\",week:\"Semana\",day:\"Dia\",list:\"Agenda\"},allDayText:\"Todo o dia\",eventLimitText:\"mais\"})}(),function(){function c(a,b,c){var d={mm:\"minute\",hh:\"ore\",dd:\"zile\",MM:\"luni\",yy:\"ani\"},e=\" \";return(a%100>=20||a>=100&&a%100===0)&&(e=\" de \"),a+e+d[c]}(b.defineLocale||b.lang).call(b,\"ro\",{months:\"ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie\".split(\"_\"),monthsShort:\"ian._febr._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.\".split(\"_\"),weekdays:\"duminică_luni_marți_miercuri_joi_vineri_sâmbătă\".split(\"_\"),weekdaysShort:\"Dum_Lun_Mar_Mie_Joi_Vin_Sâm\".split(\"_\"),weekdaysMin:\"Du_Lu_Ma_Mi_Jo_Vi_Sâ\".split(\"_\"),longDateFormat:{LT:\"H:mm\",LTS:\"LT:ss\",L:\"DD.MM.YYYY\",LL:\"D MMMM YYYY\",LLL:\"D MMMM YYYY H:mm\",LLLL:\"dddd, D MMMM YYYY H:mm\"},calendar:{sameDay:\"[azi la] LT\",nextDay:\"[mâine la] LT\",nextWeek:\"dddd [la] LT\",lastDay:\"[ieri la] LT\",lastWeek:\"[fosta] dddd [la] LT\",sameElse:\"L\"},relativeTime:{future:\"peste %s\",past:\"%s în urmă\",s:\"câteva secunde\",m:\"un minut\",mm:c,h:\"o oră\",hh:c,d:\"o zi\",dd:c,M:\"o lună\",MM:c,y:\"un an\",yy:c},week:{dow:1,doy:7}}),a.fullCalendar.datepickerLang(\"ro\",\"ro\",{closeText:\"Închide\",prevText:\"&#xAB; Luna precedentă\",nextText:\"Luna următoare &#xBB;\",currentText:\"Azi\",monthNames:[\"Ianuarie\",\"Februarie\",\"Martie\",\"Aprilie\",\"Mai\",\"Iunie\",\"Iulie\",\"August\",\"Septembrie\",\"Octombrie\",\"Noiembrie\",\"Decembrie\"],monthNamesShort:[\"Ian\",\"Feb\",\"Mar\",\"Apr\",\"Mai\",\"Iun\",\"Iul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"],dayNames:[\"Duminică\",\"Luni\",\"Marţi\",\"Miercuri\",\"Joi\",\"Vineri\",\"Sâmbătă\"],dayNamesShort:[\"Dum\",\"Lun\",\"Mar\",\"Mie\",\"Joi\",\"Vin\",\"Sâm\"],dayNamesMin:[\"Du\",\"Lu\",\"Ma\",\"Mi\",\"Jo\",\"Vi\",\"Sâ\"],weekHeader:\"Săpt\",dateFormat:\"dd.mm.yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),a.fullCalendar.lang(\"ro\",{buttonText:{prev:\"precedentă\",next:\"următoare\",month:\"Lună\",week:\"Săptămână\",day:\"Zi\",list:\"Agendă\"},allDayText:\"Toată ziua\",eventLimitText:function(a){return\"+alte \"+a}})}(),function(){function c(a,b){var c=a.split(\"_\");return b%10===1&&b%100!==11?c[0]:b%10>=2&&4>=b%10&&(10>b%100||b%100>=20)?c[1]:c[2]}function d(a,b,d){var e={mm:b?\"минута_минуты_минут\":\"минуту_минуты_минут\",hh:\"час_часа_часов\",dd:\"день_дня_дней\",MM:\"месяц_месяца_месяцев\",yy:\"год_года_лет\"};return\"m\"===d?b?\"минута\":\"минуту\":a+\" \"+c(e[d],+a)}function e(a,b){var c={nominative:\"январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь\".split(\"_\"),accusative:\"января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря\".split(\"_\")},d=/D[oD]?(\\[[^\\[\\]]*\\]|\\s+)+MMMM?/.test(b)?\"accusative\":\"nominative\";return c[d][a.month()]}function f(a,b){var c={nominative:\"янв_фев_март_апр_май_июнь_июль_авг_сен_окт_ноя_дек\".split(\"_\"),accusative:\"янв_фев_мар_апр_мая_июня_июля_авг_сен_окт_ноя_дек\".split(\"_\")},d=/D[oD]?(\\[[^\\[\\]]*\\]|\\s+)+MMMM?/.test(b)?\"accusative\":\"nominative\";return c[d][a.month()]}function g(a,b){var c={nominative:\"воскресенье_понедельник_вторник_среда_четверг_пятница_суббота\".split(\"_\"),accusative:\"воскресенье_понедельник_вторник_среду_четверг_пятницу_субботу\".split(\"_\")},d=/\\[ ?[Вв] ?(?:прошлую|следующую|эту)? ?\\] ?dddd/.test(b)?\"accusative\":\"nominative\";return c[d][a.day()]}(b.defineLocale||b.lang).call(b,\"ru\",{months:e,monthsShort:f,weekdays:g,weekdaysShort:\"вс_пн_вт_ср_чт_пт_сб\".split(\"_\"),weekdaysMin:\"вс_пн_вт_ср_чт_пт_сб\".split(\"_\"),monthsParse:[/^янв/i,/^фев/i,/^мар/i,/^апр/i,/^ма[й|я]/i,/^июн/i,/^июл/i,/^авг/i,/^сен/i,/^окт/i,/^ноя/i,/^дек/i],longDateFormat:{LT:\"HH:mm\",LTS:\"LT:ss\",L:\"DD.MM.YYYY\",LL:\"D MMMM YYYY г.\",LLL:\"D MMMM YYYY г., LT\",LLLL:\"dddd, D MMMM YYYY г., LT\"},calendar:{sameDay:\"[Сегодня в] LT\",nextDay:\"[Завтра в] LT\",lastDay:\"[Вчера в] LT\",nextWeek:function(){return 2===this.day()?\"[Во] dddd [в] LT\":\"[В] dddd [в] LT\"},lastWeek:function(a){if(a.week()===this.week())return 2===this.day()?\"[Во] dddd [в] LT\":\"[В] dddd [в] LT\";switch(this.day()){case 0:return\"[В прошлое] dddd [в] LT\";case 1:case 2:case 4:return\"[В прошлый] dddd [в] LT\";case 3:case 5:case 6:return\"[В прошлую] dddd [в] LT\"}},sameElse:\"L\"},relativeTime:{future:\"через %s\",past:\"%s назад\",s:\"несколько секунд\",m:d,mm:d,h:\"час\",hh:d,d:\"день\",dd:d,M:\"месяц\",MM:d,y:\"год\",yy:d},meridiemParse:/ночи|утра|дня|вечера/i,isPM:function(a){return/^(дня|вечера)$/.test(a)},meridiem:function(a,b,c){return 4>a?\"ночи\":12>a?\"утра\":17>a?\"дня\":\"вечера\"},ordinalParse:/\\d{1,2}-(й|го|я)/,ordinal:function(a,b){switch(b){case\"M\":case\"d\":case\"DDD\":return a+\"-й\";case\"D\":return a+\"-го\";case\"w\":case\"W\":return a+\"-я\";default:return a}},week:{dow:1,doy:7}}),a.fullCalendar.datepickerLang(\"ru\",\"ru\",{closeText:\"Закрыть\",prevText:\"&#x3C;Пред\",nextText:\"След&#x3E;\",currentText:\"Сегодня\",monthNames:[\"Январь\",\"Февраль\",\"Март\",\"Апрель\",\"Май\",\"Июнь\",\"Июль\",\"Август\",\"Сентябрь\",\"Октябрь\",\"Ноябрь\",\"Декабрь\"],monthNamesShort:[\"Янв\",\"Фев\",\"Мар\",\"Апр\",\"Май\",\"Июн\",\"Июл\",\"Авг\",\"Сен\",\"Окт\",\"Ноя\",\"Дек\"],dayNames:[\"воскресенье\",\"понедельник\",\"вторник\",\"среда\",\"четверг\",\"пятница\",\"суббота\"],dayNamesShort:[\"вск\",\"пнд\",\"втр\",\"срд\",\"чтв\",\"птн\",\"сбт\"],dayNamesMin:[\"Вс\",\"Пн\",\"Вт\",\"Ср\",\"Чт\",\"Пт\",\"Сб\"],weekHeader:\"Нед\",dateFormat:\"dd.mm.yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),a.fullCalendar.lang(\"ru\",{buttonText:{month:\"Месяц\",week:\"Неделя\",day:\"День\",list:\"Повестка дня\"},allDayText:\"Весь день\",eventLimitText:function(a){return\"+ ещё \"+a}})}(),function(){function c(a){return a>1&&5>a}function d(a,b,d,e){var f=a+\" \";switch(d){case\"s\":return b||e?\"pár sekúnd\":\"pár sekundami\";case\"m\":return b?\"minúta\":e?\"minútu\":\"minútou\";case\"mm\":return b||e?f+(c(a)?\"minúty\":\"minút\"):f+\"minútami\";case\"h\":return b?\"hodina\":e?\"hodinu\":\"hodinou\";case\"hh\":return b||e?f+(c(a)?\"hodiny\":\"hodín\"):f+\"hodinami\";case\"d\":return b||e?\"deň\":\"dňom\";case\"dd\":return b||e?f+(c(a)?\"dni\":\"dní\"):f+\"dňami\";case\"M\":return b||e?\"mesiac\":\"mesiacom\";case\"MM\":return b||e?f+(c(a)?\"mesiace\":\"mesiacov\"):f+\"mesiacmi\";case\"y\":return b||e?\"rok\":\"rokom\";case\"yy\":return b||e?f+(c(a)?\"roky\":\"rokov\"):f+\"rokmi\"}}var e=\"január_február_marec_apríl_máj_jún_júl_august_september_október_november_december\".split(\"_\"),f=\"jan_feb_mar_apr_máj_jún_júl_aug_sep_okt_nov_dec\".split(\"_\");(b.defineLocale||b.lang).call(b,\"sk\",{months:e,monthsShort:f,monthsParse:function(a,b){var c,d=[];for(c=0;12>c;c++)d[c]=new RegExp(\"^\"+a[c]+\"$|^\"+b[c]+\"$\",\"i\");return d}(e,f),weekdays:\"nedeľa_pondelok_utorok_streda_štvrtok_piatok_sobota\".split(\"_\"),weekdaysShort:\"ne_po_ut_st_št_pi_so\".split(\"_\"),weekdaysMin:\"ne_po_ut_st_št_pi_so\".split(\"_\"),longDateFormat:{LT:\"H:mm\",LTS:\"LT:ss\",L:\"DD.MM.YYYY\",LL:\"D. MMMM YYYY\",LLL:\"D. MMMM YYYY LT\",LLLL:\"dddd D. MMMM YYYY LT\"},calendar:{sameDay:\"[dnes o] LT\",nextDay:\"[zajtra o] LT\",nextWeek:function(){switch(this.day()){case 0:return\"[v nedeľu o] LT\";case 1:case 2:return\"[v] dddd [o] LT\";case 3:return\"[v stredu o] LT\";case 4:return\"[vo štvrtok o] LT\";case 5:return\"[v piatok o] LT\";case 6:return\"[v sobotu o] LT\"}},lastDay:\"[včera o] LT\",lastWeek:function(){switch(this.day()){case 0:return\"[minulú nedeľu o] LT\";case 1:case 2:return\"[minulý] dddd [o] LT\";case 3:return\"[minulú stredu o] LT\";case 4:case 5:return\"[minulý] dddd [o] LT\";case 6:return\"[minulú sobotu o] LT\"}},sameElse:\"L\"},relativeTime:{future:\"za %s\",past:\"pred %s\",s:d,m:d,mm:d,h:d,hh:d,d:d,dd:d,M:d,MM:d,y:d,yy:d},ordinalParse:/\\d{1,2}\\./,ordinal:\"%d.\",week:{dow:1,doy:4}}),a.fullCalendar.datepickerLang(\"sk\",\"sk\",{closeText:\"Zavrieť\",prevText:\"&#x3C;Predchádzajúci\",nextText:\"Nasledujúci&#x3E;\",currentText:\"Dnes\",monthNames:[\"január\",\"február\",\"marec\",\"apríl\",\"máj\",\"jún\",\"júl\",\"august\",\"september\",\"október\",\"november\",\"december\"],monthNamesShort:[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"Máj\",\"Jún\",\"Júl\",\"Aug\",\"Sep\",\"Okt\",\"Nov\",\"Dec\"],dayNames:[\"nedeľa\",\"pondelok\",\"utorok\",\"streda\",\"štvrtok\",\"piatok\",\"sobota\"],dayNamesShort:[\"Ned\",\"Pon\",\"Uto\",\"Str\",\"Štv\",\"Pia\",\"Sob\"],dayNamesMin:[\"Ne\",\"Po\",\"Ut\",\"St\",\"Št\",\"Pia\",\"So\"],weekHeader:\"Ty\",dateFormat:\"dd.mm.yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),a.fullCalendar.lang(\"sk\",{buttonText:{month:\"Mesiac\",week:\"Týždeň\",day:\"Deň\",list:\"Rozvrh\"},allDayText:\"Celý deň\",eventLimitText:function(a){return\"+ďalšie: \"+a}})}(),function(){function c(a,b,c){var d=a+\" \";switch(c){case\"m\":return b?\"ena minuta\":\"eno minuto\";case\"mm\":return d+=1===a?\"minuta\":2===a?\"minuti\":3===a||4===a?\"minute\":\"minut\";case\"h\":return b?\"ena ura\":\"eno uro\";case\"hh\":return d+=1===a?\"ura\":2===a?\"uri\":3===a||4===a?\"ure\":\"ur\";case\"dd\":return d+=1===a?\"dan\":\"dni\";case\"MM\":return d+=1===a?\"mesec\":2===a?\"meseca\":3===a||4===a?\"mesece\":\"mesecev\";case\"yy\":return d+=1===a?\"leto\":2===a?\"leti\":3===a||4===a?\"leta\":\"let\"}}(b.defineLocale||b.lang).call(b,\"sl\",{months:\"januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december\".split(\"_\"),monthsShort:\"jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.\".split(\"_\"),weekdays:\"nedelja_ponedeljek_torek_sreda_četrtek_petek_sobota\".split(\"_\"),weekdaysShort:\"ned._pon._tor._sre._čet._pet._sob.\".split(\"_\"),weekdaysMin:\"ne_po_to_sr_če_pe_so\".split(\"_\"),longDateFormat:{LT:\"H:mm\",LTS:\"LT:ss\",L:\"DD. MM. YYYY\",LL:\"D. MMMM YYYY\",LLL:\"D. MMMM YYYY LT\",LLLL:\"dddd, D. MMMM YYYY LT\"},calendar:{sameDay:\"[danes ob] LT\",nextDay:\"[jutri ob] LT\",nextWeek:function(){switch(this.day()){case 0:return\"[v] [nedeljo] [ob] LT\";case 3:return\"[v] [sredo] [ob] LT\";case 6:return\"[v] [soboto] [ob] LT\";case 1:case 2:case 4:case 5:return\"[v] dddd [ob] LT\"}},lastDay:\"[včeraj ob] LT\",lastWeek:function(){switch(this.day()){case 0:case 3:case 6:return\"[prejšnja] dddd [ob] LT\";case 1:case 2:case 4:case 5:return\"[prejšnji] dddd [ob] LT\"}},sameElse:\"L\"},relativeTime:{future:\"čez %s\",past:\"%s nazaj\",s:\"nekaj sekund\",m:c,mm:c,h:c,hh:c,d:\"en dan\",dd:c,M:\"en mesec\",MM:c,y:\"eno leto\",yy:c},ordinalParse:/\\d{1,2}\\./,ordinal:\"%d.\",week:{dow:1,doy:7}}),a.fullCalendar.datepickerLang(\"sl\",\"sl\",{closeText:\"Zapri\",prevText:\"&#x3C;Prejšnji\",nextText:\"Naslednji&#x3E;\",currentText:\"Trenutni\",monthNames:[\"Januar\",\"Februar\",\"Marec\",\"April\",\"Maj\",\"Junij\",\"Julij\",\"Avgust\",\"September\",\"Oktober\",\"November\",\"December\"],monthNamesShort:[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"Maj\",\"Jun\",\"Jul\",\"Avg\",\"Sep\",\"Okt\",\"Nov\",\"Dec\"],dayNames:[\"Nedelja\",\"Ponedeljek\",\"Torek\",\"Sreda\",\"Četrtek\",\"Petek\",\"Sobota\"],dayNamesShort:[\"Ned\",\"Pon\",\"Tor\",\"Sre\",\"Čet\",\"Pet\",\"Sob\"],dayNamesMin:[\"Ne\",\"Po\",\"To\",\"Sr\",\"Če\",\"Pe\",\"So\"],weekHeader:\"Teden\",dateFormat:\"dd.mm.yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),a.fullCalendar.lang(\"sl\",{buttonText:{month:\"Mesec\",week:\"Teden\",day:\"Dan\",list:\"Dnevni red\"},allDayText:\"Ves dan\",eventLimitText:\"več\"})}(),function(){var c={words:{m:[\"један минут\",\"једне минуте\"],mm:[\"минут\",\"минуте\",\"минута\"],h:[\"један сат\",\"једног сата\"],hh:[\"сат\",\"сата\",\"сати\"],dd:[\"дан\",\"дана\",\"дана\"],MM:[\"месец\",\"месеца\",\"месеци\"],yy:[\"година\",\"године\",\"година\"]},correctGrammaticalCase:function(a,b){return 1===a?b[0]:a>=2&&4>=a?b[1]:b[2]},translate:function(a,b,d){var e=c.words[d];return 1===d.length?b?e[0]:e[1]:a+\" \"+c.correctGrammaticalCase(a,e)}};(b.defineLocale||b.lang).call(b,\"sr-cyrl\",{months:[\"јануар\",\"фебруар\",\"март\",\"април\",\"мај\",\"јун\",\"јул\",\"август\",\"септембар\",\"октобар\",\"новембар\",\"децембар\"],monthsShort:[\"јан.\",\"феб.\",\"мар.\",\"апр.\",\"мај\",\"јун\",\"јул\",\"авг.\",\"сеп.\",\"окт.\",\"нов.\",\"дец.\"],weekdays:[\"недеља\",\"понедељак\",\"уторак\",\"среда\",\"четвртак\",\"петак\",\"субота\"],weekdaysShort:[\"нед.\",\"пон.\",\"уто.\",\"сре.\",\"чет.\",\"пет.\",\"суб.\"],weekdaysMin:[\"не\",\"по\",\"ут\",\"ср\",\"че\",\"пе\",\"су\"],longDateFormat:{LT:\"H:mm\",LTS:\"LT:ss\",L:\"DD. MM. YYYY\",LL:\"D. MMMM YYYY\",LLL:\"D. MMMM YYYY LT\",LLLL:\"dddd, D. MMMM YYYY LT\"},calendar:{sameDay:\"[данас у] LT\",nextDay:\"[сутра у] LT\",nextWeek:function(){switch(this.day()){case 0:return\"[у] [недељу] [у] LT\";case 3:return\"[у] [среду] [у] LT\";case 6:return\"[у] [суботу] [у] LT\";case 1:case 2:case 4:case 5:return\"[у] dddd [у] LT\"}},lastDay:\"[јуче у] LT\",lastWeek:function(){var a=[\"[прошле] [недеље] [у] LT\",\"[прошлог] [понедељка] [у] LT\",\"[прошлог] [уторка] [у] LT\",\"[прошле] [среде] [у] LT\",\"[прошлог] [четвртка] [у] LT\",\"[прошлог] [петка] [у] LT\",\"[прошле] [суботе] [у] LT\"];return a[this.day()]},sameElse:\"L\"},relativeTime:{future:\"за %s\",past:\"пре %s\",s:\"неколико секунди\",m:c.translate,mm:c.translate,h:c.translate,hh:c.translate,d:\"дан\",dd:c.translate,M:\"месец\",MM:c.translate,y:\"годину\",yy:c.translate},ordinalParse:/\\d{1,2}\\./,ordinal:\"%d.\",week:{dow:1,doy:7}}),a.fullCalendar.datepickerLang(\"sr-cyrl\",\"sr\",{closeText:\"Затвори\",prevText:\"&#x3C;\",nextText:\"&#x3E;\",currentText:\"Данас\",monthNames:[\"Јануар\",\"Фебруар\",\"Март\",\"Април\",\"Мај\",\"Јун\",\"Јул\",\"Август\",\"Септембар\",\"Октобар\",\"Новембар\",\"Децембар\"],monthNamesShort:[\"Јан\",\"Феб\",\"Мар\",\"Апр\",\"Мај\",\"Јун\",\"Јул\",\"Авг\",\"Сеп\",\"Окт\",\"Нов\",\"Дец\"],dayNames:[\"Недеља\",\"Понедељак\",\"Уторак\",\"Среда\",\"Четвртак\",\"Петак\",\"Субота\"],dayNamesShort:[\"Нед\",\"Пон\",\"Уто\",\"Сре\",\"Чет\",\"Пет\",\"Суб\"],dayNamesMin:[\"Не\",\"По\",\"Ут\",\"Ср\",\"Че\",\"Пе\",\"Су\"],weekHeader:\"Сед\",dateFormat:\"dd.mm.yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),a.fullCalendar.lang(\"sr-cyrl\",{buttonText:{month:\"Месец\",week:\"Недеља\",day:\"Дан\",list:\"Планер\"},allDayText:\"Цео дан\",eventLimitText:function(a){return\"+ још \"+a}})}(),function(){var c={words:{m:[\"jedan minut\",\"jedne minute\"],mm:[\"minut\",\"minute\",\"minuta\"],h:[\"jedan sat\",\"jednog sata\"],hh:[\"sat\",\"sata\",\"sati\"],dd:[\"dan\",\"dana\",\"dana\"],MM:[\"mesec\",\"meseca\",\"meseci\"],yy:[\"godina\",\"godine\",\"godina\"]},correctGrammaticalCase:function(a,b){return 1===a?b[0]:a>=2&&4>=a?b[1]:b[2]},translate:function(a,b,d){var e=c.words[d];return 1===d.length?b?e[0]:e[1]:a+\" \"+c.correctGrammaticalCase(a,e)}};(b.defineLocale||b.lang).call(b,\"sr\",{months:[\"januar\",\"februar\",\"mart\",\"april\",\"maj\",\"jun\",\"jul\",\"avgust\",\"septembar\",\"oktobar\",\"novembar\",\"decembar\"],monthsShort:[\"jan.\",\"feb.\",\"mar.\",\"apr.\",\"maj\",\"jun\",\"jul\",\"avg.\",\"sep.\",\"okt.\",\"nov.\",\"dec.\"],weekdays:[\"nedelja\",\"ponedeljak\",\"utorak\",\"sreda\",\"četvrtak\",\"petak\",\"subota\"],weekdaysShort:[\"ned.\",\"pon.\",\"uto.\",\"sre.\",\"čet.\",\"pet.\",\"sub.\"],weekdaysMin:[\"ne\",\"po\",\"ut\",\"sr\",\"če\",\"pe\",\"su\"],longDateFormat:{LT:\"H:mm\",LTS:\"LT:ss\",L:\"DD. MM. YYYY\",LL:\"D. MMMM YYYY\",LLL:\"D. MMMM YYYY LT\",LLLL:\"dddd, D. MMMM YYYY LT\"},calendar:{sameDay:\"[danas u] LT\",nextDay:\"[sutra u] LT\",nextWeek:function(){switch(this.day()){case 0:return\"[u] [nedelju] [u] LT\";case 3:return\"[u] [sredu] [u] LT\";case 6:return\"[u] [subotu] [u] LT\";case 1:case 2:case 4:case 5:return\"[u] dddd [u] LT\"}},lastDay:\"[juče u] LT\",lastWeek:function(){var a=[\"[prošle] [nedelje] [u] LT\",\"[prošlog] [ponedeljka] [u] LT\",\"[prošlog] [utorka] [u] LT\",\"[prošle] [srede] [u] LT\",\"[prošlog] [četvrtka] [u] LT\",\"[prošlog] [petka] [u] LT\",\"[prošle] [subote] [u] LT\"];return a[this.day()]},sameElse:\"L\"},relativeTime:{future:\"za %s\",past:\"pre %s\",s:\"nekoliko sekundi\",m:c.translate,mm:c.translate,h:c.translate,hh:c.translate,d:\"dan\",dd:c.translate,M:\"mesec\",MM:c.translate,y:\"godinu\",yy:c.translate},ordinalParse:/\\d{1,2}\\./,ordinal:\"%d.\",week:{dow:1,doy:7}}),a.fullCalendar.datepickerLang(\"sr\",\"sr\",{closeText:\"Затвори\",prevText:\"&#x3C;\",nextText:\"&#x3E;\",currentText:\"Данас\",monthNames:[\"Јануар\",\"Фебруар\",\"Март\",\"Април\",\"Мај\",\"Јун\",\"Јул\",\"Август\",\"Септембар\",\"Октобар\",\"Новембар\",\"Децембар\"],monthNamesShort:[\"Јан\",\"Феб\",\"Мар\",\"Апр\",\"Мај\",\"Јун\",\"Јул\",\"Авг\",\"Сеп\",\"Окт\",\"Нов\",\"Дец\"],dayNames:[\"Недеља\",\"Понедељак\",\"Уторак\",\"Среда\",\"Четвртак\",\"Петак\",\"Субота\"],dayNamesShort:[\"Нед\",\"Пон\",\"Уто\",\"Сре\",\"Чет\",\"Пет\",\"Суб\"],dayNamesMin:[\"Не\",\"По\",\"Ут\",\"Ср\",\"Че\",\"Пе\",\"Су\"],weekHeader:\"Сед\",dateFormat:\"dd.mm.yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),a.fullCalendar.lang(\"sr\",{buttonText:{month:\"Месец\",week:\"Недеља\",day:\"Дан\",list:\"Планер\"},allDayText:\"Цео дан\",eventLimitText:function(a){return\"+ још \"+a}})}(),function(){(b.defineLocale||b.lang).call(b,\"sv\",{months:\"januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december\".split(\"_\"),monthsShort:\"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec\".split(\"_\"),weekdays:\"söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag\".split(\"_\"),weekdaysShort:\"sön_mån_tis_ons_tor_fre_lör\".split(\"_\"),weekdaysMin:\"sö_må_ti_on_to_fr_lö\".split(\"_\"),longDateFormat:{LT:\"HH:mm\",LTS:\"LT:ss\",L:\"YYYY-MM-DD\",LL:\"D MMMM YYYY\",LLL:\"D MMMM YYYY LT\",LLLL:\"dddd D MMMM YYYY LT\"},calendar:{sameDay:\"[Idag] LT\",nextDay:\"[Imorgon] LT\",lastDay:\"[Igår] LT\",nextWeek:\"dddd LT\",lastWeek:\"[Förra] dddd[en] LT\",sameElse:\"L\"},relativeTime:{future:\"om %s\",past:\"för %s sedan\",s:\"några sekunder\",m:\"en minut\",mm:\"%d minuter\",h:\"en timme\",hh:\"%d timmar\",d:\"en dag\",dd:\"%d dagar\",M:\"en månad\",MM:\"%d månader\",y:\"ett år\",yy:\"%d år\"},ordinalParse:/\\d{1,2}(e|a)/,ordinal:function(a){var b=a%10,c=1===~~(a%100/10)?\"e\":1===b?\"a\":2===b?\"a\":\"e\";return a+c},week:{dow:1,doy:4}}),a.fullCalendar.datepickerLang(\"sv\",\"sv\",{closeText:\"Stäng\",prevText:\"&#xAB;Förra\",nextText:\"Nästa&#xBB;\",currentText:\"Idag\",monthNames:[\"Januari\",\"Februari\",\"Mars\",\"April\",\"Maj\",\"Juni\",\"Juli\",\"Augusti\",\"September\",\"Oktober\",\"November\",\"December\"],monthNamesShort:[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"Maj\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Okt\",\"Nov\",\"Dec\"],dayNamesShort:[\"Sön\",\"Mån\",\"Tis\",\"Ons\",\"Tor\",\"Fre\",\"Lör\"],dayNames:[\"Söndag\",\"Måndag\",\"Tisdag\",\"Onsdag\",\"Torsdag\",\"Fredag\",\"Lördag\"],dayNamesMin:[\"Sö\",\"Må\",\"Ti\",\"On\",\"To\",\"Fr\",\"Lö\"],weekHeader:\"Ve\",dateFormat:\"yy-mm-dd\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),a.fullCalendar.lang(\"sv\",{buttonText:{month:\"Månad\",week:\"Vecka\",day:\"Dag\",list:\"Program\"},allDayText:\"Heldag\",eventLimitText:\"till\"})}(),function(){(b.defineLocale||b.lang).call(b,\"th\",{months:\"มกราคม_กุมภาพันธ์_มีนาคม_เมษายน_พฤษภาคม_มิถุนายน_กรกฎาคม_สิงหาคม_กันยายน_ตุลาคม_พฤศจิกายน_ธันวาคม\".split(\"_\"),monthsShort:\"มกรา_กุมภา_มีนา_เมษา_พฤษภา_มิถุนา_กรกฎา_สิงหา_กันยา_ตุลา_พฤศจิกา_ธันวา\".split(\"_\"),weekdays:\"อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัสบดี_ศุกร์_เสาร์\".split(\"_\"),weekdaysShort:\"อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัส_ศุกร์_เสาร์\".split(\"_\"),weekdaysMin:\"อา._จ._อ._พ._พฤ._ศ._ส.\".split(\"_\"),longDateFormat:{LT:\"H นาฬิกา m นาที\",LTS:\"LT s วินาที\",L:\"YYYY/MM/DD\",LL:\"D MMMM YYYY\",LLL:\"D MMMM YYYY เวลา LT\",LLLL:\"วันddddที่ D MMMM YYYY เวลา LT\"},meridiemParse:/ก่อนเที่ยง|หลังเที่ยง/,isPM:function(a){return\"หลังเที่ยง\"===a},meridiem:function(a,b,c){return 12>a?\"ก่อนเที่ยง\":\"หลังเที่ยง\"},calendar:{sameDay:\"[วันนี้ เวลา] LT\",nextDay:\"[พรุ่งนี้ เวลา] LT\",nextWeek:\"dddd[หน้า เวลา] LT\",lastDay:\"[เมื่อวานนี้ เวลา] LT\",lastWeek:\"[วัน]dddd[ที่แล้ว เวลา] LT\",sameElse:\"L\"},relativeTime:{future:\"อีก %s\",past:\"%sที่แล้ว\",s:\"ไม่กี่วินาที\",m:\"1 นาที\",mm:\"%d นาที\",h:\"1 ชั่วโมง\",hh:\"%d ชั่วโมง\",d:\"1 วัน\",dd:\"%d วัน\",M:\"1 เดือน\",MM:\"%d เดือน\",y:\"1 ปี\",yy:\"%d ปี\"}}),a.fullCalendar.datepickerLang(\"th\",\"th\",{closeText:\"ปิด\",prevText:\"&#xAB;&#xA0;ย้อน\",nextText:\"ถัดไป&#xA0;&#xBB;\",currentText:\"วันนี้\",monthNames:[\"มกราคม\",\"กุมภาพันธ์\",\"มีนาคม\",\"เมษายน\",\"พฤษภาคม\",\"มิถุนายน\",\"กรกฎาคม\",\"สิงหาคม\",\"กันยายน\",\"ตุลาคม\",\"พฤศจิกายน\",\"ธันวาคม\"],monthNamesShort:[\"ม.ค.\",\"ก.พ.\",\"มี.ค.\",\"เม.ย.\",\"พ.ค.\",\"มิ.ย.\",\"ก.ค.\",\"ส.ค.\",\"ก.ย.\",\"ต.ค.\",\"พ.ย.\",\"ธ.ค.\"],dayNames:[\"อาทิตย์\",\"จันทร์\",\"อังคาร\",\"พุธ\",\"พฤหัสบดี\",\"ศุกร์\",\"เสาร์\"],dayNamesShort:[\"อา.\",\"จ.\",\"อ.\",\"พ.\",\"พฤ.\",\"ศ.\",\"ส.\"],dayNamesMin:[\"อา.\",\"จ.\",\"อ.\",\"พ.\",\"พฤ.\",\"ศ.\",\"ส.\"],weekHeader:\"Wk\",dateFormat:\"dd/mm/yy\",firstDay:0,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),a.fullCalendar.lang(\"th\",{buttonText:{month:\"เดือน\",week:\"สัปดาห์\",day:\"วัน\",list:\"แผนงาน\"},allDayText:\"ตลอดวัน\",eventLimitText:\"เพิ่มเติม\"})}(),function(){var c={1:\"'inci\",5:\"'inci\",8:\"'inci\",70:\"'inci\",80:\"'inci\",2:\"'nci\",7:\"'nci\",20:\"'nci\",50:\"'nci\",3:\"'üncü\",4:\"'üncü\",100:\"'üncü\",6:\"'ncı\",9:\"'uncu\",10:\"'uncu\",30:\"'uncu\",60:\"'ıncı\",90:\"'ıncı\"};(b.defineLocale||b.lang).call(b,\"tr\",{months:\"Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık\".split(\"_\"),monthsShort:\"Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara\".split(\"_\"),weekdays:\"Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi\".split(\"_\"),weekdaysShort:\"Paz_Pts_Sal_Çar_Per_Cum_Cts\".split(\"_\"),weekdaysMin:\"Pz_Pt_Sa_Ça_Pe_Cu_Ct\".split(\"_\"),longDateFormat:{LT:\"HH:mm\",LTS:\"LT:ss\",L:\"DD.MM.YYYY\",LL:\"D MMMM YYYY\",LLL:\"D MMMM YYYY LT\",LLLL:\"dddd, D MMMM YYYY LT\"},calendar:{sameDay:\"[bugün saat] LT\",nextDay:\"[yarın saat] LT\",nextWeek:\"[haftaya] dddd [saat] LT\",lastDay:\"[dün] LT\",lastWeek:\"[geçen hafta] dddd [saat] LT\",sameElse:\"L\"},relativeTime:{future:\"%s sonra\",past:\"%s önce\",s:\"birkaç saniye\",m:\"bir dakika\",mm:\"%d dakika\",h:\"bir saat\",hh:\"%d saat\",d:\"bir gün\",dd:\"%d gün\",M:\"bir ay\",MM:\"%d ay\",y:\"bir yıl\",yy:\"%d yıl\"},ordinalParse:/\\d{1,2}'(inci|nci|üncü|ncı|uncu|ıncı)/,ordinal:function(a){if(0===a)return a+\"'ıncı\";var b=a%10,d=a%100-b,e=a>=100?100:null;return a+(c[b]||c[d]||c[e])},week:{dow:1,doy:7}}),a.fullCalendar.datepickerLang(\"tr\",\"tr\",{closeText:\"kapat\",prevText:\"&#x3C;geri\",nextText:\"ileri&#x3e\",currentText:\"bugün\",monthNames:[\"Ocak\",\"Şubat\",\"Mart\",\"Nisan\",\"Mayıs\",\"Haziran\",\"Temmuz\",\"Ağustos\",\"Eylül\",\"Ekim\",\"Kasım\",\"Aralık\"],monthNamesShort:[\"Oca\",\"Şub\",\"Mar\",\"Nis\",\"May\",\"Haz\",\"Tem\",\"Ağu\",\"Eyl\",\"Eki\",\"Kas\",\"Ara\"],dayNames:[\"Pazar\",\"Pazartesi\",\"Salı\",\"Çarşamba\",\"Perşembe\",\"Cuma\",\"Cumartesi\"],dayNamesShort:[\"Pz\",\"Pt\",\"Sa\",\"Ça\",\"Pe\",\"Cu\",\"Ct\"],dayNamesMin:[\"Pz\",\"Pt\",\"Sa\",\"Ça\",\"Pe\",\"Cu\",\"Ct\"],weekHeader:\"Hf\",dateFormat:\"dd.mm.yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),a.fullCalendar.lang(\"tr\",{buttonText:{next:\"ileri\",month:\"Ay\",week:\"Hafta\",day:\"Gün\",list:\"Ajanda\"},allDayText:\"Tüm gün\",eventLimitText:\"daha fazla\"})}(),function(){function c(a,b){var c=a.split(\"_\");return b%10===1&&b%100!==11?c[0]:b%10>=2&&4>=b%10&&(10>b%100||b%100>=20)?c[1]:c[2]}function d(a,b,d){var e={mm:\"хвилина_хвилини_хвилин\",hh:\"година_години_годин\",dd:\"день_дні_днів\",MM:\"місяць_місяці_місяців\",yy:\"рік_роки_років\"};return\"m\"===d?b?\"хвилина\":\"хвилину\":\"h\"===d?b?\"година\":\"годину\":a+\" \"+c(e[d],+a)}function e(a,b){var c={nominative:\"січень_лютий_березень_квітень_травень_червень_липень_серпень_вересень_жовтень_листопад_грудень\".split(\"_\"),accusative:\"січня_лютого_березня_квітня_травня_червня_липня_серпня_вересня_жовтня_листопада_грудня\".split(\"_\")},d=/D[oD]? *MMMM?/.test(b)?\"accusative\":\"nominative\";return c[d][a.month()]}function f(a,b){var c={nominative:\"неділя_понеділок_вівторок_середа_четвер_п’ятниця_субота\".split(\"_\"),accusative:\"неділю_понеділок_вівторок_середу_четвер_п’ятницю_суботу\".split(\"_\"),genitive:\"неділі_понеділка_вівторка_середи_четверга_п’ятниці_суботи\".split(\"_\")},d=/(\\[[ВвУу]\\]) ?dddd/.test(b)?\"accusative\":/\\[?(?:минулої|наступної)? ?\\] ?dddd/.test(b)?\"genitive\":\"nominative\";return c[d][a.day()]}function g(a){return function(){return a+\"о\"+(11===this.hours()?\"б\":\"\")+\"] LT\"}}(b.defineLocale||b.lang).call(b,\"uk\",{months:e,monthsShort:\"січ_лют_бер_квіт_трав_черв_лип_серп_вер_жовт_лист_груд\".split(\"_\"),weekdays:f,weekdaysShort:\"нд_пн_вт_ср_чт_пт_сб\".split(\"_\"),weekdaysMin:\"нд_пн_вт_ср_чт_пт_сб\".split(\"_\"),longDateFormat:{LT:\"HH:mm\",LTS:\"LT:ss\",L:\"DD.MM.YYYY\",LL:\"D MMMM YYYY р.\",LLL:\"D MMMM YYYY р., LT\",LLLL:\"dddd, D MMMM YYYY р., LT\"},calendar:{sameDay:g(\"[Сьогодні \"),nextDay:g(\"[Завтра \"),lastDay:g(\"[Вчора \"),nextWeek:g(\"[У] dddd [\"),lastWeek:function(){switch(this.day()){case 0:case 3:case 5:case 6:return g(\"[Минулої] dddd [\").call(this);case 1:case 2:case 4:return g(\"[Минулого] dddd [\").call(this)}},sameElse:\"L\"},relativeTime:{future:\"за %s\",past:\"%s тому\",s:\"декілька секунд\",m:d,mm:d,h:\"годину\",hh:d,d:\"день\",dd:d,M:\"місяць\",MM:d,y:\"рік\",yy:d},meridiemParse:/ночі|ранку|дня|вечора/,isPM:function(a){return/^(дня|вечора)$/.test(a)},meridiem:function(a,b,c){return 4>a?\"ночі\":12>a?\"ранку\":17>a?\"дня\":\"вечора\"},ordinalParse:/\\d{1,2}-(й|го)/,ordinal:function(a,b){switch(b){case\"M\":case\"d\":case\"DDD\":case\"w\":case\"W\":return a+\"-й\";case\"D\":return a+\"-го\";default:return a}},week:{dow:1,doy:7}}),a.fullCalendar.datepickerLang(\"uk\",\"uk\",{closeText:\"Закрити\",prevText:\"&#x3C;\",nextText:\"&#x3E;\",currentText:\"Сьогодні\",monthNames:[\"Січень\",\"Лютий\",\"Березень\",\"Квітень\",\"Травень\",\"Червень\",\"Липень\",\"Серпень\",\"Вересень\",\"Жовтень\",\"Листопад\",\"Грудень\"],monthNamesShort:[\"Січ\",\"Лют\",\"Бер\",\"Кві\",\"Тра\",\"Чер\",\"Лип\",\"Сер\",\"Вер\",\"Жов\",\"Лис\",\"Гру\"],dayNames:[\"неділя\",\"понеділок\",\"вівторок\",\"середа\",\"четвер\",\"п’ятниця\",\"субота\"],dayNamesShort:[\"нед\",\"пнд\",\"вів\",\"срд\",\"чтв\",\"птн\",\"сбт\"],dayNamesMin:[\"Нд\",\"Пн\",\"Вт\",\"Ср\",\"Чт\",\"Пт\",\"Сб\"],weekHeader:\"Тиж\",dateFormat:\"dd.mm.yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),a.fullCalendar.lang(\"uk\",{buttonText:{month:\"Місяць\",week:\"Тиждень\",day:\"День\",list:\"Порядок денний\"},allDayText:\"Увесь день\",eventLimitText:function(a){return\"+ще \"+a+\"...\"}})}(),function(){(b.defineLocale||b.lang).call(b,\"vi\",{months:\"tháng 1_tháng 2_tháng 3_tháng 4_tháng 5_tháng 6_tháng 7_tháng 8_tháng 9_tháng 10_tháng 11_tháng 12\".split(\"_\"),monthsShort:\"Th01_Th02_Th03_Th04_Th05_Th06_Th07_Th08_Th09_Th10_Th11_Th12\".split(\"_\"),weekdays:\"chủ nhật_thứ hai_thứ ba_thứ tư_thứ năm_thứ sáu_thứ bảy\".split(\"_\"),weekdaysShort:\"CN_T2_T3_T4_T5_T6_T7\".split(\"_\"),weekdaysMin:\"CN_T2_T3_T4_T5_T6_T7\".split(\"_\"),longDateFormat:{LT:\"HH:mm\",LTS:\"LT:ss\",L:\"DD/MM/YYYY\",LL:\"D MMMM [năm] YYYY\",LLL:\"D MMMM [năm] YYYY LT\",LLLL:\"dddd, D MMMM [năm] YYYY LT\",l:\"DD/M/YYYY\",ll:\"D MMM YYYY\",lll:\"D MMM YYYY LT\",llll:\"ddd, D MMM YYYY LT\"},calendar:{sameDay:\"[Hôm nay lúc] LT\",nextDay:\"[Ngày mai lúc] LT\",nextWeek:\"dddd [tuần tới lúc] LT\",lastDay:\"[Hôm qua lúc] LT\",lastWeek:\"dddd [tuần rồi lúc] LT\",sameElse:\"L\"},relativeTime:{future:\"%s tới\",past:\"%s trước\",s:\"vài giây\",m:\"một phút\",mm:\"%d phút\",h:\"một giờ\",hh:\"%d giờ\",d:\"một ngày\",dd:\"%d ngày\",M:\"một tháng\",MM:\"%d tháng\",y:\"một năm\",yy:\"%d năm\"},ordinalParse:/\\d{1,2}/,ordinal:function(a){return a},week:{dow:1,doy:4}}),\na.fullCalendar.datepickerLang(\"vi\",\"vi\",{closeText:\"Đóng\",prevText:\"&#x3C;Trước\",nextText:\"Tiếp&#x3E;\",currentText:\"Hôm nay\",monthNames:[\"Tháng Một\",\"Tháng Hai\",\"Tháng Ba\",\"Tháng Tư\",\"Tháng Năm\",\"Tháng Sáu\",\"Tháng Bảy\",\"Tháng Tám\",\"Tháng Chín\",\"Tháng Mười\",\"Tháng Mười Một\",\"Tháng Mười Hai\"],monthNamesShort:[\"Tháng 1\",\"Tháng 2\",\"Tháng 3\",\"Tháng 4\",\"Tháng 5\",\"Tháng 6\",\"Tháng 7\",\"Tháng 8\",\"Tháng 9\",\"Tháng 10\",\"Tháng 11\",\"Tháng 12\"],dayNames:[\"Chủ Nhật\",\"Thứ Hai\",\"Thứ Ba\",\"Thứ Tư\",\"Thứ Năm\",\"Thứ Sáu\",\"Thứ Bảy\"],dayNamesShort:[\"CN\",\"T2\",\"T3\",\"T4\",\"T5\",\"T6\",\"T7\"],dayNamesMin:[\"CN\",\"T2\",\"T3\",\"T4\",\"T5\",\"T6\",\"T7\"],weekHeader:\"Tu\",dateFormat:\"dd/mm/yy\",firstDay:0,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),a.fullCalendar.lang(\"vi\",{buttonText:{month:\"Tháng\",week:\"Tuần\",day:\"Ngày\",list:\"Lịch biểu\"},allDayText:\"Cả ngày\",eventLimitText:function(a){return\"+ thêm \"+a}})}(),function(){(b.defineLocale||b.lang).call(b,\"zh-cn\",{months:\"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月\".split(\"_\"),monthsShort:\"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月\".split(\"_\"),weekdays:\"星期日_星期一_星期二_星期三_星期四_星期五_星期六\".split(\"_\"),weekdaysShort:\"周日_周一_周二_周三_周四_周五_周六\".split(\"_\"),weekdaysMin:\"日_一_二_三_四_五_六\".split(\"_\"),longDateFormat:{LT:\"Ah点mm\",LTS:\"Ah点m分s秒\",L:\"YYYY-MM-DD\",LL:\"YYYY年MMMD日\",LLL:\"YYYY年MMMD日LT\",LLLL:\"YYYY年MMMD日ddddLT\",l:\"YYYY-MM-DD\",ll:\"YYYY年MMMD日\",lll:\"YYYY年MMMD日LT\",llll:\"YYYY年MMMD日ddddLT\"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(a,b){return 12===a&&(a=0),\"凌晨\"===b||\"早上\"===b||\"上午\"===b?a:\"下午\"===b||\"晚上\"===b?a+12:a>=11?a:a+12},meridiem:function(a,b,c){var d=100*a+b;return 600>d?\"凌晨\":900>d?\"早上\":1130>d?\"上午\":1230>d?\"中午\":1800>d?\"下午\":\"晚上\"},calendar:{sameDay:function(){return 0===this.minutes()?\"[今天]Ah[点整]\":\"[今天]LT\"},nextDay:function(){return 0===this.minutes()?\"[明天]Ah[点整]\":\"[明天]LT\"},lastDay:function(){return 0===this.minutes()?\"[昨天]Ah[点整]\":\"[昨天]LT\"},nextWeek:function(){var a,c;return a=b().startOf(\"week\"),c=this.unix()-a.unix()>=604800?\"[下]\":\"[本]\",0===this.minutes()?c+\"dddAh点整\":c+\"dddAh点mm\"},lastWeek:function(){var a,c;return a=b().startOf(\"week\"),c=this.unix()<a.unix()?\"[上]\":\"[本]\",0===this.minutes()?c+\"dddAh点整\":c+\"dddAh点mm\"},sameElse:\"LL\"},ordinalParse:/\\d{1,2}(日|月|周)/,ordinal:function(a,b){switch(b){case\"d\":case\"D\":case\"DDD\":return a+\"日\";case\"M\":return a+\"月\";case\"w\":case\"W\":return a+\"周\";default:return a}},relativeTime:{future:\"%s内\",past:\"%s前\",s:\"几秒\",m:\"1分钟\",mm:\"%d分钟\",h:\"1小时\",hh:\"%d小时\",d:\"1天\",dd:\"%d天\",M:\"1个月\",MM:\"%d个月\",y:\"1年\",yy:\"%d年\"},week:{dow:1,doy:4}}),a.fullCalendar.datepickerLang(\"zh-cn\",\"zh-CN\",{closeText:\"关闭\",prevText:\"&#x3C;上月\",nextText:\"下月&#x3E;\",currentText:\"今天\",monthNames:[\"一月\",\"二月\",\"三月\",\"四月\",\"五月\",\"六月\",\"七月\",\"八月\",\"九月\",\"十月\",\"十一月\",\"十二月\"],monthNamesShort:[\"一月\",\"二月\",\"三月\",\"四月\",\"五月\",\"六月\",\"七月\",\"八月\",\"九月\",\"十月\",\"十一月\",\"十二月\"],dayNames:[\"星期日\",\"星期一\",\"星期二\",\"星期三\",\"星期四\",\"星期五\",\"星期六\"],dayNamesShort:[\"周日\",\"周一\",\"周二\",\"周三\",\"周四\",\"周五\",\"周六\"],dayNamesMin:[\"日\",\"一\",\"二\",\"三\",\"四\",\"五\",\"六\"],weekHeader:\"周\",dateFormat:\"yy-mm-dd\",firstDay:1,isRTL:!1,showMonthAfterYear:!0,yearSuffix:\"年\"}),a.fullCalendar.lang(\"zh-cn\",{buttonText:{month:\"月\",week:\"周\",day:\"日\",list:\"日程\"},allDayText:\"全天\",eventLimitText:function(a){return\"另外 \"+a+\" 个\"}})}(),function(){(b.defineLocale||b.lang).call(b,\"zh-tw\",{months:\"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月\".split(\"_\"),monthsShort:\"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月\".split(\"_\"),weekdays:\"星期日_星期一_星期二_星期三_星期四_星期五_星期六\".split(\"_\"),weekdaysShort:\"週日_週一_週二_週三_週四_週五_週六\".split(\"_\"),weekdaysMin:\"日_一_二_三_四_五_六\".split(\"_\"),longDateFormat:{LT:\"Ah點mm\",LTS:\"Ah點m分s秒\",L:\"YYYY年MMMD日\",LL:\"YYYY年MMMD日\",LLL:\"YYYY年MMMD日LT\",LLLL:\"YYYY年MMMD日ddddLT\",l:\"YYYY年MMMD日\",ll:\"YYYY年MMMD日\",lll:\"YYYY年MMMD日LT\",llll:\"YYYY年MMMD日ddddLT\"},meridiemParse:/早上|上午|中午|下午|晚上/,meridiemHour:function(a,b){return 12===a&&(a=0),\"早上\"===b||\"上午\"===b?a:\"中午\"===b?a>=11?a:a+12:\"下午\"===b||\"晚上\"===b?a+12:void 0},meridiem:function(a,b,c){var d=100*a+b;return 900>d?\"早上\":1130>d?\"上午\":1230>d?\"中午\":1800>d?\"下午\":\"晚上\"},calendar:{sameDay:\"[今天]LT\",nextDay:\"[明天]LT\",nextWeek:\"[下]ddddLT\",lastDay:\"[昨天]LT\",lastWeek:\"[上]ddddLT\",sameElse:\"L\"},ordinalParse:/\\d{1,2}(日|月|週)/,ordinal:function(a,b){switch(b){case\"d\":case\"D\":case\"DDD\":return a+\"日\";case\"M\":return a+\"月\";case\"w\":case\"W\":return a+\"週\";default:return a}},relativeTime:{future:\"%s內\",past:\"%s前\",s:\"幾秒\",m:\"一分鐘\",mm:\"%d分鐘\",h:\"一小時\",hh:\"%d小時\",d:\"一天\",dd:\"%d天\",M:\"一個月\",MM:\"%d個月\",y:\"一年\",yy:\"%d年\"}}),a.fullCalendar.datepickerLang(\"zh-tw\",\"zh-TW\",{closeText:\"關閉\",prevText:\"&#x3C;上月\",nextText:\"下月&#x3E;\",currentText:\"今天\",monthNames:[\"一月\",\"二月\",\"三月\",\"四月\",\"五月\",\"六月\",\"七月\",\"八月\",\"九月\",\"十月\",\"十一月\",\"十二月\"],monthNamesShort:[\"一月\",\"二月\",\"三月\",\"四月\",\"五月\",\"六月\",\"七月\",\"八月\",\"九月\",\"十月\",\"十一月\",\"十二月\"],dayNames:[\"星期日\",\"星期一\",\"星期二\",\"星期三\",\"星期四\",\"星期五\",\"星期六\"],dayNamesShort:[\"周日\",\"周一\",\"周二\",\"周三\",\"周四\",\"周五\",\"周六\"],dayNamesMin:[\"日\",\"一\",\"二\",\"三\",\"四\",\"五\",\"六\"],weekHeader:\"周\",dateFormat:\"yy/mm/dd\",firstDay:1,isRTL:!1,showMonthAfterYear:!0,yearSuffix:\"年\"}),a.fullCalendar.lang(\"zh-tw\",{buttonText:{month:\"月\",week:\"週\",day:\"天\",list:\"待辦事項\"},allDayText:\"全天\",eventLimitText:\"更多\"})}(),(b.locale||b.lang).call(b,\"en\"),a.fullCalendar.lang(\"en\"),a.datepicker&&a.datepicker.setDefaults(a.datepicker.regional[\"\"])});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/rzymek_fullcalendar/fullcalendar/dist/gcal.js                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/*!                                                                                                                    // 1\n * FullCalendar v2.5.0 Google Calendar Plugin                                                                          // 2\n * Docs & License: http://fullcalendar.io/                                                                             // 3\n * (c) 2015 Adam Shaw                                                                                                  // 4\n */                                                                                                                    // 5\n                                                                                                                       // 6\n(function(factory) {                                                                                                   // 7\n\tif (typeof define === 'function' && define.amd) {                                                                     // 8\n\t\tdefine([ 'jquery' ], factory);                                                                                       // 9\n\t}                                                                                                                     // 10\n\telse if (typeof exports === 'object') { // Node/CommonJS                                                              // 11\n\t\tmodule.exports = factory(require('jquery'));                                                                         // 12\n\t}                                                                                                                     // 13\n\telse {                                                                                                                // 14\n\t\tfactory(jQuery);                                                                                                     // 15\n\t}                                                                                                                     // 16\n})(function($) {                                                                                                       // 17\n                                                                                                                       // 18\n                                                                                                                       // 19\nvar API_BASE = 'https://www.googleapis.com/calendar/v3/calendars';                                                     // 20\nvar FC = $.fullCalendar;                                                                                               // 21\nvar applyAll = FC.applyAll;                                                                                            // 22\n                                                                                                                       // 23\n                                                                                                                       // 24\nFC.sourceNormalizers.push(function(sourceOptions) {                                                                    // 25\n\tvar googleCalendarId = sourceOptions.googleCalendarId;                                                                // 26\n\tvar url = sourceOptions.url;                                                                                          // 27\n\tvar match;                                                                                                            // 28\n                                                                                                                       // 29\n\t// if the Google Calendar ID hasn't been explicitly defined                                                           // 30\n\tif (!googleCalendarId && url) {                                                                                       // 31\n                                                                                                                       // 32\n\t\t// detect if the ID was specified as a single string.                                                                // 33\n\t\t// will match calendars like \"asdf1234@calendar.google.com\" in addition to person email calendars.                   // 34\n\t\tif (/^[^\\/]+@([^\\/\\.]+\\.)*(google|googlemail|gmail)\\.com$/.test(url)) {                                              // 35\n\t\t\tgoogleCalendarId = url;                                                                                             // 36\n\t\t}                                                                                                                    // 37\n\t\t// try to scrape it out of a V1 or V3 API feed URL                                                                   // 38\n\t\telse if (                                                                                                            // 39\n\t\t\t(match = /^https:\\/\\/www.googleapis.com\\/calendar\\/v3\\/calendars\\/([^\\/]*)/.exec(url)) ||                           // 40\n\t\t\t(match = /^https?:\\/\\/www.google.com\\/calendar\\/feeds\\/([^\\/]*)/.exec(url))                                         // 41\n\t\t) {                                                                                                                  // 42\n\t\t\tgoogleCalendarId = decodeURIComponent(match[1]);                                                                    // 43\n\t\t}                                                                                                                    // 44\n                                                                                                                       // 45\n\t\tif (googleCalendarId) {                                                                                              // 46\n\t\t\tsourceOptions.googleCalendarId = googleCalendarId;                                                                  // 47\n\t\t}                                                                                                                    // 48\n\t}                                                                                                                     // 49\n                                                                                                                       // 50\n                                                                                                                       // 51\n\tif (googleCalendarId) { // is this a Google Calendar?                                                                 // 52\n                                                                                                                       // 53\n\t\t// make each Google Calendar source uneditable by default                                                            // 54\n\t\tif (sourceOptions.editable == null) {                                                                                // 55\n\t\t\tsourceOptions.editable = false;                                                                                     // 56\n\t\t}                                                                                                                    // 57\n                                                                                                                       // 58\n\t\t// We want removeEventSource to work, but it won't know about the googleCalendarId primitive.                        // 59\n\t\t// Shoehorn it into the url, which will function as the unique primitive. Won't cause side effects.                  // 60\n\t\t// This hack is obsolete since 2.2.3, but keep it so this plugin file is compatible with old versions.               // 61\n\t\tsourceOptions.url = googleCalendarId;                                                                                // 62\n\t}                                                                                                                     // 63\n});                                                                                                                    // 64\n                                                                                                                       // 65\n                                                                                                                       // 66\nFC.sourceFetchers.push(function(sourceOptions, start, end, timezone) {                                                 // 67\n\tif (sourceOptions.googleCalendarId) {                                                                                 // 68\n\t\treturn transformOptions(sourceOptions, start, end, timezone, this); // `this` is the calendar                        // 69\n\t}                                                                                                                     // 70\n});                                                                                                                    // 71\n                                                                                                                       // 72\n                                                                                                                       // 73\nfunction transformOptions(sourceOptions, start, end, timezone, calendar) {                                             // 74\n\tvar url = API_BASE + '/' + encodeURIComponent(sourceOptions.googleCalendarId) + '/events?callback=?'; // jsonp        // 75\n\tvar apiKey = sourceOptions.googleCalendarApiKey || calendar.options.googleCalendarApiKey;                             // 76\n\tvar success = sourceOptions.success;                                                                                  // 77\n\tvar data;                                                                                                             // 78\n\tvar timezoneArg; // populated when a specific timezone. escaped to Google's liking                                    // 79\n                                                                                                                       // 80\n\tfunction reportError(message, apiErrorObjs) {                                                                         // 81\n\t\tvar errorObjs = apiErrorObjs || [ { message: message } ]; // to be passed into error handlers                        // 82\n                                                                                                                       // 83\n\t\t// call error handlers                                                                                               // 84\n\t\t(sourceOptions.googleCalendarError || $.noop).apply(calendar, errorObjs);                                            // 85\n\t\t(calendar.options.googleCalendarError || $.noop).apply(calendar, errorObjs);                                         // 86\n                                                                                                                       // 87\n\t\t// print error to debug console                                                                                      // 88\n\t\tFC.warn.apply(null, [ message ].concat(apiErrorObjs || []));                                                         // 89\n\t}                                                                                                                     // 90\n                                                                                                                       // 91\n\tif (!apiKey) {                                                                                                        // 92\n\t\treportError(\"Specify a googleCalendarApiKey. See http://fullcalendar.io/docs/google_calendar/\");                     // 93\n\t\treturn {}; // an empty source to use instead. won't fetch anything.                                                  // 94\n\t}                                                                                                                     // 95\n                                                                                                                       // 96\n\t// The API expects an ISO8601 datetime with a time and timezone part.                                                 // 97\n\t// Since the calendar's timezone offset isn't always known, request the date in UTC and pad it by a day on each       // 98\n\t// side, guaranteeing we will receive all events in the desired range, albeit a superset.                             // 99\n\t// .utc() will set a zone and give it a 00:00:00 time.                                                                // 100\n\tif (!start.hasZone()) {                                                                                               // 101\n\t\tstart = start.clone().utc().add(-1, 'day');                                                                          // 102\n\t}                                                                                                                     // 103\n\tif (!end.hasZone()) {                                                                                                 // 104\n\t\tend = end.clone().utc().add(1, 'day');                                                                               // 105\n\t}                                                                                                                     // 106\n                                                                                                                       // 107\n\t// when sending timezone names to Google, only accepts underscores, not spaces                                        // 108\n\tif (timezone && timezone != 'local') {                                                                                // 109\n\t\ttimezoneArg = timezone.replace(' ', '_');                                                                            // 110\n\t}                                                                                                                     // 111\n                                                                                                                       // 112\n\tdata = $.extend({}, sourceOptions.data || {}, {                                                                       // 113\n\t\tkey: apiKey,                                                                                                         // 114\n\t\ttimeMin: start.format(),                                                                                             // 115\n\t\ttimeMax: end.format(),                                                                                               // 116\n\t\ttimeZone: timezoneArg,                                                                                               // 117\n\t\tsingleEvents: true,                                                                                                  // 118\n\t\tmaxResults: 9999                                                                                                     // 119\n\t});                                                                                                                   // 120\n                                                                                                                       // 121\n\treturn $.extend({}, sourceOptions, {                                                                                  // 122\n\t\tgoogleCalendarId: null, // prevents source-normalizing from happening again                                          // 123\n\t\turl: url,                                                                                                            // 124\n\t\tdata: data,                                                                                                          // 125\n\t\tstartParam: false, // `false` omits this parameter. we already included it above                                     // 126\n\t\tendParam: false, // same                                                                                             // 127\n\t\ttimezoneParam: false, // same                                                                                        // 128\n\t\tsuccess: function(data) {                                                                                            // 129\n\t\t\tvar events = [];                                                                                                    // 130\n\t\t\tvar successArgs;                                                                                                    // 131\n\t\t\tvar successRes;                                                                                                     // 132\n                                                                                                                       // 133\n\t\t\tif (data.error) {                                                                                                   // 134\n\t\t\t\treportError('Google Calendar API: ' + data.error.message, data.error.errors);                                      // 135\n\t\t\t}                                                                                                                   // 136\n\t\t\telse if (data.items) {                                                                                              // 137\n\t\t\t\t$.each(data.items, function(i, entry) {                                                                            // 138\n\t\t\t\t\tvar url = entry.htmlLink;                                                                                         // 139\n                                                                                                                       // 140\n\t\t\t\t\t// make the URLs for each event show times in the correct timezone                                                // 141\n\t\t\t\t\tif (timezoneArg) {                                                                                                // 142\n\t\t\t\t\t\turl = injectQsComponent(url, 'ctz=' + timezoneArg);                                                              // 143\n\t\t\t\t\t}                                                                                                                 // 144\n                                                                                                                       // 145\n\t\t\t\t\tevents.push({                                                                                                     // 146\n\t\t\t\t\t\tid: entry.id,                                                                                                    // 147\n\t\t\t\t\t\ttitle: entry.summary,                                                                                            // 148\n\t\t\t\t\t\tstart: entry.start.dateTime || entry.start.date, // try timed. will fall back to all-day                         // 149\n\t\t\t\t\t\tend: entry.end.dateTime || entry.end.date, // same                                                               // 150\n\t\t\t\t\t\turl: url,                                                                                                        // 151\n\t\t\t\t\t\tlocation: entry.location,                                                                                        // 152\n\t\t\t\t\t\tdescription: entry.description                                                                                   // 153\n\t\t\t\t\t});                                                                                                               // 154\n\t\t\t\t});                                                                                                                // 155\n                                                                                                                       // 156\n\t\t\t\t// call the success handler(s) and allow it to return a new events array                                           // 157\n\t\t\t\tsuccessArgs = [ events ].concat(Array.prototype.slice.call(arguments, 1)); // forward other jq args                // 158\n\t\t\t\tsuccessRes = applyAll(success, this, successArgs);                                                                 // 159\n\t\t\t\tif ($.isArray(successRes)) {                                                                                       // 160\n\t\t\t\t\treturn successRes;                                                                                                // 161\n\t\t\t\t}                                                                                                                  // 162\n\t\t\t}                                                                                                                   // 163\n                                                                                                                       // 164\n\t\t\treturn events;                                                                                                      // 165\n\t\t}                                                                                                                    // 166\n\t});                                                                                                                   // 167\n}                                                                                                                      // 168\n                                                                                                                       // 169\n                                                                                                                       // 170\n// Injects a string like \"arg=value\" into the querystring of a URL                                                     // 171\nfunction injectQsComponent(url, component) {                                                                           // 172\n\t// inject it after the querystring but before the fragment                                                            // 173\n\treturn url.replace(/(\\?.*?)?(#|$)/, function(whole, qs, hash) {                                                       // 174\n\t\treturn (qs ? qs + '&' : '?') + component + hash;                                                                     // 175\n\t});                                                                                                                   // 176\n}                                                                                                                      // 177\n                                                                                                                       // 178\n                                                                                                                       // 179\n});                                                                                                                    // 180\n                                                                                                                       // 181\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/rzymek_fullcalendar/template.template.js                                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"fullcalendar\");                                                                                  // 2\nTemplate[\"fullcalendar\"] = new Template(\"Template.fullcalendar\", (function() {                                         // 3\n  var view = this;                                                                                                     // 4\n  return HTML.Raw(\"<div></div>\");                                                                                      // 5\n}));                                                                                                                   // 6\n                                                                                                                       // 7\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/rzymek_fullcalendar/template.js                                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nTemplate.fullcalendar.rendered = function() {                                                                          // 1\n    var div = this.$(this.firstNode);                                                                                  // 2\n    if(this.data != null) {                                                                                            // 3\n        //jquery takes care of undefined values, no need to check here                                                 // 4\n        div.attr('id', this.data.id);                                                                                  // 5\n        div.addClass(this.data.class);                                                                                 // 6\n    }                                                                                                                  // 7\n    div.fullCalendar(this.data);                                                                                       // 8\n};                                                                                                                     // 9\n                                                                                                                       // 10\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['rzymek:fullcalendar'] = {};\n\n})();\n","servePath":"/packages/rzymek_fullcalendar.js","sourceMap":{"version":3,"sources":["/packages/rzymek_fullcalendar/fullcalendar/dist/fullcalendar.js","/packages/rzymek_fullcalendar/fullcalendar/dist/lang-all.js","/packages/rzymek_fullcalendar/fullcalendar/dist/gcal.js","/packages/rzymek_fullcalendar/template.template.js","/packages/rzymek_fullcalendar/template.js"],"names":[],"mappingszuWA;AACA;AACA;AACA,i9J;;;;;;;;;;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6H;;;;;;;;;;;;;;;;;;ACpLA;AACA;AACA;AACA;AACA;AACA;AACA,2H;;;;;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H","file":"/packages/rzymek_fullcalendar.js","sourcesContent":["/*!\n * FullCalendar v2.5.0\n * Docs & License: http://fullcalendar.io/\n * (c) 2015 Adam Shaw\n */\n\n(function(factory) {\n\tif (typeof define === 'function' && define.amd) {\n\t\tdefine([ 'jquery', 'moment' ], factory);\n\t}\n\telse if (typeof exports === 'object') { // Node/CommonJS\n\t\tmodule.exports = factory(require('jquery'), require('moment'));\n\t}\n\telse {\n\t\tfactory(jQuery, moment);\n\t}\n})(function($, moment) {\n\n;;\n\nvar FC = $.fullCalendar = {\n\tversion: \"2.5.0\",\n\tinternalApiVersion: 1\n};\nvar fcViews = FC.views = {};\n\n\n$.fn.fullCalendar = function(options) {\n\tvar args = Array.prototype.slice.call(arguments, 1); // for a possible method call\n\tvar res = this; // what this function will return (this jQuery object by default)\n\n\tthis.each(function(i, _element) { // loop each DOM element involved\n\t\tvar element = $(_element);\n\t\tvar calendar = element.data('fullCalendar'); // get the existing calendar object (if any)\n\t\tvar singleRes; // the returned value of this single method call\n\n\t\t// a method call\n\t\tif (typeof options === 'string') {\n\t\t\tif (calendar && $.isFunction(calendar[options])) {\n\t\t\t\tsingleRes = calendar[options].apply(calendar, args);\n\t\t\t\tif (!i) {\n\t\t\t\t\tres = singleRes; // record the first method call result\n\t\t\t\t}\n\t\t\t\tif (options === 'destroy') { // for the destroy method, must remove Calendar object data\n\t\t\t\t\telement.removeData('fullCalendar');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// a new calendar initialization\n\t\telse if (!calendar) { // don't initialize twice\n\t\t\tcalendar = new Calendar(element, options);\n\t\t\telement.data('fullCalendar', calendar);\n\t\t\tcalendar.render();\n\t\t}\n\t});\n\t\n\treturn res;\n};\n\n\nvar complexOptions = [ // names of options that are objects whose properties should be combined\n\t'header',\n\t'buttonText',\n\t'buttonIcons',\n\t'themeButtonIcons'\n];\n\n\n// Merges an array of option objects into a single object\nfunction mergeOptions(optionObjs) {\n\treturn mergeProps(optionObjs, complexOptions);\n}\n\n\n// Given options specified for the calendar's constructor, massages any legacy options into a non-legacy form.\n// Converts View-Option-Hashes into the View-Specific-Options format.\nfunction massageOverrides(input) {\n\tvar overrides = { views: input.views || {} }; // the output. ensure a `views` hash\n\tvar subObj;\n\n\t// iterate through all option override properties (except `views`)\n\t$.each(input, function(name, val) {\n\t\tif (name != 'views') {\n\n\t\t\t// could the value be a legacy View-Option-Hash?\n\t\t\tif (\n\t\t\t\t$.isPlainObject(val) &&\n\t\t\t\t!/(time|duration|interval)$/i.test(name) && // exclude duration options. might be given as objects\n\t\t\t\t$.inArray(name, complexOptions) == -1 // complex options aren't allowed to be View-Option-Hashes\n\t\t\t) {\n\t\t\t\tsubObj = null;\n\n\t\t\t\t// iterate through the properties of this possible View-Option-Hash value\n\t\t\t\t$.each(val, function(subName, subVal) {\n\n\t\t\t\t\t// is the property targeting a view?\n\t\t\t\t\tif (/^(month|week|day|default|basic(Week|Day)?|agenda(Week|Day)?)$/.test(subName)) {\n\t\t\t\t\t\tif (!overrides.views[subName]) { // ensure the view-target entry exists\n\t\t\t\t\t\t\toverrides.views[subName] = {};\n\t\t\t\t\t\t}\n\t\t\t\t\t\toverrides.views[subName][name] = subVal; // record the value in the `views` object\n\t\t\t\t\t}\n\t\t\t\t\telse { // a non-View-Option-Hash property\n\t\t\t\t\t\tif (!subObj) {\n\t\t\t\t\t\t\tsubObj = {};\n\t\t\t\t\t\t}\n\t\t\t\t\t\tsubObj[subName] = subVal; // accumulate these unrelated values for later\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tif (subObj) { // non-View-Option-Hash properties? transfer them as-is\n\t\t\t\t\toverrides[name] = subObj;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\toverrides[name] = val; // transfer normal options as-is\n\t\t\t}\n\t\t}\n\t});\n\n\treturn overrides;\n}\n\n;;\n\n// exports\nFC.intersectRanges = intersectRanges;\nFC.applyAll = applyAll;\nFC.debounce = debounce;\nFC.isInt = isInt;\nFC.htmlEscape = htmlEscape;\nFC.cssToStr = cssToStr;\nFC.proxy = proxy;\nFC.capitaliseFirstLetter = capitaliseFirstLetter;\n\n\n/* FullCalendar-specific DOM Utilities\n----------------------------------------------------------------------------------------------------------------------*/\n\n\n// Given the scrollbar widths of some other container, create borders/margins on rowEls in order to match the left\n// and right space that was offset by the scrollbars. A 1-pixel border first, then margin beyond that.\nfunction compensateScroll(rowEls, scrollbarWidths) {\n\tif (scrollbarWidths.left) {\n\t\trowEls.css({\n\t\t\t'border-left-width': 1,\n\t\t\t'margin-left': scrollbarWidths.left - 1\n\t\t});\n\t}\n\tif (scrollbarWidths.right) {\n\t\trowEls.css({\n\t\t\t'border-right-width': 1,\n\t\t\t'margin-right': scrollbarWidths.right - 1\n\t\t});\n\t}\n}\n\n\n// Undoes compensateScroll and restores all borders/margins\nfunction uncompensateScroll(rowEls) {\n\trowEls.css({\n\t\t'margin-left': '',\n\t\t'margin-right': '',\n\t\t'border-left-width': '',\n\t\t'border-right-width': ''\n\t});\n}\n\n\n// Make the mouse cursor express that an event is not allowed in the current area\nfunction disableCursor() {\n\t$('body').addClass('fc-not-allowed');\n}\n\n\n// Returns the mouse cursor to its original look\nfunction enableCursor() {\n\t$('body').removeClass('fc-not-allowed');\n}\n\n\n// Given a total available height to fill, have `els` (essentially child rows) expand to accomodate.\n// By default, all elements that are shorter than the recommended height are expanded uniformly, not considering\n// any other els that are already too tall. if `shouldRedistribute` is on, it considers these tall rows and \n// reduces the available height.\nfunction distributeHeight(els, availableHeight, shouldRedistribute) {\n\n\t// *FLOORING NOTE*: we floor in certain places because zoom can give inaccurate floating-point dimensions,\n\t// and it is better to be shorter than taller, to avoid creating unnecessary scrollbars.\n\n\tvar minOffset1 = Math.floor(availableHeight / els.length); // for non-last element\n\tvar minOffset2 = Math.floor(availableHeight - minOffset1 * (els.length - 1)); // for last element *FLOORING NOTE*\n\tvar flexEls = []; // elements that are allowed to expand. array of DOM nodes\n\tvar flexOffsets = []; // amount of vertical space it takes up\n\tvar flexHeights = []; // actual css height\n\tvar usedHeight = 0;\n\n\tundistributeHeight(els); // give all elements their natural height\n\n\t// find elements that are below the recommended height (expandable).\n\t// important to query for heights in a single first pass (to avoid reflow oscillation).\n\tels.each(function(i, el) {\n\t\tvar minOffset = i === els.length - 1 ? minOffset2 : minOffset1;\n\t\tvar naturalOffset = $(el).outerHeight(true);\n\n\t\tif (naturalOffset < minOffset) {\n\t\t\tflexEls.push(el);\n\t\t\tflexOffsets.push(naturalOffset);\n\t\t\tflexHeights.push($(el).height());\n\t\t}\n\t\telse {\n\t\t\t// this element stretches past recommended height (non-expandable). mark the space as occupied.\n\t\t\tusedHeight += naturalOffset;\n\t\t}\n\t});\n\n\t// readjust the recommended height to only consider the height available to non-maxed-out rows.\n\tif (shouldRedistribute) {\n\t\tavailableHeight -= usedHeight;\n\t\tminOffset1 = Math.floor(availableHeight / flexEls.length);\n\t\tminOffset2 = Math.floor(availableHeight - minOffset1 * (flexEls.length - 1)); // *FLOORING NOTE*\n\t}\n\n\t// assign heights to all expandable elements\n\t$(flexEls).each(function(i, el) {\n\t\tvar minOffset = i === flexEls.length - 1 ? minOffset2 : minOffset1;\n\t\tvar naturalOffset = flexOffsets[i];\n\t\tvar naturalHeight = flexHeights[i];\n\t\tvar newHeight = minOffset - (naturalOffset - naturalHeight); // subtract the margin/padding\n\n\t\tif (naturalOffset < minOffset) { // we check this again because redistribution might have changed things\n\t\t\t$(el).height(newHeight);\n\t\t}\n\t});\n}\n\n\n// Undoes distrubuteHeight, restoring all els to their natural height\nfunction undistributeHeight(els) {\n\tels.height('');\n}\n\n\n// Given `els`, a jQuery set of <td> cells, find the cell with the largest natural width and set the widths of all the\n// cells to be that width.\n// PREREQUISITE: if you want a cell to take up width, it needs to have a single inner element w/ display:inline\nfunction matchCellWidths(els) {\n\tvar maxInnerWidth = 0;\n\n\tels.find('> *').each(function(i, innerEl) {\n\t\tvar innerWidth = $(innerEl).outerWidth();\n\t\tif (innerWidth > maxInnerWidth) {\n\t\t\tmaxInnerWidth = innerWidth;\n\t\t}\n\t});\n\n\tmaxInnerWidth++; // sometimes not accurate of width the text needs to stay on one line. insurance\n\n\tels.width(maxInnerWidth);\n\n\treturn maxInnerWidth;\n}\n\n\n// Turns a container element into a scroller if its contents is taller than the allotted height.\n// Returns true if the element is now a scroller, false otherwise.\n// NOTE: this method is best because it takes weird zooming dimensions into account\nfunction setPotentialScroller(containerEl, height) {\n\tcontainerEl.height(height).addClass('fc-scroller');\n\n\t// are scrollbars needed?\n\tif (containerEl[0].scrollHeight - 1 > containerEl[0].clientHeight) { // !!! -1 because IE is often off-by-one :(\n\t\treturn true;\n\t}\n\n\tunsetScroller(containerEl); // undo\n\treturn false;\n}\n\n\n// Takes an element that might have been a scroller, and turns it back into a normal element.\nfunction unsetScroller(containerEl) {\n\tcontainerEl.height('').removeClass('fc-scroller');\n}\n\n\n/* General DOM Utilities\n----------------------------------------------------------------------------------------------------------------------*/\n\nFC.getOuterRect = getOuterRect;\nFC.getClientRect = getClientRect;\nFC.getContentRect = getContentRect;\nFC.getScrollbarWidths = getScrollbarWidths;\n\n\n// borrowed from https://github.com/jquery/jquery-ui/blob/1.11.0/ui/core.js#L51\nfunction getScrollParent(el) {\n\tvar position = el.css('position'),\n\t\tscrollParent = el.parents().filter(function() {\n\t\t\tvar parent = $(this);\n\t\t\treturn (/(auto|scroll)/).test(\n\t\t\t\tparent.css('overflow') + parent.css('overflow-y') + parent.css('overflow-x')\n\t\t\t);\n\t\t}).eq(0);\n\n\treturn position === 'fixed' || !scrollParent.length ? $(el[0].ownerDocument || document) : scrollParent;\n}\n\n\n// Queries the outer bounding area of a jQuery element.\n// Returns a rectangle with absolute coordinates: left, right (exclusive), top, bottom (exclusive).\nfunction getOuterRect(el) {\n\tvar offset = el.offset();\n\n\treturn {\n\t\tleft: offset.left,\n\t\tright: offset.left + el.outerWidth(),\n\t\ttop: offset.top,\n\t\tbottom: offset.top + el.outerHeight()\n\t};\n}\n\n\n// Queries the area within the margin/border/scrollbars of a jQuery element. Does not go within the padding.\n// Returns a rectangle with absolute coordinates: left, right (exclusive), top, bottom (exclusive).\n// NOTE: should use clientLeft/clientTop, but very unreliable cross-browser.\nfunction getClientRect(el) {\n\tvar offset = el.offset();\n\tvar scrollbarWidths = getScrollbarWidths(el);\n\tvar left = offset.left + getCssFloat(el, 'border-left-width') + scrollbarWidths.left;\n\tvar top = offset.top + getCssFloat(el, 'border-top-width') + scrollbarWidths.top;\n\n\treturn {\n\t\tleft: left,\n\t\tright: left + el[0].clientWidth, // clientWidth includes padding but NOT scrollbars\n\t\ttop: top,\n\t\tbottom: top + el[0].clientHeight // clientHeight includes padding but NOT scrollbars\n\t};\n}\n\n\n// Queries the area within the margin/border/padding of a jQuery element. Assumed not to have scrollbars.\n// Returns a rectangle with absolute coordinates: left, right (exclusive), top, bottom (exclusive).\nfunction getContentRect(el) {\n\tvar offset = el.offset(); // just outside of border, margin not included\n\tvar left = offset.left + getCssFloat(el, 'border-left-width') + getCssFloat(el, 'padding-left');\n\tvar top = offset.top + getCssFloat(el, 'border-top-width') + getCssFloat(el, 'padding-top');\n\n\treturn {\n\t\tleft: left,\n\t\tright: left + el.width(),\n\t\ttop: top,\n\t\tbottom: top + el.height()\n\t};\n}\n\n\n// Returns the computed left/right/top/bottom scrollbar widths for the given jQuery element.\n// NOTE: should use clientLeft/clientTop, but very unreliable cross-browser.\nfunction getScrollbarWidths(el) {\n\tvar leftRightWidth = el.innerWidth() - el[0].clientWidth; // the paddings cancel out, leaving the scrollbars\n\tvar widths = {\n\t\tleft: 0,\n\t\tright: 0,\n\t\ttop: 0,\n\t\tbottom: el.innerHeight() - el[0].clientHeight // the paddings cancel out, leaving the bottom scrollbar\n\t};\n\n\tif (getIsLeftRtlScrollbars() && el.css('direction') == 'rtl') { // is the scrollbar on the left side?\n\t\twidths.left = leftRightWidth;\n\t}\n\telse {\n\t\twidths.right = leftRightWidth;\n\t}\n\n\treturn widths;\n}\n\n\n// Logic for determining if, when the element is right-to-left, the scrollbar appears on the left side\n\nvar _isLeftRtlScrollbars = null;\n\nfunction getIsLeftRtlScrollbars() { // responsible for caching the computation\n\tif (_isLeftRtlScrollbars === null) {\n\t\t_isLeftRtlScrollbars = computeIsLeftRtlScrollbars();\n\t}\n\treturn _isLeftRtlScrollbars;\n}\n\nfunction computeIsLeftRtlScrollbars() { // creates an offscreen test element, then removes it\n\tvar el = $('<div><div/></div>')\n\t\t.css({\n\t\t\tposition: 'absolute',\n\t\t\ttop: -1000,\n\t\t\tleft: 0,\n\t\t\tborder: 0,\n\t\t\tpadding: 0,\n\t\t\toverflow: 'scroll',\n\t\t\tdirection: 'rtl'\n\t\t})\n\t\t.appendTo('body');\n\tvar innerEl = el.children();\n\tvar res = innerEl.offset().left > el.offset().left; // is the inner div shifted to accommodate a left scrollbar?\n\tel.remove();\n\treturn res;\n}\n\n\n// Retrieves a jQuery element's computed CSS value as a floating-point number.\n// If the queried value is non-numeric (ex: IE can return \"medium\" for border width), will just return zero.\nfunction getCssFloat(el, prop) {\n\treturn parseFloat(el.css(prop)) || 0;\n}\n\n\n// Returns a boolean whether this was a left mouse click and no ctrl key (which means right click on Mac)\nfunction isPrimaryMouseButton(ev) {\n\treturn ev.which == 1 && !ev.ctrlKey;\n}\n\n\n/* Geometry\n----------------------------------------------------------------------------------------------------------------------*/\n\nFC.intersectRects = intersectRects;\n\n// Returns a new rectangle that is the intersection of the two rectangles. If they don't intersect, returns false\nfunction intersectRects(rect1, rect2) {\n\tvar res = {\n\t\tleft: Math.max(rect1.left, rect2.left),\n\t\tright: Math.min(rect1.right, rect2.right),\n\t\ttop: Math.max(rect1.top, rect2.top),\n\t\tbottom: Math.min(rect1.bottom, rect2.bottom)\n\t};\n\n\tif (res.left < res.right && res.top < res.bottom) {\n\t\treturn res;\n\t}\n\treturn false;\n}\n\n\n// Returns a new point that will have been moved to reside within the given rectangle\nfunction constrainPoint(point, rect) {\n\treturn {\n\t\tleft: Math.min(Math.max(point.left, rect.left), rect.right),\n\t\ttop: Math.min(Math.max(point.top, rect.top), rect.bottom)\n\t};\n}\n\n\n// Returns a point that is the center of the given rectangle\nfunction getRectCenter(rect) {\n\treturn {\n\t\tleft: (rect.left + rect.right) / 2,\n\t\ttop: (rect.top + rect.bottom) / 2\n\t};\n}\n\n\n// Subtracts point2's coordinates from point1's coordinates, returning a delta\nfunction diffPoints(point1, point2) {\n\treturn {\n\t\tleft: point1.left - point2.left,\n\t\ttop: point1.top - point2.top\n\t};\n}\n\n\n/* Object Ordering by Field\n----------------------------------------------------------------------------------------------------------------------*/\n\nFC.parseFieldSpecs = parseFieldSpecs;\nFC.compareByFieldSpecs = compareByFieldSpecs;\nFC.compareByFieldSpec = compareByFieldSpec;\nFC.flexibleCompare = flexibleCompare;\n\n\nfunction parseFieldSpecs(input) {\n\tvar specs = [];\n\tvar tokens = [];\n\tvar i, token;\n\n\tif (typeof input === 'string') {\n\t\ttokens = input.split(/\\s*,\\s*/);\n\t}\n\telse if (typeof input === 'function') {\n\t\ttokens = [ input ];\n\t}\n\telse if ($.isArray(input)) {\n\t\ttokens = input;\n\t}\n\n\tfor (i = 0; i < tokens.length; i++) {\n\t\ttoken = tokens[i];\n\n\t\tif (typeof token === 'string') {\n\t\t\tspecs.push(\n\t\t\t\ttoken.charAt(0) == '-' ?\n\t\t\t\t\t{ field: token.substring(1), order: -1 } :\n\t\t\t\t\t{ field: token, order: 1 }\n\t\t\t);\n\t\t}\n\t\telse if (typeof token === 'function') {\n\t\t\tspecs.push({ func: token });\n\t\t}\n\t}\n\n\treturn specs;\n}\n\n\nfunction compareByFieldSpecs(obj1, obj2, fieldSpecs) {\n\tvar i;\n\tvar cmp;\n\n\tfor (i = 0; i < fieldSpecs.length; i++) {\n\t\tcmp = compareByFieldSpec(obj1, obj2, fieldSpecs[i]);\n\t\tif (cmp) {\n\t\t\treturn cmp;\n\t\t}\n\t}\n\n\treturn 0;\n}\n\n\nfunction compareByFieldSpec(obj1, obj2, fieldSpec) {\n\tif (fieldSpec.func) {\n\t\treturn fieldSpec.func(obj1, obj2);\n\t}\n\treturn flexibleCompare(obj1[fieldSpec.field], obj2[fieldSpec.field]) *\n\t\t(fieldSpec.order || 1);\n}\n\n\nfunction flexibleCompare(a, b) {\n\tif (!a && !b) {\n\t\treturn 0;\n\t}\n\tif (b == null) {\n\t\treturn -1;\n\t}\n\tif (a == null) {\n\t\treturn 1;\n\t}\n\tif ($.type(a) === 'string' || $.type(b) === 'string') {\n\t\treturn String(a).localeCompare(String(b));\n\t}\n\treturn a - b;\n}\n\n\n/* FullCalendar-specific Misc Utilities\n----------------------------------------------------------------------------------------------------------------------*/\n\n\n// Computes the intersection of the two ranges. Returns undefined if no intersection.\n// Expects all dates to be normalized to the same timezone beforehand.\n// TODO: move to date section?\nfunction intersectRanges(subjectRange, constraintRange) {\n\tvar subjectStart = subjectRange.start;\n\tvar subjectEnd = subjectRange.end;\n\tvar constraintStart = constraintRange.start;\n\tvar constraintEnd = constraintRange.end;\n\tvar segStart, segEnd;\n\tvar isStart, isEnd;\n\n\tif (subjectEnd > constraintStart && subjectStart < constraintEnd) { // in bounds at all?\n\n\t\tif (subjectStart >= constraintStart) {\n\t\t\tsegStart = subjectStart.clone();\n\t\t\tisStart = true;\n\t\t}\n\t\telse {\n\t\t\tsegStart = constraintStart.clone();\n\t\t\tisStart =  false;\n\t\t}\n\n\t\tif (subjectEnd <= constraintEnd) {\n\t\t\tsegEnd = subjectEnd.clone();\n\t\t\tisEnd = true;\n\t\t}\n\t\telse {\n\t\t\tsegEnd = constraintEnd.clone();\n\t\t\tisEnd = false;\n\t\t}\n\n\t\treturn {\n\t\t\tstart: segStart,\n\t\t\tend: segEnd,\n\t\t\tisStart: isStart,\n\t\t\tisEnd: isEnd\n\t\t};\n\t}\n}\n\n\n/* Date Utilities\n----------------------------------------------------------------------------------------------------------------------*/\n\nFC.computeIntervalUnit = computeIntervalUnit;\nFC.divideRangeByDuration = divideRangeByDuration;\nFC.divideDurationByDuration = divideDurationByDuration;\nFC.multiplyDuration = multiplyDuration;\nFC.durationHasTime = durationHasTime;\n\nvar dayIDs = [ 'sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat' ];\nvar intervalUnits = [ 'year', 'month', 'week', 'day', 'hour', 'minute', 'second', 'millisecond' ];\n\n\n// Diffs the two moments into a Duration where full-days are recorded first, then the remaining time.\n// Moments will have their timezones normalized.\nfunction diffDayTime(a, b) {\n\treturn moment.duration({\n\t\tdays: a.clone().stripTime().diff(b.clone().stripTime(), 'days'),\n\t\tms: a.time() - b.time() // time-of-day from day start. disregards timezone\n\t});\n}\n\n\n// Diffs the two moments via their start-of-day (regardless of timezone). Produces whole-day durations.\nfunction diffDay(a, b) {\n\treturn moment.duration({\n\t\tdays: a.clone().stripTime().diff(b.clone().stripTime(), 'days')\n\t});\n}\n\n\n// Diffs two moments, producing a duration, made of a whole-unit-increment of the given unit. Uses rounding.\nfunction diffByUnit(a, b, unit) {\n\treturn moment.duration(\n\t\tMath.round(a.diff(b, unit, true)), // returnFloat=true\n\t\tunit\n\t);\n}\n\n\n// Computes the unit name of the largest whole-unit period of time.\n// For example, 48 hours will be \"days\" whereas 49 hours will be \"hours\".\n// Accepts start/end, a range object, or an original duration object.\nfunction computeIntervalUnit(start, end) {\n\tvar i, unit;\n\tvar val;\n\n\tfor (i = 0; i < intervalUnits.length; i++) {\n\t\tunit = intervalUnits[i];\n\t\tval = computeRangeAs(unit, start, end);\n\n\t\tif (val >= 1 && isInt(val)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn unit; // will be \"milliseconds\" if nothing else matches\n}\n\n\n// Computes the number of units (like \"hours\") in the given range.\n// Range can be a {start,end} object, separate start/end args, or a Duration.\n// Results are based on Moment's .as() and .diff() methods, so results can depend on internal handling\n// of month-diffing logic (which tends to vary from version to version).\nfunction computeRangeAs(unit, start, end) {\n\n\tif (end != null) { // given start, end\n\t\treturn end.diff(start, unit, true);\n\t}\n\telse if (moment.isDuration(start)) { // given duration\n\t\treturn start.as(unit);\n\t}\n\telse { // given { start, end } range object\n\t\treturn start.end.diff(start.start, unit, true);\n\t}\n}\n\n\n// Intelligently divides a range (specified by a start/end params) by a duration\nfunction divideRangeByDuration(start, end, dur) {\n\tvar months;\n\n\tif (durationHasTime(dur)) {\n\t\treturn (end - start) / dur;\n\t}\n\tmonths = dur.asMonths();\n\tif (Math.abs(months) >= 1 && isInt(months)) {\n\t\treturn end.diff(start, 'months', true) / months;\n\t}\n\treturn end.diff(start, 'days', true) / dur.asDays();\n}\n\n\n// Intelligently divides one duration by another\nfunction divideDurationByDuration(dur1, dur2) {\n\tvar months1, months2;\n\n\tif (durationHasTime(dur1) || durationHasTime(dur2)) {\n\t\treturn dur1 / dur2;\n\t}\n\tmonths1 = dur1.asMonths();\n\tmonths2 = dur2.asMonths();\n\tif (\n\t\tMath.abs(months1) >= 1 && isInt(months1) &&\n\t\tMath.abs(months2) >= 1 && isInt(months2)\n\t) {\n\t\treturn months1 / months2;\n\t}\n\treturn dur1.asDays() / dur2.asDays();\n}\n\n\n// Intelligently multiplies a duration by a number\nfunction multiplyDuration(dur, n) {\n\tvar months;\n\n\tif (durationHasTime(dur)) {\n\t\treturn moment.duration(dur * n);\n\t}\n\tmonths = dur.asMonths();\n\tif (Math.abs(months) >= 1 && isInt(months)) {\n\t\treturn moment.duration({ months: months * n });\n\t}\n\treturn moment.duration({ days: dur.asDays() * n });\n}\n\n\n// Returns a boolean about whether the given duration has any time parts (hours/minutes/seconds/ms)\nfunction durationHasTime(dur) {\n\treturn Boolean(dur.hours() || dur.minutes() || dur.seconds() || dur.milliseconds());\n}\n\n\nfunction isNativeDate(input) {\n\treturn  Object.prototype.toString.call(input) === '[object Date]' || input instanceof Date;\n}\n\n\n// Returns a boolean about whether the given input is a time string, like \"06:40:00\" or \"06:00\"\nfunction isTimeString(str) {\n\treturn /^\\d+\\:\\d+(?:\\:\\d+\\.?(?:\\d{3})?)?$/.test(str);\n}\n\n\n/* Logging and Debug\n----------------------------------------------------------------------------------------------------------------------*/\n\nFC.log = function() {\n\tvar console = window.console;\n\n\tif (console && console.log) {\n\t\treturn console.log.apply(console, arguments);\n\t}\n};\n\nFC.warn = function() {\n\tvar console = window.console;\n\n\tif (console && console.warn) {\n\t\treturn console.warn.apply(console, arguments);\n\t}\n\telse {\n\t\treturn FC.log.apply(FC, arguments);\n\t}\n};\n\n\n/* General Utilities\n----------------------------------------------------------------------------------------------------------------------*/\n\nvar hasOwnPropMethod = {}.hasOwnProperty;\n\n\n// Merges an array of objects into a single object.\n// The second argument allows for an array of property names who's object values will be merged together.\nfunction mergeProps(propObjs, complexProps) {\n\tvar dest = {};\n\tvar i, name;\n\tvar complexObjs;\n\tvar j, val;\n\tvar props;\n\n\tif (complexProps) {\n\t\tfor (i = 0; i < complexProps.length; i++) {\n\t\t\tname = complexProps[i];\n\t\t\tcomplexObjs = [];\n\n\t\t\t// collect the trailing object values, stopping when a non-object is discovered\n\t\t\tfor (j = propObjs.length - 1; j >= 0; j--) {\n\t\t\t\tval = propObjs[j][name];\n\n\t\t\t\tif (typeof val === 'object') {\n\t\t\t\t\tcomplexObjs.unshift(val);\n\t\t\t\t}\n\t\t\t\telse if (val !== undefined) {\n\t\t\t\t\tdest[name] = val; // if there were no objects, this value will be used\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// if the trailing values were objects, use the merged value\n\t\t\tif (complexObjs.length) {\n\t\t\t\tdest[name] = mergeProps(complexObjs);\n\t\t\t}\n\t\t}\n\t}\n\n\t// copy values into the destination, going from last to first\n\tfor (i = propObjs.length - 1; i >= 0; i--) {\n\t\tprops = propObjs[i];\n\n\t\tfor (name in props) {\n\t\t\tif (!(name in dest)) { // if already assigned by previous props or complex props, don't reassign\n\t\t\t\tdest[name] = props[name];\n\t\t\t}\n\t\t}\n\t}\n\n\treturn dest;\n}\n\n\n// Create an object that has the given prototype. Just like Object.create\nfunction createObject(proto) {\n\tvar f = function() {};\n\tf.prototype = proto;\n\treturn new f();\n}\n\n\nfunction copyOwnProps(src, dest) {\n\tfor (var name in src) {\n\t\tif (hasOwnProp(src, name)) {\n\t\t\tdest[name] = src[name];\n\t\t}\n\t}\n}\n\n\n// Copies over certain methods with the same names as Object.prototype methods. Overcomes an IE<=8 bug:\n// https://developer.mozilla.org/en-US/docs/ECMAScript_DontEnum_attribute#JScript_DontEnum_Bug\nfunction copyNativeMethods(src, dest) {\n\tvar names = [ 'constructor', 'toString', 'valueOf' ];\n\tvar i, name;\n\n\tfor (i = 0; i < names.length; i++) {\n\t\tname = names[i];\n\n\t\tif (src[name] !== Object.prototype[name]) {\n\t\t\tdest[name] = src[name];\n\t\t}\n\t}\n}\n\n\nfunction hasOwnProp(obj, name) {\n\treturn hasOwnPropMethod.call(obj, name);\n}\n\n\n// Is the given value a non-object non-function value?\nfunction isAtomic(val) {\n\treturn /undefined|null|boolean|number|string/.test($.type(val));\n}\n\n\nfunction applyAll(functions, thisObj, args) {\n\tif ($.isFunction(functions)) {\n\t\tfunctions = [ functions ];\n\t}\n\tif (functions) {\n\t\tvar i;\n\t\tvar ret;\n\t\tfor (i=0; i<functions.length; i++) {\n\t\t\tret = functions[i].apply(thisObj, args) || ret;\n\t\t}\n\t\treturn ret;\n\t}\n}\n\n\nfunction firstDefined() {\n\tfor (var i=0; i<arguments.length; i++) {\n\t\tif (arguments[i] !== undefined) {\n\t\t\treturn arguments[i];\n\t\t}\n\t}\n}\n\n\nfunction htmlEscape(s) {\n\treturn (s + '').replace(/&/g, '&amp;')\n\t\t.replace(/</g, '&lt;')\n\t\t.replace(/>/g, '&gt;')\n\t\t.replace(/'/g, '&#039;')\n\t\t.replace(/\"/g, '&quot;')\n\t\t.replace(/\\n/g, '<br />');\n}\n\n\nfunction stripHtmlEntities(text) {\n\treturn text.replace(/&.*?;/g, '');\n}\n\n\n// Given a hash of CSS properties, returns a string of CSS.\n// Uses property names as-is (no camel-case conversion). Will not make statements for null/undefined values.\nfunction cssToStr(cssProps) {\n\tvar statements = [];\n\n\t$.each(cssProps, function(name, val) {\n\t\tif (val != null) {\n\t\t\tstatements.push(name + ':' + val);\n\t\t}\n\t});\n\n\treturn statements.join(';');\n}\n\n\nfunction capitaliseFirstLetter(str) {\n\treturn str.charAt(0).toUpperCase() + str.slice(1);\n}\n\n\nfunction compareNumbers(a, b) { // for .sort()\n\treturn a - b;\n}\n\n\nfunction isInt(n) {\n\treturn n % 1 === 0;\n}\n\n\n// Returns a method bound to the given object context.\n// Just like one of the jQuery.proxy signatures, but without the undesired behavior of treating the same method with\n// different contexts as identical when binding/unbinding events.\nfunction proxy(obj, methodName) {\n\tvar method = obj[methodName];\n\n\treturn function() {\n\t\treturn method.apply(obj, arguments);\n\t};\n}\n\n\n// Returns a function, that, as long as it continues to be invoked, will not\n// be triggered. The function will be called after it stops being called for\n// N milliseconds.\n// https://github.com/jashkenas/underscore/blob/1.6.0/underscore.js#L714\nfunction debounce(func, wait) {\n\tvar timeoutId;\n\tvar args;\n\tvar context;\n\tvar timestamp; // of most recent call\n\tvar later = function() {\n\t\tvar last = +new Date() - timestamp;\n\t\tif (last < wait && last > 0) {\n\t\t\ttimeoutId = setTimeout(later, wait - last);\n\t\t}\n\t\telse {\n\t\t\ttimeoutId = null;\n\t\t\tfunc.apply(context, args);\n\t\t\tif (!timeoutId) {\n\t\t\t\tcontext = args = null;\n\t\t\t}\n\t\t}\n\t};\n\n\treturn function() {\n\t\tcontext = this;\n\t\targs = arguments;\n\t\ttimestamp = +new Date();\n\t\tif (!timeoutId) {\n\t\t\ttimeoutId = setTimeout(later, wait);\n\t\t}\n\t};\n}\n\n;;\n\nvar ambigDateOfMonthRegex = /^\\s*\\d{4}-\\d\\d$/;\nvar ambigTimeOrZoneRegex =\n\t/^\\s*\\d{4}-(?:(\\d\\d-\\d\\d)|(W\\d\\d$)|(W\\d\\d-\\d)|(\\d\\d\\d))((T| )(\\d\\d(:\\d\\d(:\\d\\d(\\.\\d+)?)?)?)?)?$/;\nvar newMomentProto = moment.fn; // where we will attach our new methods\nvar oldMomentProto = $.extend({}, newMomentProto); // copy of original moment methods\nvar allowValueOptimization;\nvar setUTCValues; // function defined below\nvar setLocalValues; // function defined below\n\n\n// Creating\n// -------------------------------------------------------------------------------------------------\n\n// Creates a new moment, similar to the vanilla moment(...) constructor, but with\n// extra features (ambiguous time, enhanced formatting). When given an existing moment,\n// it will function as a clone (and retain the zone of the moment). Anything else will\n// result in a moment in the local zone.\nFC.moment = function() {\n\treturn makeMoment(arguments);\n};\n\n// Sames as FC.moment, but forces the resulting moment to be in the UTC timezone.\nFC.moment.utc = function() {\n\tvar mom = makeMoment(arguments, true);\n\n\t// Force it into UTC because makeMoment doesn't guarantee it\n\t// (if given a pre-existing moment for example)\n\tif (mom.hasTime()) { // don't give ambiguously-timed moments a UTC zone\n\t\tmom.utc();\n\t}\n\n\treturn mom;\n};\n\n// Same as FC.moment, but when given an ISO8601 string, the timezone offset is preserved.\n// ISO8601 strings with no timezone offset will become ambiguously zoned.\nFC.moment.parseZone = function() {\n\treturn makeMoment(arguments, true, true);\n};\n\n// Builds an enhanced moment from args. When given an existing moment, it clones. When given a\n// native Date, or called with no arguments (the current time), the resulting moment will be local.\n// Anything else needs to be \"parsed\" (a string or an array), and will be affected by:\n//    parseAsUTC - if there is no zone information, should we parse the input in UTC?\n//    parseZone - if there is zone information, should we force the zone of the moment?\nfunction makeMoment(args, parseAsUTC, parseZone) {\n\tvar input = args[0];\n\tvar isSingleString = args.length == 1 && typeof input === 'string';\n\tvar isAmbigTime;\n\tvar isAmbigZone;\n\tvar ambigMatch;\n\tvar mom;\n\n\tif (moment.isMoment(input)) {\n\t\tmom = moment.apply(null, args); // clone it\n\t\ttransferAmbigs(input, mom); // the ambig flags weren't transfered with the clone\n\t}\n\telse if (isNativeDate(input) || input === undefined) {\n\t\tmom = moment.apply(null, args); // will be local\n\t}\n\telse { // \"parsing\" is required\n\t\tisAmbigTime = false;\n\t\tisAmbigZone = false;\n\n\t\tif (isSingleString) {\n\t\t\tif (ambigDateOfMonthRegex.test(input)) {\n\t\t\t\t// accept strings like '2014-05', but convert to the first of the month\n\t\t\t\tinput += '-01';\n\t\t\t\targs = [ input ]; // for when we pass it on to moment's constructor\n\t\t\t\tisAmbigTime = true;\n\t\t\t\tisAmbigZone = true;\n\t\t\t}\n\t\t\telse if ((ambigMatch = ambigTimeOrZoneRegex.exec(input))) {\n\t\t\t\tisAmbigTime = !ambigMatch[5]; // no time part?\n\t\t\t\tisAmbigZone = true;\n\t\t\t}\n\t\t}\n\t\telse if ($.isArray(input)) {\n\t\t\t// arrays have no timezone information, so assume ambiguous zone\n\t\t\tisAmbigZone = true;\n\t\t}\n\t\t// otherwise, probably a string with a format\n\n\t\tif (parseAsUTC || isAmbigTime) {\n\t\t\tmom = moment.utc.apply(moment, args);\n\t\t}\n\t\telse {\n\t\t\tmom = moment.apply(null, args);\n\t\t}\n\n\t\tif (isAmbigTime) {\n\t\t\tmom._ambigTime = true;\n\t\t\tmom._ambigZone = true; // ambiguous time always means ambiguous zone\n\t\t}\n\t\telse if (parseZone) { // let's record the inputted zone somehow\n\t\t\tif (isAmbigZone) {\n\t\t\t\tmom._ambigZone = true;\n\t\t\t}\n\t\t\telse if (isSingleString) {\n\t\t\t\tif (mom.utcOffset) {\n\t\t\t\t\tmom.utcOffset(input); // if not a valid zone, will assign UTC\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tmom.zone(input); // for moment-pre-2.9\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tmom._fullCalendar = true; // flag for extended functionality\n\n\treturn mom;\n}\n\n\n// A clone method that works with the flags related to our enhanced functionality.\n// In the future, use moment.momentProperties\nnewMomentProto.clone = function() {\n\tvar mom = oldMomentProto.clone.apply(this, arguments);\n\n\t// these flags weren't transfered with the clone\n\ttransferAmbigs(this, mom);\n\tif (this._fullCalendar) {\n\t\tmom._fullCalendar = true;\n\t}\n\n\treturn mom;\n};\n\n\n// Week Number\n// -------------------------------------------------------------------------------------------------\n\n\n// Returns the week number, considering the locale's custom week number calcuation\n// `weeks` is an alias for `week`\nnewMomentProto.week = newMomentProto.weeks = function(input) {\n\tvar weekCalc = (this._locale || this._lang) // works pre-moment-2.8\n\t\t._fullCalendar_weekCalc;\n\n\tif (input == null && typeof weekCalc === 'function') { // custom function only works for getter\n\t\treturn weekCalc(this);\n\t}\n\telse if (weekCalc === 'ISO') {\n\t\treturn oldMomentProto.isoWeek.apply(this, arguments); // ISO getter/setter\n\t}\n\n\treturn oldMomentProto.week.apply(this, arguments); // local getter/setter\n};\n\n\n// Time-of-day\n// -------------------------------------------------------------------------------------------------\n\n// GETTER\n// Returns a Duration with the hours/minutes/seconds/ms values of the moment.\n// If the moment has an ambiguous time, a duration of 00:00 will be returned.\n//\n// SETTER\n// You can supply a Duration, a Moment, or a Duration-like argument.\n// When setting the time, and the moment has an ambiguous time, it then becomes unambiguous.\nnewMomentProto.time = function(time) {\n\n\t// Fallback to the original method (if there is one) if this moment wasn't created via FullCalendar.\n\t// `time` is a generic enough method name where this precaution is necessary to avoid collisions w/ other plugins.\n\tif (!this._fullCalendar) {\n\t\treturn oldMomentProto.time.apply(this, arguments);\n\t}\n\n\tif (time == null) { // getter\n\t\treturn moment.duration({\n\t\t\thours: this.hours(),\n\t\t\tminutes: this.minutes(),\n\t\t\tseconds: this.seconds(),\n\t\t\tmilliseconds: this.milliseconds()\n\t\t});\n\t}\n\telse { // setter\n\n\t\tthis._ambigTime = false; // mark that the moment now has a time\n\n\t\tif (!moment.isDuration(time) && !moment.isMoment(time)) {\n\t\t\ttime = moment.duration(time);\n\t\t}\n\n\t\t// The day value should cause overflow (so 24 hours becomes 00:00:00 of next day).\n\t\t// Only for Duration times, not Moment times.\n\t\tvar dayHours = 0;\n\t\tif (moment.isDuration(time)) {\n\t\t\tdayHours = Math.floor(time.asDays()) * 24;\n\t\t}\n\n\t\t// We need to set the individual fields.\n\t\t// Can't use startOf('day') then add duration. In case of DST at start of day.\n\t\treturn this.hours(dayHours + time.hours())\n\t\t\t.minutes(time.minutes())\n\t\t\t.seconds(time.seconds())\n\t\t\t.milliseconds(time.milliseconds());\n\t}\n};\n\n// Converts the moment to UTC, stripping out its time-of-day and timezone offset,\n// but preserving its YMD. A moment with a stripped time will display no time\n// nor timezone offset when .format() is called.\nnewMomentProto.stripTime = function() {\n\tvar a;\n\n\tif (!this._ambigTime) {\n\n\t\t// get the values before any conversion happens\n\t\ta = this.toArray(); // array of y/m/d/h/m/s/ms\n\n\t\t// TODO: use keepLocalTime in the future\n\t\tthis.utc(); // set the internal UTC flag (will clear the ambig flags)\n\t\tsetUTCValues(this, a.slice(0, 3)); // set the year/month/date. time will be zero\n\n\t\t// Mark the time as ambiguous. This needs to happen after the .utc() call, which might call .utcOffset(),\n\t\t// which clears all ambig flags. Same with setUTCValues with moment-timezone.\n\t\tthis._ambigTime = true;\n\t\tthis._ambigZone = true; // if ambiguous time, also ambiguous timezone offset\n\t}\n\n\treturn this; // for chaining\n};\n\n// Returns if the moment has a non-ambiguous time (boolean)\nnewMomentProto.hasTime = function() {\n\treturn !this._ambigTime;\n};\n\n\n// Timezone\n// -------------------------------------------------------------------------------------------------\n\n// Converts the moment to UTC, stripping out its timezone offset, but preserving its\n// YMD and time-of-day. A moment with a stripped timezone offset will display no\n// timezone offset when .format() is called.\n// TODO: look into Moment's keepLocalTime functionality\nnewMomentProto.stripZone = function() {\n\tvar a, wasAmbigTime;\n\n\tif (!this._ambigZone) {\n\n\t\t// get the values before any conversion happens\n\t\ta = this.toArray(); // array of y/m/d/h/m/s/ms\n\t\twasAmbigTime = this._ambigTime;\n\n\t\tthis.utc(); // set the internal UTC flag (might clear the ambig flags, depending on Moment internals)\n\t\tsetUTCValues(this, a); // will set the year/month/date/hours/minutes/seconds/ms\n\n\t\t// the above call to .utc()/.utcOffset() unfortunately might clear the ambig flags, so restore\n\t\tthis._ambigTime = wasAmbigTime || false;\n\n\t\t// Mark the zone as ambiguous. This needs to happen after the .utc() call, which might call .utcOffset(),\n\t\t// which clears the ambig flags. Same with setUTCValues with moment-timezone.\n\t\tthis._ambigZone = true;\n\t}\n\n\treturn this; // for chaining\n};\n\n// Returns of the moment has a non-ambiguous timezone offset (boolean)\nnewMomentProto.hasZone = function() {\n\treturn !this._ambigZone;\n};\n\n\n// this method implicitly marks a zone\nnewMomentProto.local = function() {\n\tvar a = this.toArray(); // year,month,date,hours,minutes,seconds,ms as an array\n\tvar wasAmbigZone = this._ambigZone;\n\n\toldMomentProto.local.apply(this, arguments);\n\n\t// ensure non-ambiguous\n\t// this probably already happened via local() -> utcOffset(), but don't rely on Moment's internals\n\tthis._ambigTime = false;\n\tthis._ambigZone = false;\n\n\tif (wasAmbigZone) {\n\t\t// If the moment was ambiguously zoned, the date fields were stored as UTC.\n\t\t// We want to preserve these, but in local time.\n\t\t// TODO: look into Moment's keepLocalTime functionality\n\t\tsetLocalValues(this, a);\n\t}\n\n\treturn this; // for chaining\n};\n\n\n// implicitly marks a zone\nnewMomentProto.utc = function() {\n\toldMomentProto.utc.apply(this, arguments);\n\n\t// ensure non-ambiguous\n\t// this probably already happened via utc() -> utcOffset(), but don't rely on Moment's internals\n\tthis._ambigTime = false;\n\tthis._ambigZone = false;\n\n\treturn this;\n};\n\n\n// methods for arbitrarily manipulating timezone offset.\n// should clear time/zone ambiguity when called.\n$.each([\n\t'zone', // only in moment-pre-2.9. deprecated afterwards\n\t'utcOffset'\n], function(i, name) {\n\tif (oldMomentProto[name]) { // original method exists?\n\n\t\t// this method implicitly marks a zone (will probably get called upon .utc() and .local())\n\t\tnewMomentProto[name] = function(tzo) {\n\n\t\t\tif (tzo != null) { // setter\n\t\t\t\t// these assignments needs to happen before the original zone method is called.\n\t\t\t\t// I forget why, something to do with a browser crash.\n\t\t\t\tthis._ambigTime = false;\n\t\t\t\tthis._ambigZone = false;\n\t\t\t}\n\n\t\t\treturn oldMomentProto[name].apply(this, arguments);\n\t\t};\n\t}\n});\n\n\n// Formatting\n// -------------------------------------------------------------------------------------------------\n\nnewMomentProto.format = function() {\n\tif (this._fullCalendar && arguments[0]) { // an enhanced moment? and a format string provided?\n\t\treturn formatDate(this, arguments[0]); // our extended formatting\n\t}\n\tif (this._ambigTime) {\n\t\treturn oldMomentFormat(this, 'YYYY-MM-DD');\n\t}\n\tif (this._ambigZone) {\n\t\treturn oldMomentFormat(this, 'YYYY-MM-DD[T]HH:mm:ss');\n\t}\n\treturn oldMomentProto.format.apply(this, arguments);\n};\n\nnewMomentProto.toISOString = function() {\n\tif (this._ambigTime) {\n\t\treturn oldMomentFormat(this, 'YYYY-MM-DD');\n\t}\n\tif (this._ambigZone) {\n\t\treturn oldMomentFormat(this, 'YYYY-MM-DD[T]HH:mm:ss');\n\t}\n\treturn oldMomentProto.toISOString.apply(this, arguments);\n};\n\n\n// Querying\n// -------------------------------------------------------------------------------------------------\n\n// Is the moment within the specified range? `end` is exclusive.\n// FYI, this method is not a standard Moment method, so always do our enhanced logic.\nnewMomentProto.isWithin = function(start, end) {\n\tvar a = commonlyAmbiguate([ this, start, end ]);\n\treturn a[0] >= a[1] && a[0] < a[2];\n};\n\n// When isSame is called with units, timezone ambiguity is normalized before the comparison happens.\n// If no units specified, the two moments must be identically the same, with matching ambig flags.\nnewMomentProto.isSame = function(input, units) {\n\tvar a;\n\n\t// only do custom logic if this is an enhanced moment\n\tif (!this._fullCalendar) {\n\t\treturn oldMomentProto.isSame.apply(this, arguments);\n\t}\n\n\tif (units) {\n\t\ta = commonlyAmbiguate([ this, input ], true); // normalize timezones but don't erase times\n\t\treturn oldMomentProto.isSame.call(a[0], a[1], units);\n\t}\n\telse {\n\t\tinput = FC.moment.parseZone(input); // normalize input\n\t\treturn oldMomentProto.isSame.call(this, input) &&\n\t\t\tBoolean(this._ambigTime) === Boolean(input._ambigTime) &&\n\t\t\tBoolean(this._ambigZone) === Boolean(input._ambigZone);\n\t}\n};\n\n// Make these query methods work with ambiguous moments\n$.each([\n\t'isBefore',\n\t'isAfter'\n], function(i, methodName) {\n\tnewMomentProto[methodName] = function(input, units) {\n\t\tvar a;\n\n\t\t// only do custom logic if this is an enhanced moment\n\t\tif (!this._fullCalendar) {\n\t\t\treturn oldMomentProto[methodName].apply(this, arguments);\n\t\t}\n\n\t\ta = commonlyAmbiguate([ this, input ]);\n\t\treturn oldMomentProto[methodName].call(a[0], a[1], units);\n\t};\n});\n\n\n// Misc Internals\n// -------------------------------------------------------------------------------------------------\n\n// given an array of moment-like inputs, return a parallel array w/ moments similarly ambiguated.\n// for example, of one moment has ambig time, but not others, all moments will have their time stripped.\n// set `preserveTime` to `true` to keep times, but only normalize zone ambiguity.\n// returns the original moments if no modifications are necessary.\nfunction commonlyAmbiguate(inputs, preserveTime) {\n\tvar anyAmbigTime = false;\n\tvar anyAmbigZone = false;\n\tvar len = inputs.length;\n\tvar moms = [];\n\tvar i, mom;\n\n\t// parse inputs into real moments and query their ambig flags\n\tfor (i = 0; i < len; i++) {\n\t\tmom = inputs[i];\n\t\tif (!moment.isMoment(mom)) {\n\t\t\tmom = FC.moment.parseZone(mom);\n\t\t}\n\t\tanyAmbigTime = anyAmbigTime || mom._ambigTime;\n\t\tanyAmbigZone = anyAmbigZone || mom._ambigZone;\n\t\tmoms.push(mom);\n\t}\n\n\t// strip each moment down to lowest common ambiguity\n\t// use clones to avoid modifying the original moments\n\tfor (i = 0; i < len; i++) {\n\t\tmom = moms[i];\n\t\tif (!preserveTime && anyAmbigTime && !mom._ambigTime) {\n\t\t\tmoms[i] = mom.clone().stripTime();\n\t\t}\n\t\telse if (anyAmbigZone && !mom._ambigZone) {\n\t\t\tmoms[i] = mom.clone().stripZone();\n\t\t}\n\t}\n\n\treturn moms;\n}\n\n// Transfers all the flags related to ambiguous time/zone from the `src` moment to the `dest` moment\n// TODO: look into moment.momentProperties for this.\nfunction transferAmbigs(src, dest) {\n\tif (src._ambigTime) {\n\t\tdest._ambigTime = true;\n\t}\n\telse if (dest._ambigTime) {\n\t\tdest._ambigTime = false;\n\t}\n\n\tif (src._ambigZone) {\n\t\tdest._ambigZone = true;\n\t}\n\telse if (dest._ambigZone) {\n\t\tdest._ambigZone = false;\n\t}\n}\n\n\n// Sets the year/month/date/etc values of the moment from the given array.\n// Inefficient because it calls each individual setter.\nfunction setMomentValues(mom, a) {\n\tmom.year(a[0] || 0)\n\t\t.month(a[1] || 0)\n\t\t.date(a[2] || 0)\n\t\t.hours(a[3] || 0)\n\t\t.minutes(a[4] || 0)\n\t\t.seconds(a[5] || 0)\n\t\t.milliseconds(a[6] || 0);\n}\n\n// Can we set the moment's internal date directly?\nallowValueOptimization = '_d' in moment() && 'updateOffset' in moment;\n\n// Utility function. Accepts a moment and an array of the UTC year/month/date/etc values to set.\n// Assumes the given moment is already in UTC mode.\nsetUTCValues = allowValueOptimization ? function(mom, a) {\n\t// simlate what moment's accessors do\n\tmom._d.setTime(Date.UTC.apply(Date, a));\n\tmoment.updateOffset(mom, false); // keepTime=false\n} : setMomentValues;\n\n// Utility function. Accepts a moment and an array of the local year/month/date/etc values to set.\n// Assumes the given moment is already in local mode.\nsetLocalValues = allowValueOptimization ? function(mom, a) {\n\t// simlate what moment's accessors do\n\tmom._d.setTime(+new Date( // FYI, there is now way to apply an array of args to a constructor\n\t\ta[0] || 0,\n\t\ta[1] || 0,\n\t\ta[2] || 0,\n\t\ta[3] || 0,\n\t\ta[4] || 0,\n\t\ta[5] || 0,\n\t\ta[6] || 0\n\t));\n\tmoment.updateOffset(mom, false); // keepTime=false\n} : setMomentValues;\n\n;;\n\n// Single Date Formatting\n// -------------------------------------------------------------------------------------------------\n\n\n// call this if you want Moment's original format method to be used\nfunction oldMomentFormat(mom, formatStr) {\n\treturn oldMomentProto.format.call(mom, formatStr); // oldMomentProto defined in moment-ext.js\n}\n\n\n// Formats `date` with a Moment formatting string, but allow our non-zero areas and\n// additional token.\nfunction formatDate(date, formatStr) {\n\treturn formatDateWithChunks(date, getFormatStringChunks(formatStr));\n}\n\n\nfunction formatDateWithChunks(date, chunks) {\n\tvar s = '';\n\tvar i;\n\n\tfor (i=0; i<chunks.length; i++) {\n\t\ts += formatDateWithChunk(date, chunks[i]);\n\t}\n\n\treturn s;\n}\n\n\n// addition formatting tokens we want recognized\nvar tokenOverrides = {\n\tt: function(date) { // \"a\" or \"p\"\n\t\treturn oldMomentFormat(date, 'a').charAt(0);\n\t},\n\tT: function(date) { // \"A\" or \"P\"\n\t\treturn oldMomentFormat(date, 'A').charAt(0);\n\t}\n};\n\n\nfunction formatDateWithChunk(date, chunk) {\n\tvar token;\n\tvar maybeStr;\n\n\tif (typeof chunk === 'string') { // a literal string\n\t\treturn chunk;\n\t}\n\telse if ((token = chunk.token)) { // a token, like \"YYYY\"\n\t\tif (tokenOverrides[token]) {\n\t\t\treturn tokenOverrides[token](date); // use our custom token\n\t\t}\n\t\treturn oldMomentFormat(date, token);\n\t}\n\telse if (chunk.maybe) { // a grouping of other chunks that must be non-zero\n\t\tmaybeStr = formatDateWithChunks(date, chunk.maybe);\n\t\tif (maybeStr.match(/[1-9]/)) {\n\t\t\treturn maybeStr;\n\t\t}\n\t}\n\n\treturn '';\n}\n\n\n// Date Range Formatting\n// -------------------------------------------------------------------------------------------------\n// TODO: make it work with timezone offset\n\n// Using a formatting string meant for a single date, generate a range string, like\n// \"Sep 2 - 9 2013\", that intelligently inserts a separator where the dates differ.\n// If the dates are the same as far as the format string is concerned, just return a single\n// rendering of one date, without any separator.\nfunction formatRange(date1, date2, formatStr, separator, isRTL) {\n\tvar localeData;\n\n\tdate1 = FC.moment.parseZone(date1);\n\tdate2 = FC.moment.parseZone(date2);\n\n\tlocaleData = (date1.localeData || date1.lang).call(date1); // works with moment-pre-2.8\n\n\t// Expand localized format strings, like \"LL\" -> \"MMMM D YYYY\"\n\tformatStr = localeData.longDateFormat(formatStr) || formatStr;\n\t// BTW, this is not important for `formatDate` because it is impossible to put custom tokens\n\t// or non-zero areas in Moment's localized format strings.\n\n\tseparator = separator || ' - ';\n\n\treturn formatRangeWithChunks(\n\t\tdate1,\n\t\tdate2,\n\t\tgetFormatStringChunks(formatStr),\n\t\tseparator,\n\t\tisRTL\n\t);\n}\nFC.formatRange = formatRange; // expose\n\n\nfunction formatRangeWithChunks(date1, date2, chunks, separator, isRTL) {\n\tvar unzonedDate1 = date1.clone().stripZone(); // for formatSimilarChunk\n\tvar unzonedDate2 = date2.clone().stripZone(); // \"\n\tvar chunkStr; // the rendering of the chunk\n\tvar leftI;\n\tvar leftStr = '';\n\tvar rightI;\n\tvar rightStr = '';\n\tvar middleI;\n\tvar middleStr1 = '';\n\tvar middleStr2 = '';\n\tvar middleStr = '';\n\n\t// Start at the leftmost side of the formatting string and continue until you hit a token\n\t// that is not the same between dates.\n\tfor (leftI=0; leftI<chunks.length; leftI++) {\n\t\tchunkStr = formatSimilarChunk(date1, date2, unzonedDate1, unzonedDate2, chunks[leftI]);\n\t\tif (chunkStr === false) {\n\t\t\tbreak;\n\t\t}\n\t\tleftStr += chunkStr;\n\t}\n\n\t// Similarly, start at the rightmost side of the formatting string and move left\n\tfor (rightI=chunks.length-1; rightI>leftI; rightI--) {\n\t\tchunkStr = formatSimilarChunk(date1, date2, unzonedDate1, unzonedDate2,  chunks[rightI]);\n\t\tif (chunkStr === false) {\n\t\t\tbreak;\n\t\t}\n\t\trightStr = chunkStr + rightStr;\n\t}\n\n\t// The area in the middle is different for both of the dates.\n\t// Collect them distinctly so we can jam them together later.\n\tfor (middleI=leftI; middleI<=rightI; middleI++) {\n\t\tmiddleStr1 += formatDateWithChunk(date1, chunks[middleI]);\n\t\tmiddleStr2 += formatDateWithChunk(date2, chunks[middleI]);\n\t}\n\n\tif (middleStr1 || middleStr2) {\n\t\tif (isRTL) {\n\t\t\tmiddleStr = middleStr2 + separator + middleStr1;\n\t\t}\n\t\telse {\n\t\t\tmiddleStr = middleStr1 + separator + middleStr2;\n\t\t}\n\t}\n\n\treturn leftStr + middleStr + rightStr;\n}\n\n\nvar similarUnitMap = {\n\tY: 'year',\n\tM: 'month',\n\tD: 'day', // day of month\n\td: 'day', // day of week\n\t// prevents a separator between anything time-related...\n\tA: 'second', // AM/PM\n\ta: 'second', // am/pm\n\tT: 'second', // A/P\n\tt: 'second', // a/p\n\tH: 'second', // hour (24)\n\th: 'second', // hour (12)\n\tm: 'second', // minute\n\ts: 'second' // second\n};\n// TODO: week maybe?\n\n\n// Given a formatting chunk, and given that both dates are similar in the regard the\n// formatting chunk is concerned, format date1 against `chunk`. Otherwise, return `false`.\nfunction formatSimilarChunk(date1, date2, unzonedDate1, unzonedDate2, chunk) {\n\tvar token;\n\tvar unit;\n\n\tif (typeof chunk === 'string') { // a literal string\n\t\treturn chunk;\n\t}\n\telse if ((token = chunk.token)) {\n\t\tunit = similarUnitMap[token.charAt(0)];\n\n\t\t// are the dates the same for this unit of measurement?\n\t\t// use the unzoned dates for this calculation because unreliable when near DST (bug #2396)\n\t\tif (unit && unzonedDate1.isSame(unzonedDate2, unit)) {\n\t\t\treturn oldMomentFormat(date1, token); // would be the same if we used `date2`\n\t\t\t// BTW, don't support custom tokens\n\t\t}\n\t}\n\n\treturn false; // the chunk is NOT the same for the two dates\n\t// BTW, don't support splitting on non-zero areas\n}\n\n\n// Chunking Utils\n// -------------------------------------------------------------------------------------------------\n\n\nvar formatStringChunkCache = {};\n\n\nfunction getFormatStringChunks(formatStr) {\n\tif (formatStr in formatStringChunkCache) {\n\t\treturn formatStringChunkCache[formatStr];\n\t}\n\treturn (formatStringChunkCache[formatStr] = chunkFormatString(formatStr));\n}\n\n\n// Break the formatting string into an array of chunks\nfunction chunkFormatString(formatStr) {\n\tvar chunks = [];\n\tvar chunker = /\\[([^\\]]*)\\]|\\(([^\\)]*)\\)|(LTS|LT|(\\w)\\4*o?)|([^\\w\\[\\(]+)/g; // TODO: more descrimination\n\tvar match;\n\n\twhile ((match = chunker.exec(formatStr))) {\n\t\tif (match[1]) { // a literal string inside [ ... ]\n\t\t\tchunks.push(match[1]);\n\t\t}\n\t\telse if (match[2]) { // non-zero formatting inside ( ... )\n\t\t\tchunks.push({ maybe: chunkFormatString(match[2]) });\n\t\t}\n\t\telse if (match[3]) { // a formatting token\n\t\t\tchunks.push({ token: match[3] });\n\t\t}\n\t\telse if (match[5]) { // an unenclosed literal string\n\t\t\tchunks.push(match[5]);\n\t\t}\n\t}\n\n\treturn chunks;\n}\n\n;;\n\nFC.Class = Class; // export\n\n// Class that all other classes will inherit from\nfunction Class() { }\n\n\n// Called on a class to create a subclass.\n// Last argument contains instance methods. Any argument before the last are considered mixins.\nClass.extend = function() {\n\tvar len = arguments.length;\n\tvar i;\n\tvar members;\n\n\tfor (i = 0; i < len; i++) {\n\t\tmembers = arguments[i];\n\t\tif (i < len - 1) { // not the last argument?\n\t\t\tmixIntoClass(this, members);\n\t\t}\n\t}\n\n\treturn extendClass(this, members || {}); // members will be undefined if no arguments\n};\n\n\n// Adds new member variables/methods to the class's prototype.\n// Can be called with another class, or a plain object hash containing new members.\nClass.mixin = function(members) {\n\tmixIntoClass(this, members);\n};\n\n\nfunction extendClass(superClass, members) {\n\tvar subClass;\n\n\t// ensure a constructor for the subclass, forwarding all arguments to the super-constructor if it doesn't exist\n\tif (hasOwnProp(members, 'constructor')) {\n\t\tsubClass = members.constructor;\n\t}\n\tif (typeof subClass !== 'function') {\n\t\tsubClass = members.constructor = function() {\n\t\t\tsuperClass.apply(this, arguments);\n\t\t};\n\t}\n\n\t// build the base prototype for the subclass, which is an new object chained to the superclass's prototype\n\tsubClass.prototype = createObject(superClass.prototype);\n\n\t// copy each member variable/method onto the the subclass's prototype\n\tcopyOwnProps(members, subClass.prototype);\n\tcopyNativeMethods(members, subClass.prototype); // hack for IE8\n\n\t// copy over all class variables/methods to the subclass, such as `extend` and `mixin`\n\tcopyOwnProps(superClass, subClass);\n\n\treturn subClass;\n}\n\n\nfunction mixIntoClass(theClass, members) {\n\tcopyOwnProps(members.prototype || members, theClass.prototype); // TODO: copyNativeMethods?\n}\n;;\n\nvar Emitter = FC.Emitter = Class.extend({\n\n\tcallbackHash: null,\n\n\n\ton: function(name, callback) {\n\t\tthis.getCallbacks(name).add(callback);\n\t\treturn this; // for chaining\n\t},\n\n\n\toff: function(name, callback) {\n\t\tthis.getCallbacks(name).remove(callback);\n\t\treturn this; // for chaining\n\t},\n\n\n\ttrigger: function(name) { // args...\n\t\tvar args = Array.prototype.slice.call(arguments, 1);\n\n\t\tthis.triggerWith(name, this, args);\n\n\t\treturn this; // for chaining\n\t},\n\n\n\ttriggerWith: function(name, context, args) {\n\t\tvar callbacks = this.getCallbacks(name);\n\n\t\tcallbacks.fireWith(context, args);\n\n\t\treturn this; // for chaining\n\t},\n\n\n\tgetCallbacks: function(name) {\n\t\tvar callbacks;\n\n\t\tif (!this.callbackHash) {\n\t\t\tthis.callbackHash = {};\n\t\t}\n\n\t\tcallbacks = this.callbackHash[name];\n\t\tif (!callbacks) {\n\t\t\tcallbacks = this.callbackHash[name] = $.Callbacks();\n\t\t}\n\n\t\treturn callbacks;\n\t}\n\n});\n;;\n\n/* A rectangular panel that is absolutely positioned over other content\n------------------------------------------------------------------------------------------------------------------------\nOptions:\n\t- className (string)\n\t- content (HTML string or jQuery element set)\n\t- parentEl\n\t- top\n\t- left\n\t- right (the x coord of where the right edge should be. not a \"CSS\" right)\n\t- autoHide (boolean)\n\t- show (callback)\n\t- hide (callback)\n*/\n\nvar Popover = Class.extend({\n\n\tisHidden: true,\n\toptions: null,\n\tel: null, // the container element for the popover. generated by this object\n\tdocumentMousedownProxy: null, // document mousedown handler bound to `this`\n\tmargin: 10, // the space required between the popover and the edges of the scroll container\n\n\n\tconstructor: function(options) {\n\t\tthis.options = options || {};\n\t},\n\n\n\t// Shows the popover on the specified position. Renders it if not already\n\tshow: function() {\n\t\tif (this.isHidden) {\n\t\t\tif (!this.el) {\n\t\t\t\tthis.render();\n\t\t\t}\n\t\t\tthis.el.show();\n\t\t\tthis.position();\n\t\t\tthis.isHidden = false;\n\t\t\tthis.trigger('show');\n\t\t}\n\t},\n\n\n\t// Hides the popover, through CSS, but does not remove it from the DOM\n\thide: function() {\n\t\tif (!this.isHidden) {\n\t\t\tthis.el.hide();\n\t\t\tthis.isHidden = true;\n\t\t\tthis.trigger('hide');\n\t\t}\n\t},\n\n\n\t// Creates `this.el` and renders content inside of it\n\trender: function() {\n\t\tvar _this = this;\n\t\tvar options = this.options;\n\n\t\tthis.el = $('<div class=\"fc-popover\"/>')\n\t\t\t.addClass(options.className || '')\n\t\t\t.css({\n\t\t\t\t// position initially to the top left to avoid creating scrollbars\n\t\t\t\ttop: 0,\n\t\t\t\tleft: 0\n\t\t\t})\n\t\t\t.append(options.content)\n\t\t\t.appendTo(options.parentEl);\n\n\t\t// when a click happens on anything inside with a 'fc-close' className, hide the popover\n\t\tthis.el.on('click', '.fc-close', function() {\n\t\t\t_this.hide();\n\t\t});\n\n\t\tif (options.autoHide) {\n\t\t\t$(document).on('mousedown', this.documentMousedownProxy = proxy(this, 'documentMousedown'));\n\t\t}\n\t},\n\n\n\t// Triggered when the user clicks *anywhere* in the document, for the autoHide feature\n\tdocumentMousedown: function(ev) {\n\t\t// only hide the popover if the click happened outside the popover\n\t\tif (this.el && !$(ev.target).closest(this.el).length) {\n\t\t\tthis.hide();\n\t\t}\n\t},\n\n\n\t// Hides and unregisters any handlers\n\tremoveElement: function() {\n\t\tthis.hide();\n\n\t\tif (this.el) {\n\t\t\tthis.el.remove();\n\t\t\tthis.el = null;\n\t\t}\n\n\t\t$(document).off('mousedown', this.documentMousedownProxy);\n\t},\n\n\n\t// Positions the popover optimally, using the top/left/right options\n\tposition: function() {\n\t\tvar options = this.options;\n\t\tvar origin = this.el.offsetParent().offset();\n\t\tvar width = this.el.outerWidth();\n\t\tvar height = this.el.outerHeight();\n\t\tvar windowEl = $(window);\n\t\tvar viewportEl = getScrollParent(this.el);\n\t\tvar viewportTop;\n\t\tvar viewportLeft;\n\t\tvar viewportOffset;\n\t\tvar top; // the \"position\" (not \"offset\") values for the popover\n\t\tvar left; //\n\n\t\t// compute top and left\n\t\ttop = options.top || 0;\n\t\tif (options.left !== undefined) {\n\t\t\tleft = options.left;\n\t\t}\n\t\telse if (options.right !== undefined) {\n\t\t\tleft = options.right - width; // derive the left value from the right value\n\t\t}\n\t\telse {\n\t\t\tleft = 0;\n\t\t}\n\n\t\tif (viewportEl.is(window) || viewportEl.is(document)) { // normalize getScrollParent's result\n\t\t\tviewportEl = windowEl;\n\t\t\tviewportTop = 0; // the window is always at the top left\n\t\t\tviewportLeft = 0; // (and .offset() won't work if called here)\n\t\t}\n\t\telse {\n\t\t\tviewportOffset = viewportEl.offset();\n\t\t\tviewportTop = viewportOffset.top;\n\t\t\tviewportLeft = viewportOffset.left;\n\t\t}\n\n\t\t// if the window is scrolled, it causes the visible area to be further down\n\t\tviewportTop += windowEl.scrollTop();\n\t\tviewportLeft += windowEl.scrollLeft();\n\n\t\t// constrain to the view port. if constrained by two edges, give precedence to top/left\n\t\tif (options.viewportConstrain !== false) {\n\t\t\ttop = Math.min(top, viewportTop + viewportEl.outerHeight() - height - this.margin);\n\t\t\ttop = Math.max(top, viewportTop + this.margin);\n\t\t\tleft = Math.min(left, viewportLeft + viewportEl.outerWidth() - width - this.margin);\n\t\t\tleft = Math.max(left, viewportLeft + this.margin);\n\t\t}\n\n\t\tthis.el.css({\n\t\t\ttop: top - origin.top,\n\t\t\tleft: left - origin.left\n\t\t});\n\t},\n\n\n\t// Triggers a callback. Calls a function in the option hash of the same name.\n\t// Arguments beyond the first `name` are forwarded on.\n\t// TODO: better code reuse for this. Repeat code\n\ttrigger: function(name) {\n\t\tif (this.options[name]) {\n\t\t\tthis.options[name].apply(this, Array.prototype.slice.call(arguments, 1));\n\t\t}\n\t}\n\n});\n\n;;\n\n/*\nA cache for the left/right/top/bottom/width/height values for one or more elements.\nWorks with both offset (from topleft document) and position (from offsetParent).\n\noptions:\n- els\n- isHorizontal\n- isVertical\n*/\nvar CoordCache = FC.CoordCache = Class.extend({\n\n\tels: null, // jQuery set (assumed to be siblings)\n\tforcedOffsetParentEl: null, // options can override the natural offsetParent\n\torigin: null, // {left,top} position of offsetParent of els\n\tboundingRect: null, // constrain cordinates to this rectangle. {left,right,top,bottom} or null\n\tisHorizontal: false, // whether to query for left/right/width\n\tisVertical: false, // whether to query for top/bottom/height\n\n\t// arrays of coordinates (offsets from topleft of document)\n\tlefts: null,\n\trights: null,\n\ttops: null,\n\tbottoms: null,\n\n\n\tconstructor: function(options) {\n\t\tthis.els = $(options.els);\n\t\tthis.isHorizontal = options.isHorizontal;\n\t\tthis.isVertical = options.isVertical;\n\t\tthis.forcedOffsetParentEl = options.offsetParent ? $(options.offsetParent) : null;\n\t},\n\n\n\t// Queries the els for coordinates and stores them.\n\t// Call this method before using and of the get* methods below.\n\tbuild: function() {\n\t\tvar offsetParentEl = this.forcedOffsetParentEl || this.els.eq(0).offsetParent();\n\n\t\tthis.origin = offsetParentEl.offset();\n\t\tthis.boundingRect = this.queryBoundingRect();\n\n\t\tif (this.isHorizontal) {\n\t\t\tthis.buildElHorizontals();\n\t\t}\n\t\tif (this.isVertical) {\n\t\t\tthis.buildElVerticals();\n\t\t}\n\t},\n\n\n\t// Destroys all internal data about coordinates, freeing memory\n\tclear: function() {\n\t\tthis.origin = null;\n\t\tthis.boundingRect = null;\n\t\tthis.lefts = null;\n\t\tthis.rights = null;\n\t\tthis.tops = null;\n\t\tthis.bottoms = null;\n\t},\n\n\n\t// Compute and return what the elements' bounding rectangle is, from the user's perspective.\n\t// Right now, only returns a rectangle if constrained by an overflow:scroll element.\n\tqueryBoundingRect: function() {\n\t\tvar scrollParentEl = getScrollParent(this.els.eq(0));\n\n\t\tif (!scrollParentEl.is(document)) {\n\t\t\treturn getClientRect(scrollParentEl);\n\t\t}\n\t},\n\n\n\t// Populates the left/right internal coordinate arrays\n\tbuildElHorizontals: function() {\n\t\tvar lefts = [];\n\t\tvar rights = [];\n\n\t\tthis.els.each(function(i, node) {\n\t\t\tvar el = $(node);\n\t\t\tvar left = el.offset().left;\n\t\t\tvar width = el.outerWidth();\n\n\t\t\tlefts.push(left);\n\t\t\trights.push(left + width);\n\t\t});\n\n\t\tthis.lefts = lefts;\n\t\tthis.rights = rights;\n\t},\n\n\n\t// Populates the top/bottom internal coordinate arrays\n\tbuildElVerticals: function() {\n\t\tvar tops = [];\n\t\tvar bottoms = [];\n\n\t\tthis.els.each(function(i, node) {\n\t\t\tvar el = $(node);\n\t\t\tvar top = el.offset().top;\n\t\t\tvar height = el.outerHeight();\n\n\t\t\ttops.push(top);\n\t\t\tbottoms.push(top + height);\n\t\t});\n\n\t\tthis.tops = tops;\n\t\tthis.bottoms = bottoms;\n\t},\n\n\n\t// Given a left offset (from document left), returns the index of the el that it horizontally intersects.\n\t// If no intersection is made, or outside of the boundingRect, returns undefined.\n\tgetHorizontalIndex: function(leftOffset) {\n\t\tvar boundingRect = this.boundingRect;\n\t\tvar lefts = this.lefts;\n\t\tvar rights = this.rights;\n\t\tvar len = lefts.length;\n\t\tvar i;\n\n\t\tif (!boundingRect || (leftOffset >= boundingRect.left && leftOffset < boundingRect.right)) {\n\t\t\tfor (i = 0; i < len; i++) {\n\t\t\t\tif (leftOffset >= lefts[i] && leftOffset < rights[i]) {\n\t\t\t\t\treturn i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\n\t// Given a top offset (from document top), returns the index of the el that it vertically intersects.\n\t// If no intersection is made, or outside of the boundingRect, returns undefined.\n\tgetVerticalIndex: function(topOffset) {\n\t\tvar boundingRect = this.boundingRect;\n\t\tvar tops = this.tops;\n\t\tvar bottoms = this.bottoms;\n\t\tvar len = tops.length;\n\t\tvar i;\n\n\t\tif (!boundingRect || (topOffset >= boundingRect.top && topOffset < boundingRect.bottom)) {\n\t\t\tfor (i = 0; i < len; i++) {\n\t\t\t\tif (topOffset >= tops[i] && topOffset < bottoms[i]) {\n\t\t\t\t\treturn i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\n\t// Gets the left offset (from document left) of the element at the given index\n\tgetLeftOffset: function(leftIndex) {\n\t\treturn this.lefts[leftIndex];\n\t},\n\n\n\t// Gets the left position (from offsetParent left) of the element at the given index\n\tgetLeftPosition: function(leftIndex) {\n\t\treturn this.lefts[leftIndex] - this.origin.left;\n\t},\n\n\n\t// Gets the right offset (from document left) of the element at the given index.\n\t// This value is NOT relative to the document's right edge, like the CSS concept of \"right\" would be.\n\tgetRightOffset: function(leftIndex) {\n\t\treturn this.rights[leftIndex];\n\t},\n\n\n\t// Gets the right position (from offsetParent left) of the element at the given index.\n\t// This value is NOT relative to the offsetParent's right edge, like the CSS concept of \"right\" would be.\n\tgetRightPosition: function(leftIndex) {\n\t\treturn this.rights[leftIndex] - this.origin.left;\n\t},\n\n\n\t// Gets the width of the element at the given index\n\tgetWidth: function(leftIndex) {\n\t\treturn this.rights[leftIndex] - this.lefts[leftIndex];\n\t},\n\n\n\t// Gets the top offset (from document top) of the element at the given index\n\tgetTopOffset: function(topIndex) {\n\t\treturn this.tops[topIndex];\n\t},\n\n\n\t// Gets the top position (from offsetParent top) of the element at the given position\n\tgetTopPosition: function(topIndex) {\n\t\treturn this.tops[topIndex] - this.origin.top;\n\t},\n\n\t// Gets the bottom offset (from the document top) of the element at the given index.\n\t// This value is NOT relative to the offsetParent's bottom edge, like the CSS concept of \"bottom\" would be.\n\tgetBottomOffset: function(topIndex) {\n\t\treturn this.bottoms[topIndex];\n\t},\n\n\n\t// Gets the bottom position (from the offsetParent top) of the element at the given index.\n\t// This value is NOT relative to the offsetParent's bottom edge, like the CSS concept of \"bottom\" would be.\n\tgetBottomPosition: function(topIndex) {\n\t\treturn this.bottoms[topIndex] - this.origin.top;\n\t},\n\n\n\t// Gets the height of the element at the given index\n\tgetHeight: function(topIndex) {\n\t\treturn this.bottoms[topIndex] - this.tops[topIndex];\n\t}\n\n});\n\n;;\n\n/* Tracks a drag's mouse movement, firing various handlers\n----------------------------------------------------------------------------------------------------------------------*/\n// TODO: use Emitter\n\nvar DragListener = FC.DragListener = Class.extend({\n\n\toptions: null,\n\n\tisListening: false,\n\tisDragging: false,\n\n\t// coordinates of the initial mousedown\n\toriginX: null,\n\toriginY: null,\n\n\t// handler attached to the document, bound to the DragListener's `this`\n\tmousemoveProxy: null,\n\tmouseupProxy: null,\n\n\t// for IE8 bug-fighting behavior, for now\n\tsubjectEl: null, // the element being draged. optional\n\tsubjectHref: null,\n\n\tscrollEl: null,\n\tscrollBounds: null, // { top, bottom, left, right }\n\tscrollTopVel: null, // pixels per second\n\tscrollLeftVel: null, // pixels per second\n\tscrollIntervalId: null, // ID of setTimeout for scrolling animation loop\n\tscrollHandlerProxy: null, // this-scoped function for handling when scrollEl is scrolled\n\n\tscrollSensitivity: 30, // pixels from edge for scrolling to start\n\tscrollSpeed: 200, // pixels per second, at maximum speed\n\tscrollIntervalMs: 50, // millisecond wait between scroll increment\n\n\n\tconstructor: function(options) {\n\t\toptions = options || {};\n\t\tthis.options = options;\n\t\tthis.subjectEl = options.subjectEl;\n\t},\n\n\n\t// Call this when the user does a mousedown. Will probably lead to startListening\n\tmousedown: function(ev) {\n\t\tif (isPrimaryMouseButton(ev)) {\n\n\t\t\tev.preventDefault(); // prevents native selection in most browsers\n\n\t\t\tthis.startListening(ev);\n\n\t\t\t// start the drag immediately if there is no minimum distance for a drag start\n\t\t\tif (!this.options.distance) {\n\t\t\t\tthis.startDrag(ev);\n\t\t\t}\n\t\t}\n\t},\n\n\n\t// Call this to start tracking mouse movements\n\tstartListening: function(ev) {\n\t\tvar scrollParent;\n\n\t\tif (!this.isListening) {\n\n\t\t\t// grab scroll container and attach handler\n\t\t\tif (ev && this.options.scroll) {\n\t\t\t\tscrollParent = getScrollParent($(ev.target));\n\t\t\t\tif (!scrollParent.is(window) && !scrollParent.is(document)) {\n\t\t\t\t\tthis.scrollEl = scrollParent;\n\n\t\t\t\t\t// scope to `this`, and use `debounce` to make sure rapid calls don't happen\n\t\t\t\t\tthis.scrollHandlerProxy = debounce(proxy(this, 'scrollHandler'), 100);\n\t\t\t\t\tthis.scrollEl.on('scroll', this.scrollHandlerProxy);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$(document)\n\t\t\t\t.on('mousemove', this.mousemoveProxy = proxy(this, 'mousemove'))\n\t\t\t\t.on('mouseup', this.mouseupProxy = proxy(this, 'mouseup'))\n\t\t\t\t.on('selectstart', this.preventDefault); // prevents native selection in IE<=8\n\n\t\t\tif (ev) {\n\t\t\t\tthis.originX = ev.pageX;\n\t\t\t\tthis.originY = ev.pageY;\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// if no starting information was given, origin will be the topleft corner of the screen.\n\t\t\t\t// if so, dx/dy in the future will be the absolute coordinates.\n\t\t\t\tthis.originX = 0;\n\t\t\t\tthis.originY = 0;\n\t\t\t}\n\n\t\t\tthis.isListening = true;\n\t\t\tthis.listenStart(ev);\n\t\t}\n\t},\n\n\n\t// Called when drag listening has started (but a real drag has not necessarily began)\n\tlistenStart: function(ev) {\n\t\tthis.trigger('listenStart', ev);\n\t},\n\n\n\t// Called when the user moves the mouse\n\tmousemove: function(ev) {\n\t\tvar dx = ev.pageX - this.originX;\n\t\tvar dy = ev.pageY - this.originY;\n\t\tvar minDistance;\n\t\tvar distanceSq; // current distance from the origin, squared\n\n\t\tif (!this.isDragging) { // if not already dragging...\n\t\t\t// then start the drag if the minimum distance criteria is met\n\t\t\tminDistance = this.options.distance || 1;\n\t\t\tdistanceSq = dx * dx + dy * dy;\n\t\t\tif (distanceSq >= minDistance * minDistance) { // use pythagorean theorem\n\t\t\t\tthis.startDrag(ev);\n\t\t\t}\n\t\t}\n\n\t\tif (this.isDragging) {\n\t\t\tthis.drag(dx, dy, ev); // report a drag, even if this mousemove initiated the drag\n\t\t}\n\t},\n\n\n\t// Call this to initiate a legitimate drag.\n\t// This function is called internally from this class, but can also be called explicitly from outside\n\tstartDrag: function(ev) {\n\n\t\tif (!this.isListening) { // startDrag must have manually initiated\n\t\t\tthis.startListening();\n\t\t}\n\n\t\tif (!this.isDragging) {\n\t\t\tthis.isDragging = true;\n\t\t\tthis.dragStart(ev);\n\t\t}\n\t},\n\n\n\t// Called when the actual drag has started (went beyond minDistance)\n\tdragStart: function(ev) {\n\t\tvar subjectEl = this.subjectEl;\n\n\t\tthis.trigger('dragStart', ev);\n\n\t\t// remove a mousedown'd <a>'s href so it is not visited (IE8 bug)\n\t\tif ((this.subjectHref = subjectEl ? subjectEl.attr('href') : null)) {\n\t\t\tsubjectEl.removeAttr('href');\n\t\t}\n\t},\n\n\n\t// Called while the mouse is being moved and when we know a legitimate drag is taking place\n\tdrag: function(dx, dy, ev) {\n\t\tthis.trigger('drag', dx, dy, ev);\n\t\tthis.updateScroll(ev); // will possibly cause scrolling\n\t},\n\n\n\t// Called when the user does a mouseup\n\tmouseup: function(ev) {\n\t\tthis.stopListening(ev);\n\t},\n\n\n\t// Called when the drag is over. Will not cause listening to stop however.\n\t// A concluding 'cellOut' event will NOT be triggered.\n\tstopDrag: function(ev) {\n\t\tif (this.isDragging) {\n\t\t\tthis.stopScrolling();\n\t\t\tthis.dragStop(ev);\n\t\t\tthis.isDragging = false;\n\t\t}\n\t},\n\n\n\t// Called when dragging has been stopped\n\tdragStop: function(ev) {\n\t\tvar _this = this;\n\n\t\tthis.trigger('dragStop', ev);\n\n\t\t// restore a mousedown'd <a>'s href (for IE8 bug)\n\t\tsetTimeout(function() { // must be outside of the click's execution\n\t\t\tif (_this.subjectHref) {\n\t\t\t\t_this.subjectEl.attr('href', _this.subjectHref);\n\t\t\t}\n\t\t}, 0);\n\t},\n\n\n\t// Call this to stop listening to the user's mouse events\n\tstopListening: function(ev) {\n\t\tthis.stopDrag(ev); // if there's a current drag, kill it\n\n\t\tif (this.isListening) {\n\n\t\t\t// remove the scroll handler if there is a scrollEl\n\t\t\tif (this.scrollEl) {\n\t\t\t\tthis.scrollEl.off('scroll', this.scrollHandlerProxy);\n\t\t\t\tthis.scrollHandlerProxy = null;\n\t\t\t}\n\n\t\t\t$(document)\n\t\t\t\t.off('mousemove', this.mousemoveProxy)\n\t\t\t\t.off('mouseup', this.mouseupProxy)\n\t\t\t\t.off('selectstart', this.preventDefault);\n\n\t\t\tthis.mousemoveProxy = null;\n\t\t\tthis.mouseupProxy = null;\n\n\t\t\tthis.isListening = false;\n\t\t\tthis.listenStop(ev);\n\t\t}\n\t},\n\n\n\t// Called when drag listening has stopped\n\tlistenStop: function(ev) {\n\t\tthis.trigger('listenStop', ev);\n\t},\n\n\n\t// Triggers a callback. Calls a function in the option hash of the same name.\n\t// Arguments beyond the first `name` are forwarded on.\n\ttrigger: function(name) {\n\t\tif (this.options[name]) {\n\t\t\tthis.options[name].apply(this, Array.prototype.slice.call(arguments, 1));\n\t\t}\n\t},\n\n\n\t// Stops a given mouse event from doing it's native browser action. In our case, text selection.\n\tpreventDefault: function(ev) {\n\t\tev.preventDefault();\n\t},\n\n\n\t/* Scrolling\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Computes and stores the bounding rectangle of scrollEl\n\tcomputeScrollBounds: function() {\n\t\tvar el = this.scrollEl;\n\n\t\tthis.scrollBounds = el ? getOuterRect(el) : null;\n\t\t\t// TODO: use getClientRect in future. but prevents auto scrolling when on top of scrollbars\n\t},\n\n\n\t// Called when the dragging is in progress and scrolling should be updated\n\tupdateScroll: function(ev) {\n\t\tvar sensitivity = this.scrollSensitivity;\n\t\tvar bounds = this.scrollBounds;\n\t\tvar topCloseness, bottomCloseness;\n\t\tvar leftCloseness, rightCloseness;\n\t\tvar topVel = 0;\n\t\tvar leftVel = 0;\n\n\t\tif (bounds) { // only scroll if scrollEl exists\n\n\t\t\t// compute closeness to edges. valid range is from 0.0 - 1.0\n\t\t\ttopCloseness = (sensitivity - (ev.pageY - bounds.top)) / sensitivity;\n\t\t\tbottomCloseness = (sensitivity - (bounds.bottom - ev.pageY)) / sensitivity;\n\t\t\tleftCloseness = (sensitivity - (ev.pageX - bounds.left)) / sensitivity;\n\t\t\trightCloseness = (sensitivity - (bounds.right - ev.pageX)) / sensitivity;\n\n\t\t\t// translate vertical closeness into velocity.\n\t\t\t// mouse must be completely in bounds for velocity to happen.\n\t\t\tif (topCloseness >= 0 && topCloseness <= 1) {\n\t\t\t\ttopVel = topCloseness * this.scrollSpeed * -1; // negative. for scrolling up\n\t\t\t}\n\t\t\telse if (bottomCloseness >= 0 && bottomCloseness <= 1) {\n\t\t\t\ttopVel = bottomCloseness * this.scrollSpeed;\n\t\t\t}\n\n\t\t\t// translate horizontal closeness into velocity\n\t\t\tif (leftCloseness >= 0 && leftCloseness <= 1) {\n\t\t\t\tleftVel = leftCloseness * this.scrollSpeed * -1; // negative. for scrolling left\n\t\t\t}\n\t\t\telse if (rightCloseness >= 0 && rightCloseness <= 1) {\n\t\t\t\tleftVel = rightCloseness * this.scrollSpeed;\n\t\t\t}\n\t\t}\n\n\t\tthis.setScrollVel(topVel, leftVel);\n\t},\n\n\n\t// Sets the speed-of-scrolling for the scrollEl\n\tsetScrollVel: function(topVel, leftVel) {\n\n\t\tthis.scrollTopVel = topVel;\n\t\tthis.scrollLeftVel = leftVel;\n\n\t\tthis.constrainScrollVel(); // massages into realistic values\n\n\t\t// if there is non-zero velocity, and an animation loop hasn't already started, then START\n\t\tif ((this.scrollTopVel || this.scrollLeftVel) && !this.scrollIntervalId) {\n\t\t\tthis.scrollIntervalId = setInterval(\n\t\t\t\tproxy(this, 'scrollIntervalFunc'), // scope to `this`\n\t\t\t\tthis.scrollIntervalMs\n\t\t\t);\n\t\t}\n\t},\n\n\n\t// Forces scrollTopVel and scrollLeftVel to be zero if scrolling has already gone all the way\n\tconstrainScrollVel: function() {\n\t\tvar el = this.scrollEl;\n\n\t\tif (this.scrollTopVel < 0) { // scrolling up?\n\t\t\tif (el.scrollTop() <= 0) { // already scrolled all the way up?\n\t\t\t\tthis.scrollTopVel = 0;\n\t\t\t}\n\t\t}\n\t\telse if (this.scrollTopVel > 0) { // scrolling down?\n\t\t\tif (el.scrollTop() + el[0].clientHeight >= el[0].scrollHeight) { // already scrolled all the way down?\n\t\t\t\tthis.scrollTopVel = 0;\n\t\t\t}\n\t\t}\n\n\t\tif (this.scrollLeftVel < 0) { // scrolling left?\n\t\t\tif (el.scrollLeft() <= 0) { // already scrolled all the left?\n\t\t\t\tthis.scrollLeftVel = 0;\n\t\t\t}\n\t\t}\n\t\telse if (this.scrollLeftVel > 0) { // scrolling right?\n\t\t\tif (el.scrollLeft() + el[0].clientWidth >= el[0].scrollWidth) { // already scrolled all the way right?\n\t\t\t\tthis.scrollLeftVel = 0;\n\t\t\t}\n\t\t}\n\t},\n\n\n\t// This function gets called during every iteration of the scrolling animation loop\n\tscrollIntervalFunc: function() {\n\t\tvar el = this.scrollEl;\n\t\tvar frac = this.scrollIntervalMs / 1000; // considering animation frequency, what the vel should be mult'd by\n\n\t\t// change the value of scrollEl's scroll\n\t\tif (this.scrollTopVel) {\n\t\t\tel.scrollTop(el.scrollTop() + this.scrollTopVel * frac);\n\t\t}\n\t\tif (this.scrollLeftVel) {\n\t\t\tel.scrollLeft(el.scrollLeft() + this.scrollLeftVel * frac);\n\t\t}\n\n\t\tthis.constrainScrollVel(); // since the scroll values changed, recompute the velocities\n\n\t\t// if scrolled all the way, which causes the vels to be zero, stop the animation loop\n\t\tif (!this.scrollTopVel && !this.scrollLeftVel) {\n\t\t\tthis.stopScrolling();\n\t\t}\n\t},\n\n\n\t// Kills any existing scrolling animation loop\n\tstopScrolling: function() {\n\t\tif (this.scrollIntervalId) {\n\t\t\tclearInterval(this.scrollIntervalId);\n\t\t\tthis.scrollIntervalId = null;\n\n\t\t\t// when all done with scrolling, recompute positions since they probably changed\n\t\t\tthis.scrollStop();\n\t\t}\n\t},\n\n\n\t// Get called when the scrollEl is scrolled (NOTE: this is delayed via debounce)\n\tscrollHandler: function() {\n\t\t// recompute all coordinates, but *only* if this is *not* part of our scrolling animation\n\t\tif (!this.scrollIntervalId) {\n\t\t\tthis.scrollStop();\n\t\t}\n\t},\n\n\n\t// Called when scrolling has stopped, whether through auto scroll, or the user scrolling\n\tscrollStop: function() {\n\t}\n\n});\n\n;;\n\n/* Tracks mouse movements over a component and raises events about which hit the mouse is over.\n------------------------------------------------------------------------------------------------------------------------\noptions:\n- subjectEl\n- subjectCenter\n*/\n\nvar HitDragListener = DragListener.extend({\n\n\tcomponent: null, // converts coordinates to hits\n\t\t// methods: prepareHits, releaseHits, queryHit\n\n\torigHit: null, // the hit the mouse was over when listening started\n\thit: null, // the hit the mouse is over\n\tcoordAdjust: null, // delta that will be added to the mouse coordinates when computing collisions\n\n\n\tconstructor: function(component, options) {\n\t\tDragListener.call(this, options); // call the super-constructor\n\n\t\tthis.component = component;\n\t},\n\n\n\t// Called when drag listening starts (but a real drag has not necessarily began).\n\t// ev might be undefined if dragging was started manually.\n\tlistenStart: function(ev) {\n\t\tvar subjectEl = this.subjectEl;\n\t\tvar subjectRect;\n\t\tvar origPoint;\n\t\tvar point;\n\n\t\tDragListener.prototype.listenStart.apply(this, arguments); // call the super-method\n\n\t\tthis.computeCoords();\n\n\t\tif (ev) {\n\t\t\torigPoint = { left: ev.pageX, top: ev.pageY };\n\t\t\tpoint = origPoint;\n\n\t\t\t// constrain the point to bounds of the element being dragged\n\t\t\tif (subjectEl) {\n\t\t\t\tsubjectRect = getOuterRect(subjectEl); // used for centering as well\n\t\t\t\tpoint = constrainPoint(point, subjectRect);\n\t\t\t}\n\n\t\t\tthis.origHit = this.queryHit(point.left, point.top);\n\n\t\t\t// treat the center of the subject as the collision point?\n\t\t\tif (subjectEl && this.options.subjectCenter) {\n\n\t\t\t\t// only consider the area the subject overlaps the hit. best for large subjects.\n\t\t\t\t// TODO: skip this if hit didn't supply left/right/top/bottom\n\t\t\t\tif (this.origHit) {\n\t\t\t\t\tsubjectRect = intersectRects(this.origHit, subjectRect) ||\n\t\t\t\t\t\tsubjectRect; // in case there is no intersection\n\t\t\t\t}\n\n\t\t\t\tpoint = getRectCenter(subjectRect);\n\t\t\t}\n\n\t\t\tthis.coordAdjust = diffPoints(point, origPoint); // point - origPoint\n\t\t}\n\t\telse {\n\t\t\tthis.origHit = null;\n\t\t\tthis.coordAdjust = null;\n\t\t}\n\t},\n\n\n\t// Recomputes the drag-critical positions of elements\n\tcomputeCoords: function() {\n\t\tthis.component.prepareHits();\n\t\tthis.computeScrollBounds(); // why is this here???\n\t},\n\n\n\t// Called when the actual drag has started\n\tdragStart: function(ev) {\n\t\tvar hit;\n\n\t\tDragListener.prototype.dragStart.apply(this, arguments); // call the super-method\n\n\t\t// might be different from this.origHit if the min-distance is large\n\t\thit = this.queryHit(ev.pageX, ev.pageY);\n\n\t\t// report the initial hit the mouse is over\n\t\t// especially important if no min-distance and drag starts immediately\n\t\tif (hit) {\n\t\t\tthis.hitOver(hit);\n\t\t}\n\t},\n\n\n\t// Called when the drag moves\n\tdrag: function(dx, dy, ev) {\n\t\tvar hit;\n\n\t\tDragListener.prototype.drag.apply(this, arguments); // call the super-method\n\n\t\thit = this.queryHit(ev.pageX, ev.pageY);\n\n\t\tif (!isHitsEqual(hit, this.hit)) { // a different hit than before?\n\t\t\tif (this.hit) {\n\t\t\t\tthis.hitOut();\n\t\t\t}\n\t\t\tif (hit) {\n\t\t\t\tthis.hitOver(hit);\n\t\t\t}\n\t\t}\n\t},\n\n\n\t// Called when dragging has been stopped\n\tdragStop: function() {\n\t\tthis.hitDone();\n\t\tDragListener.prototype.dragStop.apply(this, arguments); // call the super-method\n\t},\n\n\n\t// Called when a the mouse has just moved over a new hit\n\thitOver: function(hit) {\n\t\tvar isOrig = isHitsEqual(hit, this.origHit);\n\n\t\tthis.hit = hit;\n\n\t\tthis.trigger('hitOver', this.hit, isOrig, this.origHit);\n\t},\n\n\n\t// Called when the mouse has just moved out of a hit\n\thitOut: function() {\n\t\tif (this.hit) {\n\t\t\tthis.trigger('hitOut', this.hit);\n\t\t\tthis.hitDone();\n\t\t\tthis.hit = null;\n\t\t}\n\t},\n\n\n\t// Called after a hitOut. Also called before a dragStop\n\thitDone: function() {\n\t\tif (this.hit) {\n\t\t\tthis.trigger('hitDone', this.hit);\n\t\t}\n\t},\n\n\n\t// Called when drag listening has stopped\n\tlistenStop: function() {\n\t\tDragListener.prototype.listenStop.apply(this, arguments); // call the super-method\n\n\t\tthis.origHit = null;\n\t\tthis.hit = null;\n\n\t\tthis.component.releaseHits();\n\t},\n\n\n\t// Called when scrolling has stopped, whether through auto scroll, or the user scrolling\n\tscrollStop: function() {\n\t\tDragListener.prototype.scrollStop.apply(this, arguments); // call the super-method\n\n\t\tthis.computeCoords(); // hits' absolute positions will be in new places. recompute\n\t},\n\n\n\t// Gets the hit underneath the coordinates for the given mouse event\n\tqueryHit: function(left, top) {\n\n\t\tif (this.coordAdjust) {\n\t\t\tleft += this.coordAdjust.left;\n\t\t\ttop += this.coordAdjust.top;\n\t\t}\n\n\t\treturn this.component.queryHit(left, top);\n\t}\n\n});\n\n\n// Returns `true` if the hits are identically equal. `false` otherwise. Must be from the same component.\n// Two null values will be considered equal, as two \"out of the component\" states are the same.\nfunction isHitsEqual(hit0, hit1) {\n\n\tif (!hit0 && !hit1) {\n\t\treturn true;\n\t}\n\n\tif (hit0 && hit1) {\n\t\treturn hit0.component === hit1.component &&\n\t\t\tisHitPropsWithin(hit0, hit1) &&\n\t\t\tisHitPropsWithin(hit1, hit0); // ensures all props are identical\n\t}\n\n\treturn false;\n}\n\n\n// Returns true if all of subHit's non-standard properties are within superHit\nfunction isHitPropsWithin(subHit, superHit) {\n\tfor (var propName in subHit) {\n\t\tif (!/^(component|left|right|top|bottom)$/.test(propName)) {\n\t\t\tif (subHit[propName] !== superHit[propName]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\n\n;;\n\n/* Creates a clone of an element and lets it track the mouse as it moves\n----------------------------------------------------------------------------------------------------------------------*/\n\nvar MouseFollower = Class.extend({\n\n\toptions: null,\n\n\tsourceEl: null, // the element that will be cloned and made to look like it is dragging\n\tel: null, // the clone of `sourceEl` that will track the mouse\n\tparentEl: null, // the element that `el` (the clone) will be attached to\n\n\t// the initial position of el, relative to the offset parent. made to match the initial offset of sourceEl\n\ttop0: null,\n\tleft0: null,\n\n\t// the initial position of the mouse\n\tmouseY0: null,\n\tmouseX0: null,\n\n\t// the number of pixels the mouse has moved from its initial position\n\ttopDelta: null,\n\tleftDelta: null,\n\n\tmousemoveProxy: null, // document mousemove handler, bound to the MouseFollower's `this`\n\n\tisFollowing: false,\n\tisHidden: false,\n\tisAnimating: false, // doing the revert animation?\n\n\tconstructor: function(sourceEl, options) {\n\t\tthis.options = options = options || {};\n\t\tthis.sourceEl = sourceEl;\n\t\tthis.parentEl = options.parentEl ? $(options.parentEl) : sourceEl.parent(); // default to sourceEl's parent\n\t},\n\n\n\t// Causes the element to start following the mouse\n\tstart: function(ev) {\n\t\tif (!this.isFollowing) {\n\t\t\tthis.isFollowing = true;\n\n\t\t\tthis.mouseY0 = ev.pageY;\n\t\t\tthis.mouseX0 = ev.pageX;\n\t\t\tthis.topDelta = 0;\n\t\t\tthis.leftDelta = 0;\n\n\t\t\tif (!this.isHidden) {\n\t\t\t\tthis.updatePosition();\n\t\t\t}\n\n\t\t\t$(document).on('mousemove', this.mousemoveProxy = proxy(this, 'mousemove'));\n\t\t}\n\t},\n\n\n\t// Causes the element to stop following the mouse. If shouldRevert is true, will animate back to original position.\n\t// `callback` gets invoked when the animation is complete. If no animation, it is invoked immediately.\n\tstop: function(shouldRevert, callback) {\n\t\tvar _this = this;\n\t\tvar revertDuration = this.options.revertDuration;\n\n\t\tfunction complete() {\n\t\t\tthis.isAnimating = false;\n\t\t\t_this.removeElement();\n\n\t\t\tthis.top0 = this.left0 = null; // reset state for future updatePosition calls\n\n\t\t\tif (callback) {\n\t\t\t\tcallback();\n\t\t\t}\n\t\t}\n\n\t\tif (this.isFollowing && !this.isAnimating) { // disallow more than one stop animation at a time\n\t\t\tthis.isFollowing = false;\n\n\t\t\t$(document).off('mousemove', this.mousemoveProxy);\n\n\t\t\tif (shouldRevert && revertDuration && !this.isHidden) { // do a revert animation?\n\t\t\t\tthis.isAnimating = true;\n\t\t\t\tthis.el.animate({\n\t\t\t\t\ttop: this.top0,\n\t\t\t\t\tleft: this.left0\n\t\t\t\t}, {\n\t\t\t\t\tduration: revertDuration,\n\t\t\t\t\tcomplete: complete\n\t\t\t\t});\n\t\t\t}\n\t\t\telse {\n\t\t\t\tcomplete();\n\t\t\t}\n\t\t}\n\t},\n\n\n\t// Gets the tracking element. Create it if necessary\n\tgetEl: function() {\n\t\tvar el = this.el;\n\n\t\tif (!el) {\n\t\t\tthis.sourceEl.width(); // hack to force IE8 to compute correct bounding box\n\t\t\tel = this.el = this.sourceEl.clone()\n\t\t\t\t.css({\n\t\t\t\t\tposition: 'absolute',\n\t\t\t\t\tvisibility: '', // in case original element was hidden (commonly through hideEvents())\n\t\t\t\t\tdisplay: this.isHidden ? 'none' : '', // for when initially hidden\n\t\t\t\t\tmargin: 0,\n\t\t\t\t\tright: 'auto', // erase and set width instead\n\t\t\t\t\tbottom: 'auto', // erase and set height instead\n\t\t\t\t\twidth: this.sourceEl.width(), // explicit height in case there was a 'right' value\n\t\t\t\t\theight: this.sourceEl.height(), // explicit width in case there was a 'bottom' value\n\t\t\t\t\topacity: this.options.opacity || '',\n\t\t\t\t\tzIndex: this.options.zIndex\n\t\t\t\t})\n\t\t\t\t.appendTo(this.parentEl);\n\t\t}\n\n\t\treturn el;\n\t},\n\n\n\t// Removes the tracking element if it has already been created\n\tremoveElement: function() {\n\t\tif (this.el) {\n\t\t\tthis.el.remove();\n\t\t\tthis.el = null;\n\t\t}\n\t},\n\n\n\t// Update the CSS position of the tracking element\n\tupdatePosition: function() {\n\t\tvar sourceOffset;\n\t\tvar origin;\n\n\t\tthis.getEl(); // ensure this.el\n\n\t\t// make sure origin info was computed\n\t\tif (this.top0 === null) {\n\t\t\tthis.sourceEl.width(); // hack to force IE8 to compute correct bounding box\n\t\t\tsourceOffset = this.sourceEl.offset();\n\t\t\torigin = this.el.offsetParent().offset();\n\t\t\tthis.top0 = sourceOffset.top - origin.top;\n\t\t\tthis.left0 = sourceOffset.left - origin.left;\n\t\t}\n\n\t\tthis.el.css({\n\t\t\ttop: this.top0 + this.topDelta,\n\t\t\tleft: this.left0 + this.leftDelta\n\t\t});\n\t},\n\n\n\t// Gets called when the user moves the mouse\n\tmousemove: function(ev) {\n\t\tthis.topDelta = ev.pageY - this.mouseY0;\n\t\tthis.leftDelta = ev.pageX - this.mouseX0;\n\n\t\tif (!this.isHidden) {\n\t\t\tthis.updatePosition();\n\t\t}\n\t},\n\n\n\t// Temporarily makes the tracking element invisible. Can be called before following starts\n\thide: function() {\n\t\tif (!this.isHidden) {\n\t\t\tthis.isHidden = true;\n\t\t\tif (this.el) {\n\t\t\t\tthis.el.hide();\n\t\t\t}\n\t\t}\n\t},\n\n\n\t// Show the tracking element after it has been temporarily hidden\n\tshow: function() {\n\t\tif (this.isHidden) {\n\t\t\tthis.isHidden = false;\n\t\t\tthis.updatePosition();\n\t\t\tthis.getEl().show();\n\t\t}\n\t}\n\n});\n\n;;\n\n/* An abstract class comprised of a \"grid\" of areas that each represent a specific datetime\n----------------------------------------------------------------------------------------------------------------------*/\n\nvar Grid = FC.Grid = Class.extend({\n\n\tview: null, // a View object\n\tisRTL: null, // shortcut to the view's isRTL option\n\n\tstart: null,\n\tend: null,\n\n\tel: null, // the containing element\n\telsByFill: null, // a hash of jQuery element sets used for rendering each fill. Keyed by fill name.\n\n\texternalDragStartProxy: null, // binds the Grid's scope to externalDragStart (in DayGrid.events)\n\n\t// derived from options\n\teventTimeFormat: null,\n\tdisplayEventTime: null,\n\tdisplayEventEnd: null,\n\n\tminResizeDuration: null, // TODO: hack. set by subclasses. minumum event resize duration\n\n\t// if defined, holds the unit identified (ex: \"year\" or \"month\") that determines the level of granularity\n\t// of the date areas. if not defined, assumes to be day and time granularity.\n\t// TODO: port isTimeScale into same system?\n\tlargeUnit: null,\n\n\n\tconstructor: function(view) {\n\t\tthis.view = view;\n\t\tthis.isRTL = view.opt('isRTL');\n\n\t\tthis.elsByFill = {};\n\t\tthis.externalDragStartProxy = proxy(this, 'externalDragStart');\n\t},\n\n\n\t/* Options\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Generates the format string used for event time text, if not explicitly defined by 'timeFormat'\n\tcomputeEventTimeFormat: function() {\n\t\treturn this.view.opt('smallTimeFormat');\n\t},\n\n\n\t// Determines whether events should have their end times displayed, if not explicitly defined by 'displayEventTime'.\n\t// Only applies to non-all-day events.\n\tcomputeDisplayEventTime: function() {\n\t\treturn true;\n\t},\n\n\n\t// Determines whether events should have their end times displayed, if not explicitly defined by 'displayEventEnd'\n\tcomputeDisplayEventEnd: function() {\n\t\treturn true;\n\t},\n\n\n\t/* Dates\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Tells the grid about what period of time to display.\n\t// Any date-related internal data should be generated.\n\tsetRange: function(range) {\n\t\tthis.start = range.start.clone();\n\t\tthis.end = range.end.clone();\n\n\t\tthis.rangeUpdated();\n\t\tthis.processRangeOptions();\n\t},\n\n\n\t// Called when internal variables that rely on the range should be updated\n\trangeUpdated: function() {\n\t},\n\n\n\t// Updates values that rely on options and also relate to range\n\tprocessRangeOptions: function() {\n\t\tvar view = this.view;\n\t\tvar displayEventTime;\n\t\tvar displayEventEnd;\n\n\t\tthis.eventTimeFormat =\n\t\t\tview.opt('eventTimeFormat') ||\n\t\t\tview.opt('timeFormat') || // deprecated\n\t\t\tthis.computeEventTimeFormat();\n\n\t\tdisplayEventTime = view.opt('displayEventTime');\n\t\tif (displayEventTime == null) {\n\t\t\tdisplayEventTime = this.computeDisplayEventTime(); // might be based off of range\n\t\t}\n\n\t\tdisplayEventEnd = view.opt('displayEventEnd');\n\t\tif (displayEventEnd == null) {\n\t\t\tdisplayEventEnd = this.computeDisplayEventEnd(); // might be based off of range\n\t\t}\n\n\t\tthis.displayEventTime = displayEventTime;\n\t\tthis.displayEventEnd = displayEventEnd;\n\t},\n\n\n\t// Converts a span (has unzoned start/end and any other grid-specific location information)\n\t// into an array of segments (pieces of events whose format is decided by the grid).\n\tspanToSegs: function(span) {\n\t\t// subclasses must implement\n\t},\n\n\n\t// Diffs the two dates, returning a duration, based on granularity of the grid\n\t// TODO: port isTimeScale into this system?\n\tdiffDates: function(a, b) {\n\t\tif (this.largeUnit) {\n\t\t\treturn diffByUnit(a, b, this.largeUnit);\n\t\t}\n\t\telse {\n\t\t\treturn diffDayTime(a, b);\n\t\t}\n\t},\n\n\n\t/* Hit Area\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Called before one or more queryHit calls might happen. Should prepare any cached coordinates for queryHit\n\tprepareHits: function() {\n\t},\n\n\n\t// Called when queryHit calls have subsided. Good place to clear any coordinate caches.\n\treleaseHits: function() {\n\t},\n\n\n\t// Given coordinates from the topleft of the document, return data about the date-related area underneath.\n\t// Can return an object with arbitrary properties (although top/right/left/bottom are encouraged).\n\t// Must have a `grid` property, a reference to this current grid. TODO: avoid this\n\t// The returned object will be processed by getHitSpan and getHitEl.\n\tqueryHit: function(leftOffset, topOffset) {\n\t},\n\n\n\t// Given position-level information about a date-related area within the grid,\n\t// should return an object with at least a start/end date. Can provide other information as well.\n\tgetHitSpan: function(hit) {\n\t},\n\n\n\t// Given position-level information about a date-related area within the grid,\n\t// should return a jQuery element that best represents it. passed to dayClick callback.\n\tgetHitEl: function(hit) {\n\t},\n\n\n\t/* Rendering\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Sets the container element that the grid should render inside of.\n\t// Does other DOM-related initializations.\n\tsetElement: function(el) {\n\t\tvar _this = this;\n\n\t\tthis.el = el;\n\n\t\t// attach a handler to the grid's root element.\n\t\t// jQuery will take care of unregistering them when removeElement gets called.\n\t\tel.on('mousedown', function(ev) {\n\t\t\tif (\n\t\t\t\t!$(ev.target).is('.fc-event-container *, .fc-more') && // not an an event element, or \"more..\" link\n\t\t\t\t!$(ev.target).closest('.fc-popover').length // not on a popover (like the \"more..\" events one)\n\t\t\t) {\n\t\t\t\t_this.dayMousedown(ev);\n\t\t\t}\n\t\t});\n\n\t\t// attach event-element-related handlers. in Grid.events\n\t\t// same garbage collection note as above.\n\t\tthis.bindSegHandlers();\n\n\t\tthis.bindGlobalHandlers();\n\t},\n\n\n\t// Removes the grid's container element from the DOM. Undoes any other DOM-related attachments.\n\t// DOES NOT remove any content beforehand (doesn't clear events or call unrenderDates), unlike View\n\tremoveElement: function() {\n\t\tthis.unbindGlobalHandlers();\n\n\t\tthis.el.remove();\n\n\t\t// NOTE: we don't null-out this.el for the same reasons we don't do it within View::removeElement\n\t},\n\n\n\t// Renders the basic structure of grid view before any content is rendered\n\trenderSkeleton: function() {\n\t\t// subclasses should implement\n\t},\n\n\n\t// Renders the grid's date-related content (like areas that represent days/times).\n\t// Assumes setRange has already been called and the skeleton has already been rendered.\n\trenderDates: function() {\n\t\t// subclasses should implement\n\t},\n\n\n\t// Unrenders the grid's date-related content\n\tunrenderDates: function() {\n\t\t// subclasses should implement\n\t},\n\n\n\t/* Handlers\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Binds DOM handlers to elements that reside outside the grid, such as the document\n\tbindGlobalHandlers: function() {\n\t\t$(document).on('dragstart sortstart', this.externalDragStartProxy); // jqui\n\t},\n\n\n\t// Unbinds DOM handlers from elements that reside outside the grid\n\tunbindGlobalHandlers: function() {\n\t\t$(document).off('dragstart sortstart', this.externalDragStartProxy); // jqui\n\t},\n\n\n\t// Process a mousedown on an element that represents a day. For day clicking and selecting.\n\tdayMousedown: function(ev) {\n\t\tvar _this = this;\n\t\tvar view = this.view;\n\t\tvar isSelectable = view.opt('selectable');\n\t\tvar dayClickHit; // null if invalid dayClick\n\t\tvar selectionSpan; // null if invalid selection\n\n\t\t// this listener tracks a mousedown on a day element, and a subsequent drag.\n\t\t// if the drag ends on the same day, it is a 'dayClick'.\n\t\t// if 'selectable' is enabled, this listener also detects selections.\n\t\tvar dragListener = new HitDragListener(this, {\n\t\t\t//distance: 5, // needs more work if we want dayClick to fire correctly\n\t\t\tscroll: view.opt('dragScroll'),\n\t\t\tdragStart: function() {\n\t\t\t\tview.unselect(); // since we could be rendering a new selection, we want to clear any old one\n\t\t\t},\n\t\t\thitOver: function(hit, isOrig, origHit) {\n\t\t\t\tif (origHit) { // click needs to have started on a hit\n\t\t\t\t\tdayClickHit = isOrig ? hit : null; // single-hit selection is a day click\n\t\t\t\t\tif (isSelectable) {\n\t\t\t\t\t\tselectionSpan = _this.computeSelection(\n\t\t\t\t\t\t\t_this.getHitSpan(origHit),\n\t\t\t\t\t\t\t_this.getHitSpan(hit)\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (selectionSpan) {\n\t\t\t\t\t\t\t_this.renderSelection(selectionSpan);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (selectionSpan === false) {\n\t\t\t\t\t\t\tdisableCursor();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\thitOut: function() {\n\t\t\t\tdayClickHit = null;\n\t\t\t\tselectionSpan = null;\n\t\t\t\t_this.unrenderSelection();\n\t\t\t\tenableCursor();\n\t\t\t},\n\t\t\tlistenStop: function(ev) {\n\t\t\t\tif (dayClickHit) {\n\t\t\t\t\tview.triggerDayClick(\n\t\t\t\t\t\t_this.getHitSpan(dayClickHit),\n\t\t\t\t\t\t_this.getHitEl(dayClickHit),\n\t\t\t\t\t\tev\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tif (selectionSpan) {\n\t\t\t\t\t// the selection will already have been rendered. just report it\n\t\t\t\t\tview.reportSelection(selectionSpan, ev);\n\t\t\t\t}\n\t\t\t\tenableCursor();\n\t\t\t}\n\t\t});\n\n\t\tdragListener.mousedown(ev); // start listening, which will eventually initiate a dragStart\n\t},\n\n\n\t/* Event Helper\n\t------------------------------------------------------------------------------------------------------------------*/\n\t// TODO: should probably move this to Grid.events, like we did event dragging / resizing\n\n\n\t// Renders a mock event at the given event location, which contains zoned start/end properties.\n\trenderEventLocationHelper: function(eventLocation, sourceSeg) {\n\t\tvar fakeEvent = this.fabricateHelperEvent(eventLocation, sourceSeg);\n\n\t\tthis.renderHelper(fakeEvent, sourceSeg); // do the actual rendering\n\t},\n\n\n\t// Builds a fake event given zoned event date properties and a segment is should be inspired from.\n\t// The range's end can be null, in which case the mock event that is rendered will have a null end time.\n\t// `sourceSeg` is the internal segment object involved in the drag. If null, something external is dragging.\n\tfabricateHelperEvent: function(eventLocation, sourceSeg) {\n\t\tvar fakeEvent = sourceSeg ? createObject(sourceSeg.event) : {}; // mask the original event object if possible\n\n\t\tfakeEvent.start = eventLocation.start.clone();\n\t\tfakeEvent.end = eventLocation.end ? eventLocation.end.clone() : null;\n\t\tfakeEvent.allDay = null; // force it to be freshly computed by normalizeEventDates\n\t\tthis.view.calendar.normalizeEventDates(fakeEvent);\n\n\t\t// this extra className will be useful for differentiating real events from mock events in CSS\n\t\tfakeEvent.className = (fakeEvent.className || []).concat('fc-helper');\n\n\t\t// if something external is being dragged in, don't render a resizer\n\t\tif (!sourceSeg) {\n\t\t\tfakeEvent.editable = false;\n\t\t}\n\n\t\treturn fakeEvent;\n\t},\n\n\n\t// Renders a mock event. Given zoned event date properties.\n\trenderHelper: function(eventLocation, sourceSeg) {\n\t\t// subclasses must implement\n\t},\n\n\n\t// Unrenders a mock event\n\tunrenderHelper: function() {\n\t\t// subclasses must implement\n\t},\n\n\n\t/* Selection\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Renders a visual indication of a selection. Will highlight by default but can be overridden by subclasses.\n\t// Given a span (unzoned start/end and other misc data)\n\trenderSelection: function(span) {\n\t\tthis.renderHighlight(span);\n\t},\n\n\n\t// Unrenders any visual indications of a selection. Will unrender a highlight by default.\n\tunrenderSelection: function() {\n\t\tthis.unrenderHighlight();\n\t},\n\n\n\t// Given the first and last date-spans of a selection, returns another date-span object.\n\t// Subclasses can override and provide additional data in the span object. Will be passed to renderSelection().\n\t// Will return false if the selection is invalid and this should be indicated to the user.\n\t// Will return null/undefined if a selection invalid but no error should be reported.\n\tcomputeSelection: function(span0, span1) {\n\t\tvar span = this.computeSelectionSpan(span0, span1);\n\n\t\tif (span && !this.view.calendar.isSelectionSpanAllowed(span)) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn span;\n\t},\n\n\n\t// Given two spans, must return the combination of the two.\n\t// TODO: do this separation of concerns (combining VS validation) for event dnd/resize too.\n\tcomputeSelectionSpan: function(span0, span1) {\n\t\tvar dates = [ span0.start, span0.end, span1.start, span1.end ];\n\n\t\tdates.sort(compareNumbers); // sorts chronologically. works with Moments\n\n\t\treturn { start: dates[0].clone(), end: dates[3].clone() };\n\t},\n\n\n\t/* Highlight\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Renders an emphasis on the given date range. Given a span (unzoned start/end and other misc data)\n\trenderHighlight: function(span) {\n\t\tthis.renderFill('highlight', this.spanToSegs(span));\n\t},\n\n\n\t// Unrenders the emphasis on a date range\n\tunrenderHighlight: function() {\n\t\tthis.unrenderFill('highlight');\n\t},\n\n\n\t// Generates an array of classNames for rendering the highlight. Used by the fill system.\n\thighlightSegClasses: function() {\n\t\treturn [ 'fc-highlight' ];\n\t},\n\n\n\t/* Fill System (highlight, background events, business hours)\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Renders a set of rectangles over the given segments of time.\n\t// MUST RETURN a subset of segs, the segs that were actually rendered.\n\t// Responsible for populating this.elsByFill. TODO: better API for expressing this requirement\n\trenderFill: function(type, segs) {\n\t\t// subclasses must implement\n\t},\n\n\n\t// Unrenders a specific type of fill that is currently rendered on the grid\n\tunrenderFill: function(type) {\n\t\tvar el = this.elsByFill[type];\n\n\t\tif (el) {\n\t\t\tel.remove();\n\t\t\tdelete this.elsByFill[type];\n\t\t}\n\t},\n\n\n\t// Renders and assigns an `el` property for each fill segment. Generic enough to work with different types.\n\t// Only returns segments that successfully rendered.\n\t// To be harnessed by renderFill (implemented by subclasses).\n\t// Analagous to renderFgSegEls.\n\trenderFillSegEls: function(type, segs) {\n\t\tvar _this = this;\n\t\tvar segElMethod = this[type + 'SegEl'];\n\t\tvar html = '';\n\t\tvar renderedSegs = [];\n\t\tvar i;\n\n\t\tif (segs.length) {\n\n\t\t\t// build a large concatenation of segment HTML\n\t\t\tfor (i = 0; i < segs.length; i++) {\n\t\t\t\thtml += this.fillSegHtml(type, segs[i]);\n\t\t\t}\n\n\t\t\t// Grab individual elements from the combined HTML string. Use each as the default rendering.\n\t\t\t// Then, compute the 'el' for each segment.\n\t\t\t$(html).each(function(i, node) {\n\t\t\t\tvar seg = segs[i];\n\t\t\t\tvar el = $(node);\n\n\t\t\t\t// allow custom filter methods per-type\n\t\t\t\tif (segElMethod) {\n\t\t\t\t\tel = segElMethod.call(_this, seg, el);\n\t\t\t\t}\n\n\t\t\t\tif (el) { // custom filters did not cancel the render\n\t\t\t\t\tel = $(el); // allow custom filter to return raw DOM node\n\n\t\t\t\t\t// correct element type? (would be bad if a non-TD were inserted into a table for example)\n\t\t\t\t\tif (el.is(_this.fillSegTag)) {\n\t\t\t\t\t\tseg.el = el;\n\t\t\t\t\t\trenderedSegs.push(seg);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\treturn renderedSegs;\n\t},\n\n\n\tfillSegTag: 'div', // subclasses can override\n\n\n\t// Builds the HTML needed for one fill segment. Generic enought o work with different types.\n\tfillSegHtml: function(type, seg) {\n\n\t\t// custom hooks per-type\n\t\tvar classesMethod = this[type + 'SegClasses'];\n\t\tvar cssMethod = this[type + 'SegCss'];\n\n\t\tvar classes = classesMethod ? classesMethod.call(this, seg) : [];\n\t\tvar css = cssToStr(cssMethod ? cssMethod.call(this, seg) : {});\n\n\t\treturn '<' + this.fillSegTag +\n\t\t\t(classes.length ? ' class=\"' + classes.join(' ') + '\"' : '') +\n\t\t\t(css ? ' style=\"' + css + '\"' : '') +\n\t\t\t' />';\n\t},\n\n\n\n\t/* Generic rendering utilities for subclasses\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Computes HTML classNames for a single-day element\n\tgetDayClasses: function(date) {\n\t\tvar view = this.view;\n\t\tvar today = view.calendar.getNow().stripTime();\n\t\tvar classes = [ 'fc-' + dayIDs[date.day()] ];\n\n\t\tif (\n\t\t\tview.intervalDuration.as('months') == 1 &&\n\t\t\tdate.month() != view.intervalStart.month()\n\t\t) {\n\t\t\tclasses.push('fc-other-month');\n\t\t}\n\n\t\tif (date.isSame(today, 'day')) {\n\t\t\tclasses.push(\n\t\t\t\t'fc-today',\n\t\t\t\tview.highlightStateClass\n\t\t\t);\n\t\t}\n\t\telse if (date < today) {\n\t\t\tclasses.push('fc-past');\n\t\t}\n\t\telse {\n\t\t\tclasses.push('fc-future');\n\t\t}\n\n\t\treturn classes;\n\t}\n\n});\n\n;;\n\n/* Event-rendering and event-interaction methods for the abstract Grid class\n----------------------------------------------------------------------------------------------------------------------*/\n\nGrid.mixin({\n\n\tmousedOverSeg: null, // the segment object the user's mouse is over. null if over nothing\n\tisDraggingSeg: false, // is a segment being dragged? boolean\n\tisResizingSeg: false, // is a segment being resized? boolean\n\tisDraggingExternal: false, // jqui-dragging an external element? boolean\n\tsegs: null, // the event segments currently rendered in the grid\n\n\n\t// Renders the given events onto the grid\n\trenderEvents: function(events) {\n\t\tvar bgEvents = [];\n\t\tvar fgEvents = [];\n\t\tvar i;\n\n\t\tfor (i = 0; i < events.length; i++) {\n\t\t\t(isBgEvent(events[i]) ? bgEvents : fgEvents).push(events[i]);\n\t\t}\n\n\t\tthis.segs = [].concat( // record all segs\n\t\t\tthis.renderBgEvents(bgEvents),\n\t\t\tthis.renderFgEvents(fgEvents)\n\t\t);\n\t},\n\n\n\trenderBgEvents: function(events) {\n\t\tvar segs = this.eventsToSegs(events);\n\n\t\t// renderBgSegs might return a subset of segs, segs that were actually rendered\n\t\treturn this.renderBgSegs(segs) || segs;\n\t},\n\n\n\trenderFgEvents: function(events) {\n\t\tvar segs = this.eventsToSegs(events);\n\n\t\t// renderFgSegs might return a subset of segs, segs that were actually rendered\n\t\treturn this.renderFgSegs(segs) || segs;\n\t},\n\n\n\t// Unrenders all events currently rendered on the grid\n\tunrenderEvents: function() {\n\t\tthis.triggerSegMouseout(); // trigger an eventMouseout if user's mouse is over an event\n\n\t\tthis.unrenderFgSegs();\n\t\tthis.unrenderBgSegs();\n\n\t\tthis.segs = null;\n\t},\n\n\n\t// Retrieves all rendered segment objects currently rendered on the grid\n\tgetEventSegs: function() {\n\t\treturn this.segs || [];\n\t},\n\n\n\t/* Foreground Segment Rendering\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Renders foreground event segments onto the grid. May return a subset of segs that were rendered.\n\trenderFgSegs: function(segs) {\n\t\t// subclasses must implement\n\t},\n\n\n\t// Unrenders all currently rendered foreground segments\n\tunrenderFgSegs: function() {\n\t\t// subclasses must implement\n\t},\n\n\n\t// Renders and assigns an `el` property for each foreground event segment.\n\t// Only returns segments that successfully rendered.\n\t// A utility that subclasses may use.\n\trenderFgSegEls: function(segs, disableResizing) {\n\t\tvar view = this.view;\n\t\tvar html = '';\n\t\tvar renderedSegs = [];\n\t\tvar i;\n\n\t\tif (segs.length) { // don't build an empty html string\n\n\t\t\t// build a large concatenation of event segment HTML\n\t\t\tfor (i = 0; i < segs.length; i++) {\n\t\t\t\thtml += this.fgSegHtml(segs[i], disableResizing);\n\t\t\t}\n\n\t\t\t// Grab individual elements from the combined HTML string. Use each as the default rendering.\n\t\t\t// Then, compute the 'el' for each segment. An el might be null if the eventRender callback returned false.\n\t\t\t$(html).each(function(i, node) {\n\t\t\t\tvar seg = segs[i];\n\t\t\t\tvar el = view.resolveEventEl(seg.event, $(node));\n\n\t\t\t\tif (el) {\n\t\t\t\t\tel.data('fc-seg', seg); // used by handlers\n\t\t\t\t\tseg.el = el;\n\t\t\t\t\trenderedSegs.push(seg);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\treturn renderedSegs;\n\t},\n\n\n\t// Generates the HTML for the default rendering of a foreground event segment. Used by renderFgSegEls()\n\tfgSegHtml: function(seg, disableResizing) {\n\t\t// subclasses should implement\n\t},\n\n\n\t/* Background Segment Rendering\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Renders the given background event segments onto the grid.\n\t// Returns a subset of the segs that were actually rendered.\n\trenderBgSegs: function(segs) {\n\t\treturn this.renderFill('bgEvent', segs);\n\t},\n\n\n\t// Unrenders all the currently rendered background event segments\n\tunrenderBgSegs: function() {\n\t\tthis.unrenderFill('bgEvent');\n\t},\n\n\n\t// Renders a background event element, given the default rendering. Called by the fill system.\n\tbgEventSegEl: function(seg, el) {\n\t\treturn this.view.resolveEventEl(seg.event, el); // will filter through eventRender\n\t},\n\n\n\t// Generates an array of classNames to be used for the default rendering of a background event.\n\t// Called by the fill system.\n\tbgEventSegClasses: function(seg) {\n\t\tvar event = seg.event;\n\t\tvar source = event.source || {};\n\n\t\treturn [ 'fc-bgevent' ].concat(\n\t\t\tevent.className,\n\t\t\tsource.className || []\n\t\t);\n\t},\n\n\n\t// Generates a semicolon-separated CSS string to be used for the default rendering of a background event.\n\t// Called by the fill system.\n\t// TODO: consolidate with getEventSkinCss?\n\tbgEventSegCss: function(seg) {\n\t\tvar view = this.view;\n\t\tvar event = seg.event;\n\t\tvar source = event.source || {};\n\n\t\treturn {\n\t\t\t'background-color':\n\t\t\t\tevent.backgroundColor ||\n\t\t\t\tevent.color ||\n\t\t\t\tsource.backgroundColor ||\n\t\t\t\tsource.color ||\n\t\t\t\tview.opt('eventBackgroundColor') ||\n\t\t\t\tview.opt('eventColor')\n\t\t};\n\t},\n\n\n\t// Generates an array of classNames to be used for the rendering business hours overlay. Called by the fill system.\n\tbusinessHoursSegClasses: function(seg) {\n\t\treturn [ 'fc-nonbusiness', 'fc-bgevent' ];\n\t},\n\n\n\t/* Handlers\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Attaches event-element-related handlers to the container element and leverage bubbling\n\tbindSegHandlers: function() {\n\t\tvar _this = this;\n\t\tvar view = this.view;\n\n\t\t$.each(\n\t\t\t{\n\t\t\t\tmouseenter: function(seg, ev) {\n\t\t\t\t\t_this.triggerSegMouseover(seg, ev);\n\t\t\t\t},\n\t\t\t\tmouseleave: function(seg, ev) {\n\t\t\t\t\t_this.triggerSegMouseout(seg, ev);\n\t\t\t\t},\n\t\t\t\tclick: function(seg, ev) {\n\t\t\t\t\treturn view.trigger('eventClick', this, seg.event, ev); // can return `false` to cancel\n\t\t\t\t},\n\t\t\t\tmousedown: function(seg, ev) {\n\t\t\t\t\tif ($(ev.target).is('.fc-resizer') && view.isEventResizable(seg.event)) {\n\t\t\t\t\t\t_this.segResizeMousedown(seg, ev, $(ev.target).is('.fc-start-resizer'));\n\t\t\t\t\t}\n\t\t\t\t\telse if (view.isEventDraggable(seg.event)) {\n\t\t\t\t\t\t_this.segDragMousedown(seg, ev);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tfunction(name, func) {\n\t\t\t\t// attach the handler to the container element and only listen for real event elements via bubbling\n\t\t\t\t_this.el.on(name, '.fc-event-container > *', function(ev) {\n\t\t\t\t\tvar seg = $(this).data('fc-seg'); // grab segment data. put there by View::renderEvents\n\n\t\t\t\t\t// only call the handlers if there is not a drag/resize in progress\n\t\t\t\t\tif (seg && !_this.isDraggingSeg && !_this.isResizingSeg) {\n\t\t\t\t\t\treturn func.call(this, seg, ev); // `this` will be the event element\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t);\n\t},\n\n\n\t// Updates internal state and triggers handlers for when an event element is moused over\n\ttriggerSegMouseover: function(seg, ev) {\n\t\tif (!this.mousedOverSeg) {\n\t\t\tthis.mousedOverSeg = seg;\n\t\t\tthis.view.trigger('eventMouseover', seg.el[0], seg.event, ev);\n\t\t}\n\t},\n\n\n\t// Updates internal state and triggers handlers for when an event element is moused out.\n\t// Can be given no arguments, in which case it will mouseout the segment that was previously moused over.\n\ttriggerSegMouseout: function(seg, ev) {\n\t\tev = ev || {}; // if given no args, make a mock mouse event\n\n\t\tif (this.mousedOverSeg) {\n\t\t\tseg = seg || this.mousedOverSeg; // if given no args, use the currently moused-over segment\n\t\t\tthis.mousedOverSeg = null;\n\t\t\tthis.view.trigger('eventMouseout', seg.el[0], seg.event, ev);\n\t\t}\n\t},\n\n\n\t/* Event Dragging\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Called when the user does a mousedown on an event, which might lead to dragging.\n\t// Generic enough to work with any type of Grid.\n\tsegDragMousedown: function(seg, ev) {\n\t\tvar _this = this;\n\t\tvar view = this.view;\n\t\tvar calendar = view.calendar;\n\t\tvar el = seg.el;\n\t\tvar event = seg.event;\n\t\tvar dropLocation; // zoned event date properties\n\n\t\t// A clone of the original element that will move with the mouse\n\t\tvar mouseFollower = new MouseFollower(seg.el, {\n\t\t\tparentEl: view.el,\n\t\t\topacity: view.opt('dragOpacity'),\n\t\t\trevertDuration: view.opt('dragRevertDuration'),\n\t\t\tzIndex: 2 // one above the .fc-view\n\t\t});\n\n\t\t// Tracks mouse movement over the *view's* coordinate map. Allows dragging and dropping between subcomponents\n\t\t// of the view.\n\t\tvar dragListener = new HitDragListener(view, {\n\t\t\tdistance: 5,\n\t\t\tscroll: view.opt('dragScroll'),\n\t\t\tsubjectEl: el,\n\t\t\tsubjectCenter: true,\n\t\t\tlistenStart: function(ev) {\n\t\t\t\tmouseFollower.hide(); // don't show until we know this is a real drag\n\t\t\t\tmouseFollower.start(ev);\n\t\t\t},\n\t\t\tdragStart: function(ev) {\n\t\t\t\t_this.triggerSegMouseout(seg, ev); // ensure a mouseout on the manipulated event has been reported\n\t\t\t\t_this.segDragStart(seg, ev);\n\t\t\t\tview.hideEvent(event); // hide all event segments. our mouseFollower will take over\n\t\t\t},\n\t\t\thitOver: function(hit, isOrig, origHit) {\n\n\t\t\t\t// starting hit could be forced (DayGrid.limit)\n\t\t\t\tif (seg.hit) {\n\t\t\t\t\torigHit = seg.hit;\n\t\t\t\t}\n\n\t\t\t\t// since we are querying the parent view, might not belong to this grid\n\t\t\t\tdropLocation = _this.computeEventDrop(\n\t\t\t\t\torigHit.component.getHitSpan(origHit),\n\t\t\t\t\thit.component.getHitSpan(hit),\n\t\t\t\t\tevent\n\t\t\t\t);\n\n\t\t\t\tif (dropLocation &&!calendar.isEventSpanAllowed(_this.eventToSpan(dropLocation), event)) {\n\t\t\t\t\tdisableCursor();\n\t\t\t\t\tdropLocation = null;\n\t\t\t\t}\n\n\t\t\t\t// if a valid drop location, have the subclass render a visual indication\n\t\t\t\tif (dropLocation && view.renderDrag(dropLocation, seg)) {\n\t\t\t\t\tmouseFollower.hide(); // if the subclass is already using a mock event \"helper\", hide our own\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tmouseFollower.show(); // otherwise, have the helper follow the mouse (no snapping)\n\t\t\t\t}\n\n\t\t\t\tif (isOrig) {\n\t\t\t\t\tdropLocation = null; // needs to have moved hits to be a valid drop\n\t\t\t\t}\n\t\t\t},\n\t\t\thitOut: function() { // called before mouse moves to a different hit OR moved out of all hits\n\t\t\t\tview.unrenderDrag(); // unrender whatever was done in renderDrag\n\t\t\t\tmouseFollower.show(); // show in case we are moving out of all hits\n\t\t\t\tdropLocation = null;\n\t\t\t},\n\t\t\thitDone: function() { // Called after a hitOut OR before a dragStop\n\t\t\t\tenableCursor();\n\t\t\t},\n\t\t\tdragStop: function(ev) {\n\t\t\t\t// do revert animation if hasn't changed. calls a callback when finished (whether animation or not)\n\t\t\t\tmouseFollower.stop(!dropLocation, function() {\n\t\t\t\t\tview.unrenderDrag();\n\t\t\t\t\tview.showEvent(event);\n\t\t\t\t\t_this.segDragStop(seg, ev);\n\n\t\t\t\t\tif (dropLocation) {\n\t\t\t\t\t\tview.reportEventDrop(event, dropLocation, this.largeUnit, el, ev);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t},\n\t\t\tlistenStop: function() {\n\t\t\t\tmouseFollower.stop(); // put in listenStop in case there was a mousedown but the drag never started\n\t\t\t}\n\t\t});\n\n\t\tdragListener.mousedown(ev); // start listening, which will eventually lead to a dragStart\n\t},\n\n\n\t// Called before event segment dragging starts\n\tsegDragStart: function(seg, ev) {\n\t\tthis.isDraggingSeg = true;\n\t\tthis.view.trigger('eventDragStart', seg.el[0], seg.event, ev, {}); // last argument is jqui dummy\n\t},\n\n\n\t// Called after event segment dragging stops\n\tsegDragStop: function(seg, ev) {\n\t\tthis.isDraggingSeg = false;\n\t\tthis.view.trigger('eventDragStop', seg.el[0], seg.event, ev, {}); // last argument is jqui dummy\n\t},\n\n\n\t// Given the spans an event drag began, and the span event was dropped, calculates the new zoned start/end/allDay\n\t// values for the event. Subclasses may override and set additional properties to be used by renderDrag.\n\t// A falsy returned value indicates an invalid drop.\n\tcomputeEventDrop: function(startSpan, endSpan, event) {\n\t\tvar calendar = this.view.calendar;\n\t\tvar dragStart = startSpan.start;\n\t\tvar dragEnd = endSpan.start;\n\t\tvar delta;\n\t\tvar dropLocation; // zoned event date properties\n\n\t\tif (dragStart.hasTime() === dragEnd.hasTime()) {\n\t\t\tdelta = this.diffDates(dragEnd, dragStart);\n\n\t\t\t// if an all-day event was in a timed area and it was dragged to a different time,\n\t\t\t// guarantee an end and adjust start/end to have times\n\t\t\tif (event.allDay && durationHasTime(delta)) {\n\t\t\t\tdropLocation = {\n\t\t\t\t\tstart: event.start.clone(),\n\t\t\t\t\tend: calendar.getEventEnd(event), // will be an ambig day\n\t\t\t\t\tallDay: false // for normalizeEventTimes\n\t\t\t\t};\n\t\t\t\tcalendar.normalizeEventTimes(dropLocation);\n\t\t\t}\n\t\t\t// othewise, work off existing values\n\t\t\telse {\n\t\t\t\tdropLocation = {\n\t\t\t\t\tstart: event.start.clone(),\n\t\t\t\t\tend: event.end ? event.end.clone() : null,\n\t\t\t\t\tallDay: event.allDay // keep it the same\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tdropLocation.start.add(delta);\n\t\t\tif (dropLocation.end) {\n\t\t\t\tdropLocation.end.add(delta);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t// if switching from day <-> timed, start should be reset to the dropped date, and the end cleared\n\t\t\tdropLocation = {\n\t\t\t\tstart: dragEnd.clone(),\n\t\t\t\tend: null, // end should be cleared\n\t\t\t\tallDay: !dragEnd.hasTime()\n\t\t\t};\n\t\t}\n\n\t\treturn dropLocation;\n\t},\n\n\n\t// Utility for apply dragOpacity to a jQuery set\n\tapplyDragOpacity: function(els) {\n\t\tvar opacity = this.view.opt('dragOpacity');\n\n\t\tif (opacity != null) {\n\t\t\tels.each(function(i, node) {\n\t\t\t\t// Don't use jQuery (will set an IE filter), do it the old fashioned way.\n\t\t\t\t// In IE8, a helper element will disappears if there's a filter.\n\t\t\t\tnode.style.opacity = opacity;\n\t\t\t});\n\t\t}\n\t},\n\n\n\t/* External Element Dragging\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Called when a jQuery UI drag is initiated anywhere in the DOM\n\texternalDragStart: function(ev, ui) {\n\t\tvar view = this.view;\n\t\tvar el;\n\t\tvar accept;\n\n\t\tif (view.opt('droppable')) { // only listen if this setting is on\n\t\t\tel = $((ui ? ui.item : null) || ev.target);\n\n\t\t\t// Test that the dragged element passes the dropAccept selector or filter function.\n\t\t\t// FYI, the default is \"*\" (matches all)\n\t\t\taccept = view.opt('dropAccept');\n\t\t\tif ($.isFunction(accept) ? accept.call(el[0], el) : el.is(accept)) {\n\t\t\t\tif (!this.isDraggingExternal) { // prevent double-listening if fired twice\n\t\t\t\t\tthis.listenToExternalDrag(el, ev, ui);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\n\t// Called when a jQuery UI drag starts and it needs to be monitored for dropping\n\tlistenToExternalDrag: function(el, ev, ui) {\n\t\tvar _this = this;\n\t\tvar meta = getDraggedElMeta(el); // extra data about event drop, including possible event to create\n\t\tvar dropLocation; // a null value signals an unsuccessful drag\n\n\t\t// listener that tracks mouse movement over date-associated pixel regions\n\t\tvar dragListener = new HitDragListener(this, {\n\t\t\tlistenStart: function() {\n\t\t\t\t_this.isDraggingExternal = true;\n\t\t\t},\n\t\t\thitOver: function(hit) {\n\t\t\t\tdropLocation = _this.computeExternalDrop(\n\t\t\t\t\thit.component.getHitSpan(hit), // since we are querying the parent view, might not belong to this grid\n\t\t\t\t\tmeta\n\t\t\t\t);\n\t\t\t\tif (dropLocation) {\n\t\t\t\t\t_this.renderDrag(dropLocation); // called without a seg parameter\n\t\t\t\t}\n\t\t\t\telse { // invalid hit\n\t\t\t\t\tdisableCursor();\n\t\t\t\t}\n\t\t\t},\n\t\t\thitOut: function() {\n\t\t\t\tdropLocation = null; // signal unsuccessful\n\t\t\t\t_this.unrenderDrag();\n\t\t\t\tenableCursor();\n\t\t\t},\n\t\t\tdragStop: function() {\n\t\t\t\t_this.unrenderDrag();\n\t\t\t\tenableCursor();\n\n\t\t\t\tif (dropLocation) { // element was dropped on a valid hit\n\t\t\t\t\t_this.view.reportExternalDrop(meta, dropLocation, el, ev, ui);\n\t\t\t\t}\n\t\t\t},\n\t\t\tlistenStop: function() {\n\t\t\t\t_this.isDraggingExternal = false;\n\t\t\t}\n\t\t});\n\n\t\tdragListener.startDrag(ev); // start listening immediately\n\t},\n\n\n\t// Given a hit to be dropped upon, and misc data associated with the jqui drag (guaranteed to be a plain object),\n\t// returns the zoned start/end dates for the event that would result from the hypothetical drop. end might be null.\n\t// Returning a null value signals an invalid drop hit.\n\tcomputeExternalDrop: function(span, meta) {\n\t\tvar calendar = this.view.calendar;\n\t\tvar dropLocation = {\n\t\t\tstart: calendar.applyTimezone(span.start), // simulate a zoned event start date\n\t\t\tend: null\n\t\t};\n\n\t\t// if dropped on an all-day span, and element's metadata specified a time, set it\n\t\tif (meta.startTime && !dropLocation.start.hasTime()) {\n\t\t\tdropLocation.start.time(meta.startTime);\n\t\t}\n\n\t\tif (meta.duration) {\n\t\t\tdropLocation.end = dropLocation.start.clone().add(meta.duration);\n\t\t}\n\n\t\tif (!calendar.isExternalSpanAllowed(this.eventToSpan(dropLocation), dropLocation, meta.eventProps)) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn dropLocation;\n\t},\n\n\n\n\t/* Drag Rendering (for both events and an external elements)\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Renders a visual indication of an event or external element being dragged.\n\t// `dropLocation` contains hypothetical start/end/allDay values the event would have if dropped. end can be null.\n\t// `seg` is the internal segment object that is being dragged. If dragging an external element, `seg` is null.\n\t// A truthy returned value indicates this method has rendered a helper element.\n\trenderDrag: function(dropLocation, seg) {\n\t\t// subclasses must implement\n\t},\n\n\n\t// Unrenders a visual indication of an event or external element being dragged\n\tunrenderDrag: function() {\n\t\t// subclasses must implement\n\t},\n\n\n\t/* Resizing\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Called when the user does a mousedown on an event's resizer, which might lead to resizing.\n\t// Generic enough to work with any type of Grid.\n\tsegResizeMousedown: function(seg, ev, isStart) {\n\t\tvar _this = this;\n\t\tvar view = this.view;\n\t\tvar calendar = view.calendar;\n\t\tvar el = seg.el;\n\t\tvar event = seg.event;\n\t\tvar eventEnd = calendar.getEventEnd(event);\n\t\tvar resizeLocation; // zoned event date properties. falsy if invalid resize\n\n\t\t// Tracks mouse movement over the *grid's* coordinate map\n\t\tvar dragListener = new HitDragListener(this, {\n\t\t\tdistance: 5,\n\t\t\tscroll: view.opt('dragScroll'),\n\t\t\tsubjectEl: el,\n\t\t\tdragStart: function(ev) {\n\t\t\t\t_this.triggerSegMouseout(seg, ev); // ensure a mouseout on the manipulated event has been reported\n\t\t\t\t_this.segResizeStart(seg, ev);\n\t\t\t},\n\t\t\thitOver: function(hit, isOrig, origHit) {\n\t\t\t\tvar origHitSpan = _this.getHitSpan(origHit);\n\t\t\t\tvar hitSpan = _this.getHitSpan(hit);\n\n\t\t\t\tresizeLocation = isStart ?\n\t\t\t\t\t_this.computeEventStartResize(origHitSpan, hitSpan, event) :\n\t\t\t\t\t_this.computeEventEndResize(origHitSpan, hitSpan, event);\n\n\t\t\t\tif (resizeLocation) {\n\t\t\t\t\tif (!calendar.isEventSpanAllowed(_this.eventToSpan(resizeLocation), event)) {\n\t\t\t\t\t\tdisableCursor();\n\t\t\t\t\t\tresizeLocation = null;\n\t\t\t\t\t}\n\t\t\t\t\t// no change? (TODO: how does this work with timezones?)\n\t\t\t\t\telse if (resizeLocation.start.isSame(event.start) && resizeLocation.end.isSame(eventEnd)) {\n\t\t\t\t\t\tresizeLocation = null;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (resizeLocation) {\n\t\t\t\t\tview.hideEvent(event);\n\t\t\t\t\t_this.renderEventResize(resizeLocation, seg);\n\t\t\t\t}\n\t\t\t},\n\t\t\thitOut: function() { // called before mouse moves to a different hit OR moved out of all hits\n\t\t\t\tresizeLocation = null;\n\t\t\t},\n\t\t\thitDone: function() { // resets the rendering to show the original event\n\t\t\t\t_this.unrenderEventResize();\n\t\t\t\tview.showEvent(event);\n\t\t\t\tenableCursor();\n\t\t\t},\n\t\t\tdragStop: function(ev) {\n\t\t\t\t_this.segResizeStop(seg, ev);\n\n\t\t\t\tif (resizeLocation) { // valid date to resize to?\n\t\t\t\t\tview.reportEventResize(event, resizeLocation, this.largeUnit, el, ev);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tdragListener.mousedown(ev); // start listening, which will eventually lead to a dragStart\n\t},\n\n\n\t// Called before event segment resizing starts\n\tsegResizeStart: function(seg, ev) {\n\t\tthis.isResizingSeg = true;\n\t\tthis.view.trigger('eventResizeStart', seg.el[0], seg.event, ev, {}); // last argument is jqui dummy\n\t},\n\n\n\t// Called after event segment resizing stops\n\tsegResizeStop: function(seg, ev) {\n\t\tthis.isResizingSeg = false;\n\t\tthis.view.trigger('eventResizeStop', seg.el[0], seg.event, ev, {}); // last argument is jqui dummy\n\t},\n\n\n\t// Returns new date-information for an event segment being resized from its start\n\tcomputeEventStartResize: function(startSpan, endSpan, event) {\n\t\treturn this.computeEventResize('start', startSpan, endSpan, event);\n\t},\n\n\n\t// Returns new date-information for an event segment being resized from its end\n\tcomputeEventEndResize: function(startSpan, endSpan, event) {\n\t\treturn this.computeEventResize('end', startSpan, endSpan, event);\n\t},\n\n\n\t// Returns new zoned date information for an event segment being resized from its start OR end\n\t// `type` is either 'start' or 'end'\n\tcomputeEventResize: function(type, startSpan, endSpan, event) {\n\t\tvar calendar = this.view.calendar;\n\t\tvar delta = this.diffDates(endSpan[type], startSpan[type]);\n\t\tvar resizeLocation; // zoned event date properties\n\t\tvar defaultDuration;\n\n\t\t// build original values to work from, guaranteeing a start and end\n\t\tresizeLocation = {\n\t\t\tstart: event.start.clone(),\n\t\t\tend: calendar.getEventEnd(event),\n\t\t\tallDay: event.allDay\n\t\t};\n\n\t\t// if an all-day event was in a timed area and was resized to a time, adjust start/end to have times\n\t\tif (resizeLocation.allDay && durationHasTime(delta)) {\n\t\t\tresizeLocation.allDay = false;\n\t\t\tcalendar.normalizeEventTimes(resizeLocation);\n\t\t}\n\n\t\tresizeLocation[type].add(delta); // apply delta to start or end\n\n\t\t// if the event was compressed too small, find a new reasonable duration for it\n\t\tif (!resizeLocation.start.isBefore(resizeLocation.end)) {\n\n\t\t\tdefaultDuration =\n\t\t\t\tthis.minResizeDuration || // TODO: hack\n\t\t\t\t(event.allDay ?\n\t\t\t\t\tcalendar.defaultAllDayEventDuration :\n\t\t\t\t\tcalendar.defaultTimedEventDuration);\n\n\t\t\tif (type == 'start') { // resizing the start?\n\t\t\t\tresizeLocation.start = resizeLocation.end.clone().subtract(defaultDuration);\n\t\t\t}\n\t\t\telse { // resizing the end?\n\t\t\t\tresizeLocation.end = resizeLocation.start.clone().add(defaultDuration);\n\t\t\t}\n\t\t}\n\n\t\treturn resizeLocation;\n\t},\n\n\n\t// Renders a visual indication of an event being resized.\n\t// `range` has the updated dates of the event. `seg` is the original segment object involved in the drag.\n\trenderEventResize: function(range, seg) {\n\t\t// subclasses must implement\n\t},\n\n\n\t// Unrenders a visual indication of an event being resized.\n\tunrenderEventResize: function() {\n\t\t// subclasses must implement\n\t},\n\n\n\t/* Rendering Utils\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Compute the text that should be displayed on an event's element.\n\t// `range` can be the Event object itself, or something range-like, with at least a `start`.\n\t// If event times are disabled, or the event has no time, will return a blank string.\n\t// If not specified, formatStr will default to the eventTimeFormat setting,\n\t// and displayEnd will default to the displayEventEnd setting.\n\tgetEventTimeText: function(range, formatStr, displayEnd) {\n\n\t\tif (formatStr == null) {\n\t\t\tformatStr = this.eventTimeFormat;\n\t\t}\n\n\t\tif (displayEnd == null) {\n\t\t\tdisplayEnd = this.displayEventEnd;\n\t\t}\n\n\t\tif (this.displayEventTime && range.start.hasTime()) {\n\t\t\tif (displayEnd && range.end) {\n\t\t\t\treturn this.view.formatRange(range, formatStr);\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn range.start.format(formatStr);\n\t\t\t}\n\t\t}\n\n\t\treturn '';\n\t},\n\n\n\t// Generic utility for generating the HTML classNames for an event segment's element\n\tgetSegClasses: function(seg, isDraggable, isResizable) {\n\t\tvar event = seg.event;\n\t\tvar classes = [\n\t\t\t'fc-event',\n\t\t\tseg.isStart ? 'fc-start' : 'fc-not-start',\n\t\t\tseg.isEnd ? 'fc-end' : 'fc-not-end'\n\t\t].concat(\n\t\t\tevent.className,\n\t\t\tevent.source ? event.source.className : []\n\t\t);\n\n\t\tif (isDraggable) {\n\t\t\tclasses.push('fc-draggable');\n\t\t}\n\t\tif (isResizable) {\n\t\t\tclasses.push('fc-resizable');\n\t\t}\n\n\t\treturn classes;\n\t},\n\n\n\t// Utility for generating event skin-related CSS properties\n\tgetEventSkinCss: function(event) {\n\t\tvar view = this.view;\n\t\tvar source = event.source || {};\n\t\tvar eventColor = event.color;\n\t\tvar sourceColor = source.color;\n\t\tvar optionColor = view.opt('eventColor');\n\n\t\treturn {\n\t\t\t'background-color':\n\t\t\t\tevent.backgroundColor ||\n\t\t\t\teventColor ||\n\t\t\t\tsource.backgroundColor ||\n\t\t\t\tsourceColor ||\n\t\t\t\tview.opt('eventBackgroundColor') ||\n\t\t\t\toptionColor,\n\t\t\t'border-color':\n\t\t\t\tevent.borderColor ||\n\t\t\t\teventColor ||\n\t\t\t\tsource.borderColor ||\n\t\t\t\tsourceColor ||\n\t\t\t\tview.opt('eventBorderColor') ||\n\t\t\t\toptionColor,\n\t\t\tcolor:\n\t\t\t\tevent.textColor ||\n\t\t\t\tsource.textColor ||\n\t\t\t\tview.opt('eventTextColor')\n\t\t};\n\t},\n\n\n\t/* Converting events -> eventRange -> eventSpan -> eventSegs\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Generates an array of segments for the given single event\n\teventToSegs: function(event) {\n\t\treturn this.eventsToSegs([ event ]);\n\t},\n\n\n\t// Generates a single span (always unzoned) by using the given event's dates.\n\t// Does not do any inverting for inverse-background events.\n\teventToSpan: function(event) {\n\t\tvar range = this.eventToRange(event);\n\t\tthis.transformEventSpan(range, event); // convert it to a span, in-place\n\t\treturn range;\n\t},\n\n\n\t// Converts an array of event objects into an array of event segment objects.\n\t// A custom `segSliceFunc` may be given for arbitrarily slicing up events.\n\t// Doesn't guarantee an order for the resulting array.\n\teventsToSegs: function(allEvents, segSliceFunc) {\n\t\tvar _this = this;\n\t\tvar eventsById = groupEventsById(allEvents);\n\t\tvar segs = [];\n\n\t\t$.each(eventsById, function(id, events) {\n\t\t\tvar ranges = [];\n\t\t\tvar i;\n\n\t\t\tfor (i = 0; i < events.length; i++) {\n\t\t\t\tranges.push(_this.eventToRange(events[i]));\n\t\t\t}\n\n\t\t\t// inverse-background events (utilize only the first event in calculations)\n\t\t\tif (isInverseBgEvent(events[0])) {\n\t\t\t\tranges = _this.invertRanges(ranges);\n\n\t\t\t\tfor (i = 0; i < ranges.length; i++) {\n\t\t\t\t\t_this.generateEventSegs(ranges[i], events[0], segSliceFunc, segs);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// normal event ranges\n\t\t\telse {\n\t\t\t\tfor (i = 0; i < ranges.length; i++) {\n\t\t\t\t\t_this.generateEventSegs(ranges[i], events[i], segSliceFunc, segs);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn segs;\n\t},\n\n\n\t// Generates the unzoned start/end dates an event appears to occupy\n\teventToRange: function(event) {\n\t\treturn {\n\t\t\tstart: event.start.clone().stripZone(),\n\t\t\tend: this.view.calendar.getEventEnd(event).stripZone()\n\t\t};\n\t},\n\n\n\t// Given an event's span (unzoned start/end and other misc data), and the event itself,\n\t// slice into segments (using the segSliceFunc function if specified) and append to the `out` array.\n\t// SIDE EFFECT: will mutate the given `range`.\n\tgenerateEventSegs: function(range, event, segSliceFunc, out) {\n\t\tvar segs;\n\t\tvar i;\n\n\t\tthis.transformEventSpan(range, event); // converts the range to a span\n\n\t\tsegs = segSliceFunc ? segSliceFunc(range) : this.spanToSegs(range);\n\n\t\tfor (i = 0; i < segs.length; i++) {\n\t\t\tthis.transformEventSeg(segs[i], range, event);\n\t\t\tout.push(segs[i]);\n\t\t}\n\t},\n\n\n\t// Given a range (unzoned start/end) that is about to become a span,\n\t// attach any event-derived properties to it.\n\ttransformEventSpan: function(range, event) {\n\t\t// subclasses can implement\n\t},\n\n\n\t// Given a segment object, attach any extra properties, based off of its source span and event.\n\ttransformEventSeg: function(seg, span, event) {\n\t\tseg.event = event;\n\t\tseg.eventStartMS = +span.start; // TODO: not the best name after making spans unzoned\n\t\tseg.eventDurationMS = span.end - span.start;\n\t},\n\n\n\t// Produces a new array of range objects that will cover all the time NOT covered by the given ranges.\n\t// SIDE EFFECT: will mutate the given array and will use its date references.\n\tinvertRanges: function(ranges) {\n\t\tvar view = this.view;\n\t\tvar viewStart = view.start.clone(); // need a copy\n\t\tvar viewEnd = view.end.clone(); // need a copy\n\t\tvar inverseRanges = [];\n\t\tvar start = viewStart; // the end of the previous range. the start of the new range\n\t\tvar i, range;\n\n\t\t// ranges need to be in order. required for our date-walking algorithm\n\t\tranges.sort(compareRanges);\n\n\t\tfor (i = 0; i < ranges.length; i++) {\n\t\t\trange = ranges[i];\n\n\t\t\t// add the span of time before the event (if there is any)\n\t\t\tif (range.start > start) { // compare millisecond time (skip any ambig logic)\n\t\t\t\tinverseRanges.push({\n\t\t\t\t\tstart: start,\n\t\t\t\t\tend: range.start\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tstart = range.end;\n\t\t}\n\n\t\t// add the span of time after the last event (if there is any)\n\t\tif (start < viewEnd) { // compare millisecond time (skip any ambig logic)\n\t\t\tinverseRanges.push({\n\t\t\t\tstart: start,\n\t\t\t\tend: viewEnd\n\t\t\t});\n\t\t}\n\n\t\treturn inverseRanges;\n\t},\n\n\n\tsortEventSegs: function(segs) {\n\t\tsegs.sort(proxy(this, 'compareEventSegs'));\n\t},\n\n\n\t// A cmp function for determining which segments should take visual priority\n\tcompareEventSegs: function(seg1, seg2) {\n\t\treturn seg1.eventStartMS - seg2.eventStartMS || // earlier events go first\n\t\t\tseg2.eventDurationMS - seg1.eventDurationMS || // tie? longer events go first\n\t\t\tseg2.event.allDay - seg1.event.allDay || // tie? put all-day events first (booleans cast to 0/1)\n\t\t\tcompareByFieldSpecs(seg1.event, seg2.event, this.view.eventOrderSpecs);\n\t}\n\n});\n\n\n/* Utilities\n----------------------------------------------------------------------------------------------------------------------*/\n\n\nfunction isBgEvent(event) { // returns true if background OR inverse-background\n\tvar rendering = getEventRendering(event);\n\treturn rendering === 'background' || rendering === 'inverse-background';\n}\n\n\nfunction isInverseBgEvent(event) {\n\treturn getEventRendering(event) === 'inverse-background';\n}\n\n\nfunction getEventRendering(event) {\n\treturn firstDefined((event.source || {}).rendering, event.rendering);\n}\n\n\nfunction groupEventsById(events) {\n\tvar eventsById = {};\n\tvar i, event;\n\n\tfor (i = 0; i < events.length; i++) {\n\t\tevent = events[i];\n\t\t(eventsById[event._id] || (eventsById[event._id] = [])).push(event);\n\t}\n\n\treturn eventsById;\n}\n\n\n// A cmp function for determining which non-inverted \"ranges\" (see above) happen earlier\nfunction compareRanges(range1, range2) {\n\treturn range1.start - range2.start; // earlier ranges go first\n}\n\n\n/* External-Dragging-Element Data\n----------------------------------------------------------------------------------------------------------------------*/\n\n// Require all HTML5 data-* attributes used by FullCalendar to have this prefix.\n// A value of '' will query attributes like data-event. A value of 'fc' will query attributes like data-fc-event.\nFC.dataAttrPrefix = '';\n\n// Given a jQuery element that might represent a dragged FullCalendar event, returns an intermediate data structure\n// to be used for Event Object creation.\n// A defined `.eventProps`, even when empty, indicates that an event should be created.\nfunction getDraggedElMeta(el) {\n\tvar prefix = FC.dataAttrPrefix;\n\tvar eventProps; // properties for creating the event, not related to date/time\n\tvar startTime; // a Duration\n\tvar duration;\n\tvar stick;\n\n\tif (prefix) { prefix += '-'; }\n\teventProps = el.data(prefix + 'event') || null;\n\n\tif (eventProps) {\n\t\tif (typeof eventProps === 'object') {\n\t\t\teventProps = $.extend({}, eventProps); // make a copy\n\t\t}\n\t\telse { // something like 1 or true. still signal event creation\n\t\t\teventProps = {};\n\t\t}\n\n\t\t// pluck special-cased date/time properties\n\t\tstartTime = eventProps.start;\n\t\tif (startTime == null) { startTime = eventProps.time; } // accept 'time' as well\n\t\tduration = eventProps.duration;\n\t\tstick = eventProps.stick;\n\t\tdelete eventProps.start;\n\t\tdelete eventProps.time;\n\t\tdelete eventProps.duration;\n\t\tdelete eventProps.stick;\n\t}\n\n\t// fallback to standalone attribute values for each of the date/time properties\n\tif (startTime == null) { startTime = el.data(prefix + 'start'); }\n\tif (startTime == null) { startTime = el.data(prefix + 'time'); } // accept 'time' as well\n\tif (duration == null) { duration = el.data(prefix + 'duration'); }\n\tif (stick == null) { stick = el.data(prefix + 'stick'); }\n\n\t// massage into correct data types\n\tstartTime = startTime != null ? moment.duration(startTime) : null;\n\tduration = duration != null ? moment.duration(duration) : null;\n\tstick = Boolean(stick);\n\n\treturn { eventProps: eventProps, startTime: startTime, duration: duration, stick: stick };\n}\n\n\n;;\n\n/*\nA set of rendering and date-related methods for a visual component comprised of one or more rows of day columns.\nPrerequisite: the object being mixed into needs to be a *Grid*\n*/\nvar DayTableMixin = FC.DayTableMixin = {\n\n\tbreakOnWeeks: false, // should create a new row for each week?\n\tdayDates: null, // whole-day dates for each column. left to right\n\tdayIndices: null, // for each day from start, the offset\n\tdaysPerRow: null,\n\trowCnt: null,\n\tcolCnt: null,\n\tcolHeadFormat: null,\n\n\n\t// Populates internal variables used for date calculation and rendering\n\tupdateDayTable: function() {\n\t\tvar view = this.view;\n\t\tvar date = this.start.clone();\n\t\tvar dayIndex = -1;\n\t\tvar dayIndices = [];\n\t\tvar dayDates = [];\n\t\tvar daysPerRow;\n\t\tvar firstDay;\n\t\tvar rowCnt;\n\n\t\twhile (date.isBefore(this.end)) { // loop each day from start to end\n\t\t\tif (view.isHiddenDay(date)) {\n\t\t\t\tdayIndices.push(dayIndex + 0.5); // mark that it's between indices\n\t\t\t}\n\t\t\telse {\n\t\t\t\tdayIndex++;\n\t\t\t\tdayIndices.push(dayIndex);\n\t\t\t\tdayDates.push(date.clone());\n\t\t\t}\n\t\t\tdate.add(1, 'days');\n\t\t}\n\n\t\tif (this.breakOnWeeks) {\n\t\t\t// count columns until the day-of-week repeats\n\t\t\tfirstDay = dayDates[0].day();\n\t\t\tfor (daysPerRow = 1; daysPerRow < dayDates.length; daysPerRow++) {\n\t\t\t\tif (dayDates[daysPerRow].day() == firstDay) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\trowCnt = Math.ceil(dayDates.length / daysPerRow);\n\t\t}\n\t\telse {\n\t\t\trowCnt = 1;\n\t\t\tdaysPerRow = dayDates.length;\n\t\t}\n\n\t\tthis.dayDates = dayDates;\n\t\tthis.dayIndices = dayIndices;\n\t\tthis.daysPerRow = daysPerRow;\n\t\tthis.rowCnt = rowCnt;\n\t\t\n\t\tthis.updateDayTableCols();\n\t},\n\n\n\t// Computes and assigned the colCnt property and updates any options that may be computed from it\n\tupdateDayTableCols: function() {\n\t\tthis.colCnt = this.computeColCnt();\n\t\tthis.colHeadFormat = this.view.opt('columnFormat') || this.computeColHeadFormat();\n\t},\n\n\n\t// Determines how many columns there should be in the table\n\tcomputeColCnt: function() {\n\t\treturn this.daysPerRow;\n\t},\n\n\n\t// Computes the ambiguously-timed moment for the given cell\n\tgetCellDate: function(row, col) {\n\t\treturn this.dayDates[\n\t\t\t\tthis.getCellDayIndex(row, col)\n\t\t\t].clone();\n\t},\n\n\n\t// Computes the ambiguously-timed date range for the given cell\n\tgetCellRange: function(row, col) {\n\t\tvar start = this.getCellDate(row, col);\n\t\tvar end = start.clone().add(1, 'days');\n\n\t\treturn { start: start, end: end };\n\t},\n\n\n\t// Returns the number of day cells, chronologically, from the first of the grid (0-based)\n\tgetCellDayIndex: function(row, col) {\n\t\treturn row * this.daysPerRow + this.getColDayIndex(col);\n\t},\n\n\n\t// Returns the numner of day cells, chronologically, from the first cell in *any given row*\n\tgetColDayIndex: function(col) {\n\t\tif (this.isRTL) {\n\t\t\treturn this.colCnt - 1 - col;\n\t\t}\n\t\telse {\n\t\t\treturn col;\n\t\t}\n\t},\n\n\n\t// Given a date, returns its chronolocial cell-index from the first cell of the grid.\n\t// If the date lies between cells (because of hiddenDays), returns a floating-point value between offsets.\n\t// If before the first offset, returns a negative number.\n\t// If after the last offset, returns an offset past the last cell offset.\n\t// Only works for *start* dates of cells. Will not work for exclusive end dates for cells.\n\tgetDateDayIndex: function(date) {\n\t\tvar dayIndices = this.dayIndices;\n\t\tvar dayOffset = date.diff(this.start, 'days');\n\n\t\tif (dayOffset < 0) {\n\t\t\treturn dayIndices[0] - 1;\n\t\t}\n\t\telse if (dayOffset >= dayIndices.length) {\n\t\t\treturn dayIndices[dayIndices.length - 1] + 1;\n\t\t}\n\t\telse {\n\t\t\treturn dayIndices[dayOffset];\n\t\t}\n\t},\n\n\n\t/* Options\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Computes a default column header formatting string if `colFormat` is not explicitly defined\n\tcomputeColHeadFormat: function() {\n\t\t// if more than one week row, or if there are a lot of columns with not much space,\n\t\t// put just the day numbers will be in each cell\n\t\tif (this.rowCnt > 1 || this.colCnt > 10) {\n\t\t\treturn 'ddd'; // \"Sat\"\n\t\t}\n\t\t// multiple days, so full single date string WON'T be in title text\n\t\telse if (this.colCnt > 1) {\n\t\t\treturn this.view.opt('dayOfMonthFormat'); // \"Sat 12/10\"\n\t\t}\n\t\t// single day, so full single date string will probably be in title text\n\t\telse {\n\t\t\treturn 'dddd'; // \"Saturday\"\n\t\t}\n\t},\n\n\n\t/* Slicing\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Slices up a date range into a segment for every week-row it intersects with\n\tsliceRangeByRow: function(range) {\n\t\tvar daysPerRow = this.daysPerRow;\n\t\tvar normalRange = this.view.computeDayRange(range); // make whole-day range, considering nextDayThreshold\n\t\tvar rangeFirst = this.getDateDayIndex(normalRange.start); // inclusive first index\n\t\tvar rangeLast = this.getDateDayIndex(normalRange.end.clone().subtract(1, 'days')); // inclusive last index\n\t\tvar segs = [];\n\t\tvar row;\n\t\tvar rowFirst, rowLast; // inclusive day-index range for current row\n\t\tvar segFirst, segLast; // inclusive day-index range for segment\n\n\t\tfor (row = 0; row < this.rowCnt; row++) {\n\t\t\trowFirst = row * daysPerRow;\n\t\t\trowLast = rowFirst + daysPerRow - 1;\n\n\t\t\t// intersect segment's offset range with the row's\n\t\t\tsegFirst = Math.max(rangeFirst, rowFirst);\n\t\t\tsegLast = Math.min(rangeLast, rowLast);\n\n\t\t\t// deal with in-between indices\n\t\t\tsegFirst = Math.ceil(segFirst); // in-between starts round to next cell\n\t\t\tsegLast = Math.floor(segLast); // in-between ends round to prev cell\n\n\t\t\tif (segFirst <= segLast) { // was there any intersection with the current row?\n\t\t\t\tsegs.push({\n\t\t\t\t\trow: row,\n\n\t\t\t\t\t// normalize to start of row\n\t\t\t\t\tfirstRowDayIndex: segFirst - rowFirst,\n\t\t\t\t\tlastRowDayIndex: segLast - rowFirst,\n\n\t\t\t\t\t// must be matching integers to be the segment's start/end\n\t\t\t\t\tisStart: segFirst === rangeFirst,\n\t\t\t\t\tisEnd: segLast === rangeLast\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\treturn segs;\n\t},\n\n\n\t// Slices up a date range into a segment for every day-cell it intersects with.\n\t// TODO: make more DRY with sliceRangeByRow somehow.\n\tsliceRangeByDay: function(range) {\n\t\tvar daysPerRow = this.daysPerRow;\n\t\tvar normalRange = this.view.computeDayRange(range); // make whole-day range, considering nextDayThreshold\n\t\tvar rangeFirst = this.getDateDayIndex(normalRange.start); // inclusive first index\n\t\tvar rangeLast = this.getDateDayIndex(normalRange.end.clone().subtract(1, 'days')); // inclusive last index\n\t\tvar segs = [];\n\t\tvar row;\n\t\tvar rowFirst, rowLast; // inclusive day-index range for current row\n\t\tvar i;\n\t\tvar segFirst, segLast; // inclusive day-index range for segment\n\n\t\tfor (row = 0; row < this.rowCnt; row++) {\n\t\t\trowFirst = row * daysPerRow;\n\t\t\trowLast = rowFirst + daysPerRow - 1;\n\n\t\t\tfor (i = rowFirst; i <= rowLast; i++) {\n\n\t\t\t\t// intersect segment's offset range with the row's\n\t\t\t\tsegFirst = Math.max(rangeFirst, i);\n\t\t\t\tsegLast = Math.min(rangeLast, i);\n\n\t\t\t\t// deal with in-between indices\n\t\t\t\tsegFirst = Math.ceil(segFirst); // in-between starts round to next cell\n\t\t\t\tsegLast = Math.floor(segLast); // in-between ends round to prev cell\n\n\t\t\t\tif (segFirst <= segLast) { // was there any intersection with the current row?\n\t\t\t\t\tsegs.push({\n\t\t\t\t\t\trow: row,\n\n\t\t\t\t\t\t// normalize to start of row\n\t\t\t\t\t\tfirstRowDayIndex: segFirst - rowFirst,\n\t\t\t\t\t\tlastRowDayIndex: segLast - rowFirst,\n\n\t\t\t\t\t\t// must be matching integers to be the segment's start/end\n\t\t\t\t\t\tisStart: segFirst === rangeFirst,\n\t\t\t\t\t\tisEnd: segLast === rangeLast\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn segs;\n\t},\n\n\n\t/* Header Rendering\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\trenderHeadHtml: function() {\n\t\tvar view = this.view;\n\n\t\treturn '' +\n\t\t\t'<div class=\"fc-row ' + view.widgetHeaderClass + '\">' +\n\t\t\t\t'<table>' +\n\t\t\t\t\t'<thead>' +\n\t\t\t\t\t\tthis.renderHeadTrHtml() +\n\t\t\t\t\t'</thead>' +\n\t\t\t\t'</table>' +\n\t\t\t'</div>';\n\t},\n\n\n\trenderHeadIntroHtml: function() {\n\t\treturn this.renderIntroHtml(); // fall back to generic\n\t},\n\n\n\trenderHeadTrHtml: function() {\n\t\treturn '' +\n\t\t\t'<tr>' +\n\t\t\t\t(this.isRTL ? '' : this.renderHeadIntroHtml()) +\n\t\t\t\tthis.renderHeadDateCellsHtml() +\n\t\t\t\t(this.isRTL ? this.renderHeadIntroHtml() : '') +\n\t\t\t'</tr>';\n\t},\n\n\n\trenderHeadDateCellsHtml: function() {\n\t\tvar htmls = [];\n\t\tvar col, date;\n\n\t\tfor (col = 0; col < this.colCnt; col++) {\n\t\t\tdate = this.getCellDate(0, col);\n\t\t\thtmls.push(this.renderHeadDateCellHtml(date));\n\t\t}\n\n\t\treturn htmls.join('');\n\t},\n\n\n\trenderHeadDateCellHtml: function(date, colspan) {\n\t\tvar view = this.view;\n\n\t\treturn '' +\n\t\t\t'<th class=\"fc-day-header ' + view.widgetHeaderClass + ' fc-' + dayIDs[date.day()] + '\"' +\n\t\t\t\t(colspan > 1 ? ' colspan=\"' + colspan + '\"' : '') +\n\t\t\t\t'>' +\n\t\t\t\thtmlEscape(date.format(this.colHeadFormat)) +\n\t\t\t'</th>';\n\t},\n\n\n\t/* Background Rendering\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\trenderBgTrHtml: function(row) {\n\t\treturn '' +\n\t\t\t'<tr>' +\n\t\t\t\t(this.isRTL ? '' : this.renderBgIntroHtml(row)) +\n\t\t\t\tthis.renderBgCellsHtml(row) +\n\t\t\t\t(this.isRTL ? this.renderBgIntroHtml(row) : '') +\n\t\t\t'</tr>';\n\t},\n\n\n\trenderBgIntroHtml: function(row) {\n\t\treturn this.renderIntroHtml(); // fall back to generic\n\t},\n\n\n\trenderBgCellsHtml: function(row) {\n\t\tvar htmls = [];\n\t\tvar col, date;\n\n\t\tfor (col = 0; col < this.colCnt; col++) {\n\t\t\tdate = this.getCellDate(row, col);\n\t\t\thtmls.push(this.renderBgCellHtml(date));\n\t\t}\n\n\t\treturn htmls.join('');\n\t},\n\n\n\trenderBgCellHtml: function(date) {\n\t\tvar view = this.view;\n\t\tvar classes = this.getDayClasses(date);\n\n\t\tclasses.unshift('fc-day', view.widgetContentClass);\n\n\t\treturn '<td class=\"' + classes.join(' ') + '\"' +\n\t\t\t' data-date=\"' + date.format('YYYY-MM-DD') + '\"' + // if date has a time, won't format it\n\t\t\t'></td>';\n\t},\n\n\n\t/* Generic\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Generates the default HTML intro for any row. User classes should override\n\trenderIntroHtml: function() {\n\t},\n\n\n\t/* Utils\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Applies the generic \"intro\" and \"outro\" HTML to the given cells.\n\t// Intro means the leftmost cell when the calendar is LTR and the rightmost cell when RTL. Vice-versa for outro.\n\tbookendCells: function(trEl) {\n\t\tvar introHtml = this.renderIntroHtml();\n\n\t\tif (introHtml) {\n\t\t\tif (this.isRTL) {\n\t\t\t\ttrEl.append(introHtml);\n\t\t\t}\n\t\t\telse {\n\t\t\t\ttrEl.prepend(introHtml);\n\t\t\t}\n\t\t}\n\t}\n\n};\n\n;;\n\n/* A component that renders a grid of whole-days that runs horizontally. There can be multiple rows, one per week.\n----------------------------------------------------------------------------------------------------------------------*/\n\nvar DayGrid = FC.DayGrid = Grid.extend(DayTableMixin, {\n\n\tnumbersVisible: false, // should render a row for day/week numbers? set by outside view. TODO: make internal\n\tbottomCoordPadding: 0, // hack for extending the hit area for the last row of the coordinate grid\n\n\trowEls: null, // set of fake row elements\n\tcellEls: null, // set of whole-day elements comprising the row's background\n\thelperEls: null, // set of cell skeleton elements for rendering the mock event \"helper\"\n\n\trowCoordCache: null,\n\tcolCoordCache: null,\n\n\n\t// Renders the rows and columns into the component's `this.el`, which should already be assigned.\n\t// isRigid determins whether the individual rows should ignore the contents and be a constant height.\n\t// Relies on the view's colCnt and rowCnt. In the future, this component should probably be self-sufficient.\n\trenderDates: function(isRigid) {\n\t\tvar view = this.view;\n\t\tvar rowCnt = this.rowCnt;\n\t\tvar colCnt = this.colCnt;\n\t\tvar html = '';\n\t\tvar row;\n\t\tvar col;\n\n\t\tfor (row = 0; row < rowCnt; row++) {\n\t\t\thtml += this.renderDayRowHtml(row, isRigid);\n\t\t}\n\t\tthis.el.html(html);\n\n\t\tthis.rowEls = this.el.find('.fc-row');\n\t\tthis.cellEls = this.el.find('.fc-day');\n\n\t\tthis.rowCoordCache = new CoordCache({\n\t\t\tels: this.rowEls,\n\t\t\tisVertical: true\n\t\t});\n\t\tthis.colCoordCache = new CoordCache({\n\t\t\tels: this.cellEls.slice(0, this.colCnt), // only the first row\n\t\t\tisHorizontal: true\n\t\t});\n\n\t\t// trigger dayRender with each cell's element\n\t\tfor (row = 0; row < rowCnt; row++) {\n\t\t\tfor (col = 0; col < colCnt; col++) {\n\t\t\t\tview.trigger(\n\t\t\t\t\t'dayRender',\n\t\t\t\t\tnull,\n\t\t\t\t\tthis.getCellDate(row, col),\n\t\t\t\t\tthis.getCellEl(row, col)\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t},\n\n\n\tunrenderDates: function() {\n\t\tthis.removeSegPopover();\n\t},\n\n\n\trenderBusinessHours: function() {\n\t\tvar events = this.view.calendar.getBusinessHoursEvents(true); // wholeDay=true\n\t\tvar segs = this.eventsToSegs(events);\n\n\t\tthis.renderFill('businessHours', segs, 'bgevent');\n\t},\n\n\n\t// Generates the HTML for a single row, which is a div that wraps a table.\n\t// `row` is the row number.\n\trenderDayRowHtml: function(row, isRigid) {\n\t\tvar view = this.view;\n\t\tvar classes = [ 'fc-row', 'fc-week', view.widgetContentClass ];\n\n\t\tif (isRigid) {\n\t\t\tclasses.push('fc-rigid');\n\t\t}\n\n\t\treturn '' +\n\t\t\t'<div class=\"' + classes.join(' ') + '\">' +\n\t\t\t\t'<div class=\"fc-bg\">' +\n\t\t\t\t\t'<table>' +\n\t\t\t\t\t\tthis.renderBgTrHtml(row) +\n\t\t\t\t\t'</table>' +\n\t\t\t\t'</div>' +\n\t\t\t\t'<div class=\"fc-content-skeleton\">' +\n\t\t\t\t\t'<table>' +\n\t\t\t\t\t\t(this.numbersVisible ?\n\t\t\t\t\t\t\t'<thead>' +\n\t\t\t\t\t\t\t\tthis.renderNumberTrHtml(row) +\n\t\t\t\t\t\t\t'</thead>' :\n\t\t\t\t\t\t\t''\n\t\t\t\t\t\t\t) +\n\t\t\t\t\t'</table>' +\n\t\t\t\t'</div>' +\n\t\t\t'</div>';\n\t},\n\n\n\t/* Grid Number Rendering\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\trenderNumberTrHtml: function(row) {\n\t\treturn '' +\n\t\t\t'<tr>' +\n\t\t\t\t(this.isRTL ? '' : this.renderNumberIntroHtml(row)) +\n\t\t\t\tthis.renderNumberCellsHtml(row) +\n\t\t\t\t(this.isRTL ? this.renderNumberIntroHtml(row) : '') +\n\t\t\t'</tr>';\n\t},\n\n\n\trenderNumberIntroHtml: function(row) {\n\t\treturn this.renderIntroHtml();\n\t},\n\n\n\trenderNumberCellsHtml: function(row) {\n\t\tvar htmls = [];\n\t\tvar col, date;\n\n\t\tfor (col = 0; col < this.colCnt; col++) {\n\t\t\tdate = this.getCellDate(row, col);\n\t\t\thtmls.push(this.renderNumberCellHtml(date));\n\t\t}\n\n\t\treturn htmls.join('');\n\t},\n\n\n\t// Generates the HTML for the <td>s of the \"number\" row in the DayGrid's content skeleton.\n\t// The number row will only exist if either day numbers or week numbers are turned on.\n\trenderNumberCellHtml: function(date) {\n\t\tvar classes;\n\n\t\tif (!this.view.dayNumbersVisible) { // if there are week numbers but not day numbers\n\t\t\treturn '<td/>'; //  will create an empty space above events :(\n\t\t}\n\n\t\tclasses = this.getDayClasses(date);\n\t\tclasses.unshift('fc-day-number');\n\n\t\treturn '' +\n\t\t\t'<td class=\"' + classes.join(' ') + '\" data-date=\"' + date.format() + '\">' +\n\t\t\t\tdate.date() +\n\t\t\t'</td>';\n\t},\n\n\n\t/* Options\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Computes a default event time formatting string if `timeFormat` is not explicitly defined\n\tcomputeEventTimeFormat: function() {\n\t\treturn this.view.opt('extraSmallTimeFormat'); // like \"6p\" or \"6:30p\"\n\t},\n\n\n\t// Computes a default `displayEventEnd` value if one is not expliclty defined\n\tcomputeDisplayEventEnd: function() {\n\t\treturn this.colCnt == 1; // we'll likely have space if there's only one day\n\t},\n\n\n\t/* Dates\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\trangeUpdated: function() {\n\t\tthis.updateDayTable();\n\t},\n\n\n\t// Slices up the given span (unzoned start/end with other misc data) into an array of segments\n\tspanToSegs: function(span) {\n\t\tvar segs = this.sliceRangeByRow(span);\n\t\tvar i, seg;\n\n\t\tfor (i = 0; i < segs.length; i++) {\n\t\t\tseg = segs[i];\n\t\t\tif (this.isRTL) {\n\t\t\t\tseg.leftCol = this.daysPerRow - 1 - seg.lastRowDayIndex;\n\t\t\t\tseg.rightCol = this.daysPerRow - 1 - seg.firstRowDayIndex;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tseg.leftCol = seg.firstRowDayIndex;\n\t\t\t\tseg.rightCol = seg.lastRowDayIndex;\n\t\t\t}\n\t\t}\n\n\t\treturn segs;\n\t},\n\n\n\t/* Hit System\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\tprepareHits: function() {\n\t\tthis.colCoordCache.build();\n\t\tthis.rowCoordCache.build();\n\t\tthis.rowCoordCache.bottoms[this.rowCnt - 1] += this.bottomCoordPadding; // hack\n\t},\n\n\n\treleaseHits: function() {\n\t\tthis.colCoordCache.clear();\n\t\tthis.rowCoordCache.clear();\n\t},\n\n\n\tqueryHit: function(leftOffset, topOffset) {\n\t\tvar col = this.colCoordCache.getHorizontalIndex(leftOffset);\n\t\tvar row = this.rowCoordCache.getVerticalIndex(topOffset);\n\n\t\tif (row != null && col != null) {\n\t\t\treturn this.getCellHit(row, col);\n\t\t}\n\t},\n\n\n\tgetHitSpan: function(hit) {\n\t\treturn this.getCellRange(hit.row, hit.col);\n\t},\n\n\n\tgetHitEl: function(hit) {\n\t\treturn this.getCellEl(hit.row, hit.col);\n\t},\n\n\n\t/* Cell System\n\t------------------------------------------------------------------------------------------------------------------*/\n\t// FYI: the first column is the leftmost column, regardless of date\n\n\n\tgetCellHit: function(row, col) {\n\t\treturn {\n\t\t\trow: row,\n\t\t\tcol: col,\n\t\t\tcomponent: this, // needed unfortunately :(\n\t\t\tleft: this.colCoordCache.getLeftOffset(col),\n\t\t\tright: this.colCoordCache.getRightOffset(col),\n\t\t\ttop: this.rowCoordCache.getTopOffset(row),\n\t\t\tbottom: this.rowCoordCache.getBottomOffset(row)\n\t\t};\n\t},\n\n\n\tgetCellEl: function(row, col) {\n\t\treturn this.cellEls.eq(row * this.colCnt + col);\n\t},\n\n\n\t/* Event Drag Visualization\n\t------------------------------------------------------------------------------------------------------------------*/\n\t// TODO: move to DayGrid.event, similar to what we did with Grid's drag methods\n\n\n\t// Renders a visual indication of an event or external element being dragged.\n\t// `eventLocation` has zoned start and end (optional)\n\trenderDrag: function(eventLocation, seg) {\n\n\t\t// always render a highlight underneath\n\t\tthis.renderHighlight(this.eventToSpan(eventLocation));\n\n\t\t// if a segment from the same calendar but another component is being dragged, render a helper event\n\t\tif (seg && !seg.el.closest(this.el).length) {\n\n\t\t\tthis.renderEventLocationHelper(eventLocation, seg);\n\t\t\tthis.applyDragOpacity(this.helperEls);\n\n\t\t\treturn true; // a helper has been rendered\n\t\t}\n\t},\n\n\n\t// Unrenders any visual indication of a hovering event\n\tunrenderDrag: function() {\n\t\tthis.unrenderHighlight();\n\t\tthis.unrenderHelper();\n\t},\n\n\n\t/* Event Resize Visualization\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Renders a visual indication of an event being resized\n\trenderEventResize: function(eventLocation, seg) {\n\t\tthis.renderHighlight(this.eventToSpan(eventLocation));\n\t\tthis.renderEventLocationHelper(eventLocation, seg);\n\t},\n\n\n\t// Unrenders a visual indication of an event being resized\n\tunrenderEventResize: function() {\n\t\tthis.unrenderHighlight();\n\t\tthis.unrenderHelper();\n\t},\n\n\n\t/* Event Helper\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Renders a mock \"helper\" event. `sourceSeg` is the associated internal segment object. It can be null.\n\trenderHelper: function(event, sourceSeg) {\n\t\tvar helperNodes = [];\n\t\tvar segs = this.eventToSegs(event);\n\t\tvar rowStructs;\n\n\t\tsegs = this.renderFgSegEls(segs); // assigns each seg's el and returns a subset of segs that were rendered\n\t\trowStructs = this.renderSegRows(segs);\n\n\t\t// inject each new event skeleton into each associated row\n\t\tthis.rowEls.each(function(row, rowNode) {\n\t\t\tvar rowEl = $(rowNode); // the .fc-row\n\t\t\tvar skeletonEl = $('<div class=\"fc-helper-skeleton\"><table/></div>'); // will be absolutely positioned\n\t\t\tvar skeletonTop;\n\n\t\t\t// If there is an original segment, match the top position. Otherwise, put it at the row's top level\n\t\t\tif (sourceSeg && sourceSeg.row === row) {\n\t\t\t\tskeletonTop = sourceSeg.el.position().top;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tskeletonTop = rowEl.find('.fc-content-skeleton tbody').position().top;\n\t\t\t}\n\n\t\t\tskeletonEl.css('top', skeletonTop)\n\t\t\t\t.find('table')\n\t\t\t\t\t.append(rowStructs[row].tbodyEl);\n\n\t\t\trowEl.append(skeletonEl);\n\t\t\thelperNodes.push(skeletonEl[0]);\n\t\t});\n\n\t\tthis.helperEls = $(helperNodes); // array -> jQuery set\n\t},\n\n\n\t// Unrenders any visual indication of a mock helper event\n\tunrenderHelper: function() {\n\t\tif (this.helperEls) {\n\t\t\tthis.helperEls.remove();\n\t\t\tthis.helperEls = null;\n\t\t}\n\t},\n\n\n\t/* Fill System (highlight, background events, business hours)\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\tfillSegTag: 'td', // override the default tag name\n\n\n\t// Renders a set of rectangles over the given segments of days.\n\t// Only returns segments that successfully rendered.\n\trenderFill: function(type, segs, className) {\n\t\tvar nodes = [];\n\t\tvar i, seg;\n\t\tvar skeletonEl;\n\n\t\tsegs = this.renderFillSegEls(type, segs); // assignes `.el` to each seg. returns successfully rendered segs\n\n\t\tfor (i = 0; i < segs.length; i++) {\n\t\t\tseg = segs[i];\n\t\t\tskeletonEl = this.renderFillRow(type, seg, className);\n\t\t\tthis.rowEls.eq(seg.row).append(skeletonEl);\n\t\t\tnodes.push(skeletonEl[0]);\n\t\t}\n\n\t\tthis.elsByFill[type] = $(nodes);\n\n\t\treturn segs;\n\t},\n\n\n\t// Generates the HTML needed for one row of a fill. Requires the seg's el to be rendered.\n\trenderFillRow: function(type, seg, className) {\n\t\tvar colCnt = this.colCnt;\n\t\tvar startCol = seg.leftCol;\n\t\tvar endCol = seg.rightCol + 1;\n\t\tvar skeletonEl;\n\t\tvar trEl;\n\n\t\tclassName = className || type.toLowerCase();\n\n\t\tskeletonEl = $(\n\t\t\t'<div class=\"fc-' + className + '-skeleton\">' +\n\t\t\t\t'<table><tr/></table>' +\n\t\t\t'</div>'\n\t\t);\n\t\ttrEl = skeletonEl.find('tr');\n\n\t\tif (startCol > 0) {\n\t\t\ttrEl.append('<td colspan=\"' + startCol + '\"/>');\n\t\t}\n\n\t\ttrEl.append(\n\t\t\tseg.el.attr('colspan', endCol - startCol)\n\t\t);\n\n\t\tif (endCol < colCnt) {\n\t\t\ttrEl.append('<td colspan=\"' + (colCnt - endCol) + '\"/>');\n\t\t}\n\n\t\tthis.bookendCells(trEl);\n\n\t\treturn skeletonEl;\n\t}\n\n});\n\n;;\n\n/* Event-rendering methods for the DayGrid class\n----------------------------------------------------------------------------------------------------------------------*/\n\nDayGrid.mixin({\n\n\trowStructs: null, // an array of objects, each holding information about a row's foreground event-rendering\n\n\n\t// Unrenders all events currently rendered on the grid\n\tunrenderEvents: function() {\n\t\tthis.removeSegPopover(); // removes the \"more..\" events popover\n\t\tGrid.prototype.unrenderEvents.apply(this, arguments); // calls the super-method\n\t},\n\n\n\t// Retrieves all rendered segment objects currently rendered on the grid\n\tgetEventSegs: function() {\n\t\treturn Grid.prototype.getEventSegs.call(this) // get the segments from the super-method\n\t\t\t.concat(this.popoverSegs || []); // append the segments from the \"more...\" popover\n\t},\n\n\n\t// Renders the given background event segments onto the grid\n\trenderBgSegs: function(segs) {\n\n\t\t// don't render timed background events\n\t\tvar allDaySegs = $.grep(segs, function(seg) {\n\t\t\treturn seg.event.allDay;\n\t\t});\n\n\t\treturn Grid.prototype.renderBgSegs.call(this, allDaySegs); // call the super-method\n\t},\n\n\n\t// Renders the given foreground event segments onto the grid\n\trenderFgSegs: function(segs) {\n\t\tvar rowStructs;\n\n\t\t// render an `.el` on each seg\n\t\t// returns a subset of the segs. segs that were actually rendered\n\t\tsegs = this.renderFgSegEls(segs);\n\n\t\trowStructs = this.rowStructs = this.renderSegRows(segs);\n\n\t\t// append to each row's content skeleton\n\t\tthis.rowEls.each(function(i, rowNode) {\n\t\t\t$(rowNode).find('.fc-content-skeleton > table').append(\n\t\t\t\trowStructs[i].tbodyEl\n\t\t\t);\n\t\t});\n\n\t\treturn segs; // return only the segs that were actually rendered\n\t},\n\n\n\t// Unrenders all currently rendered foreground event segments\n\tunrenderFgSegs: function() {\n\t\tvar rowStructs = this.rowStructs || [];\n\t\tvar rowStruct;\n\n\t\twhile ((rowStruct = rowStructs.pop())) {\n\t\t\trowStruct.tbodyEl.remove();\n\t\t}\n\n\t\tthis.rowStructs = null;\n\t},\n\n\n\t// Uses the given events array to generate <tbody> elements that should be appended to each row's content skeleton.\n\t// Returns an array of rowStruct objects (see the bottom of `renderSegRow`).\n\t// PRECONDITION: each segment shoud already have a rendered and assigned `.el`\n\trenderSegRows: function(segs) {\n\t\tvar rowStructs = [];\n\t\tvar segRows;\n\t\tvar row;\n\n\t\tsegRows = this.groupSegRows(segs); // group into nested arrays\n\n\t\t// iterate each row of segment groupings\n\t\tfor (row = 0; row < segRows.length; row++) {\n\t\t\trowStructs.push(\n\t\t\t\tthis.renderSegRow(row, segRows[row])\n\t\t\t);\n\t\t}\n\n\t\treturn rowStructs;\n\t},\n\n\n\t// Builds the HTML to be used for the default element for an individual segment\n\tfgSegHtml: function(seg, disableResizing) {\n\t\tvar view = this.view;\n\t\tvar event = seg.event;\n\t\tvar isDraggable = view.isEventDraggable(event);\n\t\tvar isResizableFromStart = !disableResizing && event.allDay &&\n\t\t\tseg.isStart && view.isEventResizableFromStart(event);\n\t\tvar isResizableFromEnd = !disableResizing && event.allDay &&\n\t\t\tseg.isEnd && view.isEventResizableFromEnd(event);\n\t\tvar classes = this.getSegClasses(seg, isDraggable, isResizableFromStart || isResizableFromEnd);\n\t\tvar skinCss = cssToStr(this.getEventSkinCss(event));\n\t\tvar timeHtml = '';\n\t\tvar timeText;\n\t\tvar titleHtml;\n\n\t\tclasses.unshift('fc-day-grid-event', 'fc-h-event');\n\n\t\t// Only display a timed events time if it is the starting segment\n\t\tif (seg.isStart) {\n\t\t\ttimeText = this.getEventTimeText(event);\n\t\t\tif (timeText) {\n\t\t\t\ttimeHtml = '<span class=\"fc-time\">' + htmlEscape(timeText) + '</span>';\n\t\t\t}\n\t\t}\n\n\t\ttitleHtml =\n\t\t\t'<span class=\"fc-title\">' +\n\t\t\t\t(htmlEscape(event.title || '') || '&nbsp;') + // we always want one line of height\n\t\t\t'</span>';\n\t\t\n\t\treturn '<a class=\"' + classes.join(' ') + '\"' +\n\t\t\t\t(event.url ?\n\t\t\t\t\t' href=\"' + htmlEscape(event.url) + '\"' :\n\t\t\t\t\t''\n\t\t\t\t\t) +\n\t\t\t\t(skinCss ?\n\t\t\t\t\t' style=\"' + skinCss + '\"' :\n\t\t\t\t\t''\n\t\t\t\t\t) +\n\t\t\t'>' +\n\t\t\t\t'<div class=\"fc-content\">' +\n\t\t\t\t\t(this.isRTL ?\n\t\t\t\t\t\ttitleHtml + ' ' + timeHtml : // put a natural space in between\n\t\t\t\t\t\ttimeHtml + ' ' + titleHtml   //\n\t\t\t\t\t\t) +\n\t\t\t\t'</div>' +\n\t\t\t\t(isResizableFromStart ?\n\t\t\t\t\t'<div class=\"fc-resizer fc-start-resizer\" />' :\n\t\t\t\t\t''\n\t\t\t\t\t) +\n\t\t\t\t(isResizableFromEnd ?\n\t\t\t\t\t'<div class=\"fc-resizer fc-end-resizer\" />' :\n\t\t\t\t\t''\n\t\t\t\t\t) +\n\t\t\t'</a>';\n\t},\n\n\n\t// Given a row # and an array of segments all in the same row, render a <tbody> element, a skeleton that contains\n\t// the segments. Returns object with a bunch of internal data about how the render was calculated.\n\t// NOTE: modifies rowSegs\n\trenderSegRow: function(row, rowSegs) {\n\t\tvar colCnt = this.colCnt;\n\t\tvar segLevels = this.buildSegLevels(rowSegs); // group into sub-arrays of levels\n\t\tvar levelCnt = Math.max(1, segLevels.length); // ensure at least one level\n\t\tvar tbody = $('<tbody/>');\n\t\tvar segMatrix = []; // lookup for which segments are rendered into which level+col cells\n\t\tvar cellMatrix = []; // lookup for all <td> elements of the level+col matrix\n\t\tvar loneCellMatrix = []; // lookup for <td> elements that only take up a single column\n\t\tvar i, levelSegs;\n\t\tvar col;\n\t\tvar tr;\n\t\tvar j, seg;\n\t\tvar td;\n\n\t\t// populates empty cells from the current column (`col`) to `endCol`\n\t\tfunction emptyCellsUntil(endCol) {\n\t\t\twhile (col < endCol) {\n\t\t\t\t// try to grab a cell from the level above and extend its rowspan. otherwise, create a fresh cell\n\t\t\t\ttd = (loneCellMatrix[i - 1] || [])[col];\n\t\t\t\tif (td) {\n\t\t\t\t\ttd.attr(\n\t\t\t\t\t\t'rowspan',\n\t\t\t\t\t\tparseInt(td.attr('rowspan') || 1, 10) + 1\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\ttd = $('<td/>');\n\t\t\t\t\ttr.append(td);\n\t\t\t\t}\n\t\t\t\tcellMatrix[i][col] = td;\n\t\t\t\tloneCellMatrix[i][col] = td;\n\t\t\t\tcol++;\n\t\t\t}\n\t\t}\n\n\t\tfor (i = 0; i < levelCnt; i++) { // iterate through all levels\n\t\t\tlevelSegs = segLevels[i];\n\t\t\tcol = 0;\n\t\t\ttr = $('<tr/>');\n\n\t\t\tsegMatrix.push([]);\n\t\t\tcellMatrix.push([]);\n\t\t\tloneCellMatrix.push([]);\n\n\t\t\t// levelCnt might be 1 even though there are no actual levels. protect against this.\n\t\t\t// this single empty row is useful for styling.\n\t\t\tif (levelSegs) {\n\t\t\t\tfor (j = 0; j < levelSegs.length; j++) { // iterate through segments in level\n\t\t\t\t\tseg = levelSegs[j];\n\n\t\t\t\t\temptyCellsUntil(seg.leftCol);\n\n\t\t\t\t\t// create a container that occupies or more columns. append the event element.\n\t\t\t\t\ttd = $('<td class=\"fc-event-container\"/>').append(seg.el);\n\t\t\t\t\tif (seg.leftCol != seg.rightCol) {\n\t\t\t\t\t\ttd.attr('colspan', seg.rightCol - seg.leftCol + 1);\n\t\t\t\t\t}\n\t\t\t\t\telse { // a single-column segment\n\t\t\t\t\t\tloneCellMatrix[i][col] = td;\n\t\t\t\t\t}\n\n\t\t\t\t\twhile (col <= seg.rightCol) {\n\t\t\t\t\t\tcellMatrix[i][col] = td;\n\t\t\t\t\t\tsegMatrix[i][col] = seg;\n\t\t\t\t\t\tcol++;\n\t\t\t\t\t}\n\n\t\t\t\t\ttr.append(td);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\temptyCellsUntil(colCnt); // finish off the row\n\t\t\tthis.bookendCells(tr);\n\t\t\ttbody.append(tr);\n\t\t}\n\n\t\treturn { // a \"rowStruct\"\n\t\t\trow: row, // the row number\n\t\t\ttbodyEl: tbody,\n\t\t\tcellMatrix: cellMatrix,\n\t\t\tsegMatrix: segMatrix,\n\t\t\tsegLevels: segLevels,\n\t\t\tsegs: rowSegs\n\t\t};\n\t},\n\n\n\t// Stacks a flat array of segments, which are all assumed to be in the same row, into subarrays of vertical levels.\n\t// NOTE: modifies segs\n\tbuildSegLevels: function(segs) {\n\t\tvar levels = [];\n\t\tvar i, seg;\n\t\tvar j;\n\n\t\t// Give preference to elements with certain criteria, so they have\n\t\t// a chance to be closer to the top.\n\t\tthis.sortEventSegs(segs);\n\t\t\n\t\tfor (i = 0; i < segs.length; i++) {\n\t\t\tseg = segs[i];\n\n\t\t\t// loop through levels, starting with the topmost, until the segment doesn't collide with other segments\n\t\t\tfor (j = 0; j < levels.length; j++) {\n\t\t\t\tif (!isDaySegCollision(seg, levels[j])) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// `j` now holds the desired subrow index\n\t\t\tseg.level = j;\n\n\t\t\t// create new level array if needed and append segment\n\t\t\t(levels[j] || (levels[j] = [])).push(seg);\n\t\t}\n\n\t\t// order segments left-to-right. very important if calendar is RTL\n\t\tfor (j = 0; j < levels.length; j++) {\n\t\t\tlevels[j].sort(compareDaySegCols);\n\t\t}\n\n\t\treturn levels;\n\t},\n\n\n\t// Given a flat array of segments, return an array of sub-arrays, grouped by each segment's row\n\tgroupSegRows: function(segs) {\n\t\tvar segRows = [];\n\t\tvar i;\n\n\t\tfor (i = 0; i < this.rowCnt; i++) {\n\t\t\tsegRows.push([]);\n\t\t}\n\n\t\tfor (i = 0; i < segs.length; i++) {\n\t\t\tsegRows[segs[i].row].push(segs[i]);\n\t\t}\n\n\t\treturn segRows;\n\t}\n\n});\n\n\n// Computes whether two segments' columns collide. They are assumed to be in the same row.\nfunction isDaySegCollision(seg, otherSegs) {\n\tvar i, otherSeg;\n\n\tfor (i = 0; i < otherSegs.length; i++) {\n\t\totherSeg = otherSegs[i];\n\n\t\tif (\n\t\t\totherSeg.leftCol <= seg.rightCol &&\n\t\t\totherSeg.rightCol >= seg.leftCol\n\t\t) {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}\n\n\n// A cmp function for determining the leftmost event\nfunction compareDaySegCols(a, b) {\n\treturn a.leftCol - b.leftCol;\n}\n\n;;\n\n/* Methods relate to limiting the number events for a given day on a DayGrid\n----------------------------------------------------------------------------------------------------------------------*/\n// NOTE: all the segs being passed around in here are foreground segs\n\nDayGrid.mixin({\n\n\tsegPopover: null, // the Popover that holds events that can't fit in a cell. null when not visible\n\tpopoverSegs: null, // an array of segment objects that the segPopover holds. null when not visible\n\n\n\tremoveSegPopover: function() {\n\t\tif (this.segPopover) {\n\t\t\tthis.segPopover.hide(); // in handler, will call segPopover's removeElement\n\t\t}\n\t},\n\n\n\t// Limits the number of \"levels\" (vertically stacking layers of events) for each row of the grid.\n\t// `levelLimit` can be false (don't limit), a number, or true (should be computed).\n\tlimitRows: function(levelLimit) {\n\t\tvar rowStructs = this.rowStructs || [];\n\t\tvar row; // row #\n\t\tvar rowLevelLimit;\n\n\t\tfor (row = 0; row < rowStructs.length; row++) {\n\t\t\tthis.unlimitRow(row);\n\n\t\t\tif (!levelLimit) {\n\t\t\t\trowLevelLimit = false;\n\t\t\t}\n\t\t\telse if (typeof levelLimit === 'number') {\n\t\t\t\trowLevelLimit = levelLimit;\n\t\t\t}\n\t\t\telse {\n\t\t\t\trowLevelLimit = this.computeRowLevelLimit(row);\n\t\t\t}\n\n\t\t\tif (rowLevelLimit !== false) {\n\t\t\t\tthis.limitRow(row, rowLevelLimit);\n\t\t\t}\n\t\t}\n\t},\n\n\n\t// Computes the number of levels a row will accomodate without going outside its bounds.\n\t// Assumes the row is \"rigid\" (maintains a constant height regardless of what is inside).\n\t// `row` is the row number.\n\tcomputeRowLevelLimit: function(row) {\n\t\tvar rowEl = this.rowEls.eq(row); // the containing \"fake\" row div\n\t\tvar rowHeight = rowEl.height(); // TODO: cache somehow?\n\t\tvar trEls = this.rowStructs[row].tbodyEl.children();\n\t\tvar i, trEl;\n\t\tvar trHeight;\n\n\t\tfunction iterInnerHeights(i, childNode) {\n\t\t\ttrHeight = Math.max(trHeight, $(childNode).outerHeight());\n\t\t}\n\n\t\t// Reveal one level <tr> at a time and stop when we find one out of bounds\n\t\tfor (i = 0; i < trEls.length; i++) {\n\t\t\ttrEl = trEls.eq(i).removeClass('fc-limited'); // reset to original state (reveal)\n\n\t\t\t// with rowspans>1 and IE8, trEl.outerHeight() would return the height of the largest cell,\n\t\t\t// so instead, find the tallest inner content element.\n\t\t\ttrHeight = 0;\n\t\t\ttrEl.find('> td > :first-child').each(iterInnerHeights);\n\n\t\t\tif (trEl.position().top + trHeight > rowHeight) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\n\t\treturn false; // should not limit at all\n\t},\n\n\n\t// Limits the given grid row to the maximum number of levels and injects \"more\" links if necessary.\n\t// `row` is the row number.\n\t// `levelLimit` is a number for the maximum (inclusive) number of levels allowed.\n\tlimitRow: function(row, levelLimit) {\n\t\tvar _this = this;\n\t\tvar rowStruct = this.rowStructs[row];\n\t\tvar moreNodes = []; // array of \"more\" <a> links and <td> DOM nodes\n\t\tvar col = 0; // col #, left-to-right (not chronologically)\n\t\tvar levelSegs; // array of segment objects in the last allowable level, ordered left-to-right\n\t\tvar cellMatrix; // a matrix (by level, then column) of all <td> jQuery elements in the row\n\t\tvar limitedNodes; // array of temporarily hidden level <tr> and segment <td> DOM nodes\n\t\tvar i, seg;\n\t\tvar segsBelow; // array of segment objects below `seg` in the current `col`\n\t\tvar totalSegsBelow; // total number of segments below `seg` in any of the columns `seg` occupies\n\t\tvar colSegsBelow; // array of segment arrays, below seg, one for each column (offset from segs's first column)\n\t\tvar td, rowspan;\n\t\tvar segMoreNodes; // array of \"more\" <td> cells that will stand-in for the current seg's cell\n\t\tvar j;\n\t\tvar moreTd, moreWrap, moreLink;\n\n\t\t// Iterates through empty level cells and places \"more\" links inside if need be\n\t\tfunction emptyCellsUntil(endCol) { // goes from current `col` to `endCol`\n\t\t\twhile (col < endCol) {\n\t\t\t\tsegsBelow = _this.getCellSegs(row, col, levelLimit);\n\t\t\t\tif (segsBelow.length) {\n\t\t\t\t\ttd = cellMatrix[levelLimit - 1][col];\n\t\t\t\t\tmoreLink = _this.renderMoreLink(row, col, segsBelow);\n\t\t\t\t\tmoreWrap = $('<div/>').append(moreLink);\n\t\t\t\t\ttd.append(moreWrap);\n\t\t\t\t\tmoreNodes.push(moreWrap[0]);\n\t\t\t\t}\n\t\t\t\tcol++;\n\t\t\t}\n\t\t}\n\n\t\tif (levelLimit && levelLimit < rowStruct.segLevels.length) { // is it actually over the limit?\n\t\t\tlevelSegs = rowStruct.segLevels[levelLimit - 1];\n\t\t\tcellMatrix = rowStruct.cellMatrix;\n\n\t\t\tlimitedNodes = rowStruct.tbodyEl.children().slice(levelLimit) // get level <tr> elements past the limit\n\t\t\t\t.addClass('fc-limited').get(); // hide elements and get a simple DOM-nodes array\n\n\t\t\t// iterate though segments in the last allowable level\n\t\t\tfor (i = 0; i < levelSegs.length; i++) {\n\t\t\t\tseg = levelSegs[i];\n\t\t\t\temptyCellsUntil(seg.leftCol); // process empty cells before the segment\n\n\t\t\t\t// determine *all* segments below `seg` that occupy the same columns\n\t\t\t\tcolSegsBelow = [];\n\t\t\t\ttotalSegsBelow = 0;\n\t\t\t\twhile (col <= seg.rightCol) {\n\t\t\t\t\tsegsBelow = this.getCellSegs(row, col, levelLimit);\n\t\t\t\t\tcolSegsBelow.push(segsBelow);\n\t\t\t\t\ttotalSegsBelow += segsBelow.length;\n\t\t\t\t\tcol++;\n\t\t\t\t}\n\n\t\t\t\tif (totalSegsBelow) { // do we need to replace this segment with one or many \"more\" links?\n\t\t\t\t\ttd = cellMatrix[levelLimit - 1][seg.leftCol]; // the segment's parent cell\n\t\t\t\t\trowspan = td.attr('rowspan') || 1;\n\t\t\t\t\tsegMoreNodes = [];\n\n\t\t\t\t\t// make a replacement <td> for each column the segment occupies. will be one for each colspan\n\t\t\t\t\tfor (j = 0; j < colSegsBelow.length; j++) {\n\t\t\t\t\t\tmoreTd = $('<td class=\"fc-more-cell\"/>').attr('rowspan', rowspan);\n\t\t\t\t\t\tsegsBelow = colSegsBelow[j];\n\t\t\t\t\t\tmoreLink = this.renderMoreLink(\n\t\t\t\t\t\t\trow,\n\t\t\t\t\t\t\tseg.leftCol + j,\n\t\t\t\t\t\t\t[ seg ].concat(segsBelow) // count seg as hidden too\n\t\t\t\t\t\t);\n\t\t\t\t\t\tmoreWrap = $('<div/>').append(moreLink);\n\t\t\t\t\t\tmoreTd.append(moreWrap);\n\t\t\t\t\t\tsegMoreNodes.push(moreTd[0]);\n\t\t\t\t\t\tmoreNodes.push(moreTd[0]);\n\t\t\t\t\t}\n\n\t\t\t\t\ttd.addClass('fc-limited').after($(segMoreNodes)); // hide original <td> and inject replacements\n\t\t\t\t\tlimitedNodes.push(td[0]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\temptyCellsUntil(this.colCnt); // finish off the level\n\t\t\trowStruct.moreEls = $(moreNodes); // for easy undoing later\n\t\t\trowStruct.limitedEls = $(limitedNodes); // for easy undoing later\n\t\t}\n\t},\n\n\n\t// Reveals all levels and removes all \"more\"-related elements for a grid's row.\n\t// `row` is a row number.\n\tunlimitRow: function(row) {\n\t\tvar rowStruct = this.rowStructs[row];\n\n\t\tif (rowStruct.moreEls) {\n\t\t\trowStruct.moreEls.remove();\n\t\t\trowStruct.moreEls = null;\n\t\t}\n\n\t\tif (rowStruct.limitedEls) {\n\t\t\trowStruct.limitedEls.removeClass('fc-limited');\n\t\t\trowStruct.limitedEls = null;\n\t\t}\n\t},\n\n\n\t// Renders an <a> element that represents hidden event element for a cell.\n\t// Responsible for attaching click handler as well.\n\trenderMoreLink: function(row, col, hiddenSegs) {\n\t\tvar _this = this;\n\t\tvar view = this.view;\n\n\t\treturn $('<a class=\"fc-more\"/>')\n\t\t\t.text(\n\t\t\t\tthis.getMoreLinkText(hiddenSegs.length)\n\t\t\t)\n\t\t\t.on('click', function(ev) {\n\t\t\t\tvar clickOption = view.opt('eventLimitClick');\n\t\t\t\tvar date = _this.getCellDate(row, col);\n\t\t\t\tvar moreEl = $(this);\n\t\t\t\tvar dayEl = _this.getCellEl(row, col);\n\t\t\t\tvar allSegs = _this.getCellSegs(row, col);\n\n\t\t\t\t// rescope the segments to be within the cell's date\n\t\t\t\tvar reslicedAllSegs = _this.resliceDaySegs(allSegs, date);\n\t\t\t\tvar reslicedHiddenSegs = _this.resliceDaySegs(hiddenSegs, date);\n\n\t\t\t\tif (typeof clickOption === 'function') {\n\t\t\t\t\t// the returned value can be an atomic option\n\t\t\t\t\tclickOption = view.trigger('eventLimitClick', null, {\n\t\t\t\t\t\tdate: date,\n\t\t\t\t\t\tdayEl: dayEl,\n\t\t\t\t\t\tmoreEl: moreEl,\n\t\t\t\t\t\tsegs: reslicedAllSegs,\n\t\t\t\t\t\thiddenSegs: reslicedHiddenSegs\n\t\t\t\t\t}, ev);\n\t\t\t\t}\n\n\t\t\t\tif (clickOption === 'popover') {\n\t\t\t\t\t_this.showSegPopover(row, col, moreEl, reslicedAllSegs);\n\t\t\t\t}\n\t\t\t\telse if (typeof clickOption === 'string') { // a view name\n\t\t\t\t\tview.calendar.zoomTo(date, clickOption);\n\t\t\t\t}\n\t\t\t});\n\t},\n\n\n\t// Reveals the popover that displays all events within a cell\n\tshowSegPopover: function(row, col, moreLink, segs) {\n\t\tvar _this = this;\n\t\tvar view = this.view;\n\t\tvar moreWrap = moreLink.parent(); // the <div> wrapper around the <a>\n\t\tvar topEl; // the element we want to match the top coordinate of\n\t\tvar options;\n\n\t\tif (this.rowCnt == 1) {\n\t\t\ttopEl = view.el; // will cause the popover to cover any sort of header\n\t\t}\n\t\telse {\n\t\t\ttopEl = this.rowEls.eq(row); // will align with top of row\n\t\t}\n\n\t\toptions = {\n\t\t\tclassName: 'fc-more-popover',\n\t\t\tcontent: this.renderSegPopoverContent(row, col, segs),\n\t\t\tparentEl: this.el,\n\t\t\ttop: topEl.offset().top,\n\t\t\tautoHide: true, // when the user clicks elsewhere, hide the popover\n\t\t\tviewportConstrain: view.opt('popoverViewportConstrain'),\n\t\t\thide: function() {\n\t\t\t\t// kill everything when the popover is hidden\n\t\t\t\t_this.segPopover.removeElement();\n\t\t\t\t_this.segPopover = null;\n\t\t\t\t_this.popoverSegs = null;\n\t\t\t}\n\t\t};\n\n\t\t// Determine horizontal coordinate.\n\t\t// We use the moreWrap instead of the <td> to avoid border confusion.\n\t\tif (this.isRTL) {\n\t\t\toptions.right = moreWrap.offset().left + moreWrap.outerWidth() + 1; // +1 to be over cell border\n\t\t}\n\t\telse {\n\t\t\toptions.left = moreWrap.offset().left - 1; // -1 to be over cell border\n\t\t}\n\n\t\tthis.segPopover = new Popover(options);\n\t\tthis.segPopover.show();\n\t},\n\n\n\t// Builds the inner DOM contents of the segment popover\n\trenderSegPopoverContent: function(row, col, segs) {\n\t\tvar view = this.view;\n\t\tvar isTheme = view.opt('theme');\n\t\tvar title = this.getCellDate(row, col).format(view.opt('dayPopoverFormat'));\n\t\tvar content = $(\n\t\t\t'<div class=\"fc-header ' + view.widgetHeaderClass + '\">' +\n\t\t\t\t'<span class=\"fc-close ' +\n\t\t\t\t\t(isTheme ? 'ui-icon ui-icon-closethick' : 'fc-icon fc-icon-x') +\n\t\t\t\t'\"></span>' +\n\t\t\t\t'<span class=\"fc-title\">' +\n\t\t\t\t\thtmlEscape(title) +\n\t\t\t\t'</span>' +\n\t\t\t\t'<div class=\"fc-clear\"/>' +\n\t\t\t'</div>' +\n\t\t\t'<div class=\"fc-body ' + view.widgetContentClass + '\">' +\n\t\t\t\t'<div class=\"fc-event-container\"></div>' +\n\t\t\t'</div>'\n\t\t);\n\t\tvar segContainer = content.find('.fc-event-container');\n\t\tvar i;\n\n\t\t// render each seg's `el` and only return the visible segs\n\t\tsegs = this.renderFgSegEls(segs, true); // disableResizing=true\n\t\tthis.popoverSegs = segs;\n\n\t\tfor (i = 0; i < segs.length; i++) {\n\n\t\t\t// because segments in the popover are not part of a grid coordinate system, provide a hint to any\n\t\t\t// grids that want to do drag-n-drop about which cell it came from\n\t\t\tthis.prepareHits();\n\t\t\tsegs[i].hit = this.getCellHit(row, col);\n\t\t\tthis.releaseHits();\n\n\t\t\tsegContainer.append(segs[i].el);\n\t\t}\n\n\t\treturn content;\n\t},\n\n\n\t// Given the events within an array of segment objects, reslice them to be in a single day\n\tresliceDaySegs: function(segs, dayDate) {\n\n\t\t// build an array of the original events\n\t\tvar events = $.map(segs, function(seg) {\n\t\t\treturn seg.event;\n\t\t});\n\n\t\tvar dayStart = dayDate.clone();\n\t\tvar dayEnd = dayStart.clone().add(1, 'days');\n\t\tvar dayRange = { start: dayStart, end: dayEnd };\n\n\t\t// slice the events with a custom slicing function\n\t\tsegs = this.eventsToSegs(\n\t\t\tevents,\n\t\t\tfunction(range) {\n\t\t\t\tvar seg = intersectRanges(range, dayRange); // undefind if no intersection\n\t\t\t\treturn seg ? [ seg ] : []; // must return an array of segments\n\t\t\t}\n\t\t);\n\n\t\t// force an order because eventsToSegs doesn't guarantee one\n\t\tthis.sortEventSegs(segs);\n\n\t\treturn segs;\n\t},\n\n\n\t// Generates the text that should be inside a \"more\" link, given the number of events it represents\n\tgetMoreLinkText: function(num) {\n\t\tvar opt = this.view.opt('eventLimitText');\n\n\t\tif (typeof opt === 'function') {\n\t\t\treturn opt(num);\n\t\t}\n\t\telse {\n\t\t\treturn '+' + num + ' ' + opt;\n\t\t}\n\t},\n\n\n\t// Returns segments within a given cell.\n\t// If `startLevel` is specified, returns only events including and below that level. Otherwise returns all segs.\n\tgetCellSegs: function(row, col, startLevel) {\n\t\tvar segMatrix = this.rowStructs[row].segMatrix;\n\t\tvar level = startLevel || 0;\n\t\tvar segs = [];\n\t\tvar seg;\n\n\t\twhile (level < segMatrix.length) {\n\t\t\tseg = segMatrix[level][col];\n\t\t\tif (seg) {\n\t\t\t\tsegs.push(seg);\n\t\t\t}\n\t\t\tlevel++;\n\t\t}\n\n\t\treturn segs;\n\t}\n\n});\n\n;;\n\n/* A component that renders one or more columns of vertical time slots\n----------------------------------------------------------------------------------------------------------------------*/\n// We mixin DayTable, even though there is only a single row of days\n\nvar TimeGrid = FC.TimeGrid = Grid.extend(DayTableMixin, {\n\n\tslotDuration: null, // duration of a \"slot\", a distinct time segment on given day, visualized by lines\n\tsnapDuration: null, // granularity of time for dragging and selecting\n\tsnapsPerSlot: null,\n\tminTime: null, // Duration object that denotes the first visible time of any given day\n\tmaxTime: null, // Duration object that denotes the exclusive visible end time of any given day\n\tlabelFormat: null, // formatting string for times running along vertical axis\n\tlabelInterval: null, // duration of how often a label should be displayed for a slot\n\n\tcolEls: null, // cells elements in the day-row background\n\tslatEls: null, // elements running horizontally across all columns\n\thelperEl: null, // cell skeleton element for rendering the mock event \"helper\"\n\n\tcolCoordCache: null,\n\tslatCoordCache: null,\n\n\tbusinessHourSegs: null,\n\n\n\tconstructor: function() {\n\t\tGrid.apply(this, arguments); // call the super-constructor\n\n\t\tthis.processOptions();\n\t},\n\n\n\t// Renders the time grid into `this.el`, which should already be assigned.\n\t// Relies on the view's colCnt. In the future, this component should probably be self-sufficient.\n\trenderDates: function() {\n\t\tthis.el.html(this.renderHtml());\n\t\tthis.colEls = this.el.find('.fc-day');\n\t\tthis.slatEls = this.el.find('.fc-slats tr');\n\n\t\tthis.colCoordCache = new CoordCache({\n\t\t\tels: this.colEls,\n\t\t\tisHorizontal: true\n\t\t});\n\t\tthis.slatCoordCache = new CoordCache({\n\t\t\tels: this.slatEls,\n\t\t\tisVertical: true\n\t\t});\n\t},\n\n\n\trenderBusinessHours: function() {\n\t\tvar events = this.view.calendar.getBusinessHoursEvents();\n\t\tthis.businessHourSegs = this.renderFill('businessHours', this.eventsToSegs(events), 'bgevent');\n\t},\n\n\n\t// Renders the basic HTML skeleton for the grid\n\trenderHtml: function() {\n\t\treturn '' +\n\t\t\t'<div class=\"fc-bg\">' +\n\t\t\t\t'<table>' +\n\t\t\t\t\tthis.renderBgTrHtml(0) + // row=0\n\t\t\t\t'</table>' +\n\t\t\t'</div>' +\n\t\t\t'<div class=\"fc-slats\">' +\n\t\t\t\t'<table>' +\n\t\t\t\t\tthis.renderSlatRowHtml() +\n\t\t\t\t'</table>' +\n\t\t\t'</div>';\n\t},\n\n\n\t// Generates the HTML for the horizontal \"slats\" that run width-wise. Has a time axis on a side. Depends on RTL.\n\trenderSlatRowHtml: function() {\n\t\tvar view = this.view;\n\t\tvar isRTL = this.isRTL;\n\t\tvar html = '';\n\t\tvar slotTime = moment.duration(+this.minTime); // wish there was .clone() for durations\n\t\tvar slotDate; // will be on the view's first day, but we only care about its time\n\t\tvar isLabeled;\n\t\tvar axisHtml;\n\n\t\t// Calculate the time for each slot\n\t\twhile (slotTime < this.maxTime) {\n\t\t\tslotDate = this.start.clone().time(slotTime);\n\t\t\tisLabeled = isInt(divideDurationByDuration(slotTime, this.labelInterval));\n\n\t\t\taxisHtml =\n\t\t\t\t'<td class=\"fc-axis fc-time ' + view.widgetContentClass + '\" ' + view.axisStyleAttr() + '>' +\n\t\t\t\t\t(isLabeled ?\n\t\t\t\t\t\t'<span>' + // for matchCellWidths\n\t\t\t\t\t\t\thtmlEscape(slotDate.format(this.labelFormat)) +\n\t\t\t\t\t\t'</span>' :\n\t\t\t\t\t\t''\n\t\t\t\t\t\t) +\n\t\t\t\t'</td>';\n\n\t\t\thtml +=\n\t\t\t\t'<tr ' + (isLabeled ? '' : 'class=\"fc-minor\"') + '>' +\n\t\t\t\t\t(!isRTL ? axisHtml : '') +\n\t\t\t\t\t'<td class=\"' + view.widgetContentClass + '\"/>' +\n\t\t\t\t\t(isRTL ? axisHtml : '') +\n\t\t\t\t\"</tr>\";\n\n\t\t\tslotTime.add(this.slotDuration);\n\t\t}\n\n\t\treturn html;\n\t},\n\n\n\t/* Options\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Parses various options into properties of this object\n\tprocessOptions: function() {\n\t\tvar view = this.view;\n\t\tvar slotDuration = view.opt('slotDuration');\n\t\tvar snapDuration = view.opt('snapDuration');\n\t\tvar input;\n\n\t\tslotDuration = moment.duration(slotDuration);\n\t\tsnapDuration = snapDuration ? moment.duration(snapDuration) : slotDuration;\n\n\t\tthis.slotDuration = slotDuration;\n\t\tthis.snapDuration = snapDuration;\n\t\tthis.snapsPerSlot = slotDuration / snapDuration; // TODO: ensure an integer multiple?\n\n\t\tthis.minResizeDuration = snapDuration; // hack\n\n\t\tthis.minTime = moment.duration(view.opt('minTime'));\n\t\tthis.maxTime = moment.duration(view.opt('maxTime'));\n\n\t\t// might be an array value (for TimelineView).\n\t\t// if so, getting the most granular entry (the last one probably).\n\t\tinput = view.opt('slotLabelFormat');\n\t\tif ($.isArray(input)) {\n\t\t\tinput = input[input.length - 1];\n\t\t}\n\n\t\tthis.labelFormat =\n\t\t\tinput ||\n\t\t\tview.opt('axisFormat') || // deprecated\n\t\t\tview.opt('smallTimeFormat'); // the computed default\n\n\t\tinput = view.opt('slotLabelInterval');\n\t\tthis.labelInterval = input ?\n\t\t\tmoment.duration(input) :\n\t\t\tthis.computeLabelInterval(slotDuration);\n\t},\n\n\n\t// Computes an automatic value for slotLabelInterval\n\tcomputeLabelInterval: function(slotDuration) {\n\t\tvar i;\n\t\tvar labelInterval;\n\t\tvar slotsPerLabel;\n\n\t\t// find the smallest stock label interval that results in more than one slots-per-label\n\t\tfor (i = AGENDA_STOCK_SUB_DURATIONS.length - 1; i >= 0; i--) {\n\t\t\tlabelInterval = moment.duration(AGENDA_STOCK_SUB_DURATIONS[i]);\n\t\t\tslotsPerLabel = divideDurationByDuration(labelInterval, slotDuration);\n\t\t\tif (isInt(slotsPerLabel) && slotsPerLabel > 1) {\n\t\t\t\treturn labelInterval;\n\t\t\t}\n\t\t}\n\n\t\treturn moment.duration(slotDuration); // fall back. clone\n\t},\n\n\n\t// Computes a default event time formatting string if `timeFormat` is not explicitly defined\n\tcomputeEventTimeFormat: function() {\n\t\treturn this.view.opt('noMeridiemTimeFormat'); // like \"6:30\" (no AM/PM)\n\t},\n\n\n\t// Computes a default `displayEventEnd` value if one is not expliclty defined\n\tcomputeDisplayEventEnd: function() {\n\t\treturn true;\n\t},\n\n\n\t/* Hit System\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\tprepareHits: function() {\n\t\tthis.colCoordCache.build();\n\t\tthis.slatCoordCache.build();\n\t},\n\n\n\treleaseHits: function() {\n\t\tthis.colCoordCache.clear();\n\t\t// NOTE: don't clear slatCoordCache because we rely on it for computeTimeTop\n\t},\n\n\n\tqueryHit: function(leftOffset, topOffset) {\n\t\tvar snapsPerSlot = this.snapsPerSlot;\n\t\tvar colCoordCache = this.colCoordCache;\n\t\tvar slatCoordCache = this.slatCoordCache;\n\t\tvar colIndex = colCoordCache.getHorizontalIndex(leftOffset);\n\t\tvar slatIndex = slatCoordCache.getVerticalIndex(topOffset);\n\n\t\tif (colIndex != null && slatIndex != null) {\n\t\t\tvar slatTop = slatCoordCache.getTopOffset(slatIndex);\n\t\t\tvar slatHeight = slatCoordCache.getHeight(slatIndex);\n\t\t\tvar partial = (topOffset - slatTop) / slatHeight; // floating point number between 0 and 1\n\t\t\tvar localSnapIndex = Math.floor(partial * snapsPerSlot); // the snap # relative to start of slat\n\t\t\tvar snapIndex = slatIndex * snapsPerSlot + localSnapIndex;\n\t\t\tvar snapTop = slatTop + (localSnapIndex / snapsPerSlot) * slatHeight;\n\t\t\tvar snapBottom = slatTop + ((localSnapIndex + 1) / snapsPerSlot) * slatHeight;\n\n\t\t\treturn {\n\t\t\t\tcol: colIndex,\n\t\t\t\tsnap: snapIndex,\n\t\t\t\tcomponent: this, // needed unfortunately :(\n\t\t\t\tleft: colCoordCache.getLeftOffset(colIndex),\n\t\t\t\tright: colCoordCache.getRightOffset(colIndex),\n\t\t\t\ttop: snapTop,\n\t\t\t\tbottom: snapBottom\n\t\t\t};\n\t\t}\n\t},\n\n\n\tgetHitSpan: function(hit) {\n\t\tvar start = this.getCellDate(0, hit.col); // row=0\n\t\tvar time = this.computeSnapTime(hit.snap); // pass in the snap-index\n\t\tvar end;\n\n\t\tstart.time(time);\n\t\tend = start.clone().add(this.snapDuration);\n\n\t\treturn { start: start, end: end };\n\t},\n\n\n\tgetHitEl: function(hit) {\n\t\treturn this.colEls.eq(hit.col);\n\t},\n\n\n\t/* Dates\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\trangeUpdated: function() {\n\t\tthis.updateDayTable();\n\t},\n\n\n\t// Given a row number of the grid, representing a \"snap\", returns a time (Duration) from its start-of-day\n\tcomputeSnapTime: function(snapIndex) {\n\t\treturn moment.duration(this.minTime + this.snapDuration * snapIndex);\n\t},\n\n\n\t// Slices up the given span (unzoned start/end with other misc data) into an array of segments\n\tspanToSegs: function(span) {\n\t\tvar segs = this.sliceRangeByTimes(span);\n\t\tvar i;\n\n\t\tfor (i = 0; i < segs.length; i++) {\n\t\t\tif (this.isRTL) {\n\t\t\t\tsegs[i].col = this.daysPerRow - 1 - segs[i].dayIndex;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tsegs[i].col = segs[i].dayIndex;\n\t\t\t}\n\t\t}\n\n\t\treturn segs;\n\t},\n\n\n\tsliceRangeByTimes: function(range) {\n\t\tvar segs = [];\n\t\tvar seg;\n\t\tvar dayIndex;\n\t\tvar dayDate;\n\t\tvar dayRange;\n\n\t\tfor (dayIndex = 0; dayIndex < this.daysPerRow; dayIndex++) {\n\t\t\tdayDate = this.dayDates[dayIndex].clone(); // TODO: better API for this?\n\t\t\tdayRange = {\n\t\t\t\tstart: dayDate.clone().time(this.minTime),\n\t\t\t\tend: dayDate.clone().time(this.maxTime)\n\t\t\t};\n\t\t\tseg = intersectRanges(range, dayRange); // both will be ambig timezone\n\t\t\tif (seg) {\n\t\t\t\tseg.dayIndex = dayIndex;\n\t\t\t\tsegs.push(seg);\n\t\t\t}\n\t\t}\n\n\t\treturn segs;\n\t},\n\n\n\t/* Coordinates\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\tupdateSize: function(isResize) { // NOT a standard Grid method\n\t\tthis.slatCoordCache.build();\n\n\t\tif (isResize) {\n\t\t\tthis.updateSegVerticals();\n\t\t}\n\t},\n\n\n\t// Computes the top coordinate, relative to the bounds of the grid, of the given date.\n\t// A `startOfDayDate` must be given for avoiding ambiguity over how to treat midnight.\n\tcomputeDateTop: function(date, startOfDayDate) {\n\t\treturn this.computeTimeTop(\n\t\t\tmoment.duration(\n\t\t\t\tdate - startOfDayDate.clone().stripTime()\n\t\t\t)\n\t\t);\n\t},\n\n\n\t// Computes the top coordinate, relative to the bounds of the grid, of the given time (a Duration).\n\tcomputeTimeTop: function(time) {\n\t\tvar len = this.slatEls.length;\n\t\tvar slatCoverage = (time - this.minTime) / this.slotDuration; // floating-point value of # of slots covered\n\t\tvar slatIndex;\n\t\tvar slatRemainder;\n\n\t\t// compute a floating-point number for how many slats should be progressed through.\n\t\t// from 0 to number of slats (inclusive)\n\t\t// constrained because minTime/maxTime might be customized.\n\t\tslatCoverage = Math.max(0, slatCoverage);\n\t\tslatCoverage = Math.min(len, slatCoverage);\n\n\t\t// an integer index of the furthest whole slat\n\t\t// from 0 to number slats (*exclusive*, so len-1)\n\t\tslatIndex = Math.floor(slatCoverage);\n\t\tslatIndex = Math.min(slatIndex, len - 1);\n\n\t\t// how much further through the slatIndex slat (from 0.0-1.0) must be covered in addition.\n\t\t// could be 1.0 if slatCoverage is covering *all* the slots\n\t\tslatRemainder = slatCoverage - slatIndex;\n\n\t\treturn this.slatCoordCache.getTopPosition(slatIndex) +\n\t\t\tthis.slatCoordCache.getHeight(slatIndex) * slatRemainder;\n\t},\n\n\n\n\t/* Event Drag Visualization\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Renders a visual indication of an event being dragged over the specified date(s).\n\t// A returned value of `true` signals that a mock \"helper\" event has been rendered.\n\trenderDrag: function(eventLocation, seg) {\n\n\t\tif (seg) { // if there is event information for this drag, render a helper event\n\t\t\tthis.renderEventLocationHelper(eventLocation, seg);\n\t\t\tthis.applyDragOpacity(this.helperEl);\n\n\t\t\treturn true; // signal that a helper has been rendered\n\t\t}\n\t\telse {\n\t\t\t// otherwise, just render a highlight\n\t\t\tthis.renderHighlight(this.eventToSpan(eventLocation));\n\t\t}\n\t},\n\n\n\t// Unrenders any visual indication of an event being dragged\n\tunrenderDrag: function() {\n\t\tthis.unrenderHelper();\n\t\tthis.unrenderHighlight();\n\t},\n\n\n\t/* Event Resize Visualization\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Renders a visual indication of an event being resized\n\trenderEventResize: function(eventLocation, seg) {\n\t\tthis.renderEventLocationHelper(eventLocation, seg);\n\t},\n\n\n\t// Unrenders any visual indication of an event being resized\n\tunrenderEventResize: function() {\n\t\tthis.unrenderHelper();\n\t},\n\n\n\t/* Event Helper\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Renders a mock \"helper\" event. `sourceSeg` is the original segment object and might be null (an external drag)\n\trenderHelper: function(event, sourceSeg) {\n\t\tvar segs = this.eventToSegs(event);\n\t\tvar tableEl;\n\t\tvar i, seg;\n\t\tvar sourceEl;\n\n\t\tsegs = this.renderFgSegEls(segs); // assigns each seg's el and returns a subset of segs that were rendered\n\t\ttableEl = this.renderSegTable(segs);\n\n\t\t// Try to make the segment that is in the same row as sourceSeg look the same\n\t\tfor (i = 0; i < segs.length; i++) {\n\t\t\tseg = segs[i];\n\t\t\tif (sourceSeg && sourceSeg.col === seg.col) {\n\t\t\t\tsourceEl = sourceSeg.el;\n\t\t\t\tseg.el.css({\n\t\t\t\t\tleft: sourceEl.css('left'),\n\t\t\t\t\tright: sourceEl.css('right'),\n\t\t\t\t\t'margin-left': sourceEl.css('margin-left'),\n\t\t\t\t\t'margin-right': sourceEl.css('margin-right')\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tthis.helperEl = $('<div class=\"fc-helper-skeleton\"/>')\n\t\t\t.append(tableEl)\n\t\t\t\t.appendTo(this.el);\n\t},\n\n\n\t// Unrenders any mock helper event\n\tunrenderHelper: function() {\n\t\tif (this.helperEl) {\n\t\t\tthis.helperEl.remove();\n\t\t\tthis.helperEl = null;\n\t\t}\n\t},\n\n\n\t/* Selection\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Renders a visual indication of a selection. Overrides the default, which was to simply render a highlight.\n\trenderSelection: function(span) {\n\t\tif (this.view.opt('selectHelper')) { // this setting signals that a mock helper event should be rendered\n\n\t\t\t// normally acceps an eventLocation, span has a start/end, which is good enough\n\t\t\tthis.renderEventLocationHelper(span);\n\t\t}\n\t\telse {\n\t\t\tthis.renderHighlight(span);\n\t\t}\n\t},\n\n\n\t// Unrenders any visual indication of a selection\n\tunrenderSelection: function() {\n\t\tthis.unrenderHelper();\n\t\tthis.unrenderHighlight();\n\t},\n\n\n\t/* Fill System (highlight, background events, business hours)\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Renders a set of rectangles over the given time segments.\n\t// Only returns segments that successfully rendered.\n\trenderFill: function(type, segs, className) {\n\t\tvar segCols;\n\t\tvar skeletonEl;\n\t\tvar trEl;\n\t\tvar col, colSegs;\n\t\tvar tdEl;\n\t\tvar containerEl;\n\t\tvar dayDate;\n\t\tvar i, seg;\n\n\t\tif (segs.length) {\n\n\t\t\tsegs = this.renderFillSegEls(type, segs); // assignes `.el` to each seg. returns successfully rendered segs\n\t\t\tsegCols = this.groupSegCols(segs); // group into sub-arrays, and assigns 'col' to each seg\n\n\t\t\tclassName = className || type.toLowerCase();\n\t\t\tskeletonEl = $(\n\t\t\t\t'<div class=\"fc-' + className + '-skeleton\">' +\n\t\t\t\t\t'<table><tr/></table>' +\n\t\t\t\t'</div>'\n\t\t\t);\n\t\t\ttrEl = skeletonEl.find('tr');\n\n\t\t\tfor (col = 0; col < segCols.length; col++) {\n\t\t\t\tcolSegs = segCols[col];\n\t\t\t\ttdEl = $('<td/>').appendTo(trEl);\n\n\t\t\t\tif (colSegs.length) {\n\t\t\t\t\tcontainerEl = $('<div class=\"fc-' + className + '-container\"/>').appendTo(tdEl);\n\t\t\t\t\tdayDate = this.getCellDate(0, col); // row=0\n\n\t\t\t\t\tfor (i = 0; i < colSegs.length; i++) {\n\t\t\t\t\t\tseg = colSegs[i];\n\t\t\t\t\t\tcontainerEl.append(\n\t\t\t\t\t\t\tseg.el.css({\n\t\t\t\t\t\t\t\ttop: this.computeDateTop(seg.start, dayDate),\n\t\t\t\t\t\t\t\tbottom: -this.computeDateTop(seg.end, dayDate) // the y position of the bottom edge\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.bookendCells(trEl);\n\n\t\t\tthis.el.append(skeletonEl);\n\t\t\tthis.elsByFill[type] = skeletonEl;\n\t\t}\n\n\t\treturn segs;\n\t}\n\n});\n\n;;\n\n/* Event-rendering methods for the TimeGrid class\n----------------------------------------------------------------------------------------------------------------------*/\n\nTimeGrid.mixin({\n\n\teventSkeletonEl: null, // has cells with event-containers, which contain absolutely positioned event elements\n\n\n\t// Renders the given foreground event segments onto the grid\n\trenderFgSegs: function(segs) {\n\t\tsegs = this.renderFgSegEls(segs); // returns a subset of the segs. segs that were actually rendered\n\n\t\tthis.el.append(\n\t\t\tthis.eventSkeletonEl = $('<div class=\"fc-content-skeleton\"/>')\n\t\t\t\t.append(this.renderSegTable(segs))\n\t\t);\n\n\t\treturn segs; // return only the segs that were actually rendered\n\t},\n\n\n\t// Unrenders all currently rendered foreground event segments\n\tunrenderFgSegs: function(segs) {\n\t\tif (this.eventSkeletonEl) {\n\t\t\tthis.eventSkeletonEl.remove();\n\t\t\tthis.eventSkeletonEl = null;\n\t\t}\n\t},\n\n\n\t// Renders and returns the <table> portion of the event-skeleton.\n\t// Returns an object with properties 'tbodyEl' and 'segs'.\n\trenderSegTable: function(segs) {\n\t\tvar tableEl = $('<table><tr/></table>');\n\t\tvar trEl = tableEl.find('tr');\n\t\tvar segCols;\n\t\tvar i, seg;\n\t\tvar col, colSegs;\n\t\tvar containerEl;\n\n\t\tsegCols = this.groupSegCols(segs); // group into sub-arrays, and assigns 'col' to each seg\n\n\t\tthis.computeSegVerticals(segs); // compute and assign top/bottom\n\n\t\tfor (col = 0; col < segCols.length; col++) { // iterate each column grouping\n\t\t\tcolSegs = segCols[col];\n\t\t\tthis.placeSlotSegs(colSegs); // compute horizontal coordinates, z-index's, and reorder the array\n\n\t\t\tcontainerEl = $('<div class=\"fc-event-container\"/>');\n\n\t\t\t// assign positioning CSS and insert into container\n\t\t\tfor (i = 0; i < colSegs.length; i++) {\n\t\t\t\tseg = colSegs[i];\n\t\t\t\tseg.el.css(this.generateSegPositionCss(seg));\n\n\t\t\t\t// if the height is short, add a className for alternate styling\n\t\t\t\tif (seg.bottom - seg.top < 30) {\n\t\t\t\t\tseg.el.addClass('fc-short');\n\t\t\t\t}\n\n\t\t\t\tcontainerEl.append(seg.el);\n\t\t\t}\n\n\t\t\ttrEl.append($('<td/>').append(containerEl));\n\t\t}\n\n\t\tthis.bookendCells(trEl);\n\n\t\treturn tableEl;\n\t},\n\n\n\t// Given an array of segments that are all in the same column, sets the backwardCoord and forwardCoord on each.\n\t// NOTE: Also reorders the given array by date!\n\tplaceSlotSegs: function(segs) {\n\t\tvar levels;\n\t\tvar level0;\n\t\tvar i;\n\n\t\tthis.sortEventSegs(segs); // order by certain criteria\n\t\tlevels = buildSlotSegLevels(segs);\n\t\tcomputeForwardSlotSegs(levels);\n\n\t\tif ((level0 = levels[0])) {\n\n\t\t\tfor (i = 0; i < level0.length; i++) {\n\t\t\t\tcomputeSlotSegPressures(level0[i]);\n\t\t\t}\n\n\t\t\tfor (i = 0; i < level0.length; i++) {\n\t\t\t\tthis.computeSlotSegCoords(level0[i], 0, 0);\n\t\t\t}\n\t\t}\n\t},\n\n\n\t// Calculate seg.forwardCoord and seg.backwardCoord for the segment, where both values range\n\t// from 0 to 1. If the calendar is left-to-right, the seg.backwardCoord maps to \"left\" and\n\t// seg.forwardCoord maps to \"right\" (via percentage). Vice-versa if the calendar is right-to-left.\n\t//\n\t// The segment might be part of a \"series\", which means consecutive segments with the same pressure\n\t// who's width is unknown until an edge has been hit. `seriesBackwardPressure` is the number of\n\t// segments behind this one in the current series, and `seriesBackwardCoord` is the starting\n\t// coordinate of the first segment in the series.\n\tcomputeSlotSegCoords: function(seg, seriesBackwardPressure, seriesBackwardCoord) {\n\t\tvar forwardSegs = seg.forwardSegs;\n\t\tvar i;\n\n\t\tif (seg.forwardCoord === undefined) { // not already computed\n\n\t\t\tif (!forwardSegs.length) {\n\n\t\t\t\t// if there are no forward segments, this segment should butt up against the edge\n\t\t\t\tseg.forwardCoord = 1;\n\t\t\t}\n\t\t\telse {\n\n\t\t\t\t// sort highest pressure first\n\t\t\t\tthis.sortForwardSlotSegs(forwardSegs);\n\n\t\t\t\t// this segment's forwardCoord will be calculated from the backwardCoord of the\n\t\t\t\t// highest-pressure forward segment.\n\t\t\t\tthis.computeSlotSegCoords(forwardSegs[0], seriesBackwardPressure + 1, seriesBackwardCoord);\n\t\t\t\tseg.forwardCoord = forwardSegs[0].backwardCoord;\n\t\t\t}\n\n\t\t\t// calculate the backwardCoord from the forwardCoord. consider the series\n\t\t\tseg.backwardCoord = seg.forwardCoord -\n\t\t\t\t(seg.forwardCoord - seriesBackwardCoord) / // available width for series\n\t\t\t\t(seriesBackwardPressure + 1); // # of segments in the series\n\n\t\t\t// use this segment's coordinates to computed the coordinates of the less-pressurized\n\t\t\t// forward segments\n\t\t\tfor (i=0; i<forwardSegs.length; i++) {\n\t\t\t\tthis.computeSlotSegCoords(forwardSegs[i], 0, seg.forwardCoord);\n\t\t\t}\n\t\t}\n\t},\n\n\n\t// Refreshes the CSS top/bottom coordinates for each segment element. Probably after a window resize/zoom.\n\t// Repositions business hours segs too, so not just for events. Maybe shouldn't be here.\n\tupdateSegVerticals: function() {\n\t\tvar allSegs = (this.segs || []).concat(this.businessHourSegs || []);\n\t\tvar i;\n\n\t\tthis.computeSegVerticals(allSegs);\n\n\t\tfor (i = 0; i < allSegs.length; i++) {\n\t\t\tallSegs[i].el.css(\n\t\t\t\tthis.generateSegVerticalCss(allSegs[i])\n\t\t\t);\n\t\t}\n\t},\n\n\n\t// For each segment in an array, computes and assigns its top and bottom properties\n\tcomputeSegVerticals: function(segs) {\n\t\tvar i, seg;\n\n\t\tfor (i = 0; i < segs.length; i++) {\n\t\t\tseg = segs[i];\n\t\t\tseg.top = this.computeDateTop(seg.start, seg.start);\n\t\t\tseg.bottom = this.computeDateTop(seg.end, seg.start);\n\t\t}\n\t},\n\n\n\t// Renders the HTML for a single event segment's default rendering\n\tfgSegHtml: function(seg, disableResizing) {\n\t\tvar view = this.view;\n\t\tvar event = seg.event;\n\t\tvar isDraggable = view.isEventDraggable(event);\n\t\tvar isResizableFromStart = !disableResizing && seg.isStart && view.isEventResizableFromStart(event);\n\t\tvar isResizableFromEnd = !disableResizing && seg.isEnd && view.isEventResizableFromEnd(event);\n\t\tvar classes = this.getSegClasses(seg, isDraggable, isResizableFromStart || isResizableFromEnd);\n\t\tvar skinCss = cssToStr(this.getEventSkinCss(event));\n\t\tvar timeText;\n\t\tvar fullTimeText; // more verbose time text. for the print stylesheet\n\t\tvar startTimeText; // just the start time text\n\n\t\tclasses.unshift('fc-time-grid-event', 'fc-v-event');\n\n\t\tif (view.isMultiDayEvent(event)) { // if the event appears to span more than one day...\n\t\t\t// Don't display time text on segments that run entirely through a day.\n\t\t\t// That would appear as midnight-midnight and would look dumb.\n\t\t\t// Otherwise, display the time text for the *segment's* times (like 6pm-midnight or midnight-10am)\n\t\t\tif (seg.isStart || seg.isEnd) {\n\t\t\t\ttimeText = this.getEventTimeText(seg);\n\t\t\t\tfullTimeText = this.getEventTimeText(seg, 'LT');\n\t\t\t\tstartTimeText = this.getEventTimeText(seg, null, false); // displayEnd=false\n\t\t\t}\n\t\t} else {\n\t\t\t// Display the normal time text for the *event's* times\n\t\t\ttimeText = this.getEventTimeText(event);\n\t\t\tfullTimeText = this.getEventTimeText(event, 'LT');\n\t\t\tstartTimeText = this.getEventTimeText(event, null, false); // displayEnd=false\n\t\t}\n\n\t\treturn '<a class=\"' + classes.join(' ') + '\"' +\n\t\t\t(event.url ?\n\t\t\t\t' href=\"' + htmlEscape(event.url) + '\"' :\n\t\t\t\t''\n\t\t\t\t) +\n\t\t\t(skinCss ?\n\t\t\t\t' style=\"' + skinCss + '\"' :\n\t\t\t\t''\n\t\t\t\t) +\n\t\t\t'>' +\n\t\t\t\t'<div class=\"fc-content\">' +\n\t\t\t\t\t(timeText ?\n\t\t\t\t\t\t'<div class=\"fc-time\"' +\n\t\t\t\t\t\t' data-start=\"' + htmlEscape(startTimeText) + '\"' +\n\t\t\t\t\t\t' data-full=\"' + htmlEscape(fullTimeText) + '\"' +\n\t\t\t\t\t\t'>' +\n\t\t\t\t\t\t\t'<span>' + htmlEscape(timeText) + '</span>' +\n\t\t\t\t\t\t'</div>' :\n\t\t\t\t\t\t''\n\t\t\t\t\t\t) +\n\t\t\t\t\t(event.title ?\n\t\t\t\t\t\t'<div class=\"fc-title\">' +\n\t\t\t\t\t\t\thtmlEscape(event.title) +\n\t\t\t\t\t\t'</div>' :\n\t\t\t\t\t\t''\n\t\t\t\t\t\t) +\n\t\t\t\t'</div>' +\n\t\t\t\t'<div class=\"fc-bg\"/>' +\n\t\t\t\t/* TODO: write CSS for this\n\t\t\t\t(isResizableFromStart ?\n\t\t\t\t\t'<div class=\"fc-resizer fc-start-resizer\" />' :\n\t\t\t\t\t''\n\t\t\t\t\t) +\n\t\t\t\t*/\n\t\t\t\t(isResizableFromEnd ?\n\t\t\t\t\t'<div class=\"fc-resizer fc-end-resizer\" />' :\n\t\t\t\t\t''\n\t\t\t\t\t) +\n\t\t\t'</a>';\n\t},\n\n\n\t// Generates an object with CSS properties/values that should be applied to an event segment element.\n\t// Contains important positioning-related properties that should be applied to any event element, customized or not.\n\tgenerateSegPositionCss: function(seg) {\n\t\tvar shouldOverlap = this.view.opt('slotEventOverlap');\n\t\tvar backwardCoord = seg.backwardCoord; // the left side if LTR. the right side if RTL. floating-point\n\t\tvar forwardCoord = seg.forwardCoord; // the right side if LTR. the left side if RTL. floating-point\n\t\tvar props = this.generateSegVerticalCss(seg); // get top/bottom first\n\t\tvar left; // amount of space from left edge, a fraction of the total width\n\t\tvar right; // amount of space from right edge, a fraction of the total width\n\n\t\tif (shouldOverlap) {\n\t\t\t// double the width, but don't go beyond the maximum forward coordinate (1.0)\n\t\t\tforwardCoord = Math.min(1, backwardCoord + (forwardCoord - backwardCoord) * 2);\n\t\t}\n\n\t\tif (this.isRTL) {\n\t\t\tleft = 1 - forwardCoord;\n\t\t\tright = backwardCoord;\n\t\t}\n\t\telse {\n\t\t\tleft = backwardCoord;\n\t\t\tright = 1 - forwardCoord;\n\t\t}\n\n\t\tprops.zIndex = seg.level + 1; // convert from 0-base to 1-based\n\t\tprops.left = left * 100 + '%';\n\t\tprops.right = right * 100 + '%';\n\n\t\tif (shouldOverlap && seg.forwardPressure) {\n\t\t\t// add padding to the edge so that forward stacked events don't cover the resizer's icon\n\t\t\tprops[this.isRTL ? 'marginLeft' : 'marginRight'] = 10 * 2; // 10 is a guesstimate of the icon's width\n\t\t}\n\n\t\treturn props;\n\t},\n\n\n\t// Generates an object with CSS properties for the top/bottom coordinates of a segment element\n\tgenerateSegVerticalCss: function(seg) {\n\t\treturn {\n\t\t\ttop: seg.top,\n\t\t\tbottom: -seg.bottom // flipped because needs to be space beyond bottom edge of event container\n\t\t};\n\t},\n\n\n\t// Given a flat array of segments, return an array of sub-arrays, grouped by each segment's col\n\tgroupSegCols: function(segs) {\n\t\tvar segCols = [];\n\t\tvar i;\n\n\t\tfor (i = 0; i < this.colCnt; i++) {\n\t\t\tsegCols.push([]);\n\t\t}\n\n\t\tfor (i = 0; i < segs.length; i++) {\n\t\t\tsegCols[segs[i].col].push(segs[i]);\n\t\t}\n\n\t\treturn segCols;\n\t},\n\n\n\tsortForwardSlotSegs: function(forwardSegs) {\n\t\tforwardSegs.sort(proxy(this, 'compareForwardSlotSegs'));\n\t},\n\n\n\t// A cmp function for determining which forward segment to rely on more when computing coordinates.\n\tcompareForwardSlotSegs: function(seg1, seg2) {\n\t\t// put higher-pressure first\n\t\treturn seg2.forwardPressure - seg1.forwardPressure ||\n\t\t\t// put segments that are closer to initial edge first (and favor ones with no coords yet)\n\t\t\t(seg1.backwardCoord || 0) - (seg2.backwardCoord || 0) ||\n\t\t\t// do normal sorting...\n\t\t\tthis.compareEventSegs(seg1, seg2);\n\t}\n\n});\n\n\n// Builds an array of segments \"levels\". The first level will be the leftmost tier of segments if the calendar is\n// left-to-right, or the rightmost if the calendar is right-to-left. Assumes the segments are already ordered by date.\nfunction buildSlotSegLevels(segs) {\n\tvar levels = [];\n\tvar i, seg;\n\tvar j;\n\n\tfor (i=0; i<segs.length; i++) {\n\t\tseg = segs[i];\n\n\t\t// go through all the levels and stop on the first level where there are no collisions\n\t\tfor (j=0; j<levels.length; j++) {\n\t\t\tif (!computeSlotSegCollisions(seg, levels[j]).length) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tseg.level = j;\n\n\t\t(levels[j] || (levels[j] = [])).push(seg);\n\t}\n\n\treturn levels;\n}\n\n\n// For every segment, figure out the other segments that are in subsequent\n// levels that also occupy the same vertical space. Accumulate in seg.forwardSegs\nfunction computeForwardSlotSegs(levels) {\n\tvar i, level;\n\tvar j, seg;\n\tvar k;\n\n\tfor (i=0; i<levels.length; i++) {\n\t\tlevel = levels[i];\n\n\t\tfor (j=0; j<level.length; j++) {\n\t\t\tseg = level[j];\n\n\t\t\tseg.forwardSegs = [];\n\t\t\tfor (k=i+1; k<levels.length; k++) {\n\t\t\t\tcomputeSlotSegCollisions(seg, levels[k], seg.forwardSegs);\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n// Figure out which path forward (via seg.forwardSegs) results in the longest path until\n// the furthest edge is reached. The number of segments in this path will be seg.forwardPressure\nfunction computeSlotSegPressures(seg) {\n\tvar forwardSegs = seg.forwardSegs;\n\tvar forwardPressure = 0;\n\tvar i, forwardSeg;\n\n\tif (seg.forwardPressure === undefined) { // not already computed\n\n\t\tfor (i=0; i<forwardSegs.length; i++) {\n\t\t\tforwardSeg = forwardSegs[i];\n\n\t\t\t// figure out the child's maximum forward path\n\t\t\tcomputeSlotSegPressures(forwardSeg);\n\n\t\t\t// either use the existing maximum, or use the child's forward pressure\n\t\t\t// plus one (for the forwardSeg itself)\n\t\t\tforwardPressure = Math.max(\n\t\t\t\tforwardPressure,\n\t\t\t\t1 + forwardSeg.forwardPressure\n\t\t\t);\n\t\t}\n\n\t\tseg.forwardPressure = forwardPressure;\n\t}\n}\n\n\n// Find all the segments in `otherSegs` that vertically collide with `seg`.\n// Append into an optionally-supplied `results` array and return.\nfunction computeSlotSegCollisions(seg, otherSegs, results) {\n\tresults = results || [];\n\n\tfor (var i=0; i<otherSegs.length; i++) {\n\t\tif (isSlotSegCollision(seg, otherSegs[i])) {\n\t\t\tresults.push(otherSegs[i]);\n\t\t}\n\t}\n\n\treturn results;\n}\n\n\n// Do these segments occupy the same vertical space?\nfunction isSlotSegCollision(seg1, seg2) {\n\treturn seg1.bottom > seg2.top && seg1.top < seg2.bottom;\n}\n\n;;\n\n/* An abstract class from which other views inherit from\n----------------------------------------------------------------------------------------------------------------------*/\n\nvar View = FC.View = Class.extend({\n\n\ttype: null, // subclass' view name (string)\n\tname: null, // deprecated. use `type` instead\n\ttitle: null, // the text that will be displayed in the header's title\n\n\tcalendar: null, // owner Calendar object\n\toptions: null, // hash containing all options. already merged with view-specific-options\n\tel: null, // the view's containing element. set by Calendar\n\n\tdisplaying: null, // a promise representing the state of rendering. null if no render requested\n\tisSkeletonRendered: false,\n\tisEventsRendered: false,\n\n\t// range the view is actually displaying (moments)\n\tstart: null,\n\tend: null, // exclusive\n\n\t// range the view is formally responsible for (moments)\n\t// may be different from start/end. for example, a month view might have 1st-31st, excluding padded dates\n\tintervalStart: null,\n\tintervalEnd: null, // exclusive\n\tintervalDuration: null,\n\tintervalUnit: null, // name of largest unit being displayed, like \"month\" or \"week\"\n\n\tisRTL: false,\n\tisSelected: false, // boolean whether a range of time is user-selected or not\n\n\teventOrderSpecs: null, // criteria for ordering events when they have same date/time\n\n\t// subclasses can optionally use a scroll container\n\tscrollerEl: null, // the element that will most likely scroll when content is too tall\n\tscrollTop: null, // cached vertical scroll value\n\n\t// classNames styled by jqui themes\n\twidgetHeaderClass: null,\n\twidgetContentClass: null,\n\thighlightStateClass: null,\n\n\t// for date utils, computed from options\n\tnextDayThreshold: null,\n\tisHiddenDayHash: null,\n\n\t// document handlers, bound to `this` object\n\tdocumentMousedownProxy: null, // TODO: doesn't work with touch\n\n\n\tconstructor: function(calendar, type, options, intervalDuration) {\n\n\t\tthis.calendar = calendar;\n\t\tthis.type = this.name = type; // .name is deprecated\n\t\tthis.options = options;\n\t\tthis.intervalDuration = intervalDuration || moment.duration(1, 'day');\n\n\t\tthis.nextDayThreshold = moment.duration(this.opt('nextDayThreshold'));\n\t\tthis.initThemingProps();\n\t\tthis.initHiddenDays();\n\t\tthis.isRTL = this.opt('isRTL');\n\n\t\tthis.eventOrderSpecs = parseFieldSpecs(this.opt('eventOrder'));\n\n\t\tthis.documentMousedownProxy = proxy(this, 'documentMousedown');\n\n\t\tthis.initialize();\n\t},\n\n\n\t// A good place for subclasses to initialize member variables\n\tinitialize: function() {\n\t\t// subclasses can implement\n\t},\n\n\n\t// Retrieves an option with the given name\n\topt: function(name) {\n\t\treturn this.options[name];\n\t},\n\n\n\t// Triggers handlers that are view-related. Modifies args before passing to calendar.\n\ttrigger: function(name, thisObj) { // arguments beyond thisObj are passed along\n\t\tvar calendar = this.calendar;\n\n\t\treturn calendar.trigger.apply(\n\t\t\tcalendar,\n\t\t\t[name, thisObj || this].concat(\n\t\t\t\tArray.prototype.slice.call(arguments, 2), // arguments beyond thisObj\n\t\t\t\t[ this ] // always make the last argument a reference to the view. TODO: deprecate\n\t\t\t)\n\t\t);\n\t},\n\n\n\t/* Dates\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Updates all internal dates to center around the given current unzoned date.\n\tsetDate: function(date) {\n\t\tthis.setRange(this.computeRange(date));\n\t},\n\n\n\t// Updates all internal dates for displaying the given unzoned range.\n\tsetRange: function(range) {\n\t\t$.extend(this, range); // assigns every property to this object's member variables\n\t\tthis.updateTitle();\n\t},\n\n\n\t// Given a single current unzoned date, produce information about what range to display.\n\t// Subclasses can override. Must return all properties.\n\tcomputeRange: function(date) {\n\t\tvar intervalUnit = computeIntervalUnit(this.intervalDuration);\n\t\tvar intervalStart = date.clone().startOf(intervalUnit);\n\t\tvar intervalEnd = intervalStart.clone().add(this.intervalDuration);\n\t\tvar start, end;\n\n\t\t// normalize the range's time-ambiguity\n\t\tif (/year|month|week|day/.test(intervalUnit)) { // whole-days?\n\t\t\tintervalStart.stripTime();\n\t\t\tintervalEnd.stripTime();\n\t\t}\n\t\telse { // needs to have a time?\n\t\t\tif (!intervalStart.hasTime()) {\n\t\t\t\tintervalStart = this.calendar.time(0); // give 00:00 time\n\t\t\t}\n\t\t\tif (!intervalEnd.hasTime()) {\n\t\t\t\tintervalEnd = this.calendar.time(0); // give 00:00 time\n\t\t\t}\n\t\t}\n\n\t\tstart = intervalStart.clone();\n\t\tstart = this.skipHiddenDays(start);\n\t\tend = intervalEnd.clone();\n\t\tend = this.skipHiddenDays(end, -1, true); // exclusively move backwards\n\n\t\treturn {\n\t\t\tintervalUnit: intervalUnit,\n\t\t\tintervalStart: intervalStart,\n\t\t\tintervalEnd: intervalEnd,\n\t\t\tstart: start,\n\t\t\tend: end\n\t\t};\n\t},\n\n\n\t// Computes the new date when the user hits the prev button, given the current date\n\tcomputePrevDate: function(date) {\n\t\treturn this.massageCurrentDate(\n\t\t\tdate.clone().startOf(this.intervalUnit).subtract(this.intervalDuration), -1\n\t\t);\n\t},\n\n\n\t// Computes the new date when the user hits the next button, given the current date\n\tcomputeNextDate: function(date) {\n\t\treturn this.massageCurrentDate(\n\t\t\tdate.clone().startOf(this.intervalUnit).add(this.intervalDuration)\n\t\t);\n\t},\n\n\n\t// Given an arbitrarily calculated current date of the calendar, returns a date that is ensured to be completely\n\t// visible. `direction` is optional and indicates which direction the current date was being\n\t// incremented or decremented (1 or -1).\n\tmassageCurrentDate: function(date, direction) {\n\t\tif (this.intervalDuration.as('days') <= 1) { // if the view displays a single day or smaller\n\t\t\tif (this.isHiddenDay(date)) {\n\t\t\t\tdate = this.skipHiddenDays(date, direction);\n\t\t\t\tdate.startOf('day');\n\t\t\t}\n\t\t}\n\n\t\treturn date;\n\t},\n\n\n\t/* Title and Date Formatting\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Sets the view's title property to the most updated computed value\n\tupdateTitle: function() {\n\t\tthis.title = this.computeTitle();\n\t},\n\n\n\t// Computes what the title at the top of the calendar should be for this view\n\tcomputeTitle: function() {\n\t\treturn this.formatRange(\n\t\t\t{\n\t\t\t\t// in case intervalStart/End has a time, make sure timezone is correct\n\t\t\t\tstart: this.calendar.applyTimezone(this.intervalStart),\n\t\t\t\tend: this.calendar.applyTimezone(this.intervalEnd)\n\t\t\t},\n\t\t\tthis.opt('titleFormat') || this.computeTitleFormat(),\n\t\t\tthis.opt('titleRangeSeparator')\n\t\t);\n\t},\n\n\n\t// Generates the format string that should be used to generate the title for the current date range.\n\t// Attempts to compute the most appropriate format if not explicitly specified with `titleFormat`.\n\tcomputeTitleFormat: function() {\n\t\tif (this.intervalUnit == 'year') {\n\t\t\treturn 'YYYY';\n\t\t}\n\t\telse if (this.intervalUnit == 'month') {\n\t\t\treturn this.opt('monthYearFormat'); // like \"September 2014\"\n\t\t}\n\t\telse if (this.intervalDuration.as('days') > 1) {\n\t\t\treturn 'll'; // multi-day range. shorter, like \"Sep 9 - 10 2014\"\n\t\t}\n\t\telse {\n\t\t\treturn 'LL'; // one day. longer, like \"September 9 2014\"\n\t\t}\n\t},\n\n\n\t// Utility for formatting a range. Accepts a range object, formatting string, and optional separator.\n\t// Displays all-day ranges naturally, with an inclusive end. Takes the current isRTL into account.\n\t// The timezones of the dates within `range` will be respected.\n\tformatRange: function(range, formatStr, separator) {\n\t\tvar end = range.end;\n\n\t\tif (!end.hasTime()) { // all-day?\n\t\t\tend = end.clone().subtract(1); // convert to inclusive. last ms of previous day\n\t\t}\n\n\t\treturn formatRange(range.start, end, formatStr, separator, this.opt('isRTL'));\n\t},\n\n\n\t/* Rendering\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Sets the container element that the view should render inside of.\n\t// Does other DOM-related initializations.\n\tsetElement: function(el) {\n\t\tthis.el = el;\n\t\tthis.bindGlobalHandlers();\n\t},\n\n\n\t// Removes the view's container element from the DOM, clearing any content beforehand.\n\t// Undoes any other DOM-related attachments.\n\tremoveElement: function() {\n\t\tthis.clear(); // clears all content\n\n\t\t// clean up the skeleton\n\t\tif (this.isSkeletonRendered) {\n\t\t\tthis.unrenderSkeleton();\n\t\t\tthis.isSkeletonRendered = false;\n\t\t}\n\n\t\tthis.unbindGlobalHandlers();\n\n\t\tthis.el.remove();\n\n\t\t// NOTE: don't null-out this.el in case the View was destroyed within an API callback.\n\t\t// We don't null-out the View's other jQuery element references upon destroy,\n\t\t//  so we shouldn't kill this.el either.\n\t},\n\n\n\t// Does everything necessary to display the view centered around the given unzoned date.\n\t// Does every type of rendering EXCEPT rendering events.\n\t// Is asychronous and returns a promise.\n\tdisplay: function(date) {\n\t\tvar _this = this;\n\t\tvar scrollState = null;\n\n\t\tif (this.displaying) {\n\t\t\tscrollState = this.queryScroll();\n\t\t}\n\n\t\tthis.calendar.freezeContentHeight();\n\n\t\treturn this.clear().then(function() { // clear the content first (async)\n\t\t\treturn (\n\t\t\t\t_this.displaying =\n\t\t\t\t\t$.when(_this.displayView(date)) // displayView might return a promise\n\t\t\t\t\t\t.then(function() {\n\t\t\t\t\t\t\t_this.forceScroll(_this.computeInitialScroll(scrollState));\n\t\t\t\t\t\t\t_this.calendar.unfreezeContentHeight();\n\t\t\t\t\t\t\t_this.triggerRender();\n\t\t\t\t\t\t})\n\t\t\t);\n\t\t});\n\t},\n\n\n\t// Does everything necessary to clear the content of the view.\n\t// Clears dates and events. Does not clear the skeleton.\n\t// Is asychronous and returns a promise.\n\tclear: function() {\n\t\tvar _this = this;\n\t\tvar displaying = this.displaying;\n\n\t\tif (displaying) { // previously displayed, or in the process of being displayed?\n\t\t\treturn displaying.then(function() { // wait for the display to finish\n\t\t\t\t_this.displaying = null;\n\t\t\t\t_this.clearEvents();\n\t\t\t\treturn _this.clearView(); // might return a promise. chain it\n\t\t\t});\n\t\t}\n\t\telse {\n\t\t\treturn $.when(); // an immediately-resolved promise\n\t\t}\n\t},\n\n\n\t// If the view has already been displayed, tears it down and displays it again.\n\t// Will re-render the events if necessary, which display/clear DO NOT do.\n\t// TODO: make behavior more consistent.\n\tredisplay: function() {\n\t\tif (this.isSkeletonRendered) {\n\t\t\tvar wasEventsRendered = this.isEventsRendered;\n\t\t\tthis.clearEvents(); // won't trigger handlers if events never rendered\n\t\t\tthis.clearView();\n\t\t\tthis.displayView();\n\t\t\tif (wasEventsRendered) { // only render and trigger handlers if events previously rendered\n\t\t\t\tthis.displayEvents();\n\t\t\t}\n\t\t}\n\t},\n\n\n\t// Displays the view's non-event content, such as date-related content or anything required by events.\n\t// Renders the view's non-content skeleton if necessary.\n\t// Can be asynchronous and return a promise.\n\tdisplayView: function(date) {\n\t\tif (!this.isSkeletonRendered) {\n\t\t\tthis.renderSkeleton();\n\t\t\tthis.isSkeletonRendered = true;\n\t\t}\n\t\tif (date) {\n\t\t\tthis.setDate(date);\n\t\t}\n\t\tif (this.render) {\n\t\t\tthis.render(); // TODO: deprecate\n\t\t}\n\t\tthis.renderDates();\n\t\tthis.updateSize();\n\t\tthis.renderBusinessHours(); // might need coordinates, so should go after updateSize()\n\t},\n\n\n\t// Unrenders the view content that was rendered in displayView.\n\t// Can be asynchronous and return a promise.\n\tclearView: function() {\n\t\tthis.unselect();\n\t\tthis.triggerUnrender();\n\t\tthis.unrenderBusinessHours();\n\t\tthis.unrenderDates();\n\t\tif (this.destroy) {\n\t\t\tthis.destroy(); // TODO: deprecate\n\t\t}\n\t},\n\n\n\t// Renders the basic structure of the view before any content is rendered\n\trenderSkeleton: function() {\n\t\t// subclasses should implement\n\t},\n\n\n\t// Unrenders the basic structure of the view\n\tunrenderSkeleton: function() {\n\t\t// subclasses should implement\n\t},\n\n\n\t// Renders the view's date-related content.\n\t// Assumes setRange has already been called and the skeleton has already been rendered.\n\trenderDates: function() {\n\t\t// subclasses should implement\n\t},\n\n\n\t// Unrenders the view's date-related content\n\tunrenderDates: function() {\n\t\t// subclasses should override\n\t},\n\n\n\t// Renders business-hours onto the view. Assumes updateSize has already been called.\n\trenderBusinessHours: function() {\n\t\t// subclasses should implement\n\t},\n\n\n\t// Unrenders previously-rendered business-hours\n\tunrenderBusinessHours: function() {\n\t\t// subclasses should implement\n\t},\n\n\n\t// Signals that the view's content has been rendered\n\ttriggerRender: function() {\n\t\tthis.trigger('viewRender', this, this, this.el);\n\t},\n\n\n\t// Signals that the view's content is about to be unrendered\n\ttriggerUnrender: function() {\n\t\tthis.trigger('viewDestroy', this, this, this.el);\n\t},\n\n\n\t// Binds DOM handlers to elements that reside outside the view container, such as the document\n\tbindGlobalHandlers: function() {\n\t\t$(document).on('mousedown', this.documentMousedownProxy);\n\t},\n\n\n\t// Unbinds DOM handlers from elements that reside outside the view container\n\tunbindGlobalHandlers: function() {\n\t\t$(document).off('mousedown', this.documentMousedownProxy);\n\t},\n\n\n\t// Initializes internal variables related to theming\n\tinitThemingProps: function() {\n\t\tvar tm = this.opt('theme') ? 'ui' : 'fc';\n\n\t\tthis.widgetHeaderClass = tm + '-widget-header';\n\t\tthis.widgetContentClass = tm + '-widget-content';\n\t\tthis.highlightStateClass = tm + '-state-highlight';\n\t},\n\n\n\t/* Dimensions\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Refreshes anything dependant upon sizing of the container element of the grid\n\tupdateSize: function(isResize) {\n\t\tvar scrollState;\n\n\t\tif (isResize) {\n\t\t\tscrollState = this.queryScroll();\n\t\t}\n\n\t\tthis.updateHeight(isResize);\n\t\tthis.updateWidth(isResize);\n\n\t\tif (isResize) {\n\t\t\tthis.setScroll(scrollState);\n\t\t}\n\t},\n\n\n\t// Refreshes the horizontal dimensions of the calendar\n\tupdateWidth: function(isResize) {\n\t\t// subclasses should implement\n\t},\n\n\n\t// Refreshes the vertical dimensions of the calendar\n\tupdateHeight: function(isResize) {\n\t\tvar calendar = this.calendar; // we poll the calendar for height information\n\n\t\tthis.setHeight(\n\t\t\tcalendar.getSuggestedViewHeight(),\n\t\t\tcalendar.isHeightAuto()\n\t\t);\n\t},\n\n\n\t// Updates the vertical dimensions of the calendar to the specified height.\n\t// if `isAuto` is set to true, height becomes merely a suggestion and the view should use its \"natural\" height.\n\tsetHeight: function(height, isAuto) {\n\t\t// subclasses should implement\n\t},\n\n\n\t/* Scroller\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Given the total height of the view, return the number of pixels that should be used for the scroller.\n\t// Utility for subclasses.\n\tcomputeScrollerHeight: function(totalHeight) {\n\t\tvar scrollerEl = this.scrollerEl;\n\t\tvar both;\n\t\tvar otherHeight; // cumulative height of everything that is not the scrollerEl in the view (header+borders)\n\n\t\tboth = this.el.add(scrollerEl);\n\n\t\t// fuckin IE8/9/10/11 sometimes returns 0 for dimensions. this weird hack was the only thing that worked\n\t\tboth.css({\n\t\t\tposition: 'relative', // cause a reflow, which will force fresh dimension recalculation\n\t\t\tleft: -1 // ensure reflow in case the el was already relative. negative is less likely to cause new scroll\n\t\t});\n\t\totherHeight = this.el.outerHeight() - scrollerEl.height(); // grab the dimensions\n\t\tboth.css({ position: '', left: '' }); // undo hack\n\n\t\treturn totalHeight - otherHeight;\n\t},\n\n\n\t// Computes the initial pre-configured scroll state prior to allowing the user to change it.\n\t// Given the scroll state from the previous rendering. If first time rendering, given null.\n\tcomputeInitialScroll: function(previousScrollState) {\n\t\treturn 0;\n\t},\n\n\n\t// Retrieves the view's current natural scroll state. Can return an arbitrary format.\n\tqueryScroll: function() {\n\t\tif (this.scrollerEl) {\n\t\t\treturn this.scrollerEl.scrollTop(); // operates on scrollerEl by default\n\t\t}\n\t},\n\n\n\t// Sets the view's scroll state. Will accept the same format computeInitialScroll and queryScroll produce.\n\tsetScroll: function(scrollState) {\n\t\tif (this.scrollerEl) {\n\t\t\treturn this.scrollerEl.scrollTop(scrollState); // operates on scrollerEl by default\n\t\t}\n\t},\n\n\n\t// Sets the scroll state, making sure to overcome any predefined scroll value the browser has in mind\n\tforceScroll: function(scrollState) {\n\t\tvar _this = this;\n\n\t\tthis.setScroll(scrollState);\n\t\tsetTimeout(function() {\n\t\t\t_this.setScroll(scrollState);\n\t\t}, 0);\n\t},\n\n\n\t/* Event Elements / Segments\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Does everything necessary to display the given events onto the current view\n\tdisplayEvents: function(events) {\n\t\tvar scrollState = this.queryScroll();\n\n\t\tthis.clearEvents();\n\t\tthis.renderEvents(events);\n\t\tthis.isEventsRendered = true;\n\t\tthis.setScroll(scrollState);\n\t\tthis.triggerEventRender();\n\t},\n\n\n\t// Does everything necessary to clear the view's currently-rendered events\n\tclearEvents: function() {\n\t\tif (this.isEventsRendered) {\n\t\t\tthis.triggerEventUnrender();\n\t\t\tif (this.destroyEvents) {\n\t\t\t\tthis.destroyEvents(); // TODO: deprecate\n\t\t\t}\n\t\t\tthis.unrenderEvents();\n\t\t\tthis.isEventsRendered = false;\n\t\t}\n\t},\n\n\n\t// Renders the events onto the view.\n\trenderEvents: function(events) {\n\t\t// subclasses should implement\n\t},\n\n\n\t// Removes event elements from the view.\n\tunrenderEvents: function() {\n\t\t// subclasses should implement\n\t},\n\n\n\t// Signals that all events have been rendered\n\ttriggerEventRender: function() {\n\t\tthis.renderedEventSegEach(function(seg) {\n\t\t\tthis.trigger('eventAfterRender', seg.event, seg.event, seg.el);\n\t\t});\n\t\tthis.trigger('eventAfterAllRender');\n\t},\n\n\n\t// Signals that all event elements are about to be removed\n\ttriggerEventUnrender: function() {\n\t\tthis.renderedEventSegEach(function(seg) {\n\t\t\tthis.trigger('eventDestroy', seg.event, seg.event, seg.el);\n\t\t});\n\t},\n\n\n\t// Given an event and the default element used for rendering, returns the element that should actually be used.\n\t// Basically runs events and elements through the eventRender hook.\n\tresolveEventEl: function(event, el) {\n\t\tvar custom = this.trigger('eventRender', event, event, el);\n\n\t\tif (custom === false) { // means don't render at all\n\t\t\tel = null;\n\t\t}\n\t\telse if (custom && custom !== true) {\n\t\t\tel = $(custom);\n\t\t}\n\n\t\treturn el;\n\t},\n\n\n\t// Hides all rendered event segments linked to the given event\n\tshowEvent: function(event) {\n\t\tthis.renderedEventSegEach(function(seg) {\n\t\t\tseg.el.css('visibility', '');\n\t\t}, event);\n\t},\n\n\n\t// Shows all rendered event segments linked to the given event\n\thideEvent: function(event) {\n\t\tthis.renderedEventSegEach(function(seg) {\n\t\t\tseg.el.css('visibility', 'hidden');\n\t\t}, event);\n\t},\n\n\n\t// Iterates through event segments that have been rendered (have an el). Goes through all by default.\n\t// If the optional `event` argument is specified, only iterates through segments linked to that event.\n\t// The `this` value of the callback function will be the view.\n\trenderedEventSegEach: function(func, event) {\n\t\tvar segs = this.getEventSegs();\n\t\tvar i;\n\n\t\tfor (i = 0; i < segs.length; i++) {\n\t\t\tif (!event || segs[i].event._id === event._id) {\n\t\t\t\tif (segs[i].el) {\n\t\t\t\t\tfunc.call(this, segs[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\n\t// Retrieves all the rendered segment objects for the view\n\tgetEventSegs: function() {\n\t\t// subclasses must implement\n\t\treturn [];\n\t},\n\n\n\t/* Event Drag-n-Drop\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Computes if the given event is allowed to be dragged by the user\n\tisEventDraggable: function(event) {\n\t\tvar source = event.source || {};\n\n\t\treturn firstDefined(\n\t\t\tevent.startEditable,\n\t\t\tsource.startEditable,\n\t\t\tthis.opt('eventStartEditable'),\n\t\t\tevent.editable,\n\t\t\tsource.editable,\n\t\t\tthis.opt('editable')\n\t\t);\n\t},\n\n\n\t// Must be called when an event in the view is dropped onto new location.\n\t// `dropLocation` is an object that contains the new zoned start/end/allDay values for the event.\n\treportEventDrop: function(event, dropLocation, largeUnit, el, ev) {\n\t\tvar calendar = this.calendar;\n\t\tvar mutateResult = calendar.mutateEvent(event, dropLocation, largeUnit);\n\t\tvar undoFunc = function() {\n\t\t\tmutateResult.undo();\n\t\t\tcalendar.reportEventChange();\n\t\t};\n\n\t\tthis.triggerEventDrop(event, mutateResult.dateDelta, undoFunc, el, ev);\n\t\tcalendar.reportEventChange(); // will rerender events\n\t},\n\n\n\t// Triggers event-drop handlers that have subscribed via the API\n\ttriggerEventDrop: function(event, dateDelta, undoFunc, el, ev) {\n\t\tthis.trigger('eventDrop', el[0], event, dateDelta, undoFunc, ev, {}); // {} = jqui dummy\n\t},\n\n\n\t/* External Element Drag-n-Drop\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Must be called when an external element, via jQuery UI, has been dropped onto the calendar.\n\t// `meta` is the parsed data that has been embedded into the dragging event.\n\t// `dropLocation` is an object that contains the new zoned start/end/allDay values for the event.\n\treportExternalDrop: function(meta, dropLocation, el, ev, ui) {\n\t\tvar eventProps = meta.eventProps;\n\t\tvar eventInput;\n\t\tvar event;\n\n\t\t// Try to build an event object and render it. TODO: decouple the two\n\t\tif (eventProps) {\n\t\t\teventInput = $.extend({}, eventProps, dropLocation);\n\t\t\tevent = this.calendar.renderEvent(eventInput, meta.stick)[0]; // renderEvent returns an array\n\t\t}\n\n\t\tthis.triggerExternalDrop(event, dropLocation, el, ev, ui);\n\t},\n\n\n\t// Triggers external-drop handlers that have subscribed via the API\n\ttriggerExternalDrop: function(event, dropLocation, el, ev, ui) {\n\n\t\t// trigger 'drop' regardless of whether element represents an event\n\t\tthis.trigger('drop', el[0], dropLocation.start, ev, ui);\n\n\t\tif (event) {\n\t\t\tthis.trigger('eventReceive', null, event); // signal an external event landed\n\t\t}\n\t},\n\n\n\t/* Drag-n-Drop Rendering (for both events and external elements)\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Renders a visual indication of a event or external-element drag over the given drop zone.\n\t// If an external-element, seg will be `null`\n\trenderDrag: function(dropLocation, seg) {\n\t\t// subclasses must implement\n\t},\n\n\n\t// Unrenders a visual indication of an event or external-element being dragged.\n\tunrenderDrag: function() {\n\t\t// subclasses must implement\n\t},\n\n\n\t/* Event Resizing\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Computes if the given event is allowed to be resized from its starting edge\n\tisEventResizableFromStart: function(event) {\n\t\treturn this.opt('eventResizableFromStart') && this.isEventResizable(event);\n\t},\n\n\n\t// Computes if the given event is allowed to be resized from its ending edge\n\tisEventResizableFromEnd: function(event) {\n\t\treturn this.isEventResizable(event);\n\t},\n\n\n\t// Computes if the given event is allowed to be resized by the user at all\n\tisEventResizable: function(event) {\n\t\tvar source = event.source || {};\n\n\t\treturn firstDefined(\n\t\t\tevent.durationEditable,\n\t\t\tsource.durationEditable,\n\t\t\tthis.opt('eventDurationEditable'),\n\t\t\tevent.editable,\n\t\t\tsource.editable,\n\t\t\tthis.opt('editable')\n\t\t);\n\t},\n\n\n\t// Must be called when an event in the view has been resized to a new length\n\treportEventResize: function(event, resizeLocation, largeUnit, el, ev) {\n\t\tvar calendar = this.calendar;\n\t\tvar mutateResult = calendar.mutateEvent(event, resizeLocation, largeUnit);\n\t\tvar undoFunc = function() {\n\t\t\tmutateResult.undo();\n\t\t\tcalendar.reportEventChange();\n\t\t};\n\n\t\tthis.triggerEventResize(event, mutateResult.durationDelta, undoFunc, el, ev);\n\t\tcalendar.reportEventChange(); // will rerender events\n\t},\n\n\n\t// Triggers event-resize handlers that have subscribed via the API\n\ttriggerEventResize: function(event, durationDelta, undoFunc, el, ev) {\n\t\tthis.trigger('eventResize', el[0], event, durationDelta, undoFunc, ev, {}); // {} = jqui dummy\n\t},\n\n\n\t/* Selection\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Selects a date span on the view. `start` and `end` are both Moments.\n\t// `ev` is the native mouse event that begin the interaction.\n\tselect: function(span, ev) {\n\t\tthis.unselect(ev);\n\t\tthis.renderSelection(span);\n\t\tthis.reportSelection(span, ev);\n\t},\n\n\n\t// Renders a visual indication of the selection\n\trenderSelection: function(span) {\n\t\t// subclasses should implement\n\t},\n\n\n\t// Called when a new selection is made. Updates internal state and triggers handlers.\n\treportSelection: function(span, ev) {\n\t\tthis.isSelected = true;\n\t\tthis.triggerSelect(span, ev);\n\t},\n\n\n\t// Triggers handlers to 'select'\n\ttriggerSelect: function(span, ev) {\n\t\tthis.trigger(\n\t\t\t'select',\n\t\t\tnull,\n\t\t\tthis.calendar.applyTimezone(span.start), // convert to calendar's tz for external API\n\t\t\tthis.calendar.applyTimezone(span.end), // \"\n\t\t\tev\n\t\t);\n\t},\n\n\n\t// Undoes a selection. updates in the internal state and triggers handlers.\n\t// `ev` is the native mouse event that began the interaction.\n\tunselect: function(ev) {\n\t\tif (this.isSelected) {\n\t\t\tthis.isSelected = false;\n\t\t\tif (this.destroySelection) {\n\t\t\t\tthis.destroySelection(); // TODO: deprecate\n\t\t\t}\n\t\t\tthis.unrenderSelection();\n\t\t\tthis.trigger('unselect', null, ev);\n\t\t}\n\t},\n\n\n\t// Unrenders a visual indication of selection\n\tunrenderSelection: function() {\n\t\t// subclasses should implement\n\t},\n\n\n\t// Handler for unselecting when the user clicks something and the 'unselectAuto' setting is on\n\tdocumentMousedown: function(ev) {\n\t\tvar ignore;\n\n\t\t// is there a selection, and has the user made a proper left click?\n\t\tif (this.isSelected && this.opt('unselectAuto') && isPrimaryMouseButton(ev)) {\n\n\t\t\t// only unselect if the clicked element is not identical to or inside of an 'unselectCancel' element\n\t\t\tignore = this.opt('unselectCancel');\n\t\t\tif (!ignore || !$(ev.target).closest(ignore).length) {\n\t\t\t\tthis.unselect(ev);\n\t\t\t}\n\t\t}\n\t},\n\n\n\t/* Day Click\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Triggers handlers to 'dayClick'\n\t// Span has start/end of the clicked area. Only the start is useful.\n\ttriggerDayClick: function(span, dayEl, ev) {\n\t\tthis.trigger(\n\t\t\t'dayClick',\n\t\t\tdayEl,\n\t\t\tthis.calendar.applyTimezone(span.start), // convert to calendar's timezone for external API\n\t\t\tev\n\t\t);\n\t},\n\n\n\t/* Date Utils\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Initializes internal variables related to calculating hidden days-of-week\n\tinitHiddenDays: function() {\n\t\tvar hiddenDays = this.opt('hiddenDays') || []; // array of day-of-week indices that are hidden\n\t\tvar isHiddenDayHash = []; // is the day-of-week hidden? (hash with day-of-week-index -> bool)\n\t\tvar dayCnt = 0;\n\t\tvar i;\n\n\t\tif (this.opt('weekends') === false) {\n\t\t\thiddenDays.push(0, 6); // 0=sunday, 6=saturday\n\t\t}\n\n\t\tfor (i = 0; i < 7; i++) {\n\t\t\tif (\n\t\t\t\t!(isHiddenDayHash[i] = $.inArray(i, hiddenDays) !== -1)\n\t\t\t) {\n\t\t\t\tdayCnt++;\n\t\t\t}\n\t\t}\n\n\t\tif (!dayCnt) {\n\t\t\tthrow 'invalid hiddenDays'; // all days were hidden? bad.\n\t\t}\n\n\t\tthis.isHiddenDayHash = isHiddenDayHash;\n\t},\n\n\n\t// Is the current day hidden?\n\t// `day` is a day-of-week index (0-6), or a Moment\n\tisHiddenDay: function(day) {\n\t\tif (moment.isMoment(day)) {\n\t\t\tday = day.day();\n\t\t}\n\t\treturn this.isHiddenDayHash[day];\n\t},\n\n\n\t// Incrementing the current day until it is no longer a hidden day, returning a copy.\n\t// If the initial value of `date` is not a hidden day, don't do anything.\n\t// Pass `isExclusive` as `true` if you are dealing with an end date.\n\t// `inc` defaults to `1` (increment one day forward each time)\n\tskipHiddenDays: function(date, inc, isExclusive) {\n\t\tvar out = date.clone();\n\t\tinc = inc || 1;\n\t\twhile (\n\t\t\tthis.isHiddenDayHash[(out.day() + (isExclusive ? inc : 0) + 7) % 7]\n\t\t) {\n\t\t\tout.add(inc, 'days');\n\t\t}\n\t\treturn out;\n\t},\n\n\n\t// Returns the date range of the full days the given range visually appears to occupy.\n\t// Returns a new range object.\n\tcomputeDayRange: function(range) {\n\t\tvar startDay = range.start.clone().stripTime(); // the beginning of the day the range starts\n\t\tvar end = range.end;\n\t\tvar endDay = null;\n\t\tvar endTimeMS;\n\n\t\tif (end) {\n\t\t\tendDay = end.clone().stripTime(); // the beginning of the day the range exclusively ends\n\t\t\tendTimeMS = +end.time(); // # of milliseconds into `endDay`\n\n\t\t\t// If the end time is actually inclusively part of the next day and is equal to or\n\t\t\t// beyond the next day threshold, adjust the end to be the exclusive end of `endDay`.\n\t\t\t// Otherwise, leaving it as inclusive will cause it to exclude `endDay`.\n\t\t\tif (endTimeMS && endTimeMS >= this.nextDayThreshold) {\n\t\t\t\tendDay.add(1, 'days');\n\t\t\t}\n\t\t}\n\n\t\t// If no end was specified, or if it is within `startDay` but not past nextDayThreshold,\n\t\t// assign the default duration of one day.\n\t\tif (!end || endDay <= startDay) {\n\t\t\tendDay = startDay.clone().add(1, 'days');\n\t\t}\n\n\t\treturn { start: startDay, end: endDay };\n\t},\n\n\n\t// Does the given event visually appear to occupy more than one day?\n\tisMultiDayEvent: function(event) {\n\t\tvar range = this.computeDayRange(event); // event is range-ish\n\n\t\treturn range.end.diff(range.start, 'days') > 1;\n\t}\n\n});\n\n;;\n\nvar Calendar = FC.Calendar = Class.extend({\n\n\tdirDefaults: null, // option defaults related to LTR or RTL\n\tlangDefaults: null, // option defaults related to current locale\n\toverrides: null, // option overrides given to the fullCalendar constructor\n\toptions: null, // all defaults combined with overrides\n\tviewSpecCache: null, // cache of view definitions\n\tview: null, // current View object\n\theader: null,\n\tloadingLevel: 0, // number of simultaneous loading tasks\n\n\n\t// a lot of this class' OOP logic is scoped within this constructor function,\n\t// but in the future, write individual methods on the prototype.\n\tconstructor: Calendar_constructor,\n\n\n\t// Subclasses can override this for initialization logic after the constructor has been called\n\tinitialize: function() {\n\t},\n\n\n\t// Initializes `this.options` and other important options-related objects\n\tinitOptions: function(overrides) {\n\t\tvar lang, langDefaults;\n\t\tvar isRTL, dirDefaults;\n\n\t\t// converts legacy options into non-legacy ones.\n\t\t// in the future, when this is removed, don't use `overrides` reference. make a copy.\n\t\toverrides = massageOverrides(overrides);\n\n\t\tlang = overrides.lang;\n\t\tlangDefaults = langOptionHash[lang];\n\t\tif (!langDefaults) {\n\t\t\tlang = Calendar.defaults.lang;\n\t\t\tlangDefaults = langOptionHash[lang] || {};\n\t\t}\n\n\t\tisRTL = firstDefined(\n\t\t\toverrides.isRTL,\n\t\t\tlangDefaults.isRTL,\n\t\t\tCalendar.defaults.isRTL\n\t\t);\n\t\tdirDefaults = isRTL ? Calendar.rtlDefaults : {};\n\n\t\tthis.dirDefaults = dirDefaults;\n\t\tthis.langDefaults = langDefaults;\n\t\tthis.overrides = overrides;\n\t\tthis.options = mergeOptions([ // merge defaults and overrides. lowest to highest precedence\n\t\t\tCalendar.defaults, // global defaults\n\t\t\tdirDefaults,\n\t\t\tlangDefaults,\n\t\t\toverrides\n\t\t]);\n\t\tpopulateInstanceComputableOptions(this.options);\n\n\t\tthis.viewSpecCache = {}; // somewhat unrelated\n\t},\n\n\n\t// Gets information about how to create a view. Will use a cache.\n\tgetViewSpec: function(viewType) {\n\t\tvar cache = this.viewSpecCache;\n\n\t\treturn cache[viewType] || (cache[viewType] = this.buildViewSpec(viewType));\n\t},\n\n\n\t// Given a duration singular unit, like \"week\" or \"day\", finds a matching view spec.\n\t// Preference is given to views that have corresponding buttons.\n\tgetUnitViewSpec: function(unit) {\n\t\tvar viewTypes;\n\t\tvar i;\n\t\tvar spec;\n\n\t\tif ($.inArray(unit, intervalUnits) != -1) {\n\n\t\t\t// put views that have buttons first. there will be duplicates, but oh well\n\t\t\tviewTypes = this.header.getViewsWithButtons();\n\t\t\t$.each(FC.views, function(viewType) { // all views\n\t\t\t\tviewTypes.push(viewType);\n\t\t\t});\n\n\t\t\tfor (i = 0; i < viewTypes.length; i++) {\n\t\t\t\tspec = this.getViewSpec(viewTypes[i]);\n\t\t\t\tif (spec) {\n\t\t\t\t\tif (spec.singleUnit == unit) {\n\t\t\t\t\t\treturn spec;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\n\t// Builds an object with information on how to create a given view\n\tbuildViewSpec: function(requestedViewType) {\n\t\tvar viewOverrides = this.overrides.views || {};\n\t\tvar specChain = []; // for the view. lowest to highest priority\n\t\tvar defaultsChain = []; // for the view. lowest to highest priority\n\t\tvar overridesChain = []; // for the view. lowest to highest priority\n\t\tvar viewType = requestedViewType;\n\t\tvar spec; // for the view\n\t\tvar overrides; // for the view\n\t\tvar duration;\n\t\tvar unit;\n\n\t\t// iterate from the specific view definition to a more general one until we hit an actual View class\n\t\twhile (viewType) {\n\t\t\tspec = fcViews[viewType];\n\t\t\toverrides = viewOverrides[viewType];\n\t\t\tviewType = null; // clear. might repopulate for another iteration\n\n\t\t\tif (typeof spec === 'function') { // TODO: deprecate\n\t\t\t\tspec = { 'class': spec };\n\t\t\t}\n\n\t\t\tif (spec) {\n\t\t\t\tspecChain.unshift(spec);\n\t\t\t\tdefaultsChain.unshift(spec.defaults || {});\n\t\t\t\tduration = duration || spec.duration;\n\t\t\t\tviewType = viewType || spec.type;\n\t\t\t}\n\n\t\t\tif (overrides) {\n\t\t\t\toverridesChain.unshift(overrides); // view-specific option hashes have options at zero-level\n\t\t\t\tduration = duration || overrides.duration;\n\t\t\t\tviewType = viewType || overrides.type;\n\t\t\t}\n\t\t}\n\n\t\tspec = mergeProps(specChain);\n\t\tspec.type = requestedViewType;\n\t\tif (!spec['class']) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (duration) {\n\t\t\tduration = moment.duration(duration);\n\t\t\tif (duration.valueOf()) { // valid?\n\t\t\t\tspec.duration = duration;\n\t\t\t\tunit = computeIntervalUnit(duration);\n\n\t\t\t\t// view is a single-unit duration, like \"week\" or \"day\"\n\t\t\t\t// incorporate options for this. lowest priority\n\t\t\t\tif (duration.as(unit) === 1) {\n\t\t\t\t\tspec.singleUnit = unit;\n\t\t\t\t\toverridesChain.unshift(viewOverrides[unit] || {});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tspec.defaults = mergeOptions(defaultsChain);\n\t\tspec.overrides = mergeOptions(overridesChain);\n\n\t\tthis.buildViewSpecOptions(spec);\n\t\tthis.buildViewSpecButtonText(spec, requestedViewType);\n\n\t\treturn spec;\n\t},\n\n\n\t// Builds and assigns a view spec's options object from its already-assigned defaults and overrides\n\tbuildViewSpecOptions: function(spec) {\n\t\tspec.options = mergeOptions([ // lowest to highest priority\n\t\t\tCalendar.defaults, // global defaults\n\t\t\tspec.defaults, // view's defaults (from ViewSubclass.defaults)\n\t\t\tthis.dirDefaults,\n\t\t\tthis.langDefaults, // locale and dir take precedence over view's defaults!\n\t\t\tthis.overrides, // calendar's overrides (options given to constructor)\n\t\t\tspec.overrides // view's overrides (view-specific options)\n\t\t]);\n\t\tpopulateInstanceComputableOptions(spec.options);\n\t},\n\n\n\t// Computes and assigns a view spec's buttonText-related options\n\tbuildViewSpecButtonText: function(spec, requestedViewType) {\n\n\t\t// given an options object with a possible `buttonText` hash, lookup the buttonText for the\n\t\t// requested view, falling back to a generic unit entry like \"week\" or \"day\"\n\t\tfunction queryButtonText(options) {\n\t\t\tvar buttonText = options.buttonText || {};\n\t\t\treturn buttonText[requestedViewType] ||\n\t\t\t\t(spec.singleUnit ? buttonText[spec.singleUnit] : null);\n\t\t}\n\n\t\t// highest to lowest priority\n\t\tspec.buttonTextOverride =\n\t\t\tqueryButtonText(this.overrides) || // constructor-specified buttonText lookup hash takes precedence\n\t\t\tspec.overrides.buttonText; // `buttonText` for view-specific options is a string\n\n\t\t// highest to lowest priority. mirrors buildViewSpecOptions\n\t\tspec.buttonTextDefault =\n\t\t\tqueryButtonText(this.langDefaults) ||\n\t\t\tqueryButtonText(this.dirDefaults) ||\n\t\t\tspec.defaults.buttonText || // a single string. from ViewSubclass.defaults\n\t\t\tqueryButtonText(Calendar.defaults) ||\n\t\t\t(spec.duration ? this.humanizeDuration(spec.duration) : null) || // like \"3 days\"\n\t\t\trequestedViewType; // fall back to given view name\n\t},\n\n\n\t// Given a view name for a custom view or a standard view, creates a ready-to-go View object\n\tinstantiateView: function(viewType) {\n\t\tvar spec = this.getViewSpec(viewType);\n\n\t\treturn new spec['class'](this, viewType, spec.options, spec.duration);\n\t},\n\n\n\t// Returns a boolean about whether the view is okay to instantiate at some point\n\tisValidViewType: function(viewType) {\n\t\treturn Boolean(this.getViewSpec(viewType));\n\t},\n\n\n\t// Should be called when any type of async data fetching begins\n\tpushLoading: function() {\n\t\tif (!(this.loadingLevel++)) {\n\t\t\tthis.trigger('loading', null, true, this.view);\n\t\t}\n\t},\n\n\n\t// Should be called when any type of async data fetching completes\n\tpopLoading: function() {\n\t\tif (!(--this.loadingLevel)) {\n\t\t\tthis.trigger('loading', null, false, this.view);\n\t\t}\n\t},\n\n\n\t// Given arguments to the select method in the API, returns a span (unzoned start/end and other info)\n\tbuildSelectSpan: function(zonedStartInput, zonedEndInput) {\n\t\tvar start = this.moment(zonedStartInput).stripZone();\n\t\tvar end;\n\n\t\tif (zonedEndInput) {\n\t\t\tend = this.moment(zonedEndInput).stripZone();\n\t\t}\n\t\telse if (start.hasTime()) {\n\t\t\tend = start.clone().add(this.defaultTimedEventDuration);\n\t\t}\n\t\telse {\n\t\t\tend = start.clone().add(this.defaultAllDayEventDuration);\n\t\t}\n\n\t\treturn { start: start, end: end };\n\t}\n\n});\n\n\nCalendar.mixin(Emitter);\n\n\nfunction Calendar_constructor(element, overrides) {\n\tvar t = this;\n\n\n\tt.initOptions(overrides || {});\n\tvar options = this.options;\n\n\t\n\t// Exports\n\t// -----------------------------------------------------------------------------------\n\n\tt.render = render;\n\tt.destroy = destroy;\n\tt.refetchEvents = refetchEvents;\n\tt.reportEvents = reportEvents;\n\tt.reportEventChange = reportEventChange;\n\tt.rerenderEvents = renderEvents; // `renderEvents` serves as a rerender. an API method\n\tt.changeView = renderView; // `renderView` will switch to another view\n\tt.select = select;\n\tt.unselect = unselect;\n\tt.prev = prev;\n\tt.next = next;\n\tt.prevYear = prevYear;\n\tt.nextYear = nextYear;\n\tt.today = today;\n\tt.gotoDate = gotoDate;\n\tt.incrementDate = incrementDate;\n\tt.zoomTo = zoomTo;\n\tt.getDate = getDate;\n\tt.getCalendar = getCalendar;\n\tt.getView = getView;\n\tt.option = option;\n\tt.trigger = trigger;\n\n\n\n\t// Language-data Internals\n\t// -----------------------------------------------------------------------------------\n\t// Apply overrides to the current language's data\n\n\n\tvar localeData = createObject( // make a cheap copy\n\t\tgetMomentLocaleData(options.lang) // will fall back to en\n\t);\n\n\tif (options.monthNames) {\n\t\tlocaleData._months = options.monthNames;\n\t}\n\tif (options.monthNamesShort) {\n\t\tlocaleData._monthsShort = options.monthNamesShort;\n\t}\n\tif (options.dayNames) {\n\t\tlocaleData._weekdays = options.dayNames;\n\t}\n\tif (options.dayNamesShort) {\n\t\tlocaleData._weekdaysShort = options.dayNamesShort;\n\t}\n\tif (options.firstDay != null) {\n\t\tvar _week = createObject(localeData._week); // _week: { dow: # }\n\t\t_week.dow = options.firstDay;\n\t\tlocaleData._week = _week;\n\t}\n\n\t// assign a normalized value, to be used by our .week() moment extension\n\tlocaleData._fullCalendar_weekCalc = (function(weekCalc) {\n\t\tif (typeof weekCalc === 'function') {\n\t\t\treturn weekCalc;\n\t\t}\n\t\telse if (weekCalc === 'local') {\n\t\t\treturn weekCalc;\n\t\t}\n\t\telse if (weekCalc === 'iso' || weekCalc === 'ISO') {\n\t\t\treturn 'ISO';\n\t\t}\n\t})(options.weekNumberCalculation);\n\n\n\n\t// Calendar-specific Date Utilities\n\t// -----------------------------------------------------------------------------------\n\n\n\tt.defaultAllDayEventDuration = moment.duration(options.defaultAllDayEventDuration);\n\tt.defaultTimedEventDuration = moment.duration(options.defaultTimedEventDuration);\n\n\n\t// Builds a moment using the settings of the current calendar: timezone and language.\n\t// Accepts anything the vanilla moment() constructor accepts.\n\tt.moment = function() {\n\t\tvar mom;\n\n\t\tif (options.timezone === 'local') {\n\t\t\tmom = FC.moment.apply(null, arguments);\n\n\t\t\t// Force the moment to be local, because FC.moment doesn't guarantee it.\n\t\t\tif (mom.hasTime()) { // don't give ambiguously-timed moments a local zone\n\t\t\t\tmom.local();\n\t\t\t}\n\t\t}\n\t\telse if (options.timezone === 'UTC') {\n\t\t\tmom = FC.moment.utc.apply(null, arguments); // process as UTC\n\t\t}\n\t\telse {\n\t\t\tmom = FC.moment.parseZone.apply(null, arguments); // let the input decide the zone\n\t\t}\n\n\t\tif ('_locale' in mom) { // moment 2.8 and above\n\t\t\tmom._locale = localeData;\n\t\t}\n\t\telse { // pre-moment-2.8\n\t\t\tmom._lang = localeData;\n\t\t}\n\n\t\treturn mom;\n\t};\n\n\n\t// Returns a boolean about whether or not the calendar knows how to calculate\n\t// the timezone offset of arbitrary dates in the current timezone.\n\tt.getIsAmbigTimezone = function() {\n\t\treturn options.timezone !== 'local' && options.timezone !== 'UTC';\n\t};\n\n\n\t// Returns a copy of the given date in the current timezone. Has no effect on dates without times.\n\tt.applyTimezone = function(date) {\n\t\tif (!date.hasTime()) {\n\t\t\treturn date.clone();\n\t\t}\n\n\t\tvar zonedDate = t.moment(date.toArray());\n\t\tvar timeAdjust = date.time() - zonedDate.time();\n\t\tvar adjustedZonedDate;\n\n\t\t// Safari sometimes has problems with this coersion when near DST. Adjust if necessary. (bug #2396)\n\t\tif (timeAdjust) { // is the time result different than expected?\n\t\t\tadjustedZonedDate = zonedDate.clone().add(timeAdjust); // add milliseconds\n\t\t\tif (date.time() - adjustedZonedDate.time() === 0) { // does it match perfectly now?\n\t\t\t\tzonedDate = adjustedZonedDate;\n\t\t\t}\n\t\t}\n\n\t\treturn zonedDate;\n\t};\n\n\n\t// Returns a moment for the current date, as defined by the client's computer or from the `now` option.\n\t// Will return an moment with an ambiguous timezone.\n\tt.getNow = function() {\n\t\tvar now = options.now;\n\t\tif (typeof now === 'function') {\n\t\t\tnow = now();\n\t\t}\n\t\treturn t.moment(now).stripZone();\n\t};\n\n\n\t// Get an event's normalized end date. If not present, calculate it from the defaults.\n\tt.getEventEnd = function(event) {\n\t\tif (event.end) {\n\t\t\treturn event.end.clone();\n\t\t}\n\t\telse {\n\t\t\treturn t.getDefaultEventEnd(event.allDay, event.start);\n\t\t}\n\t};\n\n\n\t// Given an event's allDay status and start date, return what its fallback end date should be.\n\t// TODO: rename to computeDefaultEventEnd\n\tt.getDefaultEventEnd = function(allDay, zonedStart) {\n\t\tvar end = zonedStart.clone();\n\n\t\tif (allDay) {\n\t\t\tend.stripTime().add(t.defaultAllDayEventDuration);\n\t\t}\n\t\telse {\n\t\t\tend.add(t.defaultTimedEventDuration);\n\t\t}\n\n\t\tif (t.getIsAmbigTimezone()) {\n\t\t\tend.stripZone(); // we don't know what the tzo should be\n\t\t}\n\n\t\treturn end;\n\t};\n\n\n\t// Produces a human-readable string for the given duration.\n\t// Side-effect: changes the locale of the given duration.\n\tt.humanizeDuration = function(duration) {\n\t\treturn (duration.locale || duration.lang).call(duration, options.lang) // works moment-pre-2.8\n\t\t\t.humanize();\n\t};\n\n\n\t\n\t// Imports\n\t// -----------------------------------------------------------------------------------\n\n\n\tEventManager.call(t, options);\n\tvar isFetchNeeded = t.isFetchNeeded;\n\tvar fetchEvents = t.fetchEvents;\n\n\n\n\t// Locals\n\t// -----------------------------------------------------------------------------------\n\n\n\tvar _element = element[0];\n\tvar header;\n\tvar headerElement;\n\tvar content;\n\tvar tm; // for making theme classes\n\tvar currentView; // NOTE: keep this in sync with this.view\n\tvar viewsByType = {}; // holds all instantiated view instances, current or not\n\tvar suggestedViewHeight;\n\tvar windowResizeProxy; // wraps the windowResize function\n\tvar ignoreWindowResize = 0;\n\tvar events = [];\n\tvar date; // unzoned\n\t\n\t\n\t\n\t// Main Rendering\n\t// -----------------------------------------------------------------------------------\n\n\n\t// compute the initial ambig-timezone date\n\tif (options.defaultDate != null) {\n\t\tdate = t.moment(options.defaultDate).stripZone();\n\t}\n\telse {\n\t\tdate = t.getNow(); // getNow already returns unzoned\n\t}\n\t\n\t\n\tfunction render() {\n\t\tif (!content) {\n\t\t\tinitialRender();\n\t\t}\n\t\telse if (elementVisible()) {\n\t\t\t// mainly for the public API\n\t\t\tcalcSize();\n\t\t\trenderView();\n\t\t}\n\t}\n\t\n\t\n\tfunction initialRender() {\n\t\ttm = options.theme ? 'ui' : 'fc';\n\t\telement.addClass('fc');\n\n\t\tif (options.isRTL) {\n\t\t\telement.addClass('fc-rtl');\n\t\t}\n\t\telse {\n\t\t\telement.addClass('fc-ltr');\n\t\t}\n\n\t\tif (options.theme) {\n\t\t\telement.addClass('ui-widget');\n\t\t}\n\t\telse {\n\t\t\telement.addClass('fc-unthemed');\n\t\t}\n\n\t\tcontent = $(\"<div class='fc-view-container'/>\").prependTo(element);\n\n\t\theader = t.header = new Header(t, options);\n\t\theaderElement = header.render();\n\t\tif (headerElement) {\n\t\t\telement.prepend(headerElement);\n\t\t}\n\n\t\trenderView(options.defaultView);\n\n\t\tif (options.handleWindowResize) {\n\t\t\twindowResizeProxy = debounce(windowResize, options.windowResizeDelay); // prevents rapid calls\n\t\t\t$(window).resize(windowResizeProxy);\n\t\t}\n\t}\n\t\n\t\n\tfunction destroy() {\n\n\t\tif (currentView) {\n\t\t\tcurrentView.removeElement();\n\n\t\t\t// NOTE: don't null-out currentView/t.view in case API methods are called after destroy.\n\t\t\t// It is still the \"current\" view, just not rendered.\n\t\t}\n\n\t\theader.removeElement();\n\t\tcontent.remove();\n\t\telement.removeClass('fc fc-ltr fc-rtl fc-unthemed ui-widget');\n\n\t\tif (windowResizeProxy) {\n\t\t\t$(window).unbind('resize', windowResizeProxy);\n\t\t}\n\t}\n\t\n\t\n\tfunction elementVisible() {\n\t\treturn element.is(':visible');\n\t}\n\t\n\t\n\n\t// View Rendering\n\t// -----------------------------------------------------------------------------------\n\n\n\t// Renders a view because of a date change, view-type change, or for the first time.\n\t// If not given a viewType, keep the current view but render different dates.\n\tfunction renderView(viewType) {\n\t\tignoreWindowResize++;\n\n\t\t// if viewType is changing, remove the old view's rendering\n\t\tif (currentView && viewType && currentView.type !== viewType) {\n\t\t\theader.deactivateButton(currentView.type);\n\t\t\tfreezeContentHeight(); // prevent a scroll jump when view element is removed\n\t\t\tcurrentView.removeElement();\n\t\t\tcurrentView = t.view = null;\n\t\t}\n\n\t\t// if viewType changed, or the view was never created, create a fresh view\n\t\tif (!currentView && viewType) {\n\t\t\tcurrentView = t.view =\n\t\t\t\tviewsByType[viewType] ||\n\t\t\t\t(viewsByType[viewType] = t.instantiateView(viewType));\n\n\t\t\tcurrentView.setElement(\n\t\t\t\t$(\"<div class='fc-view fc-\" + viewType + \"-view' />\").appendTo(content)\n\t\t\t);\n\t\t\theader.activateButton(viewType);\n\t\t}\n\n\t\tif (currentView) {\n\n\t\t\t// in case the view should render a period of time that is completely hidden\n\t\t\tdate = currentView.massageCurrentDate(date);\n\n\t\t\t// render or rerender the view\n\t\t\tif (\n\t\t\t\t!currentView.displaying ||\n\t\t\t\t!date.isWithin(currentView.intervalStart, currentView.intervalEnd) // implicit date window change\n\t\t\t) {\n\t\t\t\tif (elementVisible()) {\n\n\t\t\t\t\tcurrentView.display(date); // will call freezeContentHeight\n\t\t\t\t\tunfreezeContentHeight(); // immediately unfreeze regardless of whether display is async\n\n\t\t\t\t\t// need to do this after View::render, so dates are calculated\n\t\t\t\t\tupdateHeaderTitle();\n\t\t\t\t\tupdateTodayButton();\n\n\t\t\t\t\tgetAndRenderEvents();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tunfreezeContentHeight(); // undo any lone freezeContentHeight calls\n\t\tignoreWindowResize--;\n\t}\n\n\t\n\n\t// Resizing\n\t// -----------------------------------------------------------------------------------\n\n\n\tt.getSuggestedViewHeight = function() {\n\t\tif (suggestedViewHeight === undefined) {\n\t\t\tcalcSize();\n\t\t}\n\t\treturn suggestedViewHeight;\n\t};\n\n\n\tt.isHeightAuto = function() {\n\t\treturn options.contentHeight === 'auto' || options.height === 'auto';\n\t};\n\t\n\t\n\tfunction updateSize(shouldRecalc) {\n\t\tif (elementVisible()) {\n\n\t\t\tif (shouldRecalc) {\n\t\t\t\t_calcSize();\n\t\t\t}\n\n\t\t\tignoreWindowResize++;\n\t\t\tcurrentView.updateSize(true); // isResize=true. will poll getSuggestedViewHeight() and isHeightAuto()\n\t\t\tignoreWindowResize--;\n\n\t\t\treturn true; // signal success\n\t\t}\n\t}\n\n\n\tfunction calcSize() {\n\t\tif (elementVisible()) {\n\t\t\t_calcSize();\n\t\t}\n\t}\n\t\n\t\n\tfunction _calcSize() { // assumes elementVisible\n\t\tif (typeof options.contentHeight === 'number') { // exists and not 'auto'\n\t\t\tsuggestedViewHeight = options.contentHeight;\n\t\t}\n\t\telse if (typeof options.height === 'number') { // exists and not 'auto'\n\t\t\tsuggestedViewHeight = options.height - (headerElement ? headerElement.outerHeight(true) : 0);\n\t\t}\n\t\telse {\n\t\t\tsuggestedViewHeight = Math.round(content.width() / Math.max(options.aspectRatio, .5));\n\t\t}\n\t}\n\t\n\t\n\tfunction windowResize(ev) {\n\t\tif (\n\t\t\t!ignoreWindowResize &&\n\t\t\tev.target === window && // so we don't process jqui \"resize\" events that have bubbled up\n\t\t\tcurrentView.start // view has already been rendered\n\t\t) {\n\t\t\tif (updateSize(true)) {\n\t\t\t\tcurrentView.trigger('windowResize', _element);\n\t\t\t}\n\t\t}\n\t}\n\t\n\t\n\t\n\t/* Event Fetching/Rendering\n\t-----------------------------------------------------------------------------*/\n\t// TODO: going forward, most of this stuff should be directly handled by the view\n\n\n\tfunction refetchEvents() { // can be called as an API method\n\t\tdestroyEvents(); // so that events are cleared before user starts waiting for AJAX\n\t\tfetchAndRenderEvents();\n\t}\n\n\n\tfunction renderEvents() { // destroys old events if previously rendered\n\t\tif (elementVisible()) {\n\t\t\tfreezeContentHeight();\n\t\t\tcurrentView.displayEvents(events);\n\t\t\tunfreezeContentHeight();\n\t\t}\n\t}\n\n\n\tfunction destroyEvents() {\n\t\tfreezeContentHeight();\n\t\tcurrentView.clearEvents();\n\t\tunfreezeContentHeight();\n\t}\n\t\n\n\tfunction getAndRenderEvents() {\n\t\tif (!options.lazyFetching || isFetchNeeded(currentView.start, currentView.end)) {\n\t\t\tfetchAndRenderEvents();\n\t\t}\n\t\telse {\n\t\t\trenderEvents();\n\t\t}\n\t}\n\n\n\tfunction fetchAndRenderEvents() {\n\t\tfetchEvents(currentView.start, currentView.end);\n\t\t\t// ... will call reportEvents\n\t\t\t// ... which will call renderEvents\n\t}\n\n\t\n\t// called when event data arrives\n\tfunction reportEvents(_events) {\n\t\tevents = _events;\n\t\trenderEvents();\n\t}\n\n\n\t// called when a single event's data has been changed\n\tfunction reportEventChange() {\n\t\trenderEvents();\n\t}\n\n\n\n\t/* Header Updating\n\t-----------------------------------------------------------------------------*/\n\n\n\tfunction updateHeaderTitle() {\n\t\theader.updateTitle(currentView.title);\n\t}\n\n\n\tfunction updateTodayButton() {\n\t\tvar now = t.getNow();\n\t\tif (now.isWithin(currentView.intervalStart, currentView.intervalEnd)) {\n\t\t\theader.disableButton('today');\n\t\t}\n\t\telse {\n\t\t\theader.enableButton('today');\n\t\t}\n\t}\n\t\n\n\n\t/* Selection\n\t-----------------------------------------------------------------------------*/\n\t\n\n\t// this public method receives start/end dates in any format, with any timezone\n\tfunction select(zonedStartInput, zonedEndInput) {\n\t\tcurrentView.select(\n\t\t\tt.buildSelectSpan.apply(t, arguments)\n\t\t);\n\t}\n\t\n\n\tfunction unselect() { // safe to be called before renderView\n\t\tif (currentView) {\n\t\t\tcurrentView.unselect();\n\t\t}\n\t}\n\t\n\t\n\t\n\t/* Date\n\t-----------------------------------------------------------------------------*/\n\t\n\t\n\tfunction prev() {\n\t\tdate = currentView.computePrevDate(date);\n\t\trenderView();\n\t}\n\t\n\t\n\tfunction next() {\n\t\tdate = currentView.computeNextDate(date);\n\t\trenderView();\n\t}\n\t\n\t\n\tfunction prevYear() {\n\t\tdate.add(-1, 'years');\n\t\trenderView();\n\t}\n\t\n\t\n\tfunction nextYear() {\n\t\tdate.add(1, 'years');\n\t\trenderView();\n\t}\n\t\n\t\n\tfunction today() {\n\t\tdate = t.getNow();\n\t\trenderView();\n\t}\n\t\n\t\n\tfunction gotoDate(zonedDateInput) {\n\t\tdate = t.moment(zonedDateInput).stripZone();\n\t\trenderView();\n\t}\n\t\n\t\n\tfunction incrementDate(delta) {\n\t\tdate.add(moment.duration(delta));\n\t\trenderView();\n\t}\n\n\n\t// Forces navigation to a view for the given date.\n\t// `viewType` can be a specific view name or a generic one like \"week\" or \"day\".\n\tfunction zoomTo(newDate, viewType) {\n\t\tvar spec;\n\n\t\tviewType = viewType || 'day'; // day is default zoom\n\t\tspec = t.getViewSpec(viewType) || t.getUnitViewSpec(viewType);\n\n\t\tdate = newDate.clone();\n\t\trenderView(spec ? spec.type : null);\n\t}\n\t\n\t\n\t// for external API\n\tfunction getDate() {\n\t\treturn t.applyTimezone(date); // infuse the calendar's timezone\n\t}\n\n\n\n\t/* Height \"Freezing\"\n\t-----------------------------------------------------------------------------*/\n\t// TODO: move this into the view\n\n\tt.freezeContentHeight = freezeContentHeight;\n\tt.unfreezeContentHeight = unfreezeContentHeight;\n\n\n\tfunction freezeContentHeight() {\n\t\tcontent.css({\n\t\t\twidth: '100%',\n\t\t\theight: content.height(),\n\t\t\toverflow: 'hidden'\n\t\t});\n\t}\n\n\n\tfunction unfreezeContentHeight() {\n\t\tcontent.css({\n\t\t\twidth: '',\n\t\t\theight: '',\n\t\t\toverflow: ''\n\t\t});\n\t}\n\t\n\t\n\t\n\t/* Misc\n\t-----------------------------------------------------------------------------*/\n\t\n\n\tfunction getCalendar() {\n\t\treturn t;\n\t}\n\n\t\n\tfunction getView() {\n\t\treturn currentView;\n\t}\n\t\n\t\n\tfunction option(name, value) {\n\t\tif (value === undefined) {\n\t\t\treturn options[name];\n\t\t}\n\t\tif (name == 'height' || name == 'contentHeight' || name == 'aspectRatio') {\n\t\t\toptions[name] = value;\n\t\t\tupdateSize(true); // true = allow recalculation of height\n\t\t}\n\t}\n\t\n\t\n\tfunction trigger(name, thisObj) { // overrides the Emitter's trigger method :(\n\t\tvar args = Array.prototype.slice.call(arguments, 2);\n\n\t\tthisObj = thisObj || _element;\n\t\tthis.triggerWith(name, thisObj, args); // Emitter's method\n\n\t\tif (options[name]) {\n\t\t\treturn options[name].apply(thisObj, args);\n\t\t}\n\t}\n\n\tt.initialize();\n}\n\n;;\n\nCalendar.defaults = {\n\n\ttitleRangeSeparator: ' \\u2014 ', // emphasized dash\n\tmonthYearFormat: 'MMMM YYYY', // required for en. other languages rely on datepicker computable option\n\n\tdefaultTimedEventDuration: '02:00:00',\n\tdefaultAllDayEventDuration: { days: 1 },\n\tforceEventDuration: false,\n\tnextDayThreshold: '09:00:00', // 9am\n\n\t// display\n\tdefaultView: 'month',\n\taspectRatio: 1.35,\n\theader: {\n\t\tleft: 'title',\n\t\tcenter: '',\n\t\tright: 'today prev,next'\n\t},\n\tweekends: true,\n\tweekNumbers: false,\n\n\tweekNumberTitle: 'W',\n\tweekNumberCalculation: 'local',\n\t\n\t//editable: false,\n\n\tscrollTime: '06:00:00',\n\t\n\t// event ajax\n\tlazyFetching: true,\n\tstartParam: 'start',\n\tendParam: 'end',\n\ttimezoneParam: 'timezone',\n\n\ttimezone: false,\n\n\t//allDayDefault: undefined,\n\n\t// locale\n\tisRTL: false,\n\tbuttonText: {\n\t\tprev: \"prev\",\n\t\tnext: \"next\",\n\t\tprevYear: \"prev year\",\n\t\tnextYear: \"next year\",\n\t\tyear: 'year', // TODO: locale files need to specify this\n\t\ttoday: 'today',\n\t\tmonth: 'month',\n\t\tweek: 'week',\n\t\tday: 'day'\n\t},\n\n\tbuttonIcons: {\n\t\tprev: 'left-single-arrow',\n\t\tnext: 'right-single-arrow',\n\t\tprevYear: 'left-double-arrow',\n\t\tnextYear: 'right-double-arrow'\n\t},\n\t\n\t// jquery-ui theming\n\ttheme: false,\n\tthemeButtonIcons: {\n\t\tprev: 'circle-triangle-w',\n\t\tnext: 'circle-triangle-e',\n\t\tprevYear: 'seek-prev',\n\t\tnextYear: 'seek-next'\n\t},\n\n\t//eventResizableFromStart: false,\n\tdragOpacity: .75,\n\tdragRevertDuration: 500,\n\tdragScroll: true,\n\t\n\t//selectable: false,\n\tunselectAuto: true,\n\t\n\tdropAccept: '*',\n\n\teventOrder: 'title',\n\n\teventLimit: false,\n\teventLimitText: 'more',\n\teventLimitClick: 'popover',\n\tdayPopoverFormat: 'LL',\n\t\n\thandleWindowResize: true,\n\twindowResizeDelay: 200 // milliseconds before an updateSize happens\n\t\n};\n\n\nCalendar.englishDefaults = { // used by lang.js\n\tdayPopoverFormat: 'dddd, MMMM D'\n};\n\n\nCalendar.rtlDefaults = { // right-to-left defaults\n\theader: { // TODO: smarter solution (first/center/last ?)\n\t\tleft: 'next,prev today',\n\t\tcenter: '',\n\t\tright: 'title'\n\t},\n\tbuttonIcons: {\n\t\tprev: 'right-single-arrow',\n\t\tnext: 'left-single-arrow',\n\t\tprevYear: 'right-double-arrow',\n\t\tnextYear: 'left-double-arrow'\n\t},\n\tthemeButtonIcons: {\n\t\tprev: 'circle-triangle-e',\n\t\tnext: 'circle-triangle-w',\n\t\tnextYear: 'seek-prev',\n\t\tprevYear: 'seek-next'\n\t}\n};\n\n;;\n\nvar langOptionHash = FC.langs = {}; // initialize and expose\n\n\n// TODO: document the structure and ordering of a FullCalendar lang file\n// TODO: rename everything \"lang\" to \"locale\", like what the moment project did\n\n\n// Initialize jQuery UI datepicker translations while using some of the translations\n// Will set this as the default language for datepicker.\nFC.datepickerLang = function(langCode, dpLangCode, dpOptions) {\n\n\t// get the FullCalendar internal option hash for this language. create if necessary\n\tvar fcOptions = langOptionHash[langCode] || (langOptionHash[langCode] = {});\n\n\t// transfer some simple options from datepicker to fc\n\tfcOptions.isRTL = dpOptions.isRTL;\n\tfcOptions.weekNumberTitle = dpOptions.weekHeader;\n\n\t// compute some more complex options from datepicker\n\t$.each(dpComputableOptions, function(name, func) {\n\t\tfcOptions[name] = func(dpOptions);\n\t});\n\n\t// is jQuery UI Datepicker is on the page?\n\tif ($.datepicker) {\n\n\t\t// Register the language data.\n\t\t// FullCalendar and MomentJS use language codes like \"pt-br\" but Datepicker\n\t\t// does it like \"pt-BR\" or if it doesn't have the language, maybe just \"pt\".\n\t\t// Make an alias so the language can be referenced either way.\n\t\t$.datepicker.regional[dpLangCode] =\n\t\t\t$.datepicker.regional[langCode] = // alias\n\t\t\t\tdpOptions;\n\n\t\t// Alias 'en' to the default language data. Do this every time.\n\t\t$.datepicker.regional.en = $.datepicker.regional[''];\n\n\t\t// Set as Datepicker's global defaults.\n\t\t$.datepicker.setDefaults(dpOptions);\n\t}\n};\n\n\n// Sets FullCalendar-specific translations. Will set the language as the global default.\nFC.lang = function(langCode, newFcOptions) {\n\tvar fcOptions;\n\tvar momOptions;\n\n\t// get the FullCalendar internal option hash for this language. create if necessary\n\tfcOptions = langOptionHash[langCode] || (langOptionHash[langCode] = {});\n\n\t// provided new options for this language? merge them in\n\tif (newFcOptions) {\n\t\tfcOptions = langOptionHash[langCode] = mergeOptions([ fcOptions, newFcOptions ]);\n\t}\n\n\t// compute language options that weren't defined.\n\t// always do this. newFcOptions can be undefined when initializing from i18n file,\n\t// so no way to tell if this is an initialization or a default-setting.\n\tmomOptions = getMomentLocaleData(langCode); // will fall back to en\n\t$.each(momComputableOptions, function(name, func) {\n\t\tif (fcOptions[name] == null) {\n\t\t\tfcOptions[name] = func(momOptions, fcOptions);\n\t\t}\n\t});\n\n\t// set it as the default language for FullCalendar\n\tCalendar.defaults.lang = langCode;\n};\n\n\n// NOTE: can't guarantee any of these computations will run because not every language has datepicker\n// configs, so make sure there are English fallbacks for these in the defaults file.\nvar dpComputableOptions = {\n\n\tbuttonText: function(dpOptions) {\n\t\treturn {\n\t\t\t// the translations sometimes wrongly contain HTML entities\n\t\t\tprev: stripHtmlEntities(dpOptions.prevText),\n\t\t\tnext: stripHtmlEntities(dpOptions.nextText),\n\t\t\ttoday: stripHtmlEntities(dpOptions.currentText)\n\t\t};\n\t},\n\n\t// Produces format strings like \"MMMM YYYY\" -> \"September 2014\"\n\tmonthYearFormat: function(dpOptions) {\n\t\treturn dpOptions.showMonthAfterYear ?\n\t\t\t'YYYY[' + dpOptions.yearSuffix + '] MMMM' :\n\t\t\t'MMMM YYYY[' + dpOptions.yearSuffix + ']';\n\t}\n\n};\n\nvar momComputableOptions = {\n\n\t// Produces format strings like \"ddd M/D\" -> \"Fri 9/15\"\n\tdayOfMonthFormat: function(momOptions, fcOptions) {\n\t\tvar format = momOptions.longDateFormat('l'); // for the format like \"M/D/YYYY\"\n\n\t\t// strip the year off the edge, as well as other misc non-whitespace chars\n\t\tformat = format.replace(/^Y+[^\\w\\s]*|[^\\w\\s]*Y+$/g, '');\n\n\t\tif (fcOptions.isRTL) {\n\t\t\tformat += ' ddd'; // for RTL, add day-of-week to end\n\t\t}\n\t\telse {\n\t\t\tformat = 'ddd ' + format; // for LTR, add day-of-week to beginning\n\t\t}\n\t\treturn format;\n\t},\n\n\t// Produces format strings like \"h:mma\" -> \"6:00pm\"\n\tmediumTimeFormat: function(momOptions) { // can't be called `timeFormat` because collides with option\n\t\treturn momOptions.longDateFormat('LT')\n\t\t\t.replace(/\\s*a$/i, 'a'); // convert AM/PM/am/pm to lowercase. remove any spaces beforehand\n\t},\n\n\t// Produces format strings like \"h(:mm)a\" -> \"6pm\" / \"6:30pm\"\n\tsmallTimeFormat: function(momOptions) {\n\t\treturn momOptions.longDateFormat('LT')\n\t\t\t.replace(':mm', '(:mm)')\n\t\t\t.replace(/(\\Wmm)$/, '($1)') // like above, but for foreign langs\n\t\t\t.replace(/\\s*a$/i, 'a'); // convert AM/PM/am/pm to lowercase. remove any spaces beforehand\n\t},\n\n\t// Produces format strings like \"h(:mm)t\" -> \"6p\" / \"6:30p\"\n\textraSmallTimeFormat: function(momOptions) {\n\t\treturn momOptions.longDateFormat('LT')\n\t\t\t.replace(':mm', '(:mm)')\n\t\t\t.replace(/(\\Wmm)$/, '($1)') // like above, but for foreign langs\n\t\t\t.replace(/\\s*a$/i, 't'); // convert to AM/PM/am/pm to lowercase one-letter. remove any spaces beforehand\n\t},\n\n\t// Produces format strings like \"ha\" / \"H\" -> \"6pm\" / \"18\"\n\thourFormat: function(momOptions) {\n\t\treturn momOptions.longDateFormat('LT')\n\t\t\t.replace(':mm', '')\n\t\t\t.replace(/(\\Wmm)$/, '') // like above, but for foreign langs\n\t\t\t.replace(/\\s*a$/i, 'a'); // convert AM/PM/am/pm to lowercase. remove any spaces beforehand\n\t},\n\n\t// Produces format strings like \"h:mm\" -> \"6:30\" (with no AM/PM)\n\tnoMeridiemTimeFormat: function(momOptions) {\n\t\treturn momOptions.longDateFormat('LT')\n\t\t\t.replace(/\\s*a$/i, ''); // remove trailing AM/PM\n\t}\n\n};\n\n\n// options that should be computed off live calendar options (considers override options)\n// TODO: best place for this? related to lang?\n// TODO: flipping text based on isRTL is a bad idea because the CSS `direction` might want to handle it\nvar instanceComputableOptions = {\n\n\t// Produces format strings for results like \"Mo 16\"\n\tsmallDayDateFormat: function(options) {\n\t\treturn options.isRTL ?\n\t\t\t'D dd' :\n\t\t\t'dd D';\n\t},\n\n\t// Produces format strings for results like \"Wk 5\"\n\tweekFormat: function(options) {\n\t\treturn options.isRTL ?\n\t\t\t'w[ ' + options.weekNumberTitle + ']' :\n\t\t\t'[' + options.weekNumberTitle + ' ]w';\n\t},\n\n\t// Produces format strings for results like \"Wk5\"\n\tsmallWeekFormat: function(options) {\n\t\treturn options.isRTL ?\n\t\t\t'w[' + options.weekNumberTitle + ']' :\n\t\t\t'[' + options.weekNumberTitle + ']w';\n\t}\n\n};\n\nfunction populateInstanceComputableOptions(options) {\n\t$.each(instanceComputableOptions, function(name, func) {\n\t\tif (options[name] == null) {\n\t\t\toptions[name] = func(options);\n\t\t}\n\t});\n}\n\n\n// Returns moment's internal locale data. If doesn't exist, returns English.\n// Works with moment-pre-2.8\nfunction getMomentLocaleData(langCode) {\n\tvar func = moment.localeData || moment.langData;\n\treturn func.call(moment, langCode) ||\n\t\tfunc.call(moment, 'en'); // the newer localData could return null, so fall back to en\n}\n\n\n// Initialize English by forcing computation of moment-derived options.\n// Also, sets it as the default.\nFC.lang('en', Calendar.englishDefaults);\n\n;;\n\n/* Top toolbar area with buttons and title\n----------------------------------------------------------------------------------------------------------------------*/\n// TODO: rename all header-related things to \"toolbar\"\n\nfunction Header(calendar, options) {\n\tvar t = this;\n\t\n\t// exports\n\tt.render = render;\n\tt.removeElement = removeElement;\n\tt.updateTitle = updateTitle;\n\tt.activateButton = activateButton;\n\tt.deactivateButton = deactivateButton;\n\tt.disableButton = disableButton;\n\tt.enableButton = enableButton;\n\tt.getViewsWithButtons = getViewsWithButtons;\n\t\n\t// locals\n\tvar el = $();\n\tvar viewsWithButtons = [];\n\tvar tm;\n\n\n\tfunction render() {\n\t\tvar sections = options.header;\n\n\t\ttm = options.theme ? 'ui' : 'fc';\n\n\t\tif (sections) {\n\t\t\tel = $(\"<div class='fc-toolbar'/>\")\n\t\t\t\t.append(renderSection('left'))\n\t\t\t\t.append(renderSection('right'))\n\t\t\t\t.append(renderSection('center'))\n\t\t\t\t.append('<div class=\"fc-clear\"/>');\n\n\t\t\treturn el;\n\t\t}\n\t}\n\t\n\t\n\tfunction removeElement() {\n\t\tel.remove();\n\t\tel = $();\n\t}\n\t\n\t\n\tfunction renderSection(position) {\n\t\tvar sectionEl = $('<div class=\"fc-' + position + '\"/>');\n\t\tvar buttonStr = options.header[position];\n\n\t\tif (buttonStr) {\n\t\t\t$.each(buttonStr.split(' '), function(i) {\n\t\t\t\tvar groupChildren = $();\n\t\t\t\tvar isOnlyButtons = true;\n\t\t\t\tvar groupEl;\n\n\t\t\t\t$.each(this.split(','), function(j, buttonName) {\n\t\t\t\t\tvar customButtonProps;\n\t\t\t\t\tvar viewSpec;\n\t\t\t\t\tvar buttonClick;\n\t\t\t\t\tvar overrideText; // text explicitly set by calendar's constructor options. overcomes icons\n\t\t\t\t\tvar defaultText;\n\t\t\t\t\tvar themeIcon;\n\t\t\t\t\tvar normalIcon;\n\t\t\t\t\tvar innerHtml;\n\t\t\t\t\tvar classes;\n\t\t\t\t\tvar button; // the element\n\n\t\t\t\t\tif (buttonName == 'title') {\n\t\t\t\t\t\tgroupChildren = groupChildren.add($('<h2>&nbsp;</h2>')); // we always want it to take up height\n\t\t\t\t\t\tisOnlyButtons = false;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tif ((customButtonProps = (calendar.options.customButtons || {})[buttonName])) {\n\t\t\t\t\t\t\tbuttonClick = function(ev) {\n\t\t\t\t\t\t\t\tif (customButtonProps.click) {\n\t\t\t\t\t\t\t\t\tcustomButtonProps.click.call(button[0], ev);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\toverrideText = ''; // icons will override text\n\t\t\t\t\t\t\tdefaultText = customButtonProps.text;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if ((viewSpec = calendar.getViewSpec(buttonName))) {\n\t\t\t\t\t\t\tbuttonClick = function() {\n\t\t\t\t\t\t\t\tcalendar.changeView(buttonName);\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tviewsWithButtons.push(buttonName);\n\t\t\t\t\t\t\toverrideText = viewSpec.buttonTextOverride;\n\t\t\t\t\t\t\tdefaultText = viewSpec.buttonTextDefault;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (calendar[buttonName]) { // a calendar method\n\t\t\t\t\t\t\tbuttonClick = function() {\n\t\t\t\t\t\t\t\tcalendar[buttonName]();\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\toverrideText = (calendar.overrides.buttonText || {})[buttonName];\n\t\t\t\t\t\t\tdefaultText = options.buttonText[buttonName]; // everything else is considered default\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (buttonClick) {\n\n\t\t\t\t\t\t\tthemeIcon =\n\t\t\t\t\t\t\t\tcustomButtonProps ?\n\t\t\t\t\t\t\t\t\tcustomButtonProps.themeIcon :\n\t\t\t\t\t\t\t\t\toptions.themeButtonIcons[buttonName];\n\n\t\t\t\t\t\t\tnormalIcon =\n\t\t\t\t\t\t\t\tcustomButtonProps ?\n\t\t\t\t\t\t\t\t\tcustomButtonProps.icon :\n\t\t\t\t\t\t\t\t\toptions.buttonIcons[buttonName];\n\n\t\t\t\t\t\t\tif (overrideText) {\n\t\t\t\t\t\t\t\tinnerHtml = htmlEscape(overrideText);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (themeIcon && options.theme) {\n\t\t\t\t\t\t\t\tinnerHtml = \"<span class='ui-icon ui-icon-\" + themeIcon + \"'></span>\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (normalIcon && !options.theme) {\n\t\t\t\t\t\t\t\tinnerHtml = \"<span class='fc-icon fc-icon-\" + normalIcon + \"'></span>\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tinnerHtml = htmlEscape(defaultText);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tclasses = [\n\t\t\t\t\t\t\t\t'fc-' + buttonName + '-button',\n\t\t\t\t\t\t\t\ttm + '-button',\n\t\t\t\t\t\t\t\ttm + '-state-default'\n\t\t\t\t\t\t\t];\n\n\t\t\t\t\t\t\tbutton = $( // type=\"button\" so that it doesn't submit a form\n\t\t\t\t\t\t\t\t'<button type=\"button\" class=\"' + classes.join(' ') + '\">' +\n\t\t\t\t\t\t\t\t\tinnerHtml +\n\t\t\t\t\t\t\t\t'</button>'\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t.click(function(ev) {\n\t\t\t\t\t\t\t\t\t// don't process clicks for disabled buttons\n\t\t\t\t\t\t\t\t\tif (!button.hasClass(tm + '-state-disabled')) {\n\n\t\t\t\t\t\t\t\t\t\tbuttonClick(ev);\n\n\t\t\t\t\t\t\t\t\t\t// after the click action, if the button becomes the \"active\" tab, or disabled,\n\t\t\t\t\t\t\t\t\t\t// it should never have a hover class, so remove it now.\n\t\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\t\tbutton.hasClass(tm + '-state-active') ||\n\t\t\t\t\t\t\t\t\t\t\tbutton.hasClass(tm + '-state-disabled')\n\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\tbutton.removeClass(tm + '-state-hover');\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t.mousedown(function() {\n\t\t\t\t\t\t\t\t\t// the *down* effect (mouse pressed in).\n\t\t\t\t\t\t\t\t\t// only on buttons that are not the \"active\" tab, or disabled\n\t\t\t\t\t\t\t\t\tbutton\n\t\t\t\t\t\t\t\t\t\t.not('.' + tm + '-state-active')\n\t\t\t\t\t\t\t\t\t\t.not('.' + tm + '-state-disabled')\n\t\t\t\t\t\t\t\t\t\t.addClass(tm + '-state-down');\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t.mouseup(function() {\n\t\t\t\t\t\t\t\t\t// undo the *down* effect\n\t\t\t\t\t\t\t\t\tbutton.removeClass(tm + '-state-down');\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t.hover(\n\t\t\t\t\t\t\t\t\tfunction() {\n\t\t\t\t\t\t\t\t\t\t// the *hover* effect.\n\t\t\t\t\t\t\t\t\t\t// only on buttons that are not the \"active\" tab, or disabled\n\t\t\t\t\t\t\t\t\t\tbutton\n\t\t\t\t\t\t\t\t\t\t\t.not('.' + tm + '-state-active')\n\t\t\t\t\t\t\t\t\t\t\t.not('.' + tm + '-state-disabled')\n\t\t\t\t\t\t\t\t\t\t\t.addClass(tm + '-state-hover');\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tfunction() {\n\t\t\t\t\t\t\t\t\t\t// undo the *hover* effect\n\t\t\t\t\t\t\t\t\t\tbutton\n\t\t\t\t\t\t\t\t\t\t\t.removeClass(tm + '-state-hover')\n\t\t\t\t\t\t\t\t\t\t\t.removeClass(tm + '-state-down'); // if mouseleave happens before mouseup\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tgroupChildren = groupChildren.add(button);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tif (isOnlyButtons) {\n\t\t\t\t\tgroupChildren\n\t\t\t\t\t\t.first().addClass(tm + '-corner-left').end()\n\t\t\t\t\t\t.last().addClass(tm + '-corner-right').end();\n\t\t\t\t}\n\n\t\t\t\tif (groupChildren.length > 1) {\n\t\t\t\t\tgroupEl = $('<div/>');\n\t\t\t\t\tif (isOnlyButtons) {\n\t\t\t\t\t\tgroupEl.addClass('fc-button-group');\n\t\t\t\t\t}\n\t\t\t\t\tgroupEl.append(groupChildren);\n\t\t\t\t\tsectionEl.append(groupEl);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tsectionEl.append(groupChildren); // 1 or 0 children\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\treturn sectionEl;\n\t}\n\t\n\t\n\tfunction updateTitle(text) {\n\t\tel.find('h2').text(text);\n\t}\n\t\n\t\n\tfunction activateButton(buttonName) {\n\t\tel.find('.fc-' + buttonName + '-button')\n\t\t\t.addClass(tm + '-state-active');\n\t}\n\t\n\t\n\tfunction deactivateButton(buttonName) {\n\t\tel.find('.fc-' + buttonName + '-button')\n\t\t\t.removeClass(tm + '-state-active');\n\t}\n\t\n\t\n\tfunction disableButton(buttonName) {\n\t\tel.find('.fc-' + buttonName + '-button')\n\t\t\t.attr('disabled', 'disabled')\n\t\t\t.addClass(tm + '-state-disabled');\n\t}\n\t\n\t\n\tfunction enableButton(buttonName) {\n\t\tel.find('.fc-' + buttonName + '-button')\n\t\t\t.removeAttr('disabled')\n\t\t\t.removeClass(tm + '-state-disabled');\n\t}\n\n\n\tfunction getViewsWithButtons() {\n\t\treturn viewsWithButtons;\n\t}\n\n}\n\n;;\n\nFC.sourceNormalizers = [];\nFC.sourceFetchers = [];\n\nvar ajaxDefaults = {\n\tdataType: 'json',\n\tcache: false\n};\n\nvar eventGUID = 1;\n\n\nfunction EventManager(options) { // assumed to be a calendar\n\tvar t = this;\n\t\n\t\n\t// exports\n\tt.isFetchNeeded = isFetchNeeded;\n\tt.fetchEvents = fetchEvents;\n\tt.addEventSource = addEventSource;\n\tt.removeEventSource = removeEventSource;\n\tt.updateEvent = updateEvent;\n\tt.renderEvent = renderEvent;\n\tt.removeEvents = removeEvents;\n\tt.clientEvents = clientEvents;\n\tt.mutateEvent = mutateEvent;\n\tt.normalizeEventDates = normalizeEventDates;\n\tt.normalizeEventTimes = normalizeEventTimes;\n\t\n\t\n\t// imports\n\tvar reportEvents = t.reportEvents;\n\t\n\t\n\t// locals\n\tvar stickySource = { events: [] };\n\tvar sources = [ stickySource ];\n\tvar rangeStart, rangeEnd;\n\tvar currentFetchID = 0;\n\tvar pendingSourceCnt = 0;\n\tvar cache = []; // holds events that have already been expanded\n\n\n\t$.each(\n\t\t(options.events ? [ options.events ] : []).concat(options.eventSources || []),\n\t\tfunction(i, sourceInput) {\n\t\t\tvar source = buildEventSource(sourceInput);\n\t\t\tif (source) {\n\t\t\t\tsources.push(source);\n\t\t\t}\n\t\t}\n\t);\n\t\n\t\n\t\n\t/* Fetching\n\t-----------------------------------------------------------------------------*/\n\n\n\t// start and end are assumed to be unzoned\n\tfunction isFetchNeeded(start, end) {\n\t\treturn !rangeStart || // nothing has been fetched yet?\n\t\t\tstart < rangeStart || end > rangeEnd; // is part of the new range outside of the old range?\n\t}\n\t\n\t\n\tfunction fetchEvents(start, end) {\n\t\trangeStart = start;\n\t\trangeEnd = end;\n\t\tcache = [];\n\t\tvar fetchID = ++currentFetchID;\n\t\tvar len = sources.length;\n\t\tpendingSourceCnt = len;\n\t\tfor (var i=0; i<len; i++) {\n\t\t\tfetchEventSource(sources[i], fetchID);\n\t\t}\n\t}\n\t\n\t\n\tfunction fetchEventSource(source, fetchID) {\n\t\t_fetchEventSource(source, function(eventInputs) {\n\t\t\tvar isArraySource = $.isArray(source.events);\n\t\t\tvar i, eventInput;\n\t\t\tvar abstractEvent;\n\n\t\t\tif (fetchID == currentFetchID) {\n\n\t\t\t\tif (eventInputs) {\n\t\t\t\t\tfor (i = 0; i < eventInputs.length; i++) {\n\t\t\t\t\t\teventInput = eventInputs[i];\n\n\t\t\t\t\t\tif (isArraySource) { // array sources have already been convert to Event Objects\n\t\t\t\t\t\t\tabstractEvent = eventInput;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tabstractEvent = buildEventFromInput(eventInput, source);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (abstractEvent) { // not false (an invalid event)\n\t\t\t\t\t\t\tcache.push.apply(\n\t\t\t\t\t\t\t\tcache,\n\t\t\t\t\t\t\t\texpandEvent(abstractEvent) // add individual expanded events to the cache\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tpendingSourceCnt--;\n\t\t\t\tif (!pendingSourceCnt) {\n\t\t\t\t\treportEvents(cache);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\t\n\t\n\tfunction _fetchEventSource(source, callback) {\n\t\tvar i;\n\t\tvar fetchers = FC.sourceFetchers;\n\t\tvar res;\n\n\t\tfor (i=0; i<fetchers.length; i++) {\n\t\t\tres = fetchers[i].call(\n\t\t\t\tt, // this, the Calendar object\n\t\t\t\tsource,\n\t\t\t\trangeStart.clone(),\n\t\t\t\trangeEnd.clone(),\n\t\t\t\toptions.timezone,\n\t\t\t\tcallback\n\t\t\t);\n\n\t\t\tif (res === true) {\n\t\t\t\t// the fetcher is in charge. made its own async request\n\t\t\t\treturn;\n\t\t\t}\n\t\t\telse if (typeof res == 'object') {\n\t\t\t\t// the fetcher returned a new source. process it\n\t\t\t\t_fetchEventSource(res, callback);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tvar events = source.events;\n\t\tif (events) {\n\t\t\tif ($.isFunction(events)) {\n\t\t\t\tt.pushLoading();\n\t\t\t\tevents.call(\n\t\t\t\t\tt, // this, the Calendar object\n\t\t\t\t\trangeStart.clone(),\n\t\t\t\t\trangeEnd.clone(),\n\t\t\t\t\toptions.timezone,\n\t\t\t\t\tfunction(events) {\n\t\t\t\t\t\tcallback(events);\n\t\t\t\t\t\tt.popLoading();\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\t\t\telse if ($.isArray(events)) {\n\t\t\t\tcallback(events);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tcallback();\n\t\t\t}\n\t\t}else{\n\t\t\tvar url = source.url;\n\t\t\tif (url) {\n\t\t\t\tvar success = source.success;\n\t\t\t\tvar error = source.error;\n\t\t\t\tvar complete = source.complete;\n\n\t\t\t\t// retrieve any outbound GET/POST $.ajax data from the options\n\t\t\t\tvar customData;\n\t\t\t\tif ($.isFunction(source.data)) {\n\t\t\t\t\t// supplied as a function that returns a key/value object\n\t\t\t\t\tcustomData = source.data();\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t// supplied as a straight key/value object\n\t\t\t\t\tcustomData = source.data;\n\t\t\t\t}\n\n\t\t\t\t// use a copy of the custom data so we can modify the parameters\n\t\t\t\t// and not affect the passed-in object.\n\t\t\t\tvar data = $.extend({}, customData || {});\n\n\t\t\t\tvar startParam = firstDefined(source.startParam, options.startParam);\n\t\t\t\tvar endParam = firstDefined(source.endParam, options.endParam);\n\t\t\t\tvar timezoneParam = firstDefined(source.timezoneParam, options.timezoneParam);\n\n\t\t\t\tif (startParam) {\n\t\t\t\t\tdata[startParam] = rangeStart.format();\n\t\t\t\t}\n\t\t\t\tif (endParam) {\n\t\t\t\t\tdata[endParam] = rangeEnd.format();\n\t\t\t\t}\n\t\t\t\tif (options.timezone && options.timezone != 'local') {\n\t\t\t\t\tdata[timezoneParam] = options.timezone;\n\t\t\t\t}\n\n\t\t\t\tt.pushLoading();\n\t\t\t\t$.ajax($.extend({}, ajaxDefaults, source, {\n\t\t\t\t\tdata: data,\n\t\t\t\t\tsuccess: function(events) {\n\t\t\t\t\t\tevents = events || [];\n\t\t\t\t\t\tvar res = applyAll(success, this, arguments);\n\t\t\t\t\t\tif ($.isArray(res)) {\n\t\t\t\t\t\t\tevents = res;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcallback(events);\n\t\t\t\t\t},\n\t\t\t\t\terror: function() {\n\t\t\t\t\t\tapplyAll(error, this, arguments);\n\t\t\t\t\t\tcallback();\n\t\t\t\t\t},\n\t\t\t\t\tcomplete: function() {\n\t\t\t\t\t\tapplyAll(complete, this, arguments);\n\t\t\t\t\t\tt.popLoading();\n\t\t\t\t\t}\n\t\t\t\t}));\n\t\t\t}else{\n\t\t\t\tcallback();\n\t\t\t}\n\t\t}\n\t}\n\t\n\t\n\t\n\t/* Sources\n\t-----------------------------------------------------------------------------*/\n\t\n\n\tfunction addEventSource(sourceInput) {\n\t\tvar source = buildEventSource(sourceInput);\n\t\tif (source) {\n\t\t\tsources.push(source);\n\t\t\tpendingSourceCnt++;\n\t\t\tfetchEventSource(source, currentFetchID); // will eventually call reportEvents\n\t\t}\n\t}\n\n\n\tfunction buildEventSource(sourceInput) { // will return undefined if invalid source\n\t\tvar normalizers = FC.sourceNormalizers;\n\t\tvar source;\n\t\tvar i;\n\n\t\tif ($.isFunction(sourceInput) || $.isArray(sourceInput)) {\n\t\t\tsource = { events: sourceInput };\n\t\t}\n\t\telse if (typeof sourceInput === 'string') {\n\t\t\tsource = { url: sourceInput };\n\t\t}\n\t\telse if (typeof sourceInput === 'object') {\n\t\t\tsource = $.extend({}, sourceInput); // shallow copy\n\t\t}\n\n\t\tif (source) {\n\n\t\t\t// TODO: repeat code, same code for event classNames\n\t\t\tif (source.className) {\n\t\t\t\tif (typeof source.className === 'string') {\n\t\t\t\t\tsource.className = source.className.split(/\\s+/);\n\t\t\t\t}\n\t\t\t\t// otherwise, assumed to be an array\n\t\t\t}\n\t\t\telse {\n\t\t\t\tsource.className = [];\n\t\t\t}\n\n\t\t\t// for array sources, we convert to standard Event Objects up front\n\t\t\tif ($.isArray(source.events)) {\n\t\t\t\tsource.origArray = source.events; // for removeEventSource\n\t\t\t\tsource.events = $.map(source.events, function(eventInput) {\n\t\t\t\t\treturn buildEventFromInput(eventInput, source);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tfor (i=0; i<normalizers.length; i++) {\n\t\t\t\tnormalizers[i].call(t, source);\n\t\t\t}\n\n\t\t\treturn source;\n\t\t}\n\t}\n\n\n\tfunction removeEventSource(source) {\n\t\tsources = $.grep(sources, function(src) {\n\t\t\treturn !isSourcesEqual(src, source);\n\t\t});\n\t\t// remove all client events from that source\n\t\tcache = $.grep(cache, function(e) {\n\t\t\treturn !isSourcesEqual(e.source, source);\n\t\t});\n\t\treportEvents(cache);\n\t}\n\n\n\tfunction isSourcesEqual(source1, source2) {\n\t\treturn source1 && source2 && getSourcePrimitive(source1) == getSourcePrimitive(source2);\n\t}\n\n\n\tfunction getSourcePrimitive(source) {\n\t\treturn (\n\t\t\t(typeof source === 'object') ? // a normalized event source?\n\t\t\t\t(source.origArray || source.googleCalendarId || source.url || source.events) : // get the primitive\n\t\t\t\tnull\n\t\t) ||\n\t\tsource; // the given argument *is* the primitive\n\t}\n\t\n\t\n\t\n\t/* Manipulation\n\t-----------------------------------------------------------------------------*/\n\n\n\t// Only ever called from the externally-facing API\n\tfunction updateEvent(event) {\n\n\t\t// massage start/end values, even if date string values\n\t\tevent.start = t.moment(event.start);\n\t\tif (event.end) {\n\t\t\tevent.end = t.moment(event.end);\n\t\t}\n\t\telse {\n\t\t\tevent.end = null;\n\t\t}\n\n\t\tmutateEvent(event, getMiscEventProps(event)); // will handle start/end/allDay normalization\n\t\treportEvents(cache); // reports event modifications (so we can redraw)\n\t}\n\n\n\t// Returns a hash of misc event properties that should be copied over to related events.\n\tfunction getMiscEventProps(event) {\n\t\tvar props = {};\n\n\t\t$.each(event, function(name, val) {\n\t\t\tif (isMiscEventPropName(name)) {\n\t\t\t\tif (val !== undefined && isAtomic(val)) { // a defined non-object\n\t\t\t\t\tprops[name] = val;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn props;\n\t}\n\n\t// non-date-related, non-id-related, non-secret\n\tfunction isMiscEventPropName(name) {\n\t\treturn !/^_|^(id|allDay|start|end)$/.test(name);\n\t}\n\n\t\n\t// returns the expanded events that were created\n\tfunction renderEvent(eventInput, stick) {\n\t\tvar abstractEvent = buildEventFromInput(eventInput);\n\t\tvar events;\n\t\tvar i, event;\n\n\t\tif (abstractEvent) { // not false (a valid input)\n\t\t\tevents = expandEvent(abstractEvent);\n\n\t\t\tfor (i = 0; i < events.length; i++) {\n\t\t\t\tevent = events[i];\n\n\t\t\t\tif (!event.source) {\n\t\t\t\t\tif (stick) {\n\t\t\t\t\t\tstickySource.events.push(event);\n\t\t\t\t\t\tevent.source = stickySource;\n\t\t\t\t\t}\n\t\t\t\t\tcache.push(event);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treportEvents(cache);\n\n\t\t\treturn events;\n\t\t}\n\n\t\treturn [];\n\t}\n\t\n\t\n\tfunction removeEvents(filter) {\n\t\tvar eventID;\n\t\tvar i;\n\n\t\tif (filter == null) { // null or undefined. remove all events\n\t\t\tfilter = function() { return true; }; // will always match\n\t\t}\n\t\telse if (!$.isFunction(filter)) { // an event ID\n\t\t\teventID = filter + '';\n\t\t\tfilter = function(event) {\n\t\t\t\treturn event._id == eventID;\n\t\t\t};\n\t\t}\n\n\t\t// Purge event(s) from our local cache\n\t\tcache = $.grep(cache, filter, true); // inverse=true\n\n\t\t// Remove events from array sources.\n\t\t// This works because they have been converted to official Event Objects up front.\n\t\t// (and as a result, event._id has been calculated).\n\t\tfor (i=0; i<sources.length; i++) {\n\t\t\tif ($.isArray(sources[i].events)) {\n\t\t\t\tsources[i].events = $.grep(sources[i].events, filter, true);\n\t\t\t}\n\t\t}\n\n\t\treportEvents(cache);\n\t}\n\t\n\t\n\tfunction clientEvents(filter) {\n\t\tif ($.isFunction(filter)) {\n\t\t\treturn $.grep(cache, filter);\n\t\t}\n\t\telse if (filter != null) { // not null, not undefined. an event ID\n\t\t\tfilter += '';\n\t\t\treturn $.grep(cache, function(e) {\n\t\t\t\treturn e._id == filter;\n\t\t\t});\n\t\t}\n\t\treturn cache; // else, return all\n\t}\n\t\n\t\n\t\n\t/* Event Normalization\n\t-----------------------------------------------------------------------------*/\n\n\n\t// Given a raw object with key/value properties, returns an \"abstract\" Event object.\n\t// An \"abstract\" event is an event that, if recurring, will not have been expanded yet.\n\t// Will return `false` when input is invalid.\n\t// `source` is optional\n\tfunction buildEventFromInput(input, source) {\n\t\tvar out = {};\n\t\tvar start, end;\n\t\tvar allDay;\n\n\t\tif (options.eventDataTransform) {\n\t\t\tinput = options.eventDataTransform(input);\n\t\t}\n\t\tif (source && source.eventDataTransform) {\n\t\t\tinput = source.eventDataTransform(input);\n\t\t}\n\n\t\t// Copy all properties over to the resulting object.\n\t\t// The special-case properties will be copied over afterwards.\n\t\t$.extend(out, input);\n\n\t\tif (source) {\n\t\t\tout.source = source;\n\t\t}\n\n\t\tout._id = input._id || (input.id === undefined ? '_fc' + eventGUID++ : input.id + '');\n\n\t\tif (input.className) {\n\t\t\tif (typeof input.className == 'string') {\n\t\t\t\tout.className = input.className.split(/\\s+/);\n\t\t\t}\n\t\t\telse { // assumed to be an array\n\t\t\t\tout.className = input.className;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tout.className = [];\n\t\t}\n\n\t\tstart = input.start || input.date; // \"date\" is an alias for \"start\"\n\t\tend = input.end;\n\n\t\t// parse as a time (Duration) if applicable\n\t\tif (isTimeString(start)) {\n\t\t\tstart = moment.duration(start);\n\t\t}\n\t\tif (isTimeString(end)) {\n\t\t\tend = moment.duration(end);\n\t\t}\n\n\t\tif (input.dow || moment.isDuration(start) || moment.isDuration(end)) {\n\n\t\t\t// the event is \"abstract\" (recurring) so don't calculate exact start/end dates just yet\n\t\t\tout.start = start ? moment.duration(start) : null; // will be a Duration or null\n\t\t\tout.end = end ? moment.duration(end) : null; // will be a Duration or null\n\t\t\tout._recurring = true; // our internal marker\n\t\t}\n\t\telse {\n\n\t\t\tif (start) {\n\t\t\t\tstart = t.moment(start);\n\t\t\t\tif (!start.isValid()) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (end) {\n\t\t\t\tend = t.moment(end);\n\t\t\t\tif (!end.isValid()) {\n\t\t\t\t\tend = null; // let defaults take over\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tallDay = input.allDay;\n\t\t\tif (allDay === undefined) { // still undefined? fallback to default\n\t\t\t\tallDay = firstDefined(\n\t\t\t\t\tsource ? source.allDayDefault : undefined,\n\t\t\t\t\toptions.allDayDefault\n\t\t\t\t);\n\t\t\t\t// still undefined? normalizeEventDates will calculate it\n\t\t\t}\n\n\t\t\tassignDatesToEvent(start, end, allDay, out);\n\t\t}\n\n\t\treturn out;\n\t}\n\n\n\t// Normalizes and assigns the given dates to the given partially-formed event object.\n\t// NOTE: mutates the given start/end moments. does not make a copy.\n\tfunction assignDatesToEvent(start, end, allDay, event) {\n\t\tevent.start = start;\n\t\tevent.end = end;\n\t\tevent.allDay = allDay;\n\t\tnormalizeEventDates(event);\n\t\tbackupEventDates(event);\n\t}\n\n\n\t// Ensures proper values for allDay/start/end. Accepts an Event object, or a plain object with event-ish properties.\n\t// NOTE: Will modify the given object.\n\tfunction normalizeEventDates(eventProps) {\n\n\t\tnormalizeEventTimes(eventProps);\n\n\t\tif (eventProps.end && !eventProps.end.isAfter(eventProps.start)) {\n\t\t\teventProps.end = null;\n\t\t}\n\n\t\tif (!eventProps.end) {\n\t\t\tif (options.forceEventDuration) {\n\t\t\t\teventProps.end = t.getDefaultEventEnd(eventProps.allDay, eventProps.start);\n\t\t\t}\n\t\t\telse {\n\t\t\t\teventProps.end = null;\n\t\t\t}\n\t\t}\n\t}\n\n\n\t// Ensures the allDay property exists and the timeliness of the start/end dates are consistent\n\tfunction normalizeEventTimes(eventProps) {\n\t\tif (eventProps.allDay == null) {\n\t\t\teventProps.allDay = !(eventProps.start.hasTime() || (eventProps.end && eventProps.end.hasTime()));\n\t\t}\n\n\t\tif (eventProps.allDay) {\n\t\t\teventProps.start.stripTime();\n\t\t\tif (eventProps.end) {\n\t\t\t\t// TODO: consider nextDayThreshold here? If so, will require a lot of testing and adjustment\n\t\t\t\teventProps.end.stripTime();\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tif (!eventProps.start.hasTime()) {\n\t\t\t\teventProps.start = t.applyTimezone(eventProps.start.time(0)); // will assign a 00:00 time\n\t\t\t}\n\t\t\tif (eventProps.end && !eventProps.end.hasTime()) {\n\t\t\t\teventProps.end = t.applyTimezone(eventProps.end.time(0)); // will assign a 00:00 time\n\t\t\t}\n\t\t}\n\t}\n\n\n\t// If the given event is a recurring event, break it down into an array of individual instances.\n\t// If not a recurring event, return an array with the single original event.\n\t// If given a falsy input (probably because of a failed buildEventFromInput call), returns an empty array.\n\t// HACK: can override the recurring window by providing custom rangeStart/rangeEnd (for businessHours).\n\tfunction expandEvent(abstractEvent, _rangeStart, _rangeEnd) {\n\t\tvar events = [];\n\t\tvar dowHash;\n\t\tvar dow;\n\t\tvar i;\n\t\tvar date;\n\t\tvar startTime, endTime;\n\t\tvar start, end;\n\t\tvar event;\n\n\t\t_rangeStart = _rangeStart || rangeStart;\n\t\t_rangeEnd = _rangeEnd || rangeEnd;\n\n\t\tif (abstractEvent) {\n\t\t\tif (abstractEvent._recurring) {\n\n\t\t\t\t// make a boolean hash as to whether the event occurs on each day-of-week\n\t\t\t\tif ((dow = abstractEvent.dow)) {\n\t\t\t\t\tdowHash = {};\n\t\t\t\t\tfor (i = 0; i < dow.length; i++) {\n\t\t\t\t\t\tdowHash[dow[i]] = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// iterate through every day in the current range\n\t\t\t\tdate = _rangeStart.clone().stripTime(); // holds the date of the current day\n\t\t\t\twhile (date.isBefore(_rangeEnd)) {\n\n\t\t\t\t\tif (!dowHash || dowHash[date.day()]) { // if everyday, or this particular day-of-week\n\n\t\t\t\t\t\tstartTime = abstractEvent.start; // the stored start and end properties are times (Durations)\n\t\t\t\t\t\tendTime = abstractEvent.end; // \"\n\t\t\t\t\t\tstart = date.clone();\n\t\t\t\t\t\tend = null;\n\n\t\t\t\t\t\tif (startTime) {\n\t\t\t\t\t\t\tstart = start.time(startTime);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (endTime) {\n\t\t\t\t\t\t\tend = date.clone().time(endTime);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tevent = $.extend({}, abstractEvent); // make a copy of the original\n\t\t\t\t\t\tassignDatesToEvent(\n\t\t\t\t\t\t\tstart, end,\n\t\t\t\t\t\t\t!startTime && !endTime, // allDay?\n\t\t\t\t\t\t\tevent\n\t\t\t\t\t\t);\n\t\t\t\t\t\tevents.push(event);\n\t\t\t\t\t}\n\n\t\t\t\t\tdate.add(1, 'days');\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tevents.push(abstractEvent); // return the original event. will be a one-item array\n\t\t\t}\n\t\t}\n\n\t\treturn events;\n\t}\n\n\n\n\t/* Event Modification Math\n\t-----------------------------------------------------------------------------------------*/\n\n\n\t// Modifies an event and all related events by applying the given properties.\n\t// Special date-diffing logic is used for manipulation of dates.\n\t// If `props` does not contain start/end dates, the updated values are assumed to be the event's current start/end.\n\t// All date comparisons are done against the event's pristine _start and _end dates.\n\t// Returns an object with delta information and a function to undo all operations.\n\t// For making computations in a granularity greater than day/time, specify largeUnit.\n\t// NOTE: The given `newProps` might be mutated for normalization purposes.\n\tfunction mutateEvent(event, newProps, largeUnit) {\n\t\tvar miscProps = {};\n\t\tvar oldProps;\n\t\tvar clearEnd;\n\t\tvar startDelta;\n\t\tvar endDelta;\n\t\tvar durationDelta;\n\t\tvar undoFunc;\n\n\t\t// diffs the dates in the appropriate way, returning a duration\n\t\tfunction diffDates(date1, date0) { // date1 - date0\n\t\t\tif (largeUnit) {\n\t\t\t\treturn diffByUnit(date1, date0, largeUnit);\n\t\t\t}\n\t\t\telse if (newProps.allDay) {\n\t\t\t\treturn diffDay(date1, date0);\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn diffDayTime(date1, date0);\n\t\t\t}\n\t\t}\n\n\t\tnewProps = newProps || {};\n\n\t\t// normalize new date-related properties\n\t\tif (!newProps.start) {\n\t\t\tnewProps.start = event.start.clone();\n\t\t}\n\t\tif (newProps.end === undefined) {\n\t\t\tnewProps.end = event.end ? event.end.clone() : null;\n\t\t}\n\t\tif (newProps.allDay == null) { // is null or undefined?\n\t\t\tnewProps.allDay = event.allDay;\n\t\t}\n\t\tnormalizeEventDates(newProps);\n\n\t\t// create normalized versions of the original props to compare against\n\t\t// need a real end value, for diffing\n\t\toldProps = {\n\t\t\tstart: event._start.clone(),\n\t\t\tend: event._end ? event._end.clone() : t.getDefaultEventEnd(event._allDay, event._start),\n\t\t\tallDay: newProps.allDay // normalize the dates in the same regard as the new properties\n\t\t};\n\t\tnormalizeEventDates(oldProps);\n\n\t\t// need to clear the end date if explicitly changed to null\n\t\tclearEnd = event._end !== null && newProps.end === null;\n\n\t\t// compute the delta for moving the start date\n\t\tstartDelta = diffDates(newProps.start, oldProps.start);\n\n\t\t// compute the delta for moving the end date\n\t\tif (newProps.end) {\n\t\t\tendDelta = diffDates(newProps.end, oldProps.end);\n\t\t\tdurationDelta = endDelta.subtract(startDelta);\n\t\t}\n\t\telse {\n\t\t\tdurationDelta = null;\n\t\t}\n\n\t\t// gather all non-date-related properties\n\t\t$.each(newProps, function(name, val) {\n\t\t\tif (isMiscEventPropName(name)) {\n\t\t\t\tif (val !== undefined) {\n\t\t\t\t\tmiscProps[name] = val;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t// apply the operations to the event and all related events\n\t\tundoFunc = mutateEvents(\n\t\t\tclientEvents(event._id), // get events with this ID\n\t\t\tclearEnd,\n\t\t\tnewProps.allDay,\n\t\t\tstartDelta,\n\t\t\tdurationDelta,\n\t\t\tmiscProps\n\t\t);\n\n\t\treturn {\n\t\t\tdateDelta: startDelta,\n\t\t\tdurationDelta: durationDelta,\n\t\t\tundo: undoFunc\n\t\t};\n\t}\n\n\n\t// Modifies an array of events in the following ways (operations are in order):\n\t// - clear the event's `end`\n\t// - convert the event to allDay\n\t// - add `dateDelta` to the start and end\n\t// - add `durationDelta` to the event's duration\n\t// - assign `miscProps` to the event\n\t//\n\t// Returns a function that can be called to undo all the operations.\n\t//\n\t// TODO: don't use so many closures. possible memory issues when lots of events with same ID.\n\t//\n\tfunction mutateEvents(events, clearEnd, allDay, dateDelta, durationDelta, miscProps) {\n\t\tvar isAmbigTimezone = t.getIsAmbigTimezone();\n\t\tvar undoFunctions = [];\n\n\t\t// normalize zero-length deltas to be null\n\t\tif (dateDelta && !dateDelta.valueOf()) { dateDelta = null; }\n\t\tif (durationDelta && !durationDelta.valueOf()) { durationDelta = null; }\n\n\t\t$.each(events, function(i, event) {\n\t\t\tvar oldProps;\n\t\t\tvar newProps;\n\n\t\t\t// build an object holding all the old values, both date-related and misc.\n\t\t\t// for the undo function.\n\t\t\toldProps = {\n\t\t\t\tstart: event.start.clone(),\n\t\t\t\tend: event.end ? event.end.clone() : null,\n\t\t\t\tallDay: event.allDay\n\t\t\t};\n\t\t\t$.each(miscProps, function(name) {\n\t\t\t\toldProps[name] = event[name];\n\t\t\t});\n\n\t\t\t// new date-related properties. work off the original date snapshot.\n\t\t\t// ok to use references because they will be thrown away when backupEventDates is called.\n\t\t\tnewProps = {\n\t\t\t\tstart: event._start,\n\t\t\t\tend: event._end,\n\t\t\t\tallDay: allDay // normalize the dates in the same regard as the new properties\n\t\t\t};\n\t\t\tnormalizeEventDates(newProps); // massages start/end/allDay\n\n\t\t\t// strip or ensure the end date\n\t\t\tif (clearEnd) {\n\t\t\t\tnewProps.end = null;\n\t\t\t}\n\t\t\telse if (durationDelta && !newProps.end) { // the duration translation requires an end date\n\t\t\t\tnewProps.end = t.getDefaultEventEnd(newProps.allDay, newProps.start);\n\t\t\t}\n\n\t\t\tif (dateDelta) {\n\t\t\t\tnewProps.start.add(dateDelta);\n\t\t\t\tif (newProps.end) {\n\t\t\t\t\tnewProps.end.add(dateDelta);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (durationDelta) {\n\t\t\t\tnewProps.end.add(durationDelta); // end already ensured above\n\t\t\t}\n\n\t\t\t// if the dates have changed, and we know it is impossible to recompute the\n\t\t\t// timezone offsets, strip the zone.\n\t\t\tif (\n\t\t\t\tisAmbigTimezone &&\n\t\t\t\t!newProps.allDay &&\n\t\t\t\t(dateDelta || durationDelta)\n\t\t\t) {\n\t\t\t\tnewProps.start.stripZone();\n\t\t\t\tif (newProps.end) {\n\t\t\t\t\tnewProps.end.stripZone();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$.extend(event, miscProps, newProps); // copy over misc props, then date-related props\n\t\t\tbackupEventDates(event); // regenerate internal _start/_end/_allDay\n\n\t\t\tundoFunctions.push(function() {\n\t\t\t\t$.extend(event, oldProps);\n\t\t\t\tbackupEventDates(event); // regenerate internal _start/_end/_allDay\n\t\t\t});\n\t\t});\n\n\t\treturn function() {\n\t\t\tfor (var i = 0; i < undoFunctions.length; i++) {\n\t\t\t\tundoFunctions[i]();\n\t\t\t}\n\t\t};\n\t}\n\n\n\t/* Business Hours\n\t-----------------------------------------------------------------------------------------*/\n\n\tt.getBusinessHoursEvents = getBusinessHoursEvents;\n\n\n\t// Returns an array of events as to when the business hours occur in the given view.\n\t// Abuse of our event system :(\n\tfunction getBusinessHoursEvents(wholeDay) {\n\t\tvar optionVal = options.businessHours;\n\t\tvar defaultVal = {\n\t\t\tclassName: 'fc-nonbusiness',\n\t\t\tstart: '09:00',\n\t\t\tend: '17:00',\n\t\t\tdow: [ 1, 2, 3, 4, 5 ], // monday - friday\n\t\t\trendering: 'inverse-background'\n\t\t};\n\t\tvar view = t.getView();\n\t\tvar eventInput;\n\n\t\tif (optionVal) { // `true` (which means \"use the defaults\") or an override object\n\t\t\teventInput = $.extend(\n\t\t\t\t{}, // copy to a new object in either case\n\t\t\t\tdefaultVal,\n\t\t\t\ttypeof optionVal === 'object' ? optionVal : {} // override the defaults\n\t\t\t);\n\t\t}\n\n\t\tif (eventInput) {\n\n\t\t\t// if a whole-day series is requested, clear the start/end times\n\t\t\tif (wholeDay) {\n\t\t\t\teventInput.start = null;\n\t\t\t\teventInput.end = null;\n\t\t\t}\n\n\t\t\treturn expandEvent(\n\t\t\t\tbuildEventFromInput(eventInput),\n\t\t\t\tview.start,\n\t\t\t\tview.end\n\t\t\t);\n\t\t}\n\n\t\treturn [];\n\t}\n\n\n\t/* Overlapping / Constraining\n\t-----------------------------------------------------------------------------------------*/\n\n\tt.isEventSpanAllowed = isEventSpanAllowed;\n\tt.isExternalSpanAllowed = isExternalSpanAllowed;\n\tt.isSelectionSpanAllowed = isSelectionSpanAllowed;\n\n\n\t// Determines if the given event can be relocated to the given span (unzoned start/end with other misc data)\n\tfunction isEventSpanAllowed(span, event) {\n\t\tvar source = event.source || {};\n\t\tvar constraint = firstDefined(\n\t\t\tevent.constraint,\n\t\t\tsource.constraint,\n\t\t\toptions.eventConstraint\n\t\t);\n\t\tvar overlap = firstDefined(\n\t\t\tevent.overlap,\n\t\t\tsource.overlap,\n\t\t\toptions.eventOverlap\n\t\t);\n\t\treturn isSpanAllowed(span, constraint, overlap, event);\n\t}\n\n\n\t// Determines if an external event can be relocated to the given span (unzoned start/end with other misc data)\n\tfunction isExternalSpanAllowed(eventSpan, eventLocation, eventProps) {\n\t\tvar eventInput;\n\t\tvar event;\n\n\t\t// note: very similar logic is in View's reportExternalDrop\n\t\tif (eventProps) {\n\t\t\teventInput = $.extend({}, eventProps, eventLocation);\n\t\t\tevent = expandEvent(buildEventFromInput(eventInput))[0];\n\t\t}\n\n\t\tif (event) {\n\t\t\treturn isEventSpanAllowed(eventSpan, event);\n\t\t}\n\t\telse { // treat it as a selection\n\n\t\t\treturn isSelectionSpanAllowed(eventSpan);\n\t\t}\n\t}\n\n\n\t// Determines the given span (unzoned start/end with other misc data) can be selected.\n\tfunction isSelectionSpanAllowed(span) {\n\t\treturn isSpanAllowed(span, options.selectConstraint, options.selectOverlap);\n\t}\n\n\n\t// Returns true if the given span (caused by an event drop/resize or a selection) is allowed to exist\n\t// according to the constraint/overlap settings.\n\t// `event` is not required if checking a selection.\n\tfunction isSpanAllowed(span, constraint, overlap, event) {\n\t\tvar constraintEvents;\n\t\tvar anyContainment;\n\t\tvar peerEvents;\n\t\tvar i, peerEvent;\n\t\tvar peerOverlap;\n\n\t\t// the range must be fully contained by at least one of produced constraint events\n\t\tif (constraint != null) {\n\n\t\t\t// not treated as an event! intermediate data structure\n\t\t\t// TODO: use ranges in the future\n\t\t\tconstraintEvents = constraintToEvents(constraint);\n\n\t\t\tanyContainment = false;\n\t\t\tfor (i = 0; i < constraintEvents.length; i++) {\n\t\t\t\tif (eventContainsRange(constraintEvents[i], span)) {\n\t\t\t\t\tanyContainment = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!anyContainment) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tpeerEvents = t.getPeerEvents(span, event);\n\n\t\tfor (i = 0; i < peerEvents.length; i++)  {\n\t\t\tpeerEvent = peerEvents[i];\n\n\t\t\t// there needs to be an actual intersection before disallowing anything\n\t\t\tif (eventIntersectsRange(peerEvent, span)) {\n\n\t\t\t\t// evaluate overlap for the given range and short-circuit if necessary\n\t\t\t\tif (overlap === false) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\t// if the event's overlap is a test function, pass the peer event in question as the first param\n\t\t\t\telse if (typeof overlap === 'function' && !overlap(peerEvent, event)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// if we are computing if the given range is allowable for an event, consider the other event's\n\t\t\t\t// EventObject-specific or Source-specific `overlap` property\n\t\t\t\tif (event) {\n\t\t\t\t\tpeerOverlap = firstDefined(\n\t\t\t\t\t\tpeerEvent.overlap,\n\t\t\t\t\t\t(peerEvent.source || {}).overlap\n\t\t\t\t\t\t// we already considered the global `eventOverlap`\n\t\t\t\t\t);\n\t\t\t\t\tif (peerOverlap === false) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\t// if the peer event's overlap is a test function, pass the subject event as the first param\n\t\t\t\t\tif (typeof peerOverlap === 'function' && !peerOverlap(event, peerEvent)) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\n\t// Given an event input from the API, produces an array of event objects. Possible event inputs:\n\t// 'businessHours'\n\t// An event ID (number or string)\n\t// An object with specific start/end dates or a recurring event (like what businessHours accepts)\n\tfunction constraintToEvents(constraintInput) {\n\n\t\tif (constraintInput === 'businessHours') {\n\t\t\treturn getBusinessHoursEvents();\n\t\t}\n\n\t\tif (typeof constraintInput === 'object') {\n\t\t\treturn expandEvent(buildEventFromInput(constraintInput));\n\t\t}\n\n\t\treturn clientEvents(constraintInput); // probably an ID\n\t}\n\n\n\t// Does the event's date range fully contain the given range?\n\t// start/end already assumed to have stripped zones :(\n\tfunction eventContainsRange(event, range) {\n\t\tvar eventStart = event.start.clone().stripZone();\n\t\tvar eventEnd = t.getEventEnd(event).stripZone();\n\n\t\treturn range.start >= eventStart && range.end <= eventEnd;\n\t}\n\n\n\t// Does the event's date range intersect with the given range?\n\t// start/end already assumed to have stripped zones :(\n\tfunction eventIntersectsRange(event, range) {\n\t\tvar eventStart = event.start.clone().stripZone();\n\t\tvar eventEnd = t.getEventEnd(event).stripZone();\n\n\t\treturn range.start < eventEnd && range.end > eventStart;\n\t}\n\n\n\tt.getEventCache = function() {\n\t\treturn cache;\n\t};\n\n}\n\n\n// Returns a list of events that the given event should be compared against when being considered for a move to\n// the specified span. Attached to the Calendar's prototype because EventManager is a mixin for a Calendar.\nCalendar.prototype.getPeerEvents = function(span, event) {\n\tvar cache = this.getEventCache();\n\tvar peerEvents = [];\n\tvar i, otherEvent;\n\n\tfor (i = 0; i < cache.length; i++) {\n\t\totherEvent = cache[i];\n\t\tif (\n\t\t\t!event ||\n\t\t\tevent._id !== otherEvent._id // don't compare the event to itself or other related [repeating] events\n\t\t) {\n\t\t\tpeerEvents.push(otherEvent);\n\t\t}\n\t}\n\n\treturn peerEvents;\n};\n\n\n// updates the \"backup\" properties, which are preserved in order to compute diffs later on.\nfunction backupEventDates(event) {\n\tevent._allDay = event.allDay;\n\tevent._start = event.start.clone();\n\tevent._end = event.end ? event.end.clone() : null;\n}\n\n;;\n\n/* An abstract class for the \"basic\" views, as well as month view. Renders one or more rows of day cells.\n----------------------------------------------------------------------------------------------------------------------*/\n// It is a manager for a DayGrid subcomponent, which does most of the heavy lifting.\n// It is responsible for managing width/height.\n\nvar BasicView = FC.BasicView = View.extend({\n\n\tdayGridClass: DayGrid, // class the dayGrid will be instantiated from (overridable by subclasses)\n\tdayGrid: null, // the main subcomponent that does most of the heavy lifting\n\n\tdayNumbersVisible: false, // display day numbers on each day cell?\n\tweekNumbersVisible: false, // display week numbers along the side?\n\n\tweekNumberWidth: null, // width of all the week-number cells running down the side\n\n\theadContainerEl: null, // div that hold's the dayGrid's rendered date header\n\theadRowEl: null, // the fake row element of the day-of-week header\n\n\n\tinitialize: function() {\n\t\tthis.dayGrid = this.instantiateDayGrid();\n\t},\n\n\n\t// Generates the DayGrid object this view needs. Draws from this.dayGridClass\n\tinstantiateDayGrid: function() {\n\t\t// generate a subclass on the fly with BasicView-specific behavior\n\t\t// TODO: cache this subclass\n\t\tvar subclass = this.dayGridClass.extend(basicDayGridMethods);\n\n\t\treturn new subclass(this);\n\t},\n\n\n\t// Sets the display range and computes all necessary dates\n\tsetRange: function(range) {\n\t\tView.prototype.setRange.call(this, range); // call the super-method\n\n\t\tthis.dayGrid.breakOnWeeks = /year|month|week/.test(this.intervalUnit); // do before setRange\n\t\tthis.dayGrid.setRange(range);\n\t},\n\n\n\t// Compute the value to feed into setRange. Overrides superclass.\n\tcomputeRange: function(date) {\n\t\tvar range = View.prototype.computeRange.call(this, date); // get value from the super-method\n\n\t\t// year and month views should be aligned with weeks. this is already done for week\n\t\tif (/year|month/.test(range.intervalUnit)) {\n\t\t\trange.start.startOf('week');\n\t\t\trange.start = this.skipHiddenDays(range.start);\n\n\t\t\t// make end-of-week if not already\n\t\t\tif (range.end.weekday()) {\n\t\t\t\trange.end.add(1, 'week').startOf('week');\n\t\t\t\trange.end = this.skipHiddenDays(range.end, -1, true); // exclusively move backwards\n\t\t\t}\n\t\t}\n\n\t\treturn range;\n\t},\n\n\n\t// Renders the view into `this.el`, which should already be assigned\n\trenderDates: function() {\n\n\t\tthis.dayNumbersVisible = this.dayGrid.rowCnt > 1; // TODO: make grid responsible\n\t\tthis.weekNumbersVisible = this.opt('weekNumbers');\n\t\tthis.dayGrid.numbersVisible = this.dayNumbersVisible || this.weekNumbersVisible;\n\n\t\tthis.el.addClass('fc-basic-view').html(this.renderSkeletonHtml());\n\t\tthis.renderHead();\n\n\t\tthis.scrollerEl = this.el.find('.fc-day-grid-container');\n\n\t\tthis.dayGrid.setElement(this.el.find('.fc-day-grid'));\n\t\tthis.dayGrid.renderDates(this.hasRigidRows());\n\t},\n\n\n\t// render the day-of-week headers\n\trenderHead: function() {\n\t\tthis.headContainerEl =\n\t\t\tthis.el.find('.fc-head-container')\n\t\t\t\t.html(this.dayGrid.renderHeadHtml());\n\t\tthis.headRowEl = this.headContainerEl.find('.fc-row');\n\t},\n\n\n\t// Unrenders the content of the view. Since we haven't separated skeleton rendering from date rendering,\n\t// always completely kill the dayGrid's rendering.\n\tunrenderDates: function() {\n\t\tthis.dayGrid.unrenderDates();\n\t\tthis.dayGrid.removeElement();\n\t},\n\n\n\trenderBusinessHours: function() {\n\t\tthis.dayGrid.renderBusinessHours();\n\t},\n\n\n\t// Builds the HTML skeleton for the view.\n\t// The day-grid component will render inside of a container defined by this HTML.\n\trenderSkeletonHtml: function() {\n\t\treturn '' +\n\t\t\t'<table>' +\n\t\t\t\t'<thead class=\"fc-head\">' +\n\t\t\t\t\t'<tr>' +\n\t\t\t\t\t\t'<td class=\"fc-head-container ' + this.widgetHeaderClass + '\"></td>' +\n\t\t\t\t\t'</tr>' +\n\t\t\t\t'</thead>' +\n\t\t\t\t'<tbody class=\"fc-body\">' +\n\t\t\t\t\t'<tr>' +\n\t\t\t\t\t\t'<td class=\"' + this.widgetContentClass + '\">' +\n\t\t\t\t\t\t\t'<div class=\"fc-day-grid-container\">' +\n\t\t\t\t\t\t\t\t'<div class=\"fc-day-grid\"/>' +\n\t\t\t\t\t\t\t'</div>' +\n\t\t\t\t\t\t'</td>' +\n\t\t\t\t\t'</tr>' +\n\t\t\t\t'</tbody>' +\n\t\t\t'</table>';\n\t},\n\n\n\t// Generates an HTML attribute string for setting the width of the week number column, if it is known\n\tweekNumberStyleAttr: function() {\n\t\tif (this.weekNumberWidth !== null) {\n\t\t\treturn 'style=\"width:' + this.weekNumberWidth + 'px\"';\n\t\t}\n\t\treturn '';\n\t},\n\n\n\t// Determines whether each row should have a constant height\n\thasRigidRows: function() {\n\t\tvar eventLimit = this.opt('eventLimit');\n\t\treturn eventLimit && typeof eventLimit !== 'number';\n\t},\n\n\n\t/* Dimensions\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Refreshes the horizontal dimensions of the view\n\tupdateWidth: function() {\n\t\tif (this.weekNumbersVisible) {\n\t\t\t// Make sure all week number cells running down the side have the same width.\n\t\t\t// Record the width for cells created later.\n\t\t\tthis.weekNumberWidth = matchCellWidths(\n\t\t\t\tthis.el.find('.fc-week-number')\n\t\t\t);\n\t\t}\n\t},\n\n\n\t// Adjusts the vertical dimensions of the view to the specified values\n\tsetHeight: function(totalHeight, isAuto) {\n\t\tvar eventLimit = this.opt('eventLimit');\n\t\tvar scrollerHeight;\n\n\t\t// reset all heights to be natural\n\t\tunsetScroller(this.scrollerEl);\n\t\tuncompensateScroll(this.headRowEl);\n\n\t\tthis.dayGrid.removeSegPopover(); // kill the \"more\" popover if displayed\n\n\t\t// is the event limit a constant level number?\n\t\tif (eventLimit && typeof eventLimit === 'number') {\n\t\t\tthis.dayGrid.limitRows(eventLimit); // limit the levels first so the height can redistribute after\n\t\t}\n\n\t\tscrollerHeight = this.computeScrollerHeight(totalHeight);\n\t\tthis.setGridHeight(scrollerHeight, isAuto);\n\n\t\t// is the event limit dynamically calculated?\n\t\tif (eventLimit && typeof eventLimit !== 'number') {\n\t\t\tthis.dayGrid.limitRows(eventLimit); // limit the levels after the grid's row heights have been set\n\t\t}\n\n\t\tif (!isAuto && setPotentialScroller(this.scrollerEl, scrollerHeight)) { // using scrollbars?\n\n\t\t\tcompensateScroll(this.headRowEl, getScrollbarWidths(this.scrollerEl));\n\n\t\t\t// doing the scrollbar compensation might have created text overflow which created more height. redo\n\t\t\tscrollerHeight = this.computeScrollerHeight(totalHeight);\n\t\t\tthis.scrollerEl.height(scrollerHeight);\n\t\t}\n\t},\n\n\n\t// Sets the height of just the DayGrid component in this view\n\tsetGridHeight: function(height, isAuto) {\n\t\tif (isAuto) {\n\t\t\tundistributeHeight(this.dayGrid.rowEls); // let the rows be their natural height with no expanding\n\t\t}\n\t\telse {\n\t\t\tdistributeHeight(this.dayGrid.rowEls, height, true); // true = compensate for height-hogging rows\n\t\t}\n\t},\n\n\n\t/* Hit Areas\n\t------------------------------------------------------------------------------------------------------------------*/\n\t// forward all hit-related method calls to dayGrid\n\n\n\tprepareHits: function() {\n\t\tthis.dayGrid.prepareHits();\n\t},\n\n\n\treleaseHits: function() {\n\t\tthis.dayGrid.releaseHits();\n\t},\n\n\n\tqueryHit: function(left, top) {\n\t\treturn this.dayGrid.queryHit(left, top);\n\t},\n\n\n\tgetHitSpan: function(hit) {\n\t\treturn this.dayGrid.getHitSpan(hit);\n\t},\n\n\n\tgetHitEl: function(hit) {\n\t\treturn this.dayGrid.getHitEl(hit);\n\t},\n\n\n\t/* Events\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Renders the given events onto the view and populates the segments array\n\trenderEvents: function(events) {\n\t\tthis.dayGrid.renderEvents(events);\n\n\t\tthis.updateHeight(); // must compensate for events that overflow the row\n\t},\n\n\n\t// Retrieves all segment objects that are rendered in the view\n\tgetEventSegs: function() {\n\t\treturn this.dayGrid.getEventSegs();\n\t},\n\n\n\t// Unrenders all event elements and clears internal segment data\n\tunrenderEvents: function() {\n\t\tthis.dayGrid.unrenderEvents();\n\n\t\t// we DON'T need to call updateHeight() because:\n\t\t// A) a renderEvents() call always happens after this, which will eventually call updateHeight()\n\t\t// B) in IE8, this causes a flash whenever events are rerendered\n\t},\n\n\n\t/* Dragging (for both events and external elements)\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// A returned value of `true` signals that a mock \"helper\" event has been rendered.\n\trenderDrag: function(dropLocation, seg) {\n\t\treturn this.dayGrid.renderDrag(dropLocation, seg);\n\t},\n\n\n\tunrenderDrag: function() {\n\t\tthis.dayGrid.unrenderDrag();\n\t},\n\n\n\t/* Selection\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Renders a visual indication of a selection\n\trenderSelection: function(span) {\n\t\tthis.dayGrid.renderSelection(span);\n\t},\n\n\n\t// Unrenders a visual indications of a selection\n\tunrenderSelection: function() {\n\t\tthis.dayGrid.unrenderSelection();\n\t}\n\n});\n\n\n// Methods that will customize the rendering behavior of the BasicView's dayGrid\nvar basicDayGridMethods = {\n\n\n\t// Generates the HTML that will go before the day-of week header cells\n\trenderHeadIntroHtml: function() {\n\t\tvar view = this.view;\n\n\t\tif (view.weekNumbersVisible) {\n\t\t\treturn '' +\n\t\t\t\t'<th class=\"fc-week-number ' + view.widgetHeaderClass + '\" ' + view.weekNumberStyleAttr() + '>' +\n\t\t\t\t\t'<span>' + // needed for matchCellWidths\n\t\t\t\t\t\thtmlEscape(view.opt('weekNumberTitle')) +\n\t\t\t\t\t'</span>' +\n\t\t\t\t'</th>';\n\t\t}\n\n\t\treturn '';\n\t},\n\n\n\t// Generates the HTML that will go before content-skeleton cells that display the day/week numbers\n\trenderNumberIntroHtml: function(row) {\n\t\tvar view = this.view;\n\n\t\tif (view.weekNumbersVisible) {\n\t\t\treturn '' +\n\t\t\t\t'<td class=\"fc-week-number\" ' + view.weekNumberStyleAttr() + '>' +\n\t\t\t\t\t'<span>' + // needed for matchCellWidths\n\t\t\t\t\t\tthis.getCellDate(row, 0).format('w') +\n\t\t\t\t\t'</span>' +\n\t\t\t\t'</td>';\n\t\t}\n\n\t\treturn '';\n\t},\n\n\n\t// Generates the HTML that goes before the day bg cells for each day-row\n\trenderBgIntroHtml: function() {\n\t\tvar view = this.view;\n\n\t\tif (view.weekNumbersVisible) {\n\t\t\treturn '<td class=\"fc-week-number ' + view.widgetContentClass + '\" ' +\n\t\t\t\tview.weekNumberStyleAttr() + '></td>';\n\t\t}\n\n\t\treturn '';\n\t},\n\n\n\t// Generates the HTML that goes before every other type of row generated by DayGrid.\n\t// Affects helper-skeleton and highlight-skeleton rows.\n\trenderIntroHtml: function() {\n\t\tvar view = this.view;\n\n\t\tif (view.weekNumbersVisible) {\n\t\t\treturn '<td class=\"fc-week-number\" ' + view.weekNumberStyleAttr() + '></td>';\n\t\t}\n\n\t\treturn '';\n\t}\n\n};\n\n;;\n\n/* A month view with day cells running in rows (one-per-week) and columns\n----------------------------------------------------------------------------------------------------------------------*/\n\nvar MonthView = FC.MonthView = BasicView.extend({\n\n\t// Produces information about what range to display\n\tcomputeRange: function(date) {\n\t\tvar range = BasicView.prototype.computeRange.call(this, date); // get value from super-method\n\t\tvar rowCnt;\n\n\t\t// ensure 6 weeks\n\t\tif (this.isFixedWeeks()) {\n\t\t\trowCnt = Math.ceil(range.end.diff(range.start, 'weeks', true)); // could be partial weeks due to hiddenDays\n\t\t\trange.end.add(6 - rowCnt, 'weeks');\n\t\t}\n\n\t\treturn range;\n\t},\n\n\n\t// Overrides the default BasicView behavior to have special multi-week auto-height logic\n\tsetGridHeight: function(height, isAuto) {\n\n\t\tisAuto = isAuto || this.opt('weekMode') === 'variable'; // LEGACY: weekMode is deprecated\n\n\t\t// if auto, make the height of each row the height that it would be if there were 6 weeks\n\t\tif (isAuto) {\n\t\t\theight *= this.rowCnt / 6;\n\t\t}\n\n\t\tdistributeHeight(this.dayGrid.rowEls, height, !isAuto); // if auto, don't compensate for height-hogging rows\n\t},\n\n\n\tisFixedWeeks: function() {\n\t\tvar weekMode = this.opt('weekMode'); // LEGACY: weekMode is deprecated\n\t\tif (weekMode) {\n\t\t\treturn weekMode === 'fixed'; // if any other type of weekMode, assume NOT fixed\n\t\t}\n\n\t\treturn this.opt('fixedWeekCount');\n\t}\n\n});\n\n;;\n\nfcViews.basic = {\n\t'class': BasicView\n};\n\nfcViews.basicDay = {\n\ttype: 'basic',\n\tduration: { days: 1 }\n};\n\nfcViews.basicWeek = {\n\ttype: 'basic',\n\tduration: { weeks: 1 }\n};\n\nfcViews.month = {\n\t'class': MonthView,\n\tduration: { months: 1 }, // important for prev/next\n\tdefaults: {\n\t\tfixedWeekCount: true\n\t}\n};\n;;\n\n/* An abstract class for all agenda-related views. Displays one more columns with time slots running vertically.\n----------------------------------------------------------------------------------------------------------------------*/\n// Is a manager for the TimeGrid subcomponent and possibly the DayGrid subcomponent (if allDaySlot is on).\n// Responsible for managing width/height.\n\nvar AgendaView = FC.AgendaView = View.extend({\n\n\ttimeGridClass: TimeGrid, // class used to instantiate the timeGrid. subclasses can override\n\ttimeGrid: null, // the main time-grid subcomponent of this view\n\n\tdayGridClass: DayGrid, // class used to instantiate the dayGrid. subclasses can override\n\tdayGrid: null, // the \"all-day\" subcomponent. if all-day is turned off, this will be null\n\n\taxisWidth: null, // the width of the time axis running down the side\n\n\theadContainerEl: null, // div that hold's the timeGrid's rendered date header\n\tnoScrollRowEls: null, // set of fake row elements that must compensate when scrollerEl has scrollbars\n\n\t// when the time-grid isn't tall enough to occupy the given height, we render an <hr> underneath\n\tbottomRuleEl: null,\n\tbottomRuleHeight: null,\n\n\n\tinitialize: function() {\n\t\tthis.timeGrid = this.instantiateTimeGrid();\n\n\t\tif (this.opt('allDaySlot')) { // should we display the \"all-day\" area?\n\t\t\tthis.dayGrid = this.instantiateDayGrid(); // the all-day subcomponent of this view\n\t\t}\n\t},\n\n\n\t// Instantiates the TimeGrid object this view needs. Draws from this.timeGridClass\n\tinstantiateTimeGrid: function() {\n\t\tvar subclass = this.timeGridClass.extend(agendaTimeGridMethods);\n\n\t\treturn new subclass(this);\n\t},\n\n\n\t// Instantiates the DayGrid object this view might need. Draws from this.dayGridClass\n\tinstantiateDayGrid: function() {\n\t\tvar subclass = this.dayGridClass.extend(agendaDayGridMethods);\n\n\t\treturn new subclass(this);\n\t},\n\n\n\t/* Rendering\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Sets the display range and computes all necessary dates\n\tsetRange: function(range) {\n\t\tView.prototype.setRange.call(this, range); // call the super-method\n\n\t\tthis.timeGrid.setRange(range);\n\t\tif (this.dayGrid) {\n\t\t\tthis.dayGrid.setRange(range);\n\t\t}\n\t},\n\n\n\t// Renders the view into `this.el`, which has already been assigned\n\trenderDates: function() {\n\n\t\tthis.el.addClass('fc-agenda-view').html(this.renderSkeletonHtml());\n\t\tthis.renderHead();\n\n\t\t// the element that wraps the time-grid that will probably scroll\n\t\tthis.scrollerEl = this.el.find('.fc-time-grid-container');\n\n\t\tthis.timeGrid.setElement(this.el.find('.fc-time-grid'));\n\t\tthis.timeGrid.renderDates();\n\n\t\t// the <hr> that sometimes displays under the time-grid\n\t\tthis.bottomRuleEl = $('<hr class=\"fc-divider ' + this.widgetHeaderClass + '\"/>')\n\t\t\t.appendTo(this.timeGrid.el); // inject it into the time-grid\n\n\t\tif (this.dayGrid) {\n\t\t\tthis.dayGrid.setElement(this.el.find('.fc-day-grid'));\n\t\t\tthis.dayGrid.renderDates();\n\n\t\t\t// have the day-grid extend it's coordinate area over the <hr> dividing the two grids\n\t\t\tthis.dayGrid.bottomCoordPadding = this.dayGrid.el.next('hr').outerHeight();\n\t\t}\n\n\t\tthis.noScrollRowEls = this.el.find('.fc-row:not(.fc-scroller *)'); // fake rows not within the scroller\n\t},\n\n\n\t// render the day-of-week headers\n\trenderHead: function() {\n\t\tthis.headContainerEl =\n\t\t\tthis.el.find('.fc-head-container')\n\t\t\t\t.html(this.timeGrid.renderHeadHtml());\n\t},\n\n\n\t// Unrenders the content of the view. Since we haven't separated skeleton rendering from date rendering,\n\t// always completely kill each grid's rendering.\n\tunrenderDates: function() {\n\t\tthis.timeGrid.unrenderDates();\n\t\tthis.timeGrid.removeElement();\n\n\t\tif (this.dayGrid) {\n\t\t\tthis.dayGrid.unrenderDates();\n\t\t\tthis.dayGrid.removeElement();\n\t\t}\n\t},\n\n\n\trenderBusinessHours: function() {\n\t\tthis.timeGrid.renderBusinessHours();\n\n\t\tif (this.dayGrid) {\n\t\t\tthis.dayGrid.renderBusinessHours();\n\t\t}\n\t},\n\n\n\t// Builds the HTML skeleton for the view.\n\t// The day-grid and time-grid components will render inside containers defined by this HTML.\n\trenderSkeletonHtml: function() {\n\t\treturn '' +\n\t\t\t'<table>' +\n\t\t\t\t'<thead class=\"fc-head\">' +\n\t\t\t\t\t'<tr>' +\n\t\t\t\t\t\t'<td class=\"fc-head-container ' + this.widgetHeaderClass + '\"></td>' +\n\t\t\t\t\t'</tr>' +\n\t\t\t\t'</thead>' +\n\t\t\t\t'<tbody class=\"fc-body\">' +\n\t\t\t\t\t'<tr>' +\n\t\t\t\t\t\t'<td class=\"' + this.widgetContentClass + '\">' +\n\t\t\t\t\t\t\t(this.dayGrid ?\n\t\t\t\t\t\t\t\t'<div class=\"fc-day-grid\"/>' +\n\t\t\t\t\t\t\t\t'<hr class=\"fc-divider ' + this.widgetHeaderClass + '\"/>' :\n\t\t\t\t\t\t\t\t''\n\t\t\t\t\t\t\t\t) +\n\t\t\t\t\t\t\t'<div class=\"fc-time-grid-container\">' +\n\t\t\t\t\t\t\t\t'<div class=\"fc-time-grid\"/>' +\n\t\t\t\t\t\t\t'</div>' +\n\t\t\t\t\t\t'</td>' +\n\t\t\t\t\t'</tr>' +\n\t\t\t\t'</tbody>' +\n\t\t\t'</table>';\n\t},\n\n\n\t// Generates an HTML attribute string for setting the width of the axis, if it is known\n\taxisStyleAttr: function() {\n\t\tif (this.axisWidth !== null) {\n\t\t\t return 'style=\"width:' + this.axisWidth + 'px\"';\n\t\t}\n\t\treturn '';\n\t},\n\n\n\t/* Dimensions\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\tupdateSize: function(isResize) {\n\t\tthis.timeGrid.updateSize(isResize);\n\n\t\tView.prototype.updateSize.call(this, isResize); // call the super-method\n\t},\n\n\n\t// Refreshes the horizontal dimensions of the view\n\tupdateWidth: function() {\n\t\t// make all axis cells line up, and record the width so newly created axis cells will have it\n\t\tthis.axisWidth = matchCellWidths(this.el.find('.fc-axis'));\n\t},\n\n\n\t// Adjusts the vertical dimensions of the view to the specified values\n\tsetHeight: function(totalHeight, isAuto) {\n\t\tvar eventLimit;\n\t\tvar scrollerHeight;\n\n\t\tif (this.bottomRuleHeight === null) {\n\t\t\t// calculate the height of the rule the very first time\n\t\t\tthis.bottomRuleHeight = this.bottomRuleEl.outerHeight();\n\t\t}\n\t\tthis.bottomRuleEl.hide(); // .show() will be called later if this <hr> is necessary\n\n\t\t// reset all dimensions back to the original state\n\t\tthis.scrollerEl.css('overflow', '');\n\t\tunsetScroller(this.scrollerEl);\n\t\tuncompensateScroll(this.noScrollRowEls);\n\n\t\t// limit number of events in the all-day area\n\t\tif (this.dayGrid) {\n\t\t\tthis.dayGrid.removeSegPopover(); // kill the \"more\" popover if displayed\n\n\t\t\teventLimit = this.opt('eventLimit');\n\t\t\tif (eventLimit && typeof eventLimit !== 'number') {\n\t\t\t\teventLimit = AGENDA_ALL_DAY_EVENT_LIMIT; // make sure \"auto\" goes to a real number\n\t\t\t}\n\t\t\tif (eventLimit) {\n\t\t\t\tthis.dayGrid.limitRows(eventLimit);\n\t\t\t}\n\t\t}\n\n\t\tif (!isAuto) { // should we force dimensions of the scroll container, or let the contents be natural height?\n\n\t\t\tscrollerHeight = this.computeScrollerHeight(totalHeight);\n\t\t\tif (setPotentialScroller(this.scrollerEl, scrollerHeight)) { // using scrollbars?\n\n\t\t\t\t// make the all-day and header rows lines up\n\t\t\t\tcompensateScroll(this.noScrollRowEls, getScrollbarWidths(this.scrollerEl));\n\n\t\t\t\t// the scrollbar compensation might have changed text flow, which might affect height, so recalculate\n\t\t\t\t// and reapply the desired height to the scroller.\n\t\t\t\tscrollerHeight = this.computeScrollerHeight(totalHeight);\n\t\t\t\tthis.scrollerEl.height(scrollerHeight);\n\t\t\t}\n\t\t\telse { // no scrollbars\n\t\t\t\t// still, force a height and display the bottom rule (marks the end of day)\n\t\t\t\tthis.scrollerEl.height(scrollerHeight).css('overflow', 'hidden'); // in case <hr> goes outside\n\t\t\t\tthis.bottomRuleEl.show();\n\t\t\t}\n\t\t}\n\t},\n\n\n\t// Computes the initial pre-configured scroll state prior to allowing the user to change it\n\tcomputeInitialScroll: function() {\n\t\tvar scrollTime = moment.duration(this.opt('scrollTime'));\n\t\tvar top = this.timeGrid.computeTimeTop(scrollTime);\n\n\t\t// zoom can give weird floating-point values. rather scroll a little bit further\n\t\ttop = Math.ceil(top);\n\n\t\tif (top) {\n\t\t\ttop++; // to overcome top border that slots beyond the first have. looks better\n\t\t}\n\n\t\treturn top;\n\t},\n\n\n\t/* Hit Areas\n\t------------------------------------------------------------------------------------------------------------------*/\n\t// forward all hit-related method calls to the grids (dayGrid might not be defined)\n\n\n\tprepareHits: function() {\n\t\tthis.timeGrid.prepareHits();\n\t\tif (this.dayGrid) {\n\t\t\tthis.dayGrid.prepareHits();\n\t\t}\n\t},\n\n\n\treleaseHits: function() {\n\t\tthis.timeGrid.releaseHits();\n\t\tif (this.dayGrid) {\n\t\t\tthis.dayGrid.releaseHits();\n\t\t}\n\t},\n\n\n\tqueryHit: function(left, top) {\n\t\tvar hit = this.timeGrid.queryHit(left, top);\n\n\t\tif (!hit && this.dayGrid) {\n\t\t\thit = this.dayGrid.queryHit(left, top);\n\t\t}\n\n\t\treturn hit;\n\t},\n\n\n\tgetHitSpan: function(hit) {\n\t\t// TODO: hit.component is set as a hack to identify where the hit came from\n\t\treturn hit.component.getHitSpan(hit);\n\t},\n\n\n\tgetHitEl: function(hit) {\n\t\t// TODO: hit.component is set as a hack to identify where the hit came from\n\t\treturn hit.component.getHitEl(hit);\n\t},\n\n\n\t/* Events\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Renders events onto the view and populates the View's segment array\n\trenderEvents: function(events) {\n\t\tvar dayEvents = [];\n\t\tvar timedEvents = [];\n\t\tvar daySegs = [];\n\t\tvar timedSegs;\n\t\tvar i;\n\n\t\t// separate the events into all-day and timed\n\t\tfor (i = 0; i < events.length; i++) {\n\t\t\tif (events[i].allDay) {\n\t\t\t\tdayEvents.push(events[i]);\n\t\t\t}\n\t\t\telse {\n\t\t\t\ttimedEvents.push(events[i]);\n\t\t\t}\n\t\t}\n\n\t\t// render the events in the subcomponents\n\t\ttimedSegs = this.timeGrid.renderEvents(timedEvents);\n\t\tif (this.dayGrid) {\n\t\t\tdaySegs = this.dayGrid.renderEvents(dayEvents);\n\t\t}\n\n\t\t// the all-day area is flexible and might have a lot of events, so shift the height\n\t\tthis.updateHeight();\n\t},\n\n\n\t// Retrieves all segment objects that are rendered in the view\n\tgetEventSegs: function() {\n\t\treturn this.timeGrid.getEventSegs().concat(\n\t\t\tthis.dayGrid ? this.dayGrid.getEventSegs() : []\n\t\t);\n\t},\n\n\n\t// Unrenders all event elements and clears internal segment data\n\tunrenderEvents: function() {\n\n\t\t// unrender the events in the subcomponents\n\t\tthis.timeGrid.unrenderEvents();\n\t\tif (this.dayGrid) {\n\t\t\tthis.dayGrid.unrenderEvents();\n\t\t}\n\n\t\t// we DON'T need to call updateHeight() because:\n\t\t// A) a renderEvents() call always happens after this, which will eventually call updateHeight()\n\t\t// B) in IE8, this causes a flash whenever events are rerendered\n\t},\n\n\n\t/* Dragging (for events and external elements)\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// A returned value of `true` signals that a mock \"helper\" event has been rendered.\n\trenderDrag: function(dropLocation, seg) {\n\t\tif (dropLocation.start.hasTime()) {\n\t\t\treturn this.timeGrid.renderDrag(dropLocation, seg);\n\t\t}\n\t\telse if (this.dayGrid) {\n\t\t\treturn this.dayGrid.renderDrag(dropLocation, seg);\n\t\t}\n\t},\n\n\n\tunrenderDrag: function() {\n\t\tthis.timeGrid.unrenderDrag();\n\t\tif (this.dayGrid) {\n\t\t\tthis.dayGrid.unrenderDrag();\n\t\t}\n\t},\n\n\n\t/* Selection\n\t------------------------------------------------------------------------------------------------------------------*/\n\n\n\t// Renders a visual indication of a selection\n\trenderSelection: function(span) {\n\t\tif (span.start.hasTime() || span.end.hasTime()) {\n\t\t\tthis.timeGrid.renderSelection(span);\n\t\t}\n\t\telse if (this.dayGrid) {\n\t\t\tthis.dayGrid.renderSelection(span);\n\t\t}\n\t},\n\n\n\t// Unrenders a visual indications of a selection\n\tunrenderSelection: function() {\n\t\tthis.timeGrid.unrenderSelection();\n\t\tif (this.dayGrid) {\n\t\t\tthis.dayGrid.unrenderSelection();\n\t\t}\n\t}\n\n});\n\n\n// Methods that will customize the rendering behavior of the AgendaView's timeGrid\nvar agendaTimeGridMethods = {\n\n\n\t// Generates the HTML that will go before the day-of week header cells\n\trenderHeadIntroHtml: function() {\n\t\tvar view = this.view;\n\t\tvar weekText;\n\n\t\tif (view.opt('weekNumbers')) {\n\t\t\tweekText = this.start.format(view.opt('smallWeekFormat'));\n\n\t\t\treturn '' +\n\t\t\t\t'<th class=\"fc-axis fc-week-number ' + view.widgetHeaderClass + '\" ' + view.axisStyleAttr() + '>' +\n\t\t\t\t\t'<span>' + // needed for matchCellWidths\n\t\t\t\t\t\thtmlEscape(weekText) +\n\t\t\t\t\t'</span>' +\n\t\t\t\t'</th>';\n\t\t}\n\t\telse {\n\t\t\treturn '<th class=\"fc-axis ' + view.widgetHeaderClass + '\" ' + view.axisStyleAttr() + '></th>';\n\t\t}\n\t},\n\n\n\t// Generates the HTML that goes before the bg of the TimeGrid slot area. Long vertical column.\n\trenderBgIntroHtml: function() {\n\t\tvar view = this.view;\n\n\t\treturn '<td class=\"fc-axis ' + view.widgetContentClass + '\" ' + view.axisStyleAttr() + '></td>';\n\t},\n\n\n\t// Generates the HTML that goes before all other types of cells.\n\t// Affects content-skeleton, helper-skeleton, highlight-skeleton for both the time-grid and day-grid.\n\trenderIntroHtml: function() {\n\t\tvar view = this.view;\n\n\t\treturn '<td class=\"fc-axis\" ' + view.axisStyleAttr() + '></td>';\n\t}\n\n};\n\n\n// Methods that will customize the rendering behavior of the AgendaView's dayGrid\nvar agendaDayGridMethods = {\n\n\n\t// Generates the HTML that goes before the all-day cells\n\trenderBgIntroHtml: function() {\n\t\tvar view = this.view;\n\n\t\treturn '' +\n\t\t\t'<td class=\"fc-axis ' + view.widgetContentClass + '\" ' + view.axisStyleAttr() + '>' +\n\t\t\t\t'<span>' + // needed for matchCellWidths\n\t\t\t\t\t(view.opt('allDayHtml') || htmlEscape(view.opt('allDayText'))) +\n\t\t\t\t'</span>' +\n\t\t\t'</td>';\n\t},\n\n\n\t// Generates the HTML that goes before all other types of cells.\n\t// Affects content-skeleton, helper-skeleton, highlight-skeleton for both the time-grid and day-grid.\n\trenderIntroHtml: function() {\n\t\tvar view = this.view;\n\n\t\treturn '<td class=\"fc-axis\" ' + view.axisStyleAttr() + '></td>';\n\t}\n\n};\n\n;;\n\nvar AGENDA_ALL_DAY_EVENT_LIMIT = 5;\n\n// potential nice values for the slot-duration and interval-duration\n// from largest to smallest\nvar AGENDA_STOCK_SUB_DURATIONS = [\n\t{ hours: 1 },\n\t{ minutes: 30 },\n\t{ minutes: 15 },\n\t{ seconds: 30 },\n\t{ seconds: 15 }\n];\n\nfcViews.agenda = {\n\t'class': AgendaView,\n\tdefaults: {\n\t\tallDaySlot: true,\n\t\tallDayText: 'all-day',\n\t\tslotDuration: '00:30:00',\n\t\tminTime: '00:00:00',\n\t\tmaxTime: '24:00:00',\n\t\tslotEventOverlap: true // a bad name. confused with overlap/constraint system\n\t}\n};\n\nfcViews.agendaDay = {\n\ttype: 'agenda',\n\tduration: { days: 1 }\n};\n\nfcViews.agendaWeek = {\n\ttype: 'agenda',\n\tduration: { weeks: 1 }\n};\n;;\n\nreturn FC; // export for Node/CommonJS\n});","!function(a){\"function\"==typeof define&&define.amd?define([\"jquery\",\"moment\"],a):a(jQuery,moment)}(function(a,b){!function(){(b.defineLocale||b.lang).call(b,\"ar-ma\",{months:\"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر\".split(\"_\"),monthsShort:\"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر\".split(\"_\"),weekdays:\"الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت\".split(\"_\"),weekdaysShort:\"احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت\".split(\"_\"),weekdaysMin:\"ح_ن_ث_ر_خ_ج_س\".split(\"_\"),longDateFormat:{LT:\"HH:mm\",LTS:\"LT:ss\",L:\"DD/MM/YYYY\",LL:\"D MMMM YYYY\",LLL:\"D MMMM YYYY LT\",LLLL:\"dddd D MMMM YYYY LT\"},calendar:{sameDay:\"[اليوم على الساعة] LT\",nextDay:\"[غدا على الساعة] LT\",nextWeek:\"dddd [على الساعة] LT\",lastDay:\"[أمس على الساعة] LT\",lastWeek:\"dddd [على الساعة] LT\",sameElse:\"L\"},relativeTime:{future:\"في %s\",past:\"منذ %s\",s:\"ثوان\",m:\"دقيقة\",mm:\"%d دقائق\",h:\"ساعة\",hh:\"%d ساعات\",d:\"يوم\",dd:\"%d أيام\",M:\"شهر\",MM:\"%d أشهر\",y:\"سنة\",yy:\"%d سنوات\"},week:{dow:6,doy:12}}),a.fullCalendar.datepickerLang(\"ar-ma\",\"ar\",{closeText:\"إغلاق\",prevText:\"&#x3C;السابق\",nextText:\"التالي&#x3E;\",currentText:\"اليوم\",monthNames:[\"كانون الثاني\",\"شباط\",\"آذار\",\"نيسان\",\"مايو\",\"حزيران\",\"تموز\",\"آب\",\"أيلول\",\"تشرين الأول\",\"تشرين الثاني\",\"كانون الأول\"],monthNamesShort:[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\"],dayNames:[\"الأحد\",\"الاثنين\",\"الثلاثاء\",\"الأربعاء\",\"الخميس\",\"الجمعة\",\"السبت\"],dayNamesShort:[\"الأحد\",\"الاثنين\",\"الثلاثاء\",\"الأربعاء\",\"الخميس\",\"الجمعة\",\"السبت\"],dayNamesMin:[\"ح\",\"ن\",\"ث\",\"ر\",\"خ\",\"ج\",\"س\"],weekHeader:\"أسبوع\",dateFormat:\"dd/mm/yy\",firstDay:6,isRTL:!0,showMonthAfterYear:!1,yearSuffix:\"\"}),a.fullCalendar.lang(\"ar-ma\",{buttonText:{month:\"شهر\",week:\"أسبوع\",day:\"يوم\",list:\"أجندة\"},allDayText:\"اليوم كله\",eventLimitText:\"أخرى\"})}(),function(){var c={1:\"١\",2:\"٢\",3:\"٣\",4:\"٤\",5:\"٥\",6:\"٦\",7:\"٧\",8:\"٨\",9:\"٩\",0:\"٠\"},d={\"١\":\"1\",\"٢\":\"2\",\"٣\":\"3\",\"٤\":\"4\",\"٥\":\"5\",\"٦\":\"6\",\"٧\":\"7\",\"٨\":\"8\",\"٩\":\"9\",\"٠\":\"0\"};(b.defineLocale||b.lang).call(b,\"ar-sa\",{months:\"يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر\".split(\"_\"),monthsShort:\"يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر\".split(\"_\"),weekdays:\"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت\".split(\"_\"),weekdaysShort:\"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت\".split(\"_\"),weekdaysMin:\"ح_ن_ث_ر_خ_ج_س\".split(\"_\"),longDateFormat:{LT:\"HH:mm\",LTS:\"HH:mm:ss\",L:\"DD/MM/YYYY\",LL:\"D MMMM YYYY\",LLL:\"D MMMM YYYY LT\",LLLL:\"dddd D MMMM YYYY LT\"},meridiemParse:/ص|م/,isPM:function(a){return\"م\"===a},meridiem:function(a,b,c){return 12>a?\"ص\":\"م\"},calendar:{sameDay:\"[اليوم على الساعة] LT\",nextDay:\"[غدا على الساعة] LT\",nextWeek:\"dddd [على الساعة] LT\",lastDay:\"[أمس على الساعة] LT\",lastWeek:\"dddd [على الساعة] LT\",sameElse:\"L\"},relativeTime:{future:\"في %s\",past:\"منذ %s\",s:\"ثوان\",m:\"دقيقة\",mm:\"%d دقائق\",h:\"ساعة\",hh:\"%d ساعات\",d:\"يوم\",dd:\"%d أيام\",M:\"شهر\",MM:\"%d أشهر\",y:\"سنة\",yy:\"%d سنوات\"},preparse:function(a){return a.replace(/[١٢٣٤٥٦٧٨٩٠]/g,function(a){return d[a]}).replace(/،/g,\",\")},postformat:function(a){return a.replace(/\\d/g,function(a){return c[a]}).replace(/,/g,\"،\")},week:{dow:6,doy:12}}),a.fullCalendar.datepickerLang(\"ar-sa\",\"ar\",{closeText:\"إغلاق\",prevText:\"&#x3C;السابق\",nextText:\"التالي&#x3E;\",currentText:\"اليوم\",monthNames:[\"كانون الثاني\",\"شباط\",\"آذار\",\"نيسان\",\"مايو\",\"حزيران\",\"تموز\",\"آب\",\"أيلول\",\"تشرين الأول\",\"تشرين الثاني\",\"كانون الأول\"],monthNamesShort:[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\"],dayNames:[\"الأحد\",\"الاثنين\",\"الثلاثاء\",\"الأربعاء\",\"الخميس\",\"الجمعة\",\"السبت\"],dayNamesShort:[\"الأحد\",\"الاثنين\",\"الثلاثاء\",\"الأربعاء\",\"الخميس\",\"الجمعة\",\"السبت\"],dayNamesMin:[\"ح\",\"ن\",\"ث\",\"ر\",\"خ\",\"ج\",\"س\"],weekHeader:\"أسبوع\",dateFormat:\"dd/mm/yy\",firstDay:6,isRTL:!0,showMonthAfterYear:!1,yearSuffix:\"\"}),a.fullCalendar.lang(\"ar-sa\",{buttonText:{month:\"شهر\",week:\"أسبوع\",day:\"يوم\",list:\"أجندة\"},allDayText:\"اليوم كله\",eventLimitText:\"أخرى\"})}(),function(){(b.defineLocale||b.lang).call(b,\"ar-tn\",{months:\"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر\".split(\"_\"),monthsShort:\"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر\".split(\"_\"),weekdays:\"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت\".split(\"_\"),weekdaysShort:\"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت\".split(\"_\"),weekdaysMin:\"ح_ن_ث_ر_خ_ج_س\".split(\"_\"),longDateFormat:{LT:\"HH:mm\",LTS:\"LT:ss\",L:\"DD/MM/YYYY\",LL:\"D MMMM YYYY\",LLL:\"D MMMM YYYY LT\",LLLL:\"dddd D MMMM YYYY LT\"},calendar:{sameDay:\"[اليوم على الساعة] LT\",nextDay:\"[غدا على الساعة] LT\",nextWeek:\"dddd [على الساعة] LT\",lastDay:\"[أمس على الساعة] LT\",lastWeek:\"dddd [على الساعة] LT\",sameElse:\"L\"},relativeTime:{future:\"في %s\",past:\"منذ %s\",s:\"ثوان\",m:\"دقيقة\",mm:\"%d دقائق\",h:\"ساعة\",hh:\"%d ساعات\",d:\"يوم\",dd:\"%d أيام\",M:\"شهر\",MM:\"%d أشهر\",y:\"سنة\",yy:\"%d سنوات\"},week:{dow:1,doy:4}}),a.fullCalendar.datepickerLang(\"ar-tn\",\"ar\",{closeText:\"إغلاق\",prevText:\"&#x3C;السابق\",nextText:\"التالي&#x3E;\",currentText:\"اليوم\",monthNames:[\"كانون الثاني\",\"شباط\",\"آذار\",\"نيسان\",\"مايو\",\"حزيران\",\"تموز\",\"آب\",\"أيلول\",\"تشرين الأول\",\"تشرين الثاني\",\"كانون الأول\"],monthNamesShort:[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\"],dayNames:[\"الأحد\",\"الاثنين\",\"الثلاثاء\",\"الأربعاء\",\"الخميس\",\"الجمعة\",\"السبت\"],dayNamesShort:[\"الأحد\",\"الاثنين\",\"الثلاثاء\",\"الأربعاء\",\"الخميس\",\"الجمعة\",\"السبت\"],dayNamesMin:[\"ح\",\"ن\",\"ث\",\"ر\",\"خ\",\"ج\",\"س\"],weekHeader:\"أسبوع\",dateFormat:\"dd/mm/yy\",firstDay:6,isRTL:!0,showMonthAfterYear:!1,yearSuffix:\"\"}),a.fullCalendar.lang(\"ar-tn\",{buttonText:{month:\"شهر\",week:\"أسبوع\",day:\"يوم\",list:\"أجندة\"},allDayText:\"اليوم كله\",eventLimitText:\"أخرى\"})}(),function(){var c={1:\"١\",2:\"٢\",3:\"٣\",4:\"٤\",5:\"٥\",6:\"٦\",7:\"٧\",8:\"٨\",9:\"٩\",0:\"٠\"},d={\"١\":\"1\",\"٢\":\"2\",\"٣\":\"3\",\"٤\":\"4\",\"٥\":\"5\",\"٦\":\"6\",\"٧\":\"7\",\"٨\":\"8\",\"٩\":\"9\",\"٠\":\"0\"},e=function(a){return 0===a?0:1===a?1:2===a?2:a%100>=3&&10>=a%100?3:a%100>=11?4:5},f={s:[\"أقل من ثانية\",\"ثانية واحدة\",[\"ثانيتان\",\"ثانيتين\"],\"%d ثوان\",\"%d ثانية\",\"%d ثانية\"],m:[\"أقل من دقيقة\",\"دقيقة واحدة\",[\"دقيقتان\",\"دقيقتين\"],\"%d دقائق\",\"%d دقيقة\",\"%d دقيقة\"],h:[\"أقل من ساعة\",\"ساعة واحدة\",[\"ساعتان\",\"ساعتين\"],\"%d ساعات\",\"%d ساعة\",\"%d ساعة\"],d:[\"أقل من يوم\",\"يوم واحد\",[\"يومان\",\"يومين\"],\"%d أيام\",\"%d يومًا\",\"%d يوم\"],M:[\"أقل من شهر\",\"شهر واحد\",[\"شهران\",\"شهرين\"],\"%d أشهر\",\"%d شهرا\",\"%d شهر\"],y:[\"أقل من عام\",\"عام واحد\",[\"عامان\",\"عامين\"],\"%d أعوام\",\"%d عامًا\",\"%d عام\"]},g=function(a){return function(b,c,d,g){var h=e(b),i=f[a][e(b)];return 2===h&&(i=i[c?0:1]),i.replace(/%d/i,b)}},h=[\"كانون الثاني يناير\",\"شباط فبراير\",\"آذار مارس\",\"نيسان أبريل\",\"أيار مايو\",\"حزيران يونيو\",\"تموز يوليو\",\"آب أغسطس\",\"أيلول سبتمبر\",\"تشرين الأول أكتوبر\",\"تشرين الثاني نوفمبر\",\"كانون الأول ديسمبر\"];(b.defineLocale||b.lang).call(b,\"ar\",{months:h,monthsShort:h,weekdays:\"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت\".split(\"_\"),weekdaysShort:\"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت\".split(\"_\"),weekdaysMin:\"ح_ن_ث_ر_خ_ج_س\".split(\"_\"),longDateFormat:{LT:\"HH:mm\",LTS:\"HH:mm:ss\",L:\"DD/MM/YYYY\",LL:\"D MMMM YYYY\",LLL:\"D MMMM YYYY LT\",LLLL:\"dddd D MMMM YYYY LT\"},meridiemParse:/ص|م/,isPM:function(a){return\"م\"===a},meridiem:function(a,b,c){return 12>a?\"ص\":\"م\"},calendar:{sameDay:\"[اليوم عند الساعة] LT\",nextDay:\"[غدًا عند الساعة] LT\",nextWeek:\"dddd [عند الساعة] LT\",lastDay:\"[أمس عند الساعة] LT\",lastWeek:\"dddd [عند الساعة] LT\",sameElse:\"L\"},relativeTime:{future:\"بعد %s\",past:\"منذ %s\",s:g(\"s\"),m:g(\"m\"),mm:g(\"m\"),h:g(\"h\"),hh:g(\"h\"),d:g(\"d\"),dd:g(\"d\"),M:g(\"M\"),MM:g(\"M\"),y:g(\"y\"),yy:g(\"y\")},preparse:function(a){return a.replace(/[١٢٣٤٥٦٧٨٩٠]/g,function(a){return d[a]}).replace(/،/g,\",\")},postformat:function(a){return a.replace(/\\d/g,function(a){return c[a]}).replace(/,/g,\"،\")},week:{dow:6,doy:12}}),a.fullCalendar.datepickerLang(\"ar\",\"ar\",{closeText:\"إغلاق\",prevText:\"&#x3C;السابق\",nextText:\"التالي&#x3E;\",currentText:\"اليوم\",monthNames:[\"كانون الثاني\",\"شباط\",\"آذار\",\"نيسان\",\"مايو\",\"حزيران\",\"تموز\",\"آب\",\"أيلول\",\"تشرين الأول\",\"تشرين الثاني\",\"كانون الأول\"],monthNamesShort:[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\"],dayNames:[\"الأحد\",\"الاثنين\",\"الثلاثاء\",\"الأربعاء\",\"الخميس\",\"الجمعة\",\"السبت\"],dayNamesShort:[\"الأحد\",\"الاثنين\",\"الثلاثاء\",\"الأربعاء\",\"الخميس\",\"الجمعة\",\"السبت\"],dayNamesMin:[\"ح\",\"ن\",\"ث\",\"ر\",\"خ\",\"ج\",\"س\"],weekHeader:\"أسبوع\",dateFormat:\"dd/mm/yy\",firstDay:6,isRTL:!0,showMonthAfterYear:!1,yearSuffix:\"\"}),a.fullCalendar.lang(\"ar\",{buttonText:{month:\"شهر\",week:\"أسبوع\",day:\"يوم\",list:\"أجندة\"},allDayText:\"اليوم كله\",eventLimitText:\"أخرى\"})}(),function(){(b.defineLocale||b.lang).call(b,\"bg\",{months:\"януари_февруари_март_април_май_юни_юли_август_септември_октомври_ноември_декември\".split(\"_\"),monthsShort:\"янр_фев_мар_апр_май_юни_юли_авг_сеп_окт_ное_дек\".split(\"_\"),weekdays:\"неделя_понеделник_вторник_сряда_четвъртък_петък_събота\".split(\"_\"),weekdaysShort:\"нед_пон_вто_сря_чет_пет_съб\".split(\"_\"),weekdaysMin:\"нд_пн_вт_ср_чт_пт_сб\".split(\"_\"),longDateFormat:{LT:\"H:mm\",LTS:\"LT:ss\",L:\"D.MM.YYYY\",LL:\"D MMMM YYYY\",LLL:\"D MMMM YYYY LT\",LLLL:\"dddd, D MMMM YYYY LT\"},calendar:{sameDay:\"[Днес в] LT\",nextDay:\"[Утре в] LT\",nextWeek:\"dddd [в] LT\",lastDay:\"[Вчера в] LT\",lastWeek:function(){switch(this.day()){case 0:case 3:case 6:return\"[В изминалата] dddd [в] LT\";case 1:case 2:case 4:case 5:return\"[В изминалия] dddd [в] LT\"}},sameElse:\"L\"},relativeTime:{future:\"след %s\",past:\"преди %s\",s:\"няколко секунди\",m:\"минута\",mm:\"%d минути\",h:\"час\",hh:\"%d часа\",d:\"ден\",dd:\"%d дни\",M:\"месец\",MM:\"%d месеца\",y:\"година\",yy:\"%d години\"},ordinalParse:/\\d{1,2}-(ев|ен|ти|ви|ри|ми)/,ordinal:function(a){var b=a%10,c=a%100;return 0===a?a+\"-ев\":0===c?a+\"-ен\":c>10&&20>c?a+\"-ти\":1===b?a+\"-ви\":2===b?a+\"-ри\":7===b||8===b?a+\"-ми\":a+\"-ти\"},week:{dow:1,doy:7}}),a.fullCalendar.datepickerLang(\"bg\",\"bg\",{closeText:\"затвори\",prevText:\"&#x3C;назад\",nextText:\"напред&#x3E;\",nextBigText:\"&#x3E;&#x3E;\",currentText:\"днес\",monthNames:[\"Януари\",\"Февруари\",\"Март\",\"Април\",\"Май\",\"Юни\",\"Юли\",\"Август\",\"Септември\",\"Октомври\",\"Ноември\",\"Декември\"],monthNamesShort:[\"Яну\",\"Фев\",\"Мар\",\"Апр\",\"Май\",\"Юни\",\"Юли\",\"Авг\",\"Сеп\",\"Окт\",\"Нов\",\"Дек\"],dayNames:[\"Неделя\",\"Понеделник\",\"Вторник\",\"Сряда\",\"Четвъртък\",\"Петък\",\"Събота\"],dayNamesShort:[\"Нед\",\"Пон\",\"Вто\",\"Сря\",\"Чет\",\"Пет\",\"Съб\"],dayNamesMin:[\"Не\",\"По\",\"Вт\",\"Ср\",\"Че\",\"Пе\",\"Съ\"],weekHeader:\"Wk\",dateFormat:\"dd.mm.yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),a.fullCalendar.lang(\"bg\",{buttonText:{month:\"Месец\",week:\"Седмица\",day:\"Ден\",list:\"График\"},allDayText:\"Цял ден\",eventLimitText:function(a){return\"+още \"+a}})}(),function(){(b.defineLocale||b.lang).call(b,\"ca\",{months:\"gener_febrer_març_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre\".split(\"_\"),monthsShort:\"gen._febr._mar._abr._mai._jun._jul._ag._set._oct._nov._des.\".split(\"_\"),weekdays:\"diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte\".split(\"_\"),weekdaysShort:\"dg._dl._dt._dc._dj._dv._ds.\".split(\"_\"),weekdaysMin:\"Dg_Dl_Dt_Dc_Dj_Dv_Ds\".split(\"_\"),longDateFormat:{LT:\"H:mm\",LTS:\"LT:ss\",L:\"DD/MM/YYYY\",LL:\"D MMMM YYYY\",LLL:\"D MMMM YYYY LT\",LLLL:\"dddd D MMMM YYYY LT\"},calendar:{sameDay:function(){return\"[avui a \"+(1!==this.hours()?\"les\":\"la\")+\"] LT\"},nextDay:function(){return\"[demà a \"+(1!==this.hours()?\"les\":\"la\")+\"] LT\"},nextWeek:function(){return\"dddd [a \"+(1!==this.hours()?\"les\":\"la\")+\"] LT\"},lastDay:function(){return\"[ahir a \"+(1!==this.hours()?\"les\":\"la\")+\"] LT\"},lastWeek:function(){return\"[el] dddd [passat a \"+(1!==this.hours()?\"les\":\"la\")+\"] LT\"},sameElse:\"L\"},relativeTime:{future:\"en %s\",past:\"fa %s\",s:\"uns segons\",m:\"un minut\",mm:\"%d minuts\",h:\"una hora\",hh:\"%d hores\",d:\"un dia\",dd:\"%d dies\",M:\"un mes\",MM:\"%d mesos\",y:\"un any\",yy:\"%d anys\"},ordinalParse:/\\d{1,2}(r|n|t|è|a)/,ordinal:function(a,b){var c=1===a?\"r\":2===a?\"n\":3===a?\"r\":4===a?\"t\":\"è\";return(\"w\"===b||\"W\"===b)&&(c=\"a\"),a+c},week:{dow:1,doy:4}}),a.fullCalendar.datepickerLang(\"ca\",\"ca\",{closeText:\"Tanca\",prevText:\"Anterior\",nextText:\"Següent\",currentText:\"Avui\",monthNames:[\"gener\",\"febrer\",\"març\",\"abril\",\"maig\",\"juny\",\"juliol\",\"agost\",\"setembre\",\"octubre\",\"novembre\",\"desembre\"],monthNamesShort:[\"gen\",\"feb\",\"març\",\"abr\",\"maig\",\"juny\",\"jul\",\"ag\",\"set\",\"oct\",\"nov\",\"des\"],dayNames:[\"diumenge\",\"dilluns\",\"dimarts\",\"dimecres\",\"dijous\",\"divendres\",\"dissabte\"],dayNamesShort:[\"dg\",\"dl\",\"dt\",\"dc\",\"dj\",\"dv\",\"ds\"],dayNamesMin:[\"dg\",\"dl\",\"dt\",\"dc\",\"dj\",\"dv\",\"ds\"],weekHeader:\"Set\",dateFormat:\"dd/mm/yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),a.fullCalendar.lang(\"ca\",{buttonText:{month:\"Mes\",week:\"Setmana\",day:\"Dia\",list:\"Agenda\"},allDayText:\"Tot el dia\",eventLimitText:\"més\"})}(),function(){function c(a){return a>1&&5>a&&1!==~~(a/10)}function d(a,b,d,e){var f=a+\" \";switch(d){case\"s\":return b||e?\"pár sekund\":\"pár sekundami\";case\"m\":return b?\"minuta\":e?\"minutu\":\"minutou\";case\"mm\":return b||e?f+(c(a)?\"minuty\":\"minut\"):f+\"minutami\";case\"h\":return b?\"hodina\":e?\"hodinu\":\"hodinou\";case\"hh\":return b||e?f+(c(a)?\"hodiny\":\"hodin\"):f+\"hodinami\";case\"d\":return b||e?\"den\":\"dnem\";case\"dd\":return b||e?f+(c(a)?\"dny\":\"dní\"):f+\"dny\";case\"M\":return b||e?\"měsíc\":\"měsícem\";case\"MM\":return b||e?f+(c(a)?\"měsíce\":\"měsíců\"):f+\"měsíci\";case\"y\":return b||e?\"rok\":\"rokem\";case\"yy\":return b||e?f+(c(a)?\"roky\":\"let\"):f+\"lety\"}}var e=\"leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec\".split(\"_\"),f=\"led_úno_bře_dub_kvě_čvn_čvc_srp_zář_říj_lis_pro\".split(\"_\");(b.defineLocale||b.lang).call(b,\"cs\",{months:e,monthsShort:f,monthsParse:function(a,b){var c,d=[];for(c=0;12>c;c++)d[c]=new RegExp(\"^\"+a[c]+\"$|^\"+b[c]+\"$\",\"i\");return d}(e,f),weekdays:\"neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota\".split(\"_\"),weekdaysShort:\"ne_po_út_st_čt_pá_so\".split(\"_\"),weekdaysMin:\"ne_po_út_st_čt_pá_so\".split(\"_\"),longDateFormat:{LT:\"H:mm\",LTS:\"LT:ss\",L:\"DD.MM.YYYY\",LL:\"D. MMMM YYYY\",LLL:\"D. MMMM YYYY LT\",LLLL:\"dddd D. MMMM YYYY LT\"},calendar:{sameDay:\"[dnes v] LT\",nextDay:\"[zítra v] LT\",nextWeek:function(){switch(this.day()){case 0:return\"[v neděli v] LT\";case 1:case 2:return\"[v] dddd [v] LT\";case 3:return\"[ve středu v] LT\";case 4:return\"[ve čtvrtek v] LT\";case 5:return\"[v pátek v] LT\";case 6:return\"[v sobotu v] LT\"}},lastDay:\"[včera v] LT\",lastWeek:function(){switch(this.day()){case 0:return\"[minulou neděli v] LT\";case 1:case 2:return\"[minulé] dddd [v] LT\";case 3:return\"[minulou středu v] LT\";case 4:case 5:return\"[minulý] dddd [v] LT\";case 6:return\"[minulou sobotu v] LT\"}},sameElse:\"L\"},relativeTime:{future:\"za %s\",past:\"před %s\",s:d,m:d,mm:d,h:d,hh:d,d:d,dd:d,M:d,MM:d,y:d,yy:d},ordinalParse:/\\d{1,2}\\./,ordinal:\"%d.\",week:{dow:1,doy:4}}),a.fullCalendar.datepickerLang(\"cs\",\"cs\",{closeText:\"Zavřít\",prevText:\"&#x3C;Dříve\",nextText:\"Později&#x3E;\",currentText:\"Nyní\",monthNames:[\"leden\",\"únor\",\"březen\",\"duben\",\"květen\",\"červen\",\"červenec\",\"srpen\",\"září\",\"říjen\",\"listopad\",\"prosinec\"],monthNamesShort:[\"led\",\"úno\",\"bře\",\"dub\",\"kvě\",\"čer\",\"čvc\",\"srp\",\"zář\",\"říj\",\"lis\",\"pro\"],dayNames:[\"neděle\",\"pondělí\",\"úterý\",\"středa\",\"čtvrtek\",\"pátek\",\"sobota\"],dayNamesShort:[\"ne\",\"po\",\"út\",\"st\",\"čt\",\"pá\",\"so\"],dayNamesMin:[\"ne\",\"po\",\"út\",\"st\",\"čt\",\"pá\",\"so\"],weekHeader:\"Týd\",dateFormat:\"dd.mm.yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),a.fullCalendar.lang(\"cs\",{buttonText:{month:\"Měsíc\",week:\"Týden\",day:\"Den\",list:\"Agenda\"},allDayText:\"Celý den\",eventLimitText:function(a){return\"+další: \"+a}})}(),function(){(b.defineLocale||b.lang).call(b,\"da\",{months:\"januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december\".split(\"_\"),monthsShort:\"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec\".split(\"_\"),weekdays:\"søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag\".split(\"_\"),weekdaysShort:\"søn_man_tir_ons_tor_fre_lør\".split(\"_\"),weekdaysMin:\"sø_ma_ti_on_to_fr_lø\".split(\"_\"),longDateFormat:{LT:\"HH:mm\",LTS:\"LT:ss\",L:\"DD/MM/YYYY\",LL:\"D. MMMM YYYY\",LLL:\"D. MMMM YYYY LT\",LLLL:\"dddd [d.] D. MMMM YYYY LT\"},calendar:{sameDay:\"[I dag kl.] LT\",nextDay:\"[I morgen kl.] LT\",nextWeek:\"dddd [kl.] LT\",lastDay:\"[I går kl.] LT\",lastWeek:\"[sidste] dddd [kl] LT\",sameElse:\"L\"},relativeTime:{future:\"om %s\",past:\"%s siden\",s:\"få sekunder\",m:\"et minut\",mm:\"%d minutter\",h:\"en time\",hh:\"%d timer\",d:\"en dag\",dd:\"%d dage\",M:\"en måned\",MM:\"%d måneder\",y:\"et år\",yy:\"%d år\"},ordinalParse:/\\d{1,2}\\./,ordinal:\"%d.\",week:{dow:1,doy:4}}),a.fullCalendar.datepickerLang(\"da\",\"da\",{closeText:\"Luk\",prevText:\"&#x3C;Forrige\",nextText:\"Næste&#x3E;\",currentText:\"Idag\",monthNames:[\"Januar\",\"Februar\",\"Marts\",\"April\",\"Maj\",\"Juni\",\"Juli\",\"August\",\"September\",\"Oktober\",\"November\",\"December\"],monthNamesShort:[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"Maj\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Okt\",\"Nov\",\"Dec\"],dayNames:[\"Søndag\",\"Mandag\",\"Tirsdag\",\"Onsdag\",\"Torsdag\",\"Fredag\",\"Lørdag\"],dayNamesShort:[\"Søn\",\"Man\",\"Tir\",\"Ons\",\"Tor\",\"Fre\",\"Lør\"],dayNamesMin:[\"Sø\",\"Ma\",\"Ti\",\"On\",\"To\",\"Fr\",\"Lø\"],weekHeader:\"Uge\",dateFormat:\"dd-mm-yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),a.fullCalendar.lang(\"da\",{buttonText:{month:\"Måned\",week:\"Uge\",day:\"Dag\",list:\"Agenda\"},allDayText:\"Hele dagen\",eventLimitText:\"flere\"})}(),function(){function c(a,b,c,d){var e={m:[\"eine Minute\",\"einer Minute\"],h:[\"eine Stunde\",\"einer Stunde\"],d:[\"ein Tag\",\"einem Tag\"],dd:[a+\" Tage\",a+\" Tagen\"],M:[\"ein Monat\",\"einem Monat\"],MM:[a+\" Monate\",a+\" Monaten\"],y:[\"ein Jahr\",\"einem Jahr\"],yy:[a+\" Jahre\",a+\" Jahren\"]};return b?e[c][0]:e[c][1]}(b.defineLocale||b.lang).call(b,\"de-at\",{months:\"Jänner_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember\".split(\"_\"),monthsShort:\"Jän._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.\".split(\"_\"),weekdays:\"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag\".split(\"_\"),weekdaysShort:\"So._Mo._Di._Mi._Do._Fr._Sa.\".split(\"_\"),weekdaysMin:\"So_Mo_Di_Mi_Do_Fr_Sa\".split(\"_\"),longDateFormat:{LT:\"HH:mm\",LTS:\"HH:mm:ss\",L:\"DD.MM.YYYY\",LL:\"D. MMMM YYYY\",LLL:\"D. MMMM YYYY LT\",LLLL:\"dddd, D. MMMM YYYY LT\"},calendar:{sameDay:\"[Heute um] LT [Uhr]\",sameElse:\"L\",nextDay:\"[Morgen um] LT [Uhr]\",nextWeek:\"dddd [um] LT [Uhr]\",lastDay:\"[Gestern um] LT [Uhr]\",lastWeek:\"[letzten] dddd [um] LT [Uhr]\"},relativeTime:{future:\"in %s\",past:\"vor %s\",s:\"ein paar Sekunden\",m:c,mm:\"%d Minuten\",h:c,hh:\"%d Stunden\",d:c,dd:c,M:c,MM:c,y:c,yy:c},ordinalParse:/\\d{1,2}\\./,ordinal:\"%d.\",week:{dow:1,doy:4}}),a.fullCalendar.datepickerLang(\"de-at\",\"de\",{closeText:\"Schließen\",prevText:\"&#x3C;Zurück\",nextText:\"Vor&#x3E;\",currentText:\"Heute\",monthNames:[\"Januar\",\"Februar\",\"März\",\"April\",\"Mai\",\"Juni\",\"Juli\",\"August\",\"September\",\"Oktober\",\"November\",\"Dezember\"],monthNamesShort:[\"Jan\",\"Feb\",\"Mär\",\"Apr\",\"Mai\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Okt\",\"Nov\",\"Dez\"],dayNames:[\"Sonntag\",\"Montag\",\"Dienstag\",\"Mittwoch\",\"Donnerstag\",\"Freitag\",\"Samstag\"],dayNamesShort:[\"So\",\"Mo\",\"Di\",\"Mi\",\"Do\",\"Fr\",\"Sa\"],dayNamesMin:[\"So\",\"Mo\",\"Di\",\"Mi\",\"Do\",\"Fr\",\"Sa\"],weekHeader:\"KW\",dateFormat:\"dd.mm.yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),a.fullCalendar.lang(\"de-at\",{buttonText:{month:\"Monat\",week:\"Woche\",day:\"Tag\",list:\"Terminübersicht\"},allDayText:\"Ganztägig\",eventLimitText:function(a){return\"+ weitere \"+a}})}(),function(){function c(a,b,c,d){var e={m:[\"eine Minute\",\"einer Minute\"],h:[\"eine Stunde\",\"einer Stunde\"],d:[\"ein Tag\",\"einem Tag\"],dd:[a+\" Tage\",a+\" Tagen\"],M:[\"ein Monat\",\"einem Monat\"],MM:[a+\" Monate\",a+\" Monaten\"],y:[\"ein Jahr\",\"einem Jahr\"],yy:[a+\" Jahre\",a+\" Jahren\"]};return b?e[c][0]:e[c][1]}(b.defineLocale||b.lang).call(b,\"de\",{months:\"Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember\".split(\"_\"),monthsShort:\"Jan._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.\".split(\"_\"),weekdays:\"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag\".split(\"_\"),weekdaysShort:\"So._Mo._Di._Mi._Do._Fr._Sa.\".split(\"_\"),weekdaysMin:\"So_Mo_Di_Mi_Do_Fr_Sa\".split(\"_\"),longDateFormat:{LT:\"HH:mm\",LTS:\"HH:mm:ss\",L:\"DD.MM.YYYY\",LL:\"D. MMMM YYYY\",LLL:\"D. MMMM YYYY LT\",LLLL:\"dddd, D. MMMM YYYY LT\"},calendar:{sameDay:\"[Heute um] LT [Uhr]\",sameElse:\"L\",nextDay:\"[Morgen um] LT [Uhr]\",nextWeek:\"dddd [um] LT [Uhr]\",lastDay:\"[Gestern um] LT [Uhr]\",lastWeek:\"[letzten] dddd [um] LT [Uhr]\"},relativeTime:{future:\"in %s\",past:\"vor %s\",s:\"ein paar Sekunden\",m:c,mm:\"%d Minuten\",h:c,hh:\"%d Stunden\",d:c,dd:c,M:c,MM:c,y:c,yy:c},ordinalParse:/\\d{1,2}\\./,ordinal:\"%d.\",week:{dow:1,doy:4}}),a.fullCalendar.datepickerLang(\"de\",\"de\",{closeText:\"Schließen\",prevText:\"&#x3C;Zurück\",nextText:\"Vor&#x3E;\",currentText:\"Heute\",monthNames:[\"Januar\",\"Februar\",\"März\",\"April\",\"Mai\",\"Juni\",\"Juli\",\"August\",\"September\",\"Oktober\",\"November\",\"Dezember\"],monthNamesShort:[\"Jan\",\"Feb\",\"Mär\",\"Apr\",\"Mai\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Okt\",\"Nov\",\"Dez\"],dayNames:[\"Sonntag\",\"Montag\",\"Dienstag\",\"Mittwoch\",\"Donnerstag\",\"Freitag\",\"Samstag\"],dayNamesShort:[\"So\",\"Mo\",\"Di\",\"Mi\",\"Do\",\"Fr\",\"Sa\"],dayNamesMin:[\"So\",\"Mo\",\"Di\",\"Mi\",\"Do\",\"Fr\",\"Sa\"],weekHeader:\"KW\",dateFormat:\"dd.mm.yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),a.fullCalendar.lang(\"de\",{buttonText:{month:\"Monat\",week:\"Woche\",day:\"Tag\",list:\"Terminübersicht\"},allDayText:\"Ganztägig\",eventLimitText:function(a){return\"+ weitere \"+a}})}(),function(){(b.defineLocale||b.lang).call(b,\"el\",{monthsNominativeEl:\"Ιανουάριος_Φεβρουάριος_Μάρτιος_Απρίλιος_Μάιος_Ιούνιος_Ιούλιος_Αύγουστος_Σεπτέμβριος_Οκτώβριος_Νοέμβριος_Δεκέμβριος\".split(\"_\"),monthsGenitiveEl:\"Ιανουαρίου_Φεβρουαρίου_Μαρτίου_Απριλίου_Μαΐου_Ιουνίου_Ιουλίου_Αυγούστου_Σεπτεμβρίου_Οκτωβρίου_Νοεμβρίου_Δεκεμβρίου\".split(\"_\"),months:function(a,b){return/D/.test(b.substring(0,b.indexOf(\"MMMM\")))?this._monthsGenitiveEl[a.month()]:this._monthsNominativeEl[a.month()]},monthsShort:\"Ιαν_Φεβ_Μαρ_Απρ_Μαϊ_Ιουν_Ιουλ_Αυγ_Σεπ_Οκτ_Νοε_Δεκ\".split(\"_\"),weekdays:\"Κυριακή_Δευτέρα_Τρίτη_Τετάρτη_Πέμπτη_Παρασκευή_Σάββατο\".split(\"_\"),weekdaysShort:\"Κυρ_Δευ_Τρι_Τετ_Πεμ_Παρ_Σαβ\".split(\"_\"),weekdaysMin:\"Κυ_Δε_Τρ_Τε_Πε_Πα_Σα\".split(\"_\"),meridiem:function(a,b,c){return a>11?c?\"μμ\":\"ΜΜ\":c?\"πμ\":\"ΠΜ\"},isPM:function(a){return\"μ\"===(a+\"\").toLowerCase()[0]},meridiemParse:/[ΠΜ]\\.?Μ?\\.?/i,longDateFormat:{LT:\"h:mm A\",LTS:\"h:mm:ss A\",L:\"DD/MM/YYYY\",LL:\"D MMMM YYYY\",LLL:\"D MMMM YYYY LT\",LLLL:\"dddd, D MMMM YYYY LT\"},calendarEl:{sameDay:\"[Σήμερα {}] LT\",nextDay:\"[Αύριο {}] LT\",nextWeek:\"dddd [{}] LT\",lastDay:\"[Χθες {}] LT\",lastWeek:function(){switch(this.day()){case 6:return\"[το προηγούμενο] dddd [{}] LT\";default:return\"[την προηγούμενη] dddd [{}] LT\"}},sameElse:\"L\"},calendar:function(a,b){var c=this._calendarEl[a],d=b&&b.hours();return\"function\"==typeof c&&(c=c.apply(b)),c.replace(\"{}\",d%12===1?\"στη\":\"στις\")},relativeTime:{future:\"σε %s\",past:\"%s πριν\",s:\"λίγα δευτερόλεπτα\",m:\"ένα λεπτό\",mm:\"%d λεπτά\",h:\"μία ώρα\",hh:\"%d ώρες\",d:\"μία μέρα\",dd:\"%d μέρες\",M:\"ένας μήνας\",MM:\"%d μήνες\",y:\"ένας χρόνος\",yy:\"%d χρόνια\"},ordinalParse:/\\d{1,2}η/,ordinal:\"%dη\",week:{dow:1,doy:4}}),a.fullCalendar.datepickerLang(\"el\",\"el\",{closeText:\"Κλείσιμο\",prevText:\"Προηγούμενος\",nextText:\"Επόμενος\",currentText:\"Σήμερα\",monthNames:[\"Ιανουάριος\",\"Φεβρουάριος\",\"Μάρτιος\",\"Απρίλιος\",\"Μάιος\",\"Ιούνιος\",\"Ιούλιος\",\"Αύγουστος\",\"Σεπτέμβριος\",\"Οκτώβριος\",\"Νοέμβριος\",\"Δεκέμβριος\"],monthNamesShort:[\"Ιαν\",\"Φεβ\",\"Μαρ\",\"Απρ\",\"Μαι\",\"Ιουν\",\"Ιουλ\",\"Αυγ\",\"Σεπ\",\"Οκτ\",\"Νοε\",\"Δεκ\"],dayNames:[\"Κυριακή\",\"Δευτέρα\",\"Τρίτη\",\"Τετάρτη\",\"Πέμπτη\",\"Παρασκευή\",\"Σάββατο\"],dayNamesShort:[\"Κυρ\",\"Δευ\",\"Τρι\",\"Τετ\",\"Πεμ\",\"Παρ\",\"Σαβ\"],dayNamesMin:[\"Κυ\",\"Δε\",\"Τρ\",\"Τε\",\"Πε\",\"Πα\",\"Σα\"],weekHeader:\"Εβδ\",dateFormat:\"dd/mm/yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),a.fullCalendar.lang(\"el\",{buttonText:{month:\"Μήνας\",week:\"Εβδομάδα\",day:\"Ημέρα\",list:\"Ατζέντα\"},allDayText:\"Ολοήμερο\",eventLimitText:\"περισσότερα\"})}(),function(){(b.defineLocale||b.lang).call(b,\"en-au\",{months:\"January_February_March_April_May_June_July_August_September_October_November_December\".split(\"_\"),monthsShort:\"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec\".split(\"_\"),weekdays:\"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday\".split(\"_\"),weekdaysShort:\"Sun_Mon_Tue_Wed_Thu_Fri_Sat\".split(\"_\"),weekdaysMin:\"Su_Mo_Tu_We_Th_Fr_Sa\".split(\"_\"),longDateFormat:{LT:\"h:mm A\",LTS:\"h:mm:ss A\",L:\"DD/MM/YYYY\",LL:\"D MMMM YYYY\",LLL:\"D MMMM YYYY LT\",LLLL:\"dddd, D MMMM YYYY LT\"},calendar:{sameDay:\"[Today at] LT\",nextDay:\"[Tomorrow at] LT\",nextWeek:\"dddd [at] LT\",lastDay:\"[Yesterday at] LT\",lastWeek:\"[Last] dddd [at] LT\",sameElse:\"L\"},relativeTime:{future:\"in %s\",past:\"%s ago\",s:\"a few seconds\",m:\"a minute\",mm:\"%d minutes\",h:\"an hour\",hh:\"%d hours\",d:\"a day\",dd:\"%d days\",M:\"a month\",MM:\"%d months\",y:\"a year\",yy:\"%d years\"},ordinalParse:/\\d{1,2}(st|nd|rd|th)/,ordinal:function(a){var b=a%10,c=1===~~(a%100/10)?\"th\":1===b?\"st\":2===b?\"nd\":3===b?\"rd\":\"th\";return a+c},week:{dow:1,doy:4}}),a.fullCalendar.datepickerLang(\"en-au\",\"en-AU\",{closeText:\"Done\",prevText:\"Prev\",nextText:\"Next\",currentText:\"Today\",monthNames:[\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"],monthNamesShort:[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"],dayNames:[\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"],dayNamesShort:[\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"],dayNamesMin:[\"Su\",\"Mo\",\"Tu\",\"We\",\"Th\",\"Fr\",\"Sa\"],weekHeader:\"Wk\",dateFormat:\"dd/mm/yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),a.fullCalendar.lang(\"en-au\")}(),function(){(b.defineLocale||b.lang).call(b,\"en-ca\",{months:\"January_February_March_April_May_June_July_August_September_October_November_December\".split(\"_\"),monthsShort:\"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec\".split(\"_\"),weekdays:\"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday\".split(\"_\"),weekdaysShort:\"Sun_Mon_Tue_Wed_Thu_Fri_Sat\".split(\"_\"),weekdaysMin:\"Su_Mo_Tu_We_Th_Fr_Sa\".split(\"_\"),longDateFormat:{LT:\"h:mm A\",LTS:\"h:mm:ss A\",L:\"YYYY-MM-DD\",LL:\"D MMMM, YYYY\",LLL:\"D MMMM, YYYY LT\",LLLL:\"dddd, D MMMM, YYYY LT\"},calendar:{sameDay:\"[Today at] LT\",nextDay:\"[Tomorrow at] LT\",nextWeek:\"dddd [at] LT\",lastDay:\"[Yesterday at] LT\",lastWeek:\"[Last] dddd [at] LT\",sameElse:\"L\"},relativeTime:{future:\"in %s\",past:\"%s ago\",s:\"a few seconds\",m:\"a minute\",mm:\"%d minutes\",h:\"an hour\",hh:\"%d hours\",d:\"a day\",dd:\"%d days\",M:\"a month\",MM:\"%d months\",y:\"a year\",yy:\"%d years\"},ordinalParse:/\\d{1,2}(st|nd|rd|th)/,ordinal:function(a){var b=a%10,c=1===~~(a%100/10)?\"th\":1===b?\"st\":2===b?\"nd\":3===b?\"rd\":\"th\";return a+c}}),a.fullCalendar.lang(\"en-ca\")}(),function(){(b.defineLocale||b.lang).call(b,\"en-gb\",{months:\"January_February_March_April_May_June_July_August_September_October_November_December\".split(\"_\"),monthsShort:\"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec\".split(\"_\"),weekdays:\"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday\".split(\"_\"),weekdaysShort:\"Sun_Mon_Tue_Wed_Thu_Fri_Sat\".split(\"_\"),weekdaysMin:\"Su_Mo_Tu_We_Th_Fr_Sa\".split(\"_\"),longDateFormat:{LT:\"HH:mm\",LTS:\"HH:mm:ss\",L:\"DD/MM/YYYY\",LL:\"D MMMM YYYY\",LLL:\"D MMMM YYYY LT\",LLLL:\"dddd, D MMMM YYYY LT\"},calendar:{sameDay:\"[Today at] LT\",nextDay:\"[Tomorrow at] LT\",nextWeek:\"dddd [at] LT\",lastDay:\"[Yesterday at] LT\",lastWeek:\"[Last] dddd [at] LT\",sameElse:\"L\"},relativeTime:{future:\"in %s\",past:\"%s ago\",s:\"a few seconds\",m:\"a minute\",mm:\"%d minutes\",h:\"an hour\",hh:\"%d hours\",d:\"a day\",dd:\"%d days\",M:\"a month\",MM:\"%d months\",y:\"a year\",yy:\"%d years\"},ordinalParse:/\\d{1,2}(st|nd|rd|th)/,ordinal:function(a){var b=a%10,c=1===~~(a%100/10)?\"th\":1===b?\"st\":2===b?\"nd\":3===b?\"rd\":\"th\";return a+c},week:{dow:1,doy:4}}),a.fullCalendar.datepickerLang(\"en-gb\",\"en-GB\",{closeText:\"Done\",prevText:\"Prev\",nextText:\"Next\",currentText:\"Today\",monthNames:[\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"],monthNamesShort:[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"],dayNames:[\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"],dayNamesShort:[\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"],dayNamesMin:[\"Su\",\"Mo\",\"Tu\",\"We\",\"Th\",\"Fr\",\"Sa\"],weekHeader:\"Wk\",dateFormat:\"dd/mm/yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),a.fullCalendar.lang(\"en-gb\")}(),function(){var c=\"ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.\".split(\"_\"),d=\"ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic\".split(\"_\");(b.defineLocale||b.lang).call(b,\"es\",{months:\"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre\".split(\"_\"),monthsShort:function(a,b){return/-MMM-/.test(b)?d[a.month()]:c[a.month()]},weekdays:\"domingo_lunes_martes_miércoles_jueves_viernes_sábado\".split(\"_\"),weekdaysShort:\"dom._lun._mar._mié._jue._vie._sáb.\".split(\"_\"),weekdaysMin:\"Do_Lu_Ma_Mi_Ju_Vi_Sá\".split(\"_\"),longDateFormat:{LT:\"H:mm\",LTS:\"LT:ss\",L:\"DD/MM/YYYY\",LL:\"D [de] MMMM [de] YYYY\",LLL:\"D [de] MMMM [de] YYYY LT\",LLLL:\"dddd, D [de] MMMM [de] YYYY LT\"},calendar:{sameDay:function(){return\"[hoy a la\"+(1!==this.hours()?\"s\":\"\")+\"] LT\"},nextDay:function(){return\"[mañana a la\"+(1!==this.hours()?\"s\":\"\")+\"] LT\"},nextWeek:function(){return\"dddd [a la\"+(1!==this.hours()?\"s\":\"\")+\"] LT\"},lastDay:function(){return\"[ayer a la\"+(1!==this.hours()?\"s\":\"\")+\"] LT\"},lastWeek:function(){return\"[el] dddd [pasado a la\"+(1!==this.hours()?\"s\":\"\")+\"] LT\"},sameElse:\"L\"},relativeTime:{future:\"en %s\",past:\"hace %s\",s:\"unos segundos\",m:\"un minuto\",mm:\"%d minutos\",h:\"una hora\",hh:\"%d horas\",d:\"un día\",dd:\"%d días\",M:\"un mes\",MM:\"%d meses\",y:\"un año\",yy:\"%d años\"},ordinalParse:/\\d{1,2}º/,ordinal:\"%dº\",week:{dow:1,doy:4}}),a.fullCalendar.datepickerLang(\"es\",\"es\",{closeText:\"Cerrar\",prevText:\"&#x3C;Ant\",nextText:\"Sig&#x3E;\",currentText:\"Hoy\",monthNames:[\"enero\",\"febrero\",\"marzo\",\"abril\",\"mayo\",\"junio\",\"julio\",\"agosto\",\"septiembre\",\"octubre\",\"noviembre\",\"diciembre\"],monthNamesShort:[\"ene\",\"feb\",\"mar\",\"abr\",\"may\",\"jun\",\"jul\",\"ago\",\"sep\",\"oct\",\"nov\",\"dic\"],dayNames:[\"domingo\",\"lunes\",\"martes\",\"miércoles\",\"jueves\",\"viernes\",\"sábado\"],dayNamesShort:[\"dom\",\"lun\",\"mar\",\"mié\",\"jue\",\"vie\",\"sáb\"],dayNamesMin:[\"D\",\"L\",\"M\",\"X\",\"J\",\"V\",\"S\"],weekHeader:\"Sm\",dateFormat:\"dd/mm/yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),a.fullCalendar.lang(\"es\",{buttonText:{month:\"Mes\",week:\"Semana\",day:\"Día\",list:\"Agenda\"},allDayHtml:\"Todo<br/>el día\",eventLimitText:\"más\"})}(),function(){var c={1:\"۱\",2:\"۲\",3:\"۳\",4:\"۴\",5:\"۵\",6:\"۶\",7:\"۷\",8:\"۸\",9:\"۹\",0:\"۰\"},d={\"۱\":\"1\",\"۲\":\"2\",\"۳\":\"3\",\"۴\":\"4\",\"۵\":\"5\",\"۶\":\"6\",\"۷\":\"7\",\"۸\":\"8\",\"۹\":\"9\",\"۰\":\"0\"};(b.defineLocale||b.lang).call(b,\"fa\",{months:\"ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر\".split(\"_\"),monthsShort:\"ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر\".split(\"_\"),weekdays:\"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه\".split(\"_\"),weekdaysShort:\"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه\".split(\"_\"),weekdaysMin:\"ی_د_س_چ_پ_ج_ش\".split(\"_\"),longDateFormat:{LT:\"HH:mm\",LTS:\"LT:ss\",L:\"DD/MM/YYYY\",LL:\"D MMMM YYYY\",LLL:\"D MMMM YYYY LT\",LLLL:\"dddd, D MMMM YYYY LT\"},meridiemParse:/قبل از ظهر|بعد از ظهر/,isPM:function(a){return/بعد از ظهر/.test(a)},meridiem:function(a,b,c){return 12>a?\"قبل از ظهر\":\"بعد از ظهر\"},calendar:{sameDay:\"[امروز ساعت] LT\",nextDay:\"[فردا ساعت] LT\",nextWeek:\"dddd [ساعت] LT\",lastDay:\"[دیروز ساعت] LT\",lastWeek:\"dddd [پیش] [ساعت] LT\",sameElse:\"L\"},relativeTime:{future:\"در %s\",past:\"%s پیش\",s:\"چندین ثانیه\",m:\"یک دقیقه\",mm:\"%d دقیقه\",h:\"یک ساعت\",hh:\"%d ساعت\",d:\"یک روز\",dd:\"%d روز\",M:\"یک ماه\",MM:\"%d ماه\",y:\"یک سال\",yy:\"%d سال\"},preparse:function(a){return a.replace(/[۰-۹]/g,function(a){return d[a]}).replace(/،/g,\",\")},postformat:function(a){return a.replace(/\\d/g,function(a){return c[a]}).replace(/,/g,\"،\")},ordinalParse:/\\d{1,2}م/,ordinal:\"%dم\",week:{dow:6,doy:12}}),a.fullCalendar.datepickerLang(\"fa\",\"fa\",{closeText:\"بستن\",prevText:\"&#x3C;قبلی\",nextText:\"بعدی&#x3E;\",currentText:\"امروز\",monthNames:[\"ژانویه\",\"فوریه\",\"مارس\",\"آوریل\",\"مه\",\"ژوئن\",\"ژوئیه\",\"اوت\",\"سپتامبر\",\"اکتبر\",\"نوامبر\",\"دسامبر\"],monthNamesShort:[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\"],dayNames:[\"يکشنبه\",\"دوشنبه\",\"سه‌شنبه\",\"چهارشنبه\",\"پنجشنبه\",\"جمعه\",\"شنبه\"],dayNamesShort:[\"ی\",\"د\",\"س\",\"چ\",\"پ\",\"ج\",\"ش\"],dayNamesMin:[\"ی\",\"د\",\"س\",\"چ\",\"پ\",\"ج\",\"ش\"],weekHeader:\"هف\",dateFormat:\"yy/mm/dd\",firstDay:6,isRTL:!0,showMonthAfterYear:!1,yearSuffix:\"\"}),a.fullCalendar.lang(\"fa\",{buttonText:{month:\"ماه\",week:\"هفته\",day:\"روز\",list:\"برنامه\"\n},allDayText:\"تمام روز\",eventLimitText:function(a){return\"بیش از \"+a}})}(),function(){function c(a,b,c,e){var f=\"\";switch(c){case\"s\":return e?\"muutaman sekunnin\":\"muutama sekunti\";case\"m\":return e?\"minuutin\":\"minuutti\";case\"mm\":f=e?\"minuutin\":\"minuuttia\";break;case\"h\":return e?\"tunnin\":\"tunti\";case\"hh\":f=e?\"tunnin\":\"tuntia\";break;case\"d\":return e?\"päivän\":\"päivä\";case\"dd\":f=e?\"päivän\":\"päivää\";break;case\"M\":return e?\"kuukauden\":\"kuukausi\";case\"MM\":f=e?\"kuukauden\":\"kuukautta\";break;case\"y\":return e?\"vuoden\":\"vuosi\";case\"yy\":f=e?\"vuoden\":\"vuotta\"}return f=d(a,e)+\" \"+f}function d(a,b){return 10>a?b?f[a]:e[a]:a}var e=\"nolla yksi kaksi kolme neljä viisi kuusi seitsemän kahdeksan yhdeksän\".split(\" \"),f=[\"nolla\",\"yhden\",\"kahden\",\"kolmen\",\"neljän\",\"viiden\",\"kuuden\",e[7],e[8],e[9]];(b.defineLocale||b.lang).call(b,\"fi\",{months:\"tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesäkuu_heinäkuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu\".split(\"_\"),monthsShort:\"tammi_helmi_maalis_huhti_touko_kesä_heinä_elo_syys_loka_marras_joulu\".split(\"_\"),weekdays:\"sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai\".split(\"_\"),weekdaysShort:\"su_ma_ti_ke_to_pe_la\".split(\"_\"),weekdaysMin:\"su_ma_ti_ke_to_pe_la\".split(\"_\"),longDateFormat:{LT:\"HH.mm\",LTS:\"HH.mm.ss\",L:\"DD.MM.YYYY\",LL:\"Do MMMM[ta] YYYY\",LLL:\"Do MMMM[ta] YYYY, [klo] LT\",LLLL:\"dddd, Do MMMM[ta] YYYY, [klo] LT\",l:\"D.M.YYYY\",ll:\"Do MMM YYYY\",lll:\"Do MMM YYYY, [klo] LT\",llll:\"ddd, Do MMM YYYY, [klo] LT\"},calendar:{sameDay:\"[tänään] [klo] LT\",nextDay:\"[huomenna] [klo] LT\",nextWeek:\"dddd [klo] LT\",lastDay:\"[eilen] [klo] LT\",lastWeek:\"[viime] dddd[na] [klo] LT\",sameElse:\"L\"},relativeTime:{future:\"%s päästä\",past:\"%s sitten\",s:c,m:c,mm:c,h:c,hh:c,d:c,dd:c,M:c,MM:c,y:c,yy:c},ordinalParse:/\\d{1,2}\\./,ordinal:\"%d.\",week:{dow:1,doy:4}}),a.fullCalendar.datepickerLang(\"fi\",\"fi\",{closeText:\"Sulje\",prevText:\"&#xAB;Edellinen\",nextText:\"Seuraava&#xBB;\",currentText:\"Tänään\",monthNames:[\"Tammikuu\",\"Helmikuu\",\"Maaliskuu\",\"Huhtikuu\",\"Toukokuu\",\"Kesäkuu\",\"Heinäkuu\",\"Elokuu\",\"Syyskuu\",\"Lokakuu\",\"Marraskuu\",\"Joulukuu\"],monthNamesShort:[\"Tammi\",\"Helmi\",\"Maalis\",\"Huhti\",\"Touko\",\"Kesä\",\"Heinä\",\"Elo\",\"Syys\",\"Loka\",\"Marras\",\"Joulu\"],dayNamesShort:[\"Su\",\"Ma\",\"Ti\",\"Ke\",\"To\",\"Pe\",\"La\"],dayNames:[\"Sunnuntai\",\"Maanantai\",\"Tiistai\",\"Keskiviikko\",\"Torstai\",\"Perjantai\",\"Lauantai\"],dayNamesMin:[\"Su\",\"Ma\",\"Ti\",\"Ke\",\"To\",\"Pe\",\"La\"],weekHeader:\"Vk\",dateFormat:\"d.m.yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),a.fullCalendar.lang(\"fi\",{buttonText:{month:\"Kuukausi\",week:\"Viikko\",day:\"Päivä\",list:\"Tapahtumat\"},allDayText:\"Koko päivä\",eventLimitText:\"lisää\"})}(),function(){(b.defineLocale||b.lang).call(b,\"fr-ca\",{months:\"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre\".split(\"_\"),monthsShort:\"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.\".split(\"_\"),weekdays:\"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi\".split(\"_\"),weekdaysShort:\"dim._lun._mar._mer._jeu._ven._sam.\".split(\"_\"),weekdaysMin:\"Di_Lu_Ma_Me_Je_Ve_Sa\".split(\"_\"),longDateFormat:{LT:\"HH:mm\",LTS:\"LT:ss\",L:\"YYYY-MM-DD\",LL:\"D MMMM YYYY\",LLL:\"D MMMM YYYY LT\",LLLL:\"dddd D MMMM YYYY LT\"},calendar:{sameDay:\"[Aujourd'hui à] LT\",nextDay:\"[Demain à] LT\",nextWeek:\"dddd [à] LT\",lastDay:\"[Hier à] LT\",lastWeek:\"dddd [dernier à] LT\",sameElse:\"L\"},relativeTime:{future:\"dans %s\",past:\"il y a %s\",s:\"quelques secondes\",m:\"une minute\",mm:\"%d minutes\",h:\"une heure\",hh:\"%d heures\",d:\"un jour\",dd:\"%d jours\",M:\"un mois\",MM:\"%d mois\",y:\"un an\",yy:\"%d ans\"},ordinalParse:/\\d{1,2}(er|)/,ordinal:function(a){return a+(1===a?\"er\":\"\")}}),a.fullCalendar.datepickerLang(\"fr-ca\",\"fr-CA\",{closeText:\"Fermer\",prevText:\"Précédent\",nextText:\"Suivant\",currentText:\"Aujourd'hui\",monthNames:[\"janvier\",\"février\",\"mars\",\"avril\",\"mai\",\"juin\",\"juillet\",\"août\",\"septembre\",\"octobre\",\"novembre\",\"décembre\"],monthNamesShort:[\"janv.\",\"févr.\",\"mars\",\"avril\",\"mai\",\"juin\",\"juil.\",\"août\",\"sept.\",\"oct.\",\"nov.\",\"déc.\"],dayNames:[\"dimanche\",\"lundi\",\"mardi\",\"mercredi\",\"jeudi\",\"vendredi\",\"samedi\"],dayNamesShort:[\"dim.\",\"lun.\",\"mar.\",\"mer.\",\"jeu.\",\"ven.\",\"sam.\"],dayNamesMin:[\"D\",\"L\",\"M\",\"M\",\"J\",\"V\",\"S\"],weekHeader:\"Sem.\",dateFormat:\"yy-mm-dd\",firstDay:0,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),a.fullCalendar.lang(\"fr-ca\",{buttonText:{month:\"Mois\",week:\"Semaine\",day:\"Jour\",list:\"Mon planning\"},allDayHtml:\"Toute la<br/>journée\",eventLimitText:\"en plus\"})}(),function(){(b.defineLocale||b.lang).call(b,\"fr\",{months:\"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre\".split(\"_\"),monthsShort:\"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.\".split(\"_\"),weekdays:\"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi\".split(\"_\"),weekdaysShort:\"dim._lun._mar._mer._jeu._ven._sam.\".split(\"_\"),weekdaysMin:\"Di_Lu_Ma_Me_Je_Ve_Sa\".split(\"_\"),longDateFormat:{LT:\"HH:mm\",LTS:\"LT:ss\",L:\"DD/MM/YYYY\",LL:\"D MMMM YYYY\",LLL:\"D MMMM YYYY LT\",LLLL:\"dddd D MMMM YYYY LT\"},calendar:{sameDay:\"[Aujourd'hui à] LT\",nextDay:\"[Demain à] LT\",nextWeek:\"dddd [à] LT\",lastDay:\"[Hier à] LT\",lastWeek:\"dddd [dernier à] LT\",sameElse:\"L\"},relativeTime:{future:\"dans %s\",past:\"il y a %s\",s:\"quelques secondes\",m:\"une minute\",mm:\"%d minutes\",h:\"une heure\",hh:\"%d heures\",d:\"un jour\",dd:\"%d jours\",M:\"un mois\",MM:\"%d mois\",y:\"un an\",yy:\"%d ans\"},ordinalParse:/\\d{1,2}(er|)/,ordinal:function(a){return a+(1===a?\"er\":\"\")},week:{dow:1,doy:4}}),a.fullCalendar.datepickerLang(\"fr\",\"fr\",{closeText:\"Fermer\",prevText:\"Précédent\",nextText:\"Suivant\",currentText:\"Aujourd'hui\",monthNames:[\"janvier\",\"février\",\"mars\",\"avril\",\"mai\",\"juin\",\"juillet\",\"août\",\"septembre\",\"octobre\",\"novembre\",\"décembre\"],monthNamesShort:[\"janv.\",\"févr.\",\"mars\",\"avr.\",\"mai\",\"juin\",\"juil.\",\"août\",\"sept.\",\"oct.\",\"nov.\",\"déc.\"],dayNames:[\"dimanche\",\"lundi\",\"mardi\",\"mercredi\",\"jeudi\",\"vendredi\",\"samedi\"],dayNamesShort:[\"dim.\",\"lun.\",\"mar.\",\"mer.\",\"jeu.\",\"ven.\",\"sam.\"],dayNamesMin:[\"D\",\"L\",\"M\",\"M\",\"J\",\"V\",\"S\"],weekHeader:\"Sem.\",dateFormat:\"dd/mm/yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),a.fullCalendar.lang(\"fr\",{buttonText:{month:\"Mois\",week:\"Semaine\",day:\"Jour\",list:\"Mon planning\"},allDayHtml:\"Toute la<br/>journée\",eventLimitText:\"en plus\"})}(),function(){(b.defineLocale||b.lang).call(b,\"he\",{months:\"ינואר_פברואר_מרץ_אפריל_מאי_יוני_יולי_אוגוסט_ספטמבר_אוקטובר_נובמבר_דצמבר\".split(\"_\"),monthsShort:\"ינו׳_פבר׳_מרץ_אפר׳_מאי_יוני_יולי_אוג׳_ספט׳_אוק׳_נוב׳_דצמ׳\".split(\"_\"),weekdays:\"ראשון_שני_שלישי_רביעי_חמישי_שישי_שבת\".split(\"_\"),weekdaysShort:\"א׳_ב׳_ג׳_ד׳_ה׳_ו׳_ש׳\".split(\"_\"),weekdaysMin:\"א_ב_ג_ד_ה_ו_ש\".split(\"_\"),longDateFormat:{LT:\"HH:mm\",LTS:\"LT:ss\",L:\"DD/MM/YYYY\",LL:\"D [ב]MMMM YYYY\",LLL:\"D [ב]MMMM YYYY LT\",LLLL:\"dddd, D [ב]MMMM YYYY LT\",l:\"D/M/YYYY\",ll:\"D MMM YYYY\",lll:\"D MMM YYYY LT\",llll:\"ddd, D MMM YYYY LT\"},calendar:{sameDay:\"[היום ב־]LT\",nextDay:\"[מחר ב־]LT\",nextWeek:\"dddd [בשעה] LT\",lastDay:\"[אתמול ב־]LT\",lastWeek:\"[ביום] dddd [האחרון בשעה] LT\",sameElse:\"L\"},relativeTime:{future:\"בעוד %s\",past:\"לפני %s\",s:\"מספר שניות\",m:\"דקה\",mm:\"%d דקות\",h:\"שעה\",hh:function(a){return 2===a?\"שעתיים\":a+\" שעות\"},d:\"יום\",dd:function(a){return 2===a?\"יומיים\":a+\" ימים\"},M:\"חודש\",MM:function(a){return 2===a?\"חודשיים\":a+\" חודשים\"},y:\"שנה\",yy:function(a){return 2===a?\"שנתיים\":a%10===0&&10!==a?a+\" שנה\":a+\" שנים\"}}}),a.fullCalendar.datepickerLang(\"he\",\"he\",{closeText:\"סגור\",prevText:\"&#x3C;הקודם\",nextText:\"הבא&#x3E;\",currentText:\"היום\",monthNames:[\"ינואר\",\"פברואר\",\"מרץ\",\"אפריל\",\"מאי\",\"יוני\",\"יולי\",\"אוגוסט\",\"ספטמבר\",\"אוקטובר\",\"נובמבר\",\"דצמבר\"],monthNamesShort:[\"ינו\",\"פבר\",\"מרץ\",\"אפר\",\"מאי\",\"יוני\",\"יולי\",\"אוג\",\"ספט\",\"אוק\",\"נוב\",\"דצמ\"],dayNames:[\"ראשון\",\"שני\",\"שלישי\",\"רביעי\",\"חמישי\",\"שישי\",\"שבת\"],dayNamesShort:[\"א'\",\"ב'\",\"ג'\",\"ד'\",\"ה'\",\"ו'\",\"שבת\"],dayNamesMin:[\"א'\",\"ב'\",\"ג'\",\"ד'\",\"ה'\",\"ו'\",\"שבת\"],weekHeader:\"Wk\",dateFormat:\"dd/mm/yy\",firstDay:0,isRTL:!0,showMonthAfterYear:!1,yearSuffix:\"\"}),a.fullCalendar.lang(\"he\",{defaultButtonText:{month:\"חודש\",week:\"שבוע\",day:\"יום\",list:\"סדר יום\"},weekNumberTitle:\"שבוע\",allDayText:\"כל היום\",eventLimitText:\"אחר\"})}(),function(){var c={1:\"१\",2:\"२\",3:\"३\",4:\"४\",5:\"५\",6:\"६\",7:\"७\",8:\"८\",9:\"९\",0:\"०\"},d={\"१\":\"1\",\"२\":\"2\",\"३\":\"3\",\"४\":\"4\",\"५\":\"5\",\"६\":\"6\",\"७\":\"7\",\"८\":\"8\",\"९\":\"9\",\"०\":\"0\"};(b.defineLocale||b.lang).call(b,\"hi\",{months:\"जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर\".split(\"_\"),monthsShort:\"जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.\".split(\"_\"),weekdays:\"रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार\".split(\"_\"),weekdaysShort:\"रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि\".split(\"_\"),weekdaysMin:\"र_सो_मं_बु_गु_शु_श\".split(\"_\"),longDateFormat:{LT:\"A h:mm बजे\",LTS:\"A h:mm:ss बजे\",L:\"DD/MM/YYYY\",LL:\"D MMMM YYYY\",LLL:\"D MMMM YYYY, LT\",LLLL:\"dddd, D MMMM YYYY, LT\"},calendar:{sameDay:\"[आज] LT\",nextDay:\"[कल] LT\",nextWeek:\"dddd, LT\",lastDay:\"[कल] LT\",lastWeek:\"[पिछले] dddd, LT\",sameElse:\"L\"},relativeTime:{future:\"%s में\",past:\"%s पहले\",s:\"कुछ ही क्षण\",m:\"एक मिनट\",mm:\"%d मिनट\",h:\"एक घंटा\",hh:\"%d घंटे\",d:\"एक दिन\",dd:\"%d दिन\",M:\"एक महीने\",MM:\"%d महीने\",y:\"एक वर्ष\",yy:\"%d वर्ष\"},preparse:function(a){return a.replace(/[१२३४५६७८९०]/g,function(a){return d[a]})},postformat:function(a){return a.replace(/\\d/g,function(a){return c[a]})},meridiemParse:/रात|सुबह|दोपहर|शाम/,meridiemHour:function(a,b){return 12===a&&(a=0),\"रात\"===b?4>a?a:a+12:\"सुबह\"===b?a:\"दोपहर\"===b?a>=10?a:a+12:\"शाम\"===b?a+12:void 0},meridiem:function(a,b,c){return 4>a?\"रात\":10>a?\"सुबह\":17>a?\"दोपहर\":20>a?\"शाम\":\"रात\"},week:{dow:0,doy:6}}),a.fullCalendar.datepickerLang(\"hi\",\"hi\",{closeText:\"बंद\",prevText:\"पिछला\",nextText:\"अगला\",currentText:\"आज\",monthNames:[\"जनवरी \",\"फरवरी\",\"मार्च\",\"अप्रेल\",\"मई\",\"जून\",\"जूलाई\",\"अगस्त \",\"सितम्बर\",\"अक्टूबर\",\"नवम्बर\",\"दिसम्बर\"],monthNamesShort:[\"जन\",\"फर\",\"मार्च\",\"अप्रेल\",\"मई\",\"जून\",\"जूलाई\",\"अग\",\"सित\",\"अक्ट\",\"नव\",\"दि\"],dayNames:[\"रविवार\",\"सोमवार\",\"मंगलवार\",\"बुधवार\",\"गुरुवार\",\"शुक्रवार\",\"शनिवार\"],dayNamesShort:[\"रवि\",\"सोम\",\"मंगल\",\"बुध\",\"गुरु\",\"शुक्र\",\"शनि\"],dayNamesMin:[\"रवि\",\"सोम\",\"मंगल\",\"बुध\",\"गुरु\",\"शुक्र\",\"शनि\"],weekHeader:\"हफ्ता\",dateFormat:\"dd/mm/yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),a.fullCalendar.lang(\"hi\",{buttonText:{month:\"महीना\",week:\"सप्ताह\",day:\"दिन\",list:\"कार्यसूची\"},allDayText:\"सभी दिन\",eventLimitText:function(a){return\"+अधिक \"+a}})}(),function(){function c(a,b,c){var d=a+\" \";switch(c){case\"m\":return b?\"jedna minuta\":\"jedne minute\";case\"mm\":return d+=1===a?\"minuta\":2===a||3===a||4===a?\"minute\":\"minuta\";case\"h\":return b?\"jedan sat\":\"jednog sata\";case\"hh\":return d+=1===a?\"sat\":2===a||3===a||4===a?\"sata\":\"sati\";case\"dd\":return d+=1===a?\"dan\":\"dana\";case\"MM\":return d+=1===a?\"mjesec\":2===a||3===a||4===a?\"mjeseca\":\"mjeseci\";case\"yy\":return d+=1===a?\"godina\":2===a||3===a||4===a?\"godine\":\"godina\"}}(b.defineLocale||b.lang).call(b,\"hr\",{months:\"sječanj_veljača_ožujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac\".split(\"_\"),monthsShort:\"sje._vel._ožu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.\".split(\"_\"),weekdays:\"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota\".split(\"_\"),weekdaysShort:\"ned._pon._uto._sri._čet._pet._sub.\".split(\"_\"),weekdaysMin:\"ne_po_ut_sr_če_pe_su\".split(\"_\"),longDateFormat:{LT:\"H:mm\",LTS:\"LT:ss\",L:\"DD. MM. YYYY\",LL:\"D. MMMM YYYY\",LLL:\"D. MMMM YYYY LT\",LLLL:\"dddd, D. MMMM YYYY LT\"},calendar:{sameDay:\"[danas u] LT\",nextDay:\"[sutra u] LT\",nextWeek:function(){switch(this.day()){case 0:return\"[u] [nedjelju] [u] LT\";case 3:return\"[u] [srijedu] [u] LT\";case 6:return\"[u] [subotu] [u] LT\";case 1:case 2:case 4:case 5:return\"[u] dddd [u] LT\"}},lastDay:\"[jučer u] LT\",lastWeek:function(){switch(this.day()){case 0:case 3:return\"[prošlu] dddd [u] LT\";case 6:return\"[prošle] [subote] [u] LT\";case 1:case 2:case 4:case 5:return\"[prošli] dddd [u] LT\"}},sameElse:\"L\"},relativeTime:{future:\"za %s\",past:\"prije %s\",s:\"par sekundi\",m:c,mm:c,h:c,hh:c,d:\"dan\",dd:c,M:\"mjesec\",MM:c,y:\"godinu\",yy:c},ordinalParse:/\\d{1,2}\\./,ordinal:\"%d.\",week:{dow:1,doy:7}}),a.fullCalendar.datepickerLang(\"hr\",\"hr\",{closeText:\"Zatvori\",prevText:\"&#x3C;\",nextText:\"&#x3E;\",currentText:\"Danas\",monthNames:[\"Siječanj\",\"Veljača\",\"Ožujak\",\"Travanj\",\"Svibanj\",\"Lipanj\",\"Srpanj\",\"Kolovoz\",\"Rujan\",\"Listopad\",\"Studeni\",\"Prosinac\"],monthNamesShort:[\"Sij\",\"Velj\",\"Ožu\",\"Tra\",\"Svi\",\"Lip\",\"Srp\",\"Kol\",\"Ruj\",\"Lis\",\"Stu\",\"Pro\"],dayNames:[\"Nedjelja\",\"Ponedjeljak\",\"Utorak\",\"Srijeda\",\"Četvrtak\",\"Petak\",\"Subota\"],dayNamesShort:[\"Ned\",\"Pon\",\"Uto\",\"Sri\",\"Čet\",\"Pet\",\"Sub\"],dayNamesMin:[\"Ne\",\"Po\",\"Ut\",\"Sr\",\"Če\",\"Pe\",\"Su\"],weekHeader:\"Tje\",dateFormat:\"dd.mm.yy.\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),a.fullCalendar.lang(\"hr\",{buttonText:{month:\"Mjesec\",week:\"Tjedan\",day:\"Dan\",list:\"Raspored\"},allDayText:\"Cijeli dan\",eventLimitText:function(a){return\"+ još \"+a}})}(),function(){function c(a,b,c,d){var e=a;switch(c){case\"s\":return d||b?\"néhány másodperc\":\"néhány másodperce\";case\"m\":return\"egy\"+(d||b?\" perc\":\" perce\");case\"mm\":return e+(d||b?\" perc\":\" perce\");case\"h\":return\"egy\"+(d||b?\" óra\":\" órája\");case\"hh\":return e+(d||b?\" óra\":\" órája\");case\"d\":return\"egy\"+(d||b?\" nap\":\" napja\");case\"dd\":return e+(d||b?\" nap\":\" napja\");case\"M\":return\"egy\"+(d||b?\" hónap\":\" hónapja\");case\"MM\":return e+(d||b?\" hónap\":\" hónapja\");case\"y\":return\"egy\"+(d||b?\" év\":\" éve\");case\"yy\":return e+(d||b?\" év\":\" éve\")}return\"\"}function d(a){return(a?\"\":\"[múlt] \")+\"[\"+e[this.day()]+\"] LT[-kor]\"}var e=\"vasárnap hétfőn kedden szerdán csütörtökön pénteken szombaton\".split(\" \");(b.defineLocale||b.lang).call(b,\"hu\",{months:\"január_február_március_április_május_június_július_augusztus_szeptember_október_november_december\".split(\"_\"),monthsShort:\"jan_feb_márc_ápr_máj_jún_júl_aug_szept_okt_nov_dec\".split(\"_\"),weekdays:\"vasárnap_hétfő_kedd_szerda_csütörtök_péntek_szombat\".split(\"_\"),weekdaysShort:\"vas_hét_kedd_sze_csüt_pén_szo\".split(\"_\"),weekdaysMin:\"v_h_k_sze_cs_p_szo\".split(\"_\"),longDateFormat:{LT:\"H:mm\",LTS:\"LT:ss\",L:\"YYYY.MM.DD.\",LL:\"YYYY. MMMM D.\",LLL:\"YYYY. MMMM D., LT\",LLLL:\"YYYY. MMMM D., dddd LT\"},meridiemParse:/de|du/i,isPM:function(a){return\"u\"===a.charAt(1).toLowerCase()},meridiem:function(a,b,c){return 12>a?c===!0?\"de\":\"DE\":c===!0?\"du\":\"DU\"},calendar:{sameDay:\"[ma] LT[-kor]\",nextDay:\"[holnap] LT[-kor]\",nextWeek:function(){return d.call(this,!0)},lastDay:\"[tegnap] LT[-kor]\",lastWeek:function(){return d.call(this,!1)},sameElse:\"L\"},relativeTime:{future:\"%s múlva\",past:\"%s\",s:c,m:c,mm:c,h:c,hh:c,d:c,dd:c,M:c,MM:c,y:c,yy:c},ordinalParse:/\\d{1,2}\\./,ordinal:\"%d.\",week:{dow:1,doy:7}}),a.fullCalendar.datepickerLang(\"hu\",\"hu\",{closeText:\"bezár\",prevText:\"vissza\",nextText:\"előre\",currentText:\"ma\",monthNames:[\"Január\",\"Február\",\"Március\",\"Április\",\"Május\",\"Június\",\"Július\",\"Augusztus\",\"Szeptember\",\"Október\",\"November\",\"December\"],monthNamesShort:[\"Jan\",\"Feb\",\"Már\",\"Ápr\",\"Máj\",\"Jún\",\"Júl\",\"Aug\",\"Szep\",\"Okt\",\"Nov\",\"Dec\"],dayNames:[\"Vasárnap\",\"Hétfő\",\"Kedd\",\"Szerda\",\"Csütörtök\",\"Péntek\",\"Szombat\"],dayNamesShort:[\"Vas\",\"Hét\",\"Ked\",\"Sze\",\"Csü\",\"Pén\",\"Szo\"],dayNamesMin:[\"V\",\"H\",\"K\",\"Sze\",\"Cs\",\"P\",\"Szo\"],weekHeader:\"Hét\",dateFormat:\"yy.mm.dd.\",firstDay:1,isRTL:!1,showMonthAfterYear:!0,yearSuffix:\"\"}),a.fullCalendar.lang(\"hu\",{buttonText:{month:\"Hónap\",week:\"Hét\",day:\"Nap\",list:\"Napló\"},allDayText:\"Egész nap\",eventLimitText:\"további\"})}(),function(){(b.defineLocale||b.lang).call(b,\"id\",{months:\"Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember\".split(\"_\"),monthsShort:\"Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nov_Des\".split(\"_\"),weekdays:\"Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu\".split(\"_\"),weekdaysShort:\"Min_Sen_Sel_Rab_Kam_Jum_Sab\".split(\"_\"),weekdaysMin:\"Mg_Sn_Sl_Rb_Km_Jm_Sb\".split(\"_\"),longDateFormat:{LT:\"HH.mm\",LTS:\"LT.ss\",L:\"DD/MM/YYYY\",LL:\"D MMMM YYYY\",LLL:\"D MMMM YYYY [pukul] LT\",LLLL:\"dddd, D MMMM YYYY [pukul] LT\"},meridiemParse:/pagi|siang|sore|malam/,meridiemHour:function(a,b){return 12===a&&(a=0),\"pagi\"===b?a:\"siang\"===b?a>=11?a:a+12:\"sore\"===b||\"malam\"===b?a+12:void 0},meridiem:function(a,b,c){return 11>a?\"pagi\":15>a?\"siang\":19>a?\"sore\":\"malam\"},calendar:{sameDay:\"[Hari ini pukul] LT\",nextDay:\"[Besok pukul] LT\",nextWeek:\"dddd [pukul] LT\",lastDay:\"[Kemarin pukul] LT\",lastWeek:\"dddd [lalu pukul] LT\",sameElse:\"L\"},relativeTime:{future:\"dalam %s\",past:\"%s yang lalu\",s:\"beberapa detik\",m:\"semenit\",mm:\"%d menit\",h:\"sejam\",hh:\"%d jam\",d:\"sehari\",dd:\"%d hari\",M:\"sebulan\",MM:\"%d bulan\",y:\"setahun\",yy:\"%d tahun\"},week:{dow:1,doy:7}}),a.fullCalendar.datepickerLang(\"id\",\"id\",{closeText:\"Tutup\",prevText:\"&#x3C;mundur\",nextText:\"maju&#x3E;\",currentText:\"hari ini\",monthNames:[\"Januari\",\"Februari\",\"Maret\",\"April\",\"Mei\",\"Juni\",\"Juli\",\"Agustus\",\"September\",\"Oktober\",\"Nopember\",\"Desember\"],monthNamesShort:[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"Mei\",\"Jun\",\"Jul\",\"Agus\",\"Sep\",\"Okt\",\"Nop\",\"Des\"],dayNames:[\"Minggu\",\"Senin\",\"Selasa\",\"Rabu\",\"Kamis\",\"Jumat\",\"Sabtu\"],dayNamesShort:[\"Min\",\"Sen\",\"Sel\",\"Rab\",\"kam\",\"Jum\",\"Sab\"],dayNamesMin:[\"Mg\",\"Sn\",\"Sl\",\"Rb\",\"Km\",\"jm\",\"Sb\"],weekHeader:\"Mg\",dateFormat:\"dd/mm/yy\",firstDay:0,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),a.fullCalendar.lang(\"id\",{buttonText:{month:\"Bulan\",week:\"Minggu\",day:\"Hari\",list:\"Agenda\"},allDayHtml:\"Sehari<br/>penuh\",eventLimitText:\"lebih\"})}(),function(){function c(a){return a%100===11?!0:a%10===1?!1:!0}function d(a,b,d,e){var f=a+\" \";switch(d){case\"s\":return b||e?\"nokkrar sekúndur\":\"nokkrum sekúndum\";case\"m\":return b?\"mínúta\":\"mínútu\";case\"mm\":return c(a)?f+(b||e?\"mínútur\":\"mínútum\"):b?f+\"mínúta\":f+\"mínútu\";case\"hh\":return c(a)?f+(b||e?\"klukkustundir\":\"klukkustundum\"):f+\"klukkustund\";case\"d\":return b?\"dagur\":e?\"dag\":\"degi\";case\"dd\":return c(a)?b?f+\"dagar\":f+(e?\"daga\":\"dögum\"):b?f+\"dagur\":f+(e?\"dag\":\"degi\");case\"M\":return b?\"mánuður\":e?\"mánuð\":\"mánuði\";case\"MM\":return c(a)?b?f+\"mánuðir\":f+(e?\"mánuði\":\"mánuðum\"):b?f+\"mánuður\":f+(e?\"mánuð\":\"mánuði\");case\"y\":return b||e?\"ár\":\"ári\";case\"yy\":return c(a)?f+(b||e?\"ár\":\"árum\"):f+(b||e?\"ár\":\"ári\")}}(b.defineLocale||b.lang).call(b,\"is\",{months:\"janúar_febrúar_mars_apríl_maí_júní_júlí_ágúst_september_október_nóvember_desember\".split(\"_\"),monthsShort:\"jan_feb_mar_apr_maí_jún_júl_ágú_sep_okt_nóv_des\".split(\"_\"),weekdays:\"sunnudagur_mánudagur_þriðjudagur_miðvikudagur_fimmtudagur_föstudagur_laugardagur\".split(\"_\"),weekdaysShort:\"sun_mán_þri_mið_fim_fös_lau\".split(\"_\"),weekdaysMin:\"Su_Má_Þr_Mi_Fi_Fö_La\".split(\"_\"),longDateFormat:{LT:\"H:mm\",LTS:\"LT:ss\",L:\"DD/MM/YYYY\",LL:\"D. MMMM YYYY\",LLL:\"D. MMMM YYYY [kl.] LT\",LLLL:\"dddd, D. MMMM YYYY [kl.] LT\"},calendar:{sameDay:\"[í dag kl.] LT\",nextDay:\"[á morgun kl.] LT\",nextWeek:\"dddd [kl.] LT\",lastDay:\"[í gær kl.] LT\",lastWeek:\"[síðasta] dddd [kl.] LT\",sameElse:\"L\"},relativeTime:{future:\"eftir %s\",past:\"fyrir %s síðan\",s:d,m:d,mm:d,h:\"klukkustund\",hh:d,d:d,dd:d,M:d,MM:d,y:d,yy:d},ordinalParse:/\\d{1,2}\\./,ordinal:\"%d.\",week:{dow:1,doy:4}}),a.fullCalendar.datepickerLang(\"is\",\"is\",{closeText:\"Loka\",prevText:\"&#x3C; Fyrri\",nextText:\"Næsti &#x3E;\",currentText:\"Í dag\",monthNames:[\"Janúar\",\"Febrúar\",\"Mars\",\"Apríl\",\"Maí\",\"Júní\",\"Júlí\",\"Ágúst\",\"September\",\"Október\",\"Nóvember\",\"Desember\"],monthNamesShort:[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"Maí\",\"Jún\",\"Júl\",\"Ágú\",\"Sep\",\"Okt\",\"Nóv\",\"Des\"],dayNames:[\"Sunnudagur\",\"Mánudagur\",\"Þriðjudagur\",\"Miðvikudagur\",\"Fimmtudagur\",\"Föstudagur\",\"Laugardagur\"],dayNamesShort:[\"Sun\",\"Mán\",\"Þri\",\"Mið\",\"Fim\",\"Fös\",\"Lau\"],dayNamesMin:[\"Su\",\"Má\",\"Þr\",\"Mi\",\"Fi\",\"Fö\",\"La\"],weekHeader:\"Vika\",dateFormat:\"dd.mm.yy\",firstDay:0,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),a.fullCalendar.lang(\"is\",{buttonText:{month:\"Mánuður\",week:\"Vika\",day:\"Dagur\",list:\"Dagskrá\"},allDayHtml:\"Allan<br/>daginn\",eventLimitText:\"meira\"})}(),function(){(b.defineLocale||b.lang).call(b,\"it\",{months:\"gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre\".split(\"_\"),monthsShort:\"gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic\".split(\"_\"),weekdays:\"Domenica_Lunedì_Martedì_Mercoledì_Giovedì_Venerdì_Sabato\".split(\"_\"),weekdaysShort:\"Dom_Lun_Mar_Mer_Gio_Ven_Sab\".split(\"_\"),weekdaysMin:\"D_L_Ma_Me_G_V_S\".split(\"_\"),longDateFormat:{LT:\"HH:mm\",LTS:\"LT:ss\",L:\"DD/MM/YYYY\",LL:\"D MMMM YYYY\",LLL:\"D MMMM YYYY LT\",LLLL:\"dddd, D MMMM YYYY LT\"},calendar:{sameDay:\"[Oggi alle] LT\",nextDay:\"[Domani alle] LT\",nextWeek:\"dddd [alle] LT\",lastDay:\"[Ieri alle] LT\",lastWeek:function(){switch(this.day()){case 0:return\"[la scorsa] dddd [alle] LT\";default:return\"[lo scorso] dddd [alle] LT\"}},sameElse:\"L\"},relativeTime:{future:function(a){return(/^[0-9].+$/.test(a)?\"tra\":\"in\")+\" \"+a},past:\"%s fa\",s:\"alcuni secondi\",m:\"un minuto\",mm:\"%d minuti\",h:\"un'ora\",hh:\"%d ore\",d:\"un giorno\",dd:\"%d giorni\",M:\"un mese\",MM:\"%d mesi\",y:\"un anno\",yy:\"%d anni\"},ordinalParse:/\\d{1,2}º/,ordinal:\"%dº\",week:{dow:1,doy:4}}),a.fullCalendar.datepickerLang(\"it\",\"it\",{closeText:\"Chiudi\",prevText:\"&#x3C;Prec\",nextText:\"Succ&#x3E;\",currentText:\"Oggi\",monthNames:[\"Gennaio\",\"Febbraio\",\"Marzo\",\"Aprile\",\"Maggio\",\"Giugno\",\"Luglio\",\"Agosto\",\"Settembre\",\"Ottobre\",\"Novembre\",\"Dicembre\"],monthNamesShort:[\"Gen\",\"Feb\",\"Mar\",\"Apr\",\"Mag\",\"Giu\",\"Lug\",\"Ago\",\"Set\",\"Ott\",\"Nov\",\"Dic\"],dayNames:[\"Domenica\",\"Lunedì\",\"Martedì\",\"Mercoledì\",\"Giovedì\",\"Venerdì\",\"Sabato\"],dayNamesShort:[\"Dom\",\"Lun\",\"Mar\",\"Mer\",\"Gio\",\"Ven\",\"Sab\"],dayNamesMin:[\"Do\",\"Lu\",\"Ma\",\"Me\",\"Gi\",\"Ve\",\"Sa\"],weekHeader:\"Sm\",dateFormat:\"dd/mm/yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),a.fullCalendar.lang(\"it\",{buttonText:{month:\"Mese\",week:\"Settimana\",day:\"Giorno\",list:\"Agenda\"},allDayHtml:\"Tutto il<br/>giorno\",eventLimitText:function(a){return\"+altri \"+a}})}(),function(){(b.defineLocale||b.lang).call(b,\"ja\",{months:\"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月\".split(\"_\"),monthsShort:\"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月\".split(\"_\"),weekdays:\"日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日\".split(\"_\"),weekdaysShort:\"日_月_火_水_木_金_土\".split(\"_\"),weekdaysMin:\"日_月_火_水_木_金_土\".split(\"_\"),longDateFormat:{LT:\"Ah時m分\",LTS:\"LTs秒\",L:\"YYYY/MM/DD\",LL:\"YYYY年M月D日\",LLL:\"YYYY年M月D日LT\",LLLL:\"YYYY年M月D日LT dddd\"},meridiemParse:/午前|午後/i,isPM:function(a){return\"午後\"===a},meridiem:function(a,b,c){return 12>a?\"午前\":\"午後\"},calendar:{sameDay:\"[今日] LT\",nextDay:\"[明日] LT\",nextWeek:\"[来週]dddd LT\",lastDay:\"[昨日] LT\",lastWeek:\"[前週]dddd LT\",sameElse:\"L\"},relativeTime:{future:\"%s後\",past:\"%s前\",s:\"数秒\",m:\"1分\",mm:\"%d分\",h:\"1時間\",hh:\"%d時間\",d:\"1日\",dd:\"%d日\",M:\"1ヶ月\",MM:\"%dヶ月\",y:\"1年\",yy:\"%d年\"}}),a.fullCalendar.datepickerLang(\"ja\",\"ja\",{closeText:\"閉じる\",prevText:\"&#x3C;前\",nextText:\"次&#x3E;\",currentText:\"今日\",monthNames:[\"1月\",\"2月\",\"3月\",\"4月\",\"5月\",\"6月\",\"7月\",\"8月\",\"9月\",\"10月\",\"11月\",\"12月\"],monthNamesShort:[\"1月\",\"2月\",\"3月\",\"4月\",\"5月\",\"6月\",\"7月\",\"8月\",\"9月\",\"10月\",\"11月\",\"12月\"],dayNames:[\"日曜日\",\"月曜日\",\"火曜日\",\"水曜日\",\"木曜日\",\"金曜日\",\"土曜日\"],dayNamesShort:[\"日\",\"月\",\"火\",\"水\",\"木\",\"金\",\"土\"],dayNamesMin:[\"日\",\"月\",\"火\",\"水\",\"木\",\"金\",\"土\"],weekHeader:\"週\",dateFormat:\"yy/mm/dd\",firstDay:0,isRTL:!1,showMonthAfterYear:!0,yearSuffix:\"年\"}),a.fullCalendar.lang(\"ja\",{buttonText:{month:\"月\",week:\"週\",day:\"日\",list:\"予定リスト\"},allDayText:\"終日\",eventLimitText:function(a){return\"他 \"+a+\" 件\"}})}(),function(){(b.defineLocale||b.lang).call(b,\"ko\",{months:\"1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월\".split(\"_\"),monthsShort:\"1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월\".split(\"_\"),weekdays:\"일요일_월요일_화요일_수요일_목요일_금요일_토요일\".split(\"_\"),weekdaysShort:\"일_월_화_수_목_금_토\".split(\"_\"),weekdaysMin:\"일_월_화_수_목_금_토\".split(\"_\"),longDateFormat:{LT:\"A h시 m분\",LTS:\"A h시 m분 s초\",L:\"YYYY.MM.DD\",LL:\"YYYY년 MMMM D일\",LLL:\"YYYY년 MMMM D일 LT\",LLLL:\"YYYY년 MMMM D일 dddd LT\"},calendar:{sameDay:\"오늘 LT\",nextDay:\"내일 LT\",nextWeek:\"dddd LT\",lastDay:\"어제 LT\",lastWeek:\"지난주 dddd LT\",sameElse:\"L\"},relativeTime:{future:\"%s 후\",past:\"%s 전\",s:\"몇초\",ss:\"%d초\",m:\"일분\",mm:\"%d분\",h:\"한시간\",hh:\"%d시간\",d:\"하루\",dd:\"%d일\",M:\"한달\",MM:\"%d달\",y:\"일년\",yy:\"%d년\"},ordinalParse:/\\d{1,2}일/,ordinal:\"%d일\",meridiemParse:/오전|오후/,isPM:function(a){return\"오후\"===a},meridiem:function(a,b,c){return 12>a?\"오전\":\"오후\"}}),a.fullCalendar.datepickerLang(\"ko\",\"ko\",{closeText:\"닫기\",prevText:\"이전달\",nextText:\"다음달\",currentText:\"오늘\",monthNames:[\"1월\",\"2월\",\"3월\",\"4월\",\"5월\",\"6월\",\"7월\",\"8월\",\"9월\",\"10월\",\"11월\",\"12월\"],monthNamesShort:[\"1월\",\"2월\",\"3월\",\"4월\",\"5월\",\"6월\",\"7월\",\"8월\",\"9월\",\"10월\",\"11월\",\"12월\"],dayNames:[\"일요일\",\"월요일\",\"화요일\",\"수요일\",\"목요일\",\"금요일\",\"토요일\"],dayNamesShort:[\"일\",\"월\",\"화\",\"수\",\"목\",\"금\",\"토\"],dayNamesMin:[\"일\",\"월\",\"화\",\"수\",\"목\",\"금\",\"토\"],weekHeader:\"Wk\",dateFormat:\"yy-mm-dd\",firstDay:0,isRTL:!1,showMonthAfterYear:!0,yearSuffix:\"년\"}),a.fullCalendar.lang(\"ko\",{buttonText:{month:\"월\",week:\"주\",day:\"일\",list:\"일정목록\"},allDayText:\"종일\",eventLimitText:\"개\"})}(),function(){function c(a,b,c,d){return b?\"kelios sekundės\":d?\"kelių sekundžių\":\"kelias sekundes\"}function d(a,b,c,d){return b?f(c)[0]:d?f(c)[1]:f(c)[2]}function e(a){return a%10===0||a>10&&20>a}function f(a){return i[a].split(\"_\")}function g(a,b,c,g){var h=a+\" \";return 1===a?h+d(a,b,c[0],g):b?h+(e(a)?f(c)[1]:f(c)[0]):g?h+f(c)[1]:h+(e(a)?f(c)[1]:f(c)[2])}function h(a,b){var c=-1===b.indexOf(\"dddd HH:mm\"),d=j[a.day()];return c?d:d.substring(0,d.length-2)+\"į\"}var i={m:\"minutė_minutės_minutę\",mm:\"minutės_minučių_minutes\",h:\"valanda_valandos_valandą\",hh:\"valandos_valandų_valandas\",d:\"diena_dienos_dieną\",dd:\"dienos_dienų_dienas\",M:\"mėnuo_mėnesio_mėnesį\",MM:\"mėnesiai_mėnesių_mėnesius\",y:\"metai_metų_metus\",yy:\"metai_metų_metus\"},j=\"sekmadienis_pirmadienis_antradienis_trečiadienis_ketvirtadienis_penktadienis_šeštadienis\".split(\"_\");(b.defineLocale||b.lang).call(b,\"lt\",{months:\"sausio_vasario_kovo_balandžio_gegužės_birželio_liepos_rugpjūčio_rugsėjo_spalio_lapkričio_gruodžio\".split(\"_\"),monthsShort:\"sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd\".split(\"_\"),weekdays:h,weekdaysShort:\"Sek_Pir_Ant_Tre_Ket_Pen_Šeš\".split(\"_\"),weekdaysMin:\"S_P_A_T_K_Pn_Š\".split(\"_\"),longDateFormat:{LT:\"HH:mm\",LTS:\"LT:ss\",L:\"YYYY-MM-DD\",LL:\"YYYY [m.] MMMM D [d.]\",LLL:\"YYYY [m.] MMMM D [d.], LT [val.]\",LLLL:\"YYYY [m.] MMMM D [d.], dddd, LT [val.]\",l:\"YYYY-MM-DD\",ll:\"YYYY [m.] MMMM D [d.]\",lll:\"YYYY [m.] MMMM D [d.], LT [val.]\",llll:\"YYYY [m.] MMMM D [d.], ddd, LT [val.]\"},calendar:{sameDay:\"[Šiandien] LT\",nextDay:\"[Rytoj] LT\",nextWeek:\"dddd LT\",lastDay:\"[Vakar] LT\",lastWeek:\"[Praėjusį] dddd LT\",sameElse:\"L\"},relativeTime:{future:\"po %s\",past:\"prieš %s\",s:c,m:d,mm:g,h:d,hh:g,d:d,dd:g,M:d,MM:g,y:d,yy:g},ordinalParse:/\\d{1,2}-oji/,ordinal:function(a){return a+\"-oji\"},week:{dow:1,doy:4}}),a.fullCalendar.datepickerLang(\"lt\",\"lt\",{closeText:\"Uždaryti\",prevText:\"&#x3C;Atgal\",nextText:\"Pirmyn&#x3E;\",currentText:\"Šiandien\",monthNames:[\"Sausis\",\"Vasaris\",\"Kovas\",\"Balandis\",\"Gegužė\",\"Birželis\",\"Liepa\",\"Rugpjūtis\",\"Rugsėjis\",\"Spalis\",\"Lapkritis\",\"Gruodis\"],monthNamesShort:[\"Sau\",\"Vas\",\"Kov\",\"Bal\",\"Geg\",\"Bir\",\"Lie\",\"Rugp\",\"Rugs\",\"Spa\",\"Lap\",\"Gru\"],dayNames:[\"sekmadienis\",\"pirmadienis\",\"antradienis\",\"trečiadienis\",\"ketvirtadienis\",\"penktadienis\",\"šeštadienis\"],dayNamesShort:[\"sek\",\"pir\",\"ant\",\"tre\",\"ket\",\"pen\",\"šeš\"],dayNamesMin:[\"Se\",\"Pr\",\"An\",\"Tr\",\"Ke\",\"Pe\",\"Še\"],weekHeader:\"SAV\",dateFormat:\"yy-mm-dd\",firstDay:1,isRTL:!1,showMonthAfterYear:!0,yearSuffix:\"\"}),a.fullCalendar.lang(\"lt\",{buttonText:{month:\"Mėnuo\",week:\"Savaitė\",day:\"Diena\",list:\"Darbotvarkė\"},allDayText:\"Visą dieną\",eventLimitText:\"daugiau\"})}(),function(){function c(a,b,c){var d=a.split(\"_\");return c?b%10===1&&11!==b?d[2]:d[3]:b%10===1&&11!==b?d[0]:d[1]}function d(a,b,d){return a+\" \"+c(e[d],a,b)}var e={mm:\"minūti_minūtes_minūte_minūtes\",hh:\"stundu_stundas_stunda_stundas\",dd:\"dienu_dienas_diena_dienas\",MM:\"mēnesi_mēnešus_mēnesis_mēneši\",yy:\"gadu_gadus_gads_gadi\"};(b.defineLocale||b.lang).call(b,\"lv\",{months:\"janvāris_februāris_marts_aprīlis_maijs_jūnijs_jūlijs_augusts_septembris_oktobris_novembris_decembris\".split(\"_\"),monthsShort:\"jan_feb_mar_apr_mai_jūn_jūl_aug_sep_okt_nov_dec\".split(\"_\"),weekdays:\"svētdiena_pirmdiena_otrdiena_trešdiena_ceturtdiena_piektdiena_sestdiena\".split(\"_\"),weekdaysShort:\"Sv_P_O_T_C_Pk_S\".split(\"_\"),weekdaysMin:\"Sv_P_O_T_C_Pk_S\".split(\"_\"),longDateFormat:{LT:\"HH:mm\",LTS:\"LT:ss\",L:\"DD.MM.YYYY\",LL:\"YYYY. [gada] D. MMMM\",LLL:\"YYYY. [gada] D. MMMM, LT\",LLLL:\"YYYY. [gada] D. MMMM, dddd, LT\"},calendar:{sameDay:\"[Šodien pulksten] LT\",nextDay:\"[Rīt pulksten] LT\",nextWeek:\"dddd [pulksten] LT\",lastDay:\"[Vakar pulksten] LT\",lastWeek:\"[Pagājušā] dddd [pulksten] LT\",sameElse:\"L\"},relativeTime:{future:\"%s vēlāk\",past:\"%s agrāk\",s:\"dažas sekundes\",m:\"minūti\",mm:d,h:\"stundu\",hh:d,d:\"dienu\",dd:d,M:\"mēnesi\",MM:d,y:\"gadu\",yy:d},ordinalParse:/\\d{1,2}\\./,ordinal:\"%d.\",week:{dow:1,doy:4}}),a.fullCalendar.datepickerLang(\"lv\",\"lv\",{closeText:\"Aizvērt\",prevText:\"Iepr.\",nextText:\"Nāk.\",currentText:\"Šodien\",monthNames:[\"Janvāris\",\"Februāris\",\"Marts\",\"Aprīlis\",\"Maijs\",\"Jūnijs\",\"Jūlijs\",\"Augusts\",\"Septembris\",\"Oktobris\",\"Novembris\",\"Decembris\"],monthNamesShort:[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"Mai\",\"Jūn\",\"Jūl\",\"Aug\",\"Sep\",\"Okt\",\"Nov\",\"Dec\"],dayNames:[\"svētdiena\",\"pirmdiena\",\"otrdiena\",\"trešdiena\",\"ceturtdiena\",\"piektdiena\",\"sestdiena\"],dayNamesShort:[\"svt\",\"prm\",\"otr\",\"tre\",\"ctr\",\"pkt\",\"sst\"],dayNamesMin:[\"Sv\",\"Pr\",\"Ot\",\"Tr\",\"Ct\",\"Pk\",\"Ss\"],weekHeader:\"Ned.\",dateFormat:\"dd.mm.yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),a.fullCalendar.lang(\"lv\",{buttonText:{month:\"Mēnesis\",week:\"Nedēļa\",day:\"Diena\",list:\"Dienas kārtība\"},allDayText:\"Visu dienu\",eventLimitText:function(a){return\"+vēl \"+a}})}(),function(){(b.defineLocale||b.lang).call(b,\"nb\",{months:\"januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember\".split(\"_\"),monthsShort:\"jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des\".split(\"_\"),weekdays:\"søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag\".split(\"_\"),weekdaysShort:\"søn_man_tirs_ons_tors_fre_lør\".split(\"_\"),weekdaysMin:\"sø_ma_ti_on_to_fr_lø\".split(\"_\"),longDateFormat:{LT:\"H.mm\",LTS:\"LT.ss\",L:\"DD.MM.YYYY\",LL:\"D. MMMM YYYY\",LLL:\"D. MMMM YYYY [kl.] LT\",LLLL:\"dddd D. MMMM YYYY [kl.] LT\"},calendar:{sameDay:\"[i dag kl.] LT\",nextDay:\"[i morgen kl.] LT\",nextWeek:\"dddd [kl.] LT\",lastDay:\"[i går kl.] LT\",lastWeek:\"[forrige] dddd [kl.] LT\",sameElse:\"L\"},relativeTime:{future:\"om %s\",past:\"for %s siden\",s:\"noen sekunder\",m:\"ett minutt\",mm:\"%d minutter\",h:\"en time\",hh:\"%d timer\",d:\"en dag\",dd:\"%d dager\",M:\"en måned\",MM:\"%d måneder\",y:\"ett år\",yy:\"%d år\"},ordinalParse:/\\d{1,2}\\./,ordinal:\"%d.\",week:{dow:1,doy:4}}),a.fullCalendar.datepickerLang(\"nb\",\"nb\",{closeText:\"Lukk\",prevText:\"&#xAB;Forrige\",nextText:\"Neste&#xBB;\",currentText:\"I dag\",monthNames:[\"januar\",\"februar\",\"mars\",\"april\",\"mai\",\"juni\",\"juli\",\"august\",\"september\",\"oktober\",\"november\",\"desember\"],monthNamesShort:[\"jan\",\"feb\",\"mar\",\"apr\",\"mai\",\"jun\",\"jul\",\"aug\",\"sep\",\"okt\",\"nov\",\"des\"],dayNamesShort:[\"søn\",\"man\",\"tir\",\"ons\",\"tor\",\"fre\",\"lør\"],dayNames:[\"søndag\",\"mandag\",\"tirsdag\",\"onsdag\",\"torsdag\",\"fredag\",\"lørdag\"],dayNamesMin:[\"sø\",\"ma\",\"ti\",\"on\",\"to\",\"fr\",\"lø\"],weekHeader:\"Uke\",dateFormat:\"dd.mm.yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),a.fullCalendar.lang(\"nb\",{buttonText:{month:\"Måned\",week:\"Uke\",day:\"Dag\",list:\"Agenda\"},allDayText:\"Hele dagen\",eventLimitText:\"til\"})}(),function(){var c=\"jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.\".split(\"_\"),d=\"jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec\".split(\"_\");(b.defineLocale||b.lang).call(b,\"nl\",{months:\"januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december\".split(\"_\"),monthsShort:function(a,b){return/-MMM-/.test(b)?d[a.month()]:c[a.month()]},weekdays:\"zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag\".split(\"_\"),weekdaysShort:\"zo._ma._di._wo._do._vr._za.\".split(\"_\"),weekdaysMin:\"Zo_Ma_Di_Wo_Do_Vr_Za\".split(\"_\"),longDateFormat:{LT:\"HH:mm\",LTS:\"LT:ss\",L:\"DD-MM-YYYY\",LL:\"D MMMM YYYY\",LLL:\"D MMMM YYYY LT\",LLLL:\"dddd D MMMM YYYY LT\"},calendar:{sameDay:\"[vandaag om] LT\",nextDay:\"[morgen om] LT\",nextWeek:\"dddd [om] LT\",lastDay:\"[gisteren om] LT\",lastWeek:\"[afgelopen] dddd [om] LT\",sameElse:\"L\"},relativeTime:{future:\"over %s\",past:\"%s geleden\",s:\"een paar seconden\",m:\"één minuut\",mm:\"%d minuten\",h:\"één uur\",hh:\"%d uur\",d:\"één dag\",dd:\"%d dagen\",M:\"één maand\",MM:\"%d maanden\",y:\"één jaar\",yy:\"%d jaar\"},ordinalParse:/\\d{1,2}(ste|de)/,ordinal:function(a){return a+(1===a||8===a||a>=20?\"ste\":\"de\")},week:{dow:1,doy:4}}),a.fullCalendar.datepickerLang(\"nl\",\"nl\",{closeText:\"Sluiten\",prevText:\"←\",nextText:\"→\",currentText:\"Vandaag\",monthNames:[\"januari\",\"februari\",\"maart\",\"april\",\"mei\",\"juni\",\"juli\",\"augustus\",\"september\",\"oktober\",\"november\",\"december\"],\nmonthNamesShort:[\"jan\",\"feb\",\"mrt\",\"apr\",\"mei\",\"jun\",\"jul\",\"aug\",\"sep\",\"okt\",\"nov\",\"dec\"],dayNames:[\"zondag\",\"maandag\",\"dinsdag\",\"woensdag\",\"donderdag\",\"vrijdag\",\"zaterdag\"],dayNamesShort:[\"zon\",\"maa\",\"din\",\"woe\",\"don\",\"vri\",\"zat\"],dayNamesMin:[\"zo\",\"ma\",\"di\",\"wo\",\"do\",\"vr\",\"za\"],weekHeader:\"Wk\",dateFormat:\"dd-mm-yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),a.fullCalendar.lang(\"nl\",{buttonText:{month:\"Maand\",week:\"Week\",day:\"Dag\",list:\"Agenda\"},allDayText:\"Hele dag\",eventLimitText:\"extra\"})}(),function(){function c(a){return 5>a%10&&a%10>1&&~~(a/10)%10!==1}function d(a,b,d){var e=a+\" \";switch(d){case\"m\":return b?\"minuta\":\"minutę\";case\"mm\":return e+(c(a)?\"minuty\":\"minut\");case\"h\":return b?\"godzina\":\"godzinę\";case\"hh\":return e+(c(a)?\"godziny\":\"godzin\");case\"MM\":return e+(c(a)?\"miesiące\":\"miesięcy\");case\"yy\":return e+(c(a)?\"lata\":\"lat\")}}var e=\"styczeń_luty_marzec_kwiecień_maj_czerwiec_lipiec_sierpień_wrzesień_październik_listopad_grudzień\".split(\"_\"),f=\"stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_września_października_listopada_grudnia\".split(\"_\");(b.defineLocale||b.lang).call(b,\"pl\",{months:function(a,b){return/D MMMM/.test(b)?f[a.month()]:e[a.month()]},monthsShort:\"sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paź_lis_gru\".split(\"_\"),weekdays:\"niedziela_poniedziałek_wtorek_środa_czwartek_piątek_sobota\".split(\"_\"),weekdaysShort:\"nie_pon_wt_śr_czw_pt_sb\".split(\"_\"),weekdaysMin:\"N_Pn_Wt_Śr_Cz_Pt_So\".split(\"_\"),longDateFormat:{LT:\"HH:mm\",LTS:\"LT:ss\",L:\"DD.MM.YYYY\",LL:\"D MMMM YYYY\",LLL:\"D MMMM YYYY LT\",LLLL:\"dddd, D MMMM YYYY LT\"},calendar:{sameDay:\"[Dziś o] LT\",nextDay:\"[Jutro o] LT\",nextWeek:\"[W] dddd [o] LT\",lastDay:\"[Wczoraj o] LT\",lastWeek:function(){switch(this.day()){case 0:return\"[W zeszłą niedzielę o] LT\";case 3:return\"[W zeszłą środę o] LT\";case 6:return\"[W zeszłą sobotę o] LT\";default:return\"[W zeszły] dddd [o] LT\"}},sameElse:\"L\"},relativeTime:{future:\"za %s\",past:\"%s temu\",s:\"kilka sekund\",m:d,mm:d,h:d,hh:d,d:\"1 dzień\",dd:\"%d dni\",M:\"miesiąc\",MM:d,y:\"rok\",yy:d},ordinalParse:/\\d{1,2}\\./,ordinal:\"%d.\",week:{dow:1,doy:4}}),a.fullCalendar.datepickerLang(\"pl\",\"pl\",{closeText:\"Zamknij\",prevText:\"&#x3C;Poprzedni\",nextText:\"Następny&#x3E;\",currentText:\"Dziś\",monthNames:[\"Styczeń\",\"Luty\",\"Marzec\",\"Kwiecień\",\"Maj\",\"Czerwiec\",\"Lipiec\",\"Sierpień\",\"Wrzesień\",\"Październik\",\"Listopad\",\"Grudzień\"],monthNamesShort:[\"Sty\",\"Lu\",\"Mar\",\"Kw\",\"Maj\",\"Cze\",\"Lip\",\"Sie\",\"Wrz\",\"Pa\",\"Lis\",\"Gru\"],dayNames:[\"Niedziela\",\"Poniedziałek\",\"Wtorek\",\"Środa\",\"Czwartek\",\"Piątek\",\"Sobota\"],dayNamesShort:[\"Nie\",\"Pn\",\"Wt\",\"Śr\",\"Czw\",\"Pt\",\"So\"],dayNamesMin:[\"N\",\"Pn\",\"Wt\",\"Śr\",\"Cz\",\"Pt\",\"So\"],weekHeader:\"Tydz\",dateFormat:\"dd.mm.yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),a.fullCalendar.lang(\"pl\",{buttonText:{month:\"Miesiąc\",week:\"Tydzień\",day:\"Dzień\",list:\"Plan dnia\"},allDayText:\"Cały dzień\",eventLimitText:\"więcej\"})}(),function(){(b.defineLocale||b.lang).call(b,\"pt-br\",{months:\"janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro\".split(\"_\"),monthsShort:\"jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez\".split(\"_\"),weekdays:\"domingo_segunda-feira_terça-feira_quarta-feira_quinta-feira_sexta-feira_sábado\".split(\"_\"),weekdaysShort:\"dom_seg_ter_qua_qui_sex_sáb\".split(\"_\"),weekdaysMin:\"dom_2ª_3ª_4ª_5ª_6ª_sáb\".split(\"_\"),longDateFormat:{LT:\"HH:mm\",LTS:\"LT:ss\",L:\"DD/MM/YYYY\",LL:\"D [de] MMMM [de] YYYY\",LLL:\"D [de] MMMM [de] YYYY [às] LT\",LLLL:\"dddd, D [de] MMMM [de] YYYY [às] LT\"},calendar:{sameDay:\"[Hoje às] LT\",nextDay:\"[Amanhã às] LT\",nextWeek:\"dddd [às] LT\",lastDay:\"[Ontem às] LT\",lastWeek:function(){return 0===this.day()||6===this.day()?\"[Último] dddd [às] LT\":\"[Última] dddd [às] LT\"},sameElse:\"L\"},relativeTime:{future:\"em %s\",past:\"%s atrás\",s:\"segundos\",m:\"um minuto\",mm:\"%d minutos\",h:\"uma hora\",hh:\"%d horas\",d:\"um dia\",dd:\"%d dias\",M:\"um mês\",MM:\"%d meses\",y:\"um ano\",yy:\"%d anos\"},ordinalParse:/\\d{1,2}º/,ordinal:\"%dº\"}),a.fullCalendar.datepickerLang(\"pt-br\",\"pt-BR\",{closeText:\"Fechar\",prevText:\"&#x3C;Anterior\",nextText:\"Próximo&#x3E;\",currentText:\"Hoje\",monthNames:[\"Janeiro\",\"Fevereiro\",\"Março\",\"Abril\",\"Maio\",\"Junho\",\"Julho\",\"Agosto\",\"Setembro\",\"Outubro\",\"Novembro\",\"Dezembro\"],monthNamesShort:[\"Jan\",\"Fev\",\"Mar\",\"Abr\",\"Mai\",\"Jun\",\"Jul\",\"Ago\",\"Set\",\"Out\",\"Nov\",\"Dez\"],dayNames:[\"Domingo\",\"Segunda-feira\",\"Terça-feira\",\"Quarta-feira\",\"Quinta-feira\",\"Sexta-feira\",\"Sábado\"],dayNamesShort:[\"Dom\",\"Seg\",\"Ter\",\"Qua\",\"Qui\",\"Sex\",\"Sáb\"],dayNamesMin:[\"Dom\",\"Seg\",\"Ter\",\"Qua\",\"Qui\",\"Sex\",\"Sáb\"],weekHeader:\"Sm\",dateFormat:\"dd/mm/yy\",firstDay:0,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),a.fullCalendar.lang(\"pt-br\",{buttonText:{month:\"Mês\",week:\"Semana\",day:\"Dia\",list:\"Compromissos\"},allDayText:\"dia inteiro\",eventLimitText:function(a){return\"mais +\"+a}})}(),function(){(b.defineLocale||b.lang).call(b,\"pt\",{months:\"janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro\".split(\"_\"),monthsShort:\"jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez\".split(\"_\"),weekdays:\"domingo_segunda-feira_terça-feira_quarta-feira_quinta-feira_sexta-feira_sábado\".split(\"_\"),weekdaysShort:\"dom_seg_ter_qua_qui_sex_sáb\".split(\"_\"),weekdaysMin:\"dom_2ª_3ª_4ª_5ª_6ª_sáb\".split(\"_\"),longDateFormat:{LT:\"HH:mm\",LTS:\"LT:ss\",L:\"DD/MM/YYYY\",LL:\"D [de] MMMM [de] YYYY\",LLL:\"D [de] MMMM [de] YYYY LT\",LLLL:\"dddd, D [de] MMMM [de] YYYY LT\"},calendar:{sameDay:\"[Hoje às] LT\",nextDay:\"[Amanhã às] LT\",nextWeek:\"dddd [às] LT\",lastDay:\"[Ontem às] LT\",lastWeek:function(){return 0===this.day()||6===this.day()?\"[Último] dddd [às] LT\":\"[Última] dddd [às] LT\"},sameElse:\"L\"},relativeTime:{future:\"em %s\",past:\"há %s\",s:\"segundos\",m:\"um minuto\",mm:\"%d minutos\",h:\"uma hora\",hh:\"%d horas\",d:\"um dia\",dd:\"%d dias\",M:\"um mês\",MM:\"%d meses\",y:\"um ano\",yy:\"%d anos\"},ordinalParse:/\\d{1,2}º/,ordinal:\"%dº\",week:{dow:1,doy:4}}),a.fullCalendar.datepickerLang(\"pt\",\"pt\",{closeText:\"Fechar\",prevText:\"Anterior\",nextText:\"Seguinte\",currentText:\"Hoje\",monthNames:[\"Janeiro\",\"Fevereiro\",\"Março\",\"Abril\",\"Maio\",\"Junho\",\"Julho\",\"Agosto\",\"Setembro\",\"Outubro\",\"Novembro\",\"Dezembro\"],monthNamesShort:[\"Jan\",\"Fev\",\"Mar\",\"Abr\",\"Mai\",\"Jun\",\"Jul\",\"Ago\",\"Set\",\"Out\",\"Nov\",\"Dez\"],dayNames:[\"Domingo\",\"Segunda-feira\",\"Terça-feira\",\"Quarta-feira\",\"Quinta-feira\",\"Sexta-feira\",\"Sábado\"],dayNamesShort:[\"Dom\",\"Seg\",\"Ter\",\"Qua\",\"Qui\",\"Sex\",\"Sáb\"],dayNamesMin:[\"Dom\",\"Seg\",\"Ter\",\"Qua\",\"Qui\",\"Sex\",\"Sáb\"],weekHeader:\"Sem\",dateFormat:\"dd/mm/yy\",firstDay:0,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),a.fullCalendar.lang(\"pt\",{buttonText:{month:\"Mês\",week:\"Semana\",day:\"Dia\",list:\"Agenda\"},allDayText:\"Todo o dia\",eventLimitText:\"mais\"})}(),function(){function c(a,b,c){var d={mm:\"minute\",hh:\"ore\",dd:\"zile\",MM:\"luni\",yy:\"ani\"},e=\" \";return(a%100>=20||a>=100&&a%100===0)&&(e=\" de \"),a+e+d[c]}(b.defineLocale||b.lang).call(b,\"ro\",{months:\"ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie\".split(\"_\"),monthsShort:\"ian._febr._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.\".split(\"_\"),weekdays:\"duminică_luni_marți_miercuri_joi_vineri_sâmbătă\".split(\"_\"),weekdaysShort:\"Dum_Lun_Mar_Mie_Joi_Vin_Sâm\".split(\"_\"),weekdaysMin:\"Du_Lu_Ma_Mi_Jo_Vi_Sâ\".split(\"_\"),longDateFormat:{LT:\"H:mm\",LTS:\"LT:ss\",L:\"DD.MM.YYYY\",LL:\"D MMMM YYYY\",LLL:\"D MMMM YYYY H:mm\",LLLL:\"dddd, D MMMM YYYY H:mm\"},calendar:{sameDay:\"[azi la] LT\",nextDay:\"[mâine la] LT\",nextWeek:\"dddd [la] LT\",lastDay:\"[ieri la] LT\",lastWeek:\"[fosta] dddd [la] LT\",sameElse:\"L\"},relativeTime:{future:\"peste %s\",past:\"%s în urmă\",s:\"câteva secunde\",m:\"un minut\",mm:c,h:\"o oră\",hh:c,d:\"o zi\",dd:c,M:\"o lună\",MM:c,y:\"un an\",yy:c},week:{dow:1,doy:7}}),a.fullCalendar.datepickerLang(\"ro\",\"ro\",{closeText:\"Închide\",prevText:\"&#xAB; Luna precedentă\",nextText:\"Luna următoare &#xBB;\",currentText:\"Azi\",monthNames:[\"Ianuarie\",\"Februarie\",\"Martie\",\"Aprilie\",\"Mai\",\"Iunie\",\"Iulie\",\"August\",\"Septembrie\",\"Octombrie\",\"Noiembrie\",\"Decembrie\"],monthNamesShort:[\"Ian\",\"Feb\",\"Mar\",\"Apr\",\"Mai\",\"Iun\",\"Iul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"],dayNames:[\"Duminică\",\"Luni\",\"Marţi\",\"Miercuri\",\"Joi\",\"Vineri\",\"Sâmbătă\"],dayNamesShort:[\"Dum\",\"Lun\",\"Mar\",\"Mie\",\"Joi\",\"Vin\",\"Sâm\"],dayNamesMin:[\"Du\",\"Lu\",\"Ma\",\"Mi\",\"Jo\",\"Vi\",\"Sâ\"],weekHeader:\"Săpt\",dateFormat:\"dd.mm.yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),a.fullCalendar.lang(\"ro\",{buttonText:{prev:\"precedentă\",next:\"următoare\",month:\"Lună\",week:\"Săptămână\",day:\"Zi\",list:\"Agendă\"},allDayText:\"Toată ziua\",eventLimitText:function(a){return\"+alte \"+a}})}(),function(){function c(a,b){var c=a.split(\"_\");return b%10===1&&b%100!==11?c[0]:b%10>=2&&4>=b%10&&(10>b%100||b%100>=20)?c[1]:c[2]}function d(a,b,d){var e={mm:b?\"минута_минуты_минут\":\"минуту_минуты_минут\",hh:\"час_часа_часов\",dd:\"день_дня_дней\",MM:\"месяц_месяца_месяцев\",yy:\"год_года_лет\"};return\"m\"===d?b?\"минута\":\"минуту\":a+\" \"+c(e[d],+a)}function e(a,b){var c={nominative:\"январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь\".split(\"_\"),accusative:\"января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря\".split(\"_\")},d=/D[oD]?(\\[[^\\[\\]]*\\]|\\s+)+MMMM?/.test(b)?\"accusative\":\"nominative\";return c[d][a.month()]}function f(a,b){var c={nominative:\"янв_фев_март_апр_май_июнь_июль_авг_сен_окт_ноя_дек\".split(\"_\"),accusative:\"янв_фев_мар_апр_мая_июня_июля_авг_сен_окт_ноя_дек\".split(\"_\")},d=/D[oD]?(\\[[^\\[\\]]*\\]|\\s+)+MMMM?/.test(b)?\"accusative\":\"nominative\";return c[d][a.month()]}function g(a,b){var c={nominative:\"воскресенье_понедельник_вторник_среда_четверг_пятница_суббота\".split(\"_\"),accusative:\"воскресенье_понедельник_вторник_среду_четверг_пятницу_субботу\".split(\"_\")},d=/\\[ ?[Вв] ?(?:прошлую|следующую|эту)? ?\\] ?dddd/.test(b)?\"accusative\":\"nominative\";return c[d][a.day()]}(b.defineLocale||b.lang).call(b,\"ru\",{months:e,monthsShort:f,weekdays:g,weekdaysShort:\"вс_пн_вт_ср_чт_пт_сб\".split(\"_\"),weekdaysMin:\"вс_пн_вт_ср_чт_пт_сб\".split(\"_\"),monthsParse:[/^янв/i,/^фев/i,/^мар/i,/^апр/i,/^ма[й|я]/i,/^июн/i,/^июл/i,/^авг/i,/^сен/i,/^окт/i,/^ноя/i,/^дек/i],longDateFormat:{LT:\"HH:mm\",LTS:\"LT:ss\",L:\"DD.MM.YYYY\",LL:\"D MMMM YYYY г.\",LLL:\"D MMMM YYYY г., LT\",LLLL:\"dddd, D MMMM YYYY г., LT\"},calendar:{sameDay:\"[Сегодня в] LT\",nextDay:\"[Завтра в] LT\",lastDay:\"[Вчера в] LT\",nextWeek:function(){return 2===this.day()?\"[Во] dddd [в] LT\":\"[В] dddd [в] LT\"},lastWeek:function(a){if(a.week()===this.week())return 2===this.day()?\"[Во] dddd [в] LT\":\"[В] dddd [в] LT\";switch(this.day()){case 0:return\"[В прошлое] dddd [в] LT\";case 1:case 2:case 4:return\"[В прошлый] dddd [в] LT\";case 3:case 5:case 6:return\"[В прошлую] dddd [в] LT\"}},sameElse:\"L\"},relativeTime:{future:\"через %s\",past:\"%s назад\",s:\"несколько секунд\",m:d,mm:d,h:\"час\",hh:d,d:\"день\",dd:d,M:\"месяц\",MM:d,y:\"год\",yy:d},meridiemParse:/ночи|утра|дня|вечера/i,isPM:function(a){return/^(дня|вечера)$/.test(a)},meridiem:function(a,b,c){return 4>a?\"ночи\":12>a?\"утра\":17>a?\"дня\":\"вечера\"},ordinalParse:/\\d{1,2}-(й|го|я)/,ordinal:function(a,b){switch(b){case\"M\":case\"d\":case\"DDD\":return a+\"-й\";case\"D\":return a+\"-го\";case\"w\":case\"W\":return a+\"-я\";default:return a}},week:{dow:1,doy:7}}),a.fullCalendar.datepickerLang(\"ru\",\"ru\",{closeText:\"Закрыть\",prevText:\"&#x3C;Пред\",nextText:\"След&#x3E;\",currentText:\"Сегодня\",monthNames:[\"Январь\",\"Февраль\",\"Март\",\"Апрель\",\"Май\",\"Июнь\",\"Июль\",\"Август\",\"Сентябрь\",\"Октябрь\",\"Ноябрь\",\"Декабрь\"],monthNamesShort:[\"Янв\",\"Фев\",\"Мар\",\"Апр\",\"Май\",\"Июн\",\"Июл\",\"Авг\",\"Сен\",\"Окт\",\"Ноя\",\"Дек\"],dayNames:[\"воскресенье\",\"понедельник\",\"вторник\",\"среда\",\"четверг\",\"пятница\",\"суббота\"],dayNamesShort:[\"вск\",\"пнд\",\"втр\",\"срд\",\"чтв\",\"птн\",\"сбт\"],dayNamesMin:[\"Вс\",\"Пн\",\"Вт\",\"Ср\",\"Чт\",\"Пт\",\"Сб\"],weekHeader:\"Нед\",dateFormat:\"dd.mm.yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),a.fullCalendar.lang(\"ru\",{buttonText:{month:\"Месяц\",week:\"Неделя\",day:\"День\",list:\"Повестка дня\"},allDayText:\"Весь день\",eventLimitText:function(a){return\"+ ещё \"+a}})}(),function(){function c(a){return a>1&&5>a}function d(a,b,d,e){var f=a+\" \";switch(d){case\"s\":return b||e?\"pár sekúnd\":\"pár sekundami\";case\"m\":return b?\"minúta\":e?\"minútu\":\"minútou\";case\"mm\":return b||e?f+(c(a)?\"minúty\":\"minút\"):f+\"minútami\";case\"h\":return b?\"hodina\":e?\"hodinu\":\"hodinou\";case\"hh\":return b||e?f+(c(a)?\"hodiny\":\"hodín\"):f+\"hodinami\";case\"d\":return b||e?\"deň\":\"dňom\";case\"dd\":return b||e?f+(c(a)?\"dni\":\"dní\"):f+\"dňami\";case\"M\":return b||e?\"mesiac\":\"mesiacom\";case\"MM\":return b||e?f+(c(a)?\"mesiace\":\"mesiacov\"):f+\"mesiacmi\";case\"y\":return b||e?\"rok\":\"rokom\";case\"yy\":return b||e?f+(c(a)?\"roky\":\"rokov\"):f+\"rokmi\"}}var e=\"január_február_marec_apríl_máj_jún_júl_august_september_október_november_december\".split(\"_\"),f=\"jan_feb_mar_apr_máj_jún_júl_aug_sep_okt_nov_dec\".split(\"_\");(b.defineLocale||b.lang).call(b,\"sk\",{months:e,monthsShort:f,monthsParse:function(a,b){var c,d=[];for(c=0;12>c;c++)d[c]=new RegExp(\"^\"+a[c]+\"$|^\"+b[c]+\"$\",\"i\");return d}(e,f),weekdays:\"nedeľa_pondelok_utorok_streda_štvrtok_piatok_sobota\".split(\"_\"),weekdaysShort:\"ne_po_ut_st_št_pi_so\".split(\"_\"),weekdaysMin:\"ne_po_ut_st_št_pi_so\".split(\"_\"),longDateFormat:{LT:\"H:mm\",LTS:\"LT:ss\",L:\"DD.MM.YYYY\",LL:\"D. MMMM YYYY\",LLL:\"D. MMMM YYYY LT\",LLLL:\"dddd D. MMMM YYYY LT\"},calendar:{sameDay:\"[dnes o] LT\",nextDay:\"[zajtra o] LT\",nextWeek:function(){switch(this.day()){case 0:return\"[v nedeľu o] LT\";case 1:case 2:return\"[v] dddd [o] LT\";case 3:return\"[v stredu o] LT\";case 4:return\"[vo štvrtok o] LT\";case 5:return\"[v piatok o] LT\";case 6:return\"[v sobotu o] LT\"}},lastDay:\"[včera o] LT\",lastWeek:function(){switch(this.day()){case 0:return\"[minulú nedeľu o] LT\";case 1:case 2:return\"[minulý] dddd [o] LT\";case 3:return\"[minulú stredu o] LT\";case 4:case 5:return\"[minulý] dddd [o] LT\";case 6:return\"[minulú sobotu o] LT\"}},sameElse:\"L\"},relativeTime:{future:\"za %s\",past:\"pred %s\",s:d,m:d,mm:d,h:d,hh:d,d:d,dd:d,M:d,MM:d,y:d,yy:d},ordinalParse:/\\d{1,2}\\./,ordinal:\"%d.\",week:{dow:1,doy:4}}),a.fullCalendar.datepickerLang(\"sk\",\"sk\",{closeText:\"Zavrieť\",prevText:\"&#x3C;Predchádzajúci\",nextText:\"Nasledujúci&#x3E;\",currentText:\"Dnes\",monthNames:[\"január\",\"február\",\"marec\",\"apríl\",\"máj\",\"jún\",\"júl\",\"august\",\"september\",\"október\",\"november\",\"december\"],monthNamesShort:[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"Máj\",\"Jún\",\"Júl\",\"Aug\",\"Sep\",\"Okt\",\"Nov\",\"Dec\"],dayNames:[\"nedeľa\",\"pondelok\",\"utorok\",\"streda\",\"štvrtok\",\"piatok\",\"sobota\"],dayNamesShort:[\"Ned\",\"Pon\",\"Uto\",\"Str\",\"Štv\",\"Pia\",\"Sob\"],dayNamesMin:[\"Ne\",\"Po\",\"Ut\",\"St\",\"Št\",\"Pia\",\"So\"],weekHeader:\"Ty\",dateFormat:\"dd.mm.yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),a.fullCalendar.lang(\"sk\",{buttonText:{month:\"Mesiac\",week:\"Týždeň\",day:\"Deň\",list:\"Rozvrh\"},allDayText:\"Celý deň\",eventLimitText:function(a){return\"+ďalšie: \"+a}})}(),function(){function c(a,b,c){var d=a+\" \";switch(c){case\"m\":return b?\"ena minuta\":\"eno minuto\";case\"mm\":return d+=1===a?\"minuta\":2===a?\"minuti\":3===a||4===a?\"minute\":\"minut\";case\"h\":return b?\"ena ura\":\"eno uro\";case\"hh\":return d+=1===a?\"ura\":2===a?\"uri\":3===a||4===a?\"ure\":\"ur\";case\"dd\":return d+=1===a?\"dan\":\"dni\";case\"MM\":return d+=1===a?\"mesec\":2===a?\"meseca\":3===a||4===a?\"mesece\":\"mesecev\";case\"yy\":return d+=1===a?\"leto\":2===a?\"leti\":3===a||4===a?\"leta\":\"let\"}}(b.defineLocale||b.lang).call(b,\"sl\",{months:\"januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december\".split(\"_\"),monthsShort:\"jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.\".split(\"_\"),weekdays:\"nedelja_ponedeljek_torek_sreda_četrtek_petek_sobota\".split(\"_\"),weekdaysShort:\"ned._pon._tor._sre._čet._pet._sob.\".split(\"_\"),weekdaysMin:\"ne_po_to_sr_če_pe_so\".split(\"_\"),longDateFormat:{LT:\"H:mm\",LTS:\"LT:ss\",L:\"DD. MM. YYYY\",LL:\"D. MMMM YYYY\",LLL:\"D. MMMM YYYY LT\",LLLL:\"dddd, D. MMMM YYYY LT\"},calendar:{sameDay:\"[danes ob] LT\",nextDay:\"[jutri ob] LT\",nextWeek:function(){switch(this.day()){case 0:return\"[v] [nedeljo] [ob] LT\";case 3:return\"[v] [sredo] [ob] LT\";case 6:return\"[v] [soboto] [ob] LT\";case 1:case 2:case 4:case 5:return\"[v] dddd [ob] LT\"}},lastDay:\"[včeraj ob] LT\",lastWeek:function(){switch(this.day()){case 0:case 3:case 6:return\"[prejšnja] dddd [ob] LT\";case 1:case 2:case 4:case 5:return\"[prejšnji] dddd [ob] LT\"}},sameElse:\"L\"},relativeTime:{future:\"čez %s\",past:\"%s nazaj\",s:\"nekaj sekund\",m:c,mm:c,h:c,hh:c,d:\"en dan\",dd:c,M:\"en mesec\",MM:c,y:\"eno leto\",yy:c},ordinalParse:/\\d{1,2}\\./,ordinal:\"%d.\",week:{dow:1,doy:7}}),a.fullCalendar.datepickerLang(\"sl\",\"sl\",{closeText:\"Zapri\",prevText:\"&#x3C;Prejšnji\",nextText:\"Naslednji&#x3E;\",currentText:\"Trenutni\",monthNames:[\"Januar\",\"Februar\",\"Marec\",\"April\",\"Maj\",\"Junij\",\"Julij\",\"Avgust\",\"September\",\"Oktober\",\"November\",\"December\"],monthNamesShort:[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"Maj\",\"Jun\",\"Jul\",\"Avg\",\"Sep\",\"Okt\",\"Nov\",\"Dec\"],dayNames:[\"Nedelja\",\"Ponedeljek\",\"Torek\",\"Sreda\",\"Četrtek\",\"Petek\",\"Sobota\"],dayNamesShort:[\"Ned\",\"Pon\",\"Tor\",\"Sre\",\"Čet\",\"Pet\",\"Sob\"],dayNamesMin:[\"Ne\",\"Po\",\"To\",\"Sr\",\"Če\",\"Pe\",\"So\"],weekHeader:\"Teden\",dateFormat:\"dd.mm.yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),a.fullCalendar.lang(\"sl\",{buttonText:{month:\"Mesec\",week:\"Teden\",day:\"Dan\",list:\"Dnevni red\"},allDayText:\"Ves dan\",eventLimitText:\"več\"})}(),function(){var c={words:{m:[\"један минут\",\"једне минуте\"],mm:[\"минут\",\"минуте\",\"минута\"],h:[\"један сат\",\"једног сата\"],hh:[\"сат\",\"сата\",\"сати\"],dd:[\"дан\",\"дана\",\"дана\"],MM:[\"месец\",\"месеца\",\"месеци\"],yy:[\"година\",\"године\",\"година\"]},correctGrammaticalCase:function(a,b){return 1===a?b[0]:a>=2&&4>=a?b[1]:b[2]},translate:function(a,b,d){var e=c.words[d];return 1===d.length?b?e[0]:e[1]:a+\" \"+c.correctGrammaticalCase(a,e)}};(b.defineLocale||b.lang).call(b,\"sr-cyrl\",{months:[\"јануар\",\"фебруар\",\"март\",\"април\",\"мај\",\"јун\",\"јул\",\"август\",\"септембар\",\"октобар\",\"новембар\",\"децембар\"],monthsShort:[\"јан.\",\"феб.\",\"мар.\",\"апр.\",\"мај\",\"јун\",\"јул\",\"авг.\",\"сеп.\",\"окт.\",\"нов.\",\"дец.\"],weekdays:[\"недеља\",\"понедељак\",\"уторак\",\"среда\",\"четвртак\",\"петак\",\"субота\"],weekdaysShort:[\"нед.\",\"пон.\",\"уто.\",\"сре.\",\"чет.\",\"пет.\",\"суб.\"],weekdaysMin:[\"не\",\"по\",\"ут\",\"ср\",\"че\",\"пе\",\"су\"],longDateFormat:{LT:\"H:mm\",LTS:\"LT:ss\",L:\"DD. MM. YYYY\",LL:\"D. MMMM YYYY\",LLL:\"D. MMMM YYYY LT\",LLLL:\"dddd, D. MMMM YYYY LT\"},calendar:{sameDay:\"[данас у] LT\",nextDay:\"[сутра у] LT\",nextWeek:function(){switch(this.day()){case 0:return\"[у] [недељу] [у] LT\";case 3:return\"[у] [среду] [у] LT\";case 6:return\"[у] [суботу] [у] LT\";case 1:case 2:case 4:case 5:return\"[у] dddd [у] LT\"}},lastDay:\"[јуче у] LT\",lastWeek:function(){var a=[\"[прошле] [недеље] [у] LT\",\"[прошлог] [понедељка] [у] LT\",\"[прошлог] [уторка] [у] LT\",\"[прошле] [среде] [у] LT\",\"[прошлог] [четвртка] [у] LT\",\"[прошлог] [петка] [у] LT\",\"[прошле] [суботе] [у] LT\"];return a[this.day()]},sameElse:\"L\"},relativeTime:{future:\"за %s\",past:\"пре %s\",s:\"неколико секунди\",m:c.translate,mm:c.translate,h:c.translate,hh:c.translate,d:\"дан\",dd:c.translate,M:\"месец\",MM:c.translate,y:\"годину\",yy:c.translate},ordinalParse:/\\d{1,2}\\./,ordinal:\"%d.\",week:{dow:1,doy:7}}),a.fullCalendar.datepickerLang(\"sr-cyrl\",\"sr\",{closeText:\"Затвори\",prevText:\"&#x3C;\",nextText:\"&#x3E;\",currentText:\"Данас\",monthNames:[\"Јануар\",\"Фебруар\",\"Март\",\"Април\",\"Мај\",\"Јун\",\"Јул\",\"Август\",\"Септембар\",\"Октобар\",\"Новембар\",\"Децембар\"],monthNamesShort:[\"Јан\",\"Феб\",\"Мар\",\"Апр\",\"Мај\",\"Јун\",\"Јул\",\"Авг\",\"Сеп\",\"Окт\",\"Нов\",\"Дец\"],dayNames:[\"Недеља\",\"Понедељак\",\"Уторак\",\"Среда\",\"Четвртак\",\"Петак\",\"Субота\"],dayNamesShort:[\"Нед\",\"Пон\",\"Уто\",\"Сре\",\"Чет\",\"Пет\",\"Суб\"],dayNamesMin:[\"Не\",\"По\",\"Ут\",\"Ср\",\"Че\",\"Пе\",\"Су\"],weekHeader:\"Сед\",dateFormat:\"dd.mm.yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),a.fullCalendar.lang(\"sr-cyrl\",{buttonText:{month:\"Месец\",week:\"Недеља\",day:\"Дан\",list:\"Планер\"},allDayText:\"Цео дан\",eventLimitText:function(a){return\"+ још \"+a}})}(),function(){var c={words:{m:[\"jedan minut\",\"jedne minute\"],mm:[\"minut\",\"minute\",\"minuta\"],h:[\"jedan sat\",\"jednog sata\"],hh:[\"sat\",\"sata\",\"sati\"],dd:[\"dan\",\"dana\",\"dana\"],MM:[\"mesec\",\"meseca\",\"meseci\"],yy:[\"godina\",\"godine\",\"godina\"]},correctGrammaticalCase:function(a,b){return 1===a?b[0]:a>=2&&4>=a?b[1]:b[2]},translate:function(a,b,d){var e=c.words[d];return 1===d.length?b?e[0]:e[1]:a+\" \"+c.correctGrammaticalCase(a,e)}};(b.defineLocale||b.lang).call(b,\"sr\",{months:[\"januar\",\"februar\",\"mart\",\"april\",\"maj\",\"jun\",\"jul\",\"avgust\",\"septembar\",\"oktobar\",\"novembar\",\"decembar\"],monthsShort:[\"jan.\",\"feb.\",\"mar.\",\"apr.\",\"maj\",\"jun\",\"jul\",\"avg.\",\"sep.\",\"okt.\",\"nov.\",\"dec.\"],weekdays:[\"nedelja\",\"ponedeljak\",\"utorak\",\"sreda\",\"četvrtak\",\"petak\",\"subota\"],weekdaysShort:[\"ned.\",\"pon.\",\"uto.\",\"sre.\",\"čet.\",\"pet.\",\"sub.\"],weekdaysMin:[\"ne\",\"po\",\"ut\",\"sr\",\"če\",\"pe\",\"su\"],longDateFormat:{LT:\"H:mm\",LTS:\"LT:ss\",L:\"DD. MM. YYYY\",LL:\"D. MMMM YYYY\",LLL:\"D. MMMM YYYY LT\",LLLL:\"dddd, D. MMMM YYYY LT\"},calendar:{sameDay:\"[danas u] LT\",nextDay:\"[sutra u] LT\",nextWeek:function(){switch(this.day()){case 0:return\"[u] [nedelju] [u] LT\";case 3:return\"[u] [sredu] [u] LT\";case 6:return\"[u] [subotu] [u] LT\";case 1:case 2:case 4:case 5:return\"[u] dddd [u] LT\"}},lastDay:\"[juče u] LT\",lastWeek:function(){var a=[\"[prošle] [nedelje] [u] LT\",\"[prošlog] [ponedeljka] [u] LT\",\"[prošlog] [utorka] [u] LT\",\"[prošle] [srede] [u] LT\",\"[prošlog] [četvrtka] [u] LT\",\"[prošlog] [petka] [u] LT\",\"[prošle] [subote] [u] LT\"];return a[this.day()]},sameElse:\"L\"},relativeTime:{future:\"za %s\",past:\"pre %s\",s:\"nekoliko sekundi\",m:c.translate,mm:c.translate,h:c.translate,hh:c.translate,d:\"dan\",dd:c.translate,M:\"mesec\",MM:c.translate,y:\"godinu\",yy:c.translate},ordinalParse:/\\d{1,2}\\./,ordinal:\"%d.\",week:{dow:1,doy:7}}),a.fullCalendar.datepickerLang(\"sr\",\"sr\",{closeText:\"Затвори\",prevText:\"&#x3C;\",nextText:\"&#x3E;\",currentText:\"Данас\",monthNames:[\"Јануар\",\"Фебруар\",\"Март\",\"Април\",\"Мај\",\"Јун\",\"Јул\",\"Август\",\"Септембар\",\"Октобар\",\"Новембар\",\"Децембар\"],monthNamesShort:[\"Јан\",\"Феб\",\"Мар\",\"Апр\",\"Мај\",\"Јун\",\"Јул\",\"Авг\",\"Сеп\",\"Окт\",\"Нов\",\"Дец\"],dayNames:[\"Недеља\",\"Понедељак\",\"Уторак\",\"Среда\",\"Четвртак\",\"Петак\",\"Субота\"],dayNamesShort:[\"Нед\",\"Пон\",\"Уто\",\"Сре\",\"Чет\",\"Пет\",\"Суб\"],dayNamesMin:[\"Не\",\"По\",\"Ут\",\"Ср\",\"Че\",\"Пе\",\"Су\"],weekHeader:\"Сед\",dateFormat:\"dd.mm.yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),a.fullCalendar.lang(\"sr\",{buttonText:{month:\"Месец\",week:\"Недеља\",day:\"Дан\",list:\"Планер\"},allDayText:\"Цео дан\",eventLimitText:function(a){return\"+ још \"+a}})}(),function(){(b.defineLocale||b.lang).call(b,\"sv\",{months:\"januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december\".split(\"_\"),monthsShort:\"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec\".split(\"_\"),weekdays:\"söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag\".split(\"_\"),weekdaysShort:\"sön_mån_tis_ons_tor_fre_lör\".split(\"_\"),weekdaysMin:\"sö_må_ti_on_to_fr_lö\".split(\"_\"),longDateFormat:{LT:\"HH:mm\",LTS:\"LT:ss\",L:\"YYYY-MM-DD\",LL:\"D MMMM YYYY\",LLL:\"D MMMM YYYY LT\",LLLL:\"dddd D MMMM YYYY LT\"},calendar:{sameDay:\"[Idag] LT\",nextDay:\"[Imorgon] LT\",lastDay:\"[Igår] LT\",nextWeek:\"dddd LT\",lastWeek:\"[Förra] dddd[en] LT\",sameElse:\"L\"},relativeTime:{future:\"om %s\",past:\"för %s sedan\",s:\"några sekunder\",m:\"en minut\",mm:\"%d minuter\",h:\"en timme\",hh:\"%d timmar\",d:\"en dag\",dd:\"%d dagar\",M:\"en månad\",MM:\"%d månader\",y:\"ett år\",yy:\"%d år\"},ordinalParse:/\\d{1,2}(e|a)/,ordinal:function(a){var b=a%10,c=1===~~(a%100/10)?\"e\":1===b?\"a\":2===b?\"a\":\"e\";return a+c},week:{dow:1,doy:4}}),a.fullCalendar.datepickerLang(\"sv\",\"sv\",{closeText:\"Stäng\",prevText:\"&#xAB;Förra\",nextText:\"Nästa&#xBB;\",currentText:\"Idag\",monthNames:[\"Januari\",\"Februari\",\"Mars\",\"April\",\"Maj\",\"Juni\",\"Juli\",\"Augusti\",\"September\",\"Oktober\",\"November\",\"December\"],monthNamesShort:[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"Maj\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Okt\",\"Nov\",\"Dec\"],dayNamesShort:[\"Sön\",\"Mån\",\"Tis\",\"Ons\",\"Tor\",\"Fre\",\"Lör\"],dayNames:[\"Söndag\",\"Måndag\",\"Tisdag\",\"Onsdag\",\"Torsdag\",\"Fredag\",\"Lördag\"],dayNamesMin:[\"Sö\",\"Må\",\"Ti\",\"On\",\"To\",\"Fr\",\"Lö\"],weekHeader:\"Ve\",dateFormat:\"yy-mm-dd\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),a.fullCalendar.lang(\"sv\",{buttonText:{month:\"Månad\",week:\"Vecka\",day:\"Dag\",list:\"Program\"},allDayText:\"Heldag\",eventLimitText:\"till\"})}(),function(){(b.defineLocale||b.lang).call(b,\"th\",{months:\"มกราคม_กุมภาพันธ์_มีนาคม_เมษายน_พฤษภาคม_มิถุนายน_กรกฎาคม_สิงหาคม_กันยายน_ตุลาคม_พฤศจิกายน_ธันวาคม\".split(\"_\"),monthsShort:\"มกรา_กุมภา_มีนา_เมษา_พฤษภา_มิถุนา_กรกฎา_สิงหา_กันยา_ตุลา_พฤศจิกา_ธันวา\".split(\"_\"),weekdays:\"อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัสบดี_ศุกร์_เสาร์\".split(\"_\"),weekdaysShort:\"อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัส_ศุกร์_เสาร์\".split(\"_\"),weekdaysMin:\"อา._จ._อ._พ._พฤ._ศ._ส.\".split(\"_\"),longDateFormat:{LT:\"H นาฬิกา m นาที\",LTS:\"LT s วินาที\",L:\"YYYY/MM/DD\",LL:\"D MMMM YYYY\",LLL:\"D MMMM YYYY เวลา LT\",LLLL:\"วันddddที่ D MMMM YYYY เวลา LT\"},meridiemParse:/ก่อนเที่ยง|หลังเที่ยง/,isPM:function(a){return\"หลังเที่ยง\"===a},meridiem:function(a,b,c){return 12>a?\"ก่อนเที่ยง\":\"หลังเที่ยง\"},calendar:{sameDay:\"[วันนี้ เวลา] LT\",nextDay:\"[พรุ่งนี้ เวลา] LT\",nextWeek:\"dddd[หน้า เวลา] LT\",lastDay:\"[เมื่อวานนี้ เวลา] LT\",lastWeek:\"[วัน]dddd[ที่แล้ว เวลา] LT\",sameElse:\"L\"},relativeTime:{future:\"อีก %s\",past:\"%sที่แล้ว\",s:\"ไม่กี่วินาที\",m:\"1 นาที\",mm:\"%d นาที\",h:\"1 ชั่วโมง\",hh:\"%d ชั่วโมง\",d:\"1 วัน\",dd:\"%d วัน\",M:\"1 เดือน\",MM:\"%d เดือน\",y:\"1 ปี\",yy:\"%d ปี\"}}),a.fullCalendar.datepickerLang(\"th\",\"th\",{closeText:\"ปิด\",prevText:\"&#xAB;&#xA0;ย้อน\",nextText:\"ถัดไป&#xA0;&#xBB;\",currentText:\"วันนี้\",monthNames:[\"มกราคม\",\"กุมภาพันธ์\",\"มีนาคม\",\"เมษายน\",\"พฤษภาคม\",\"มิถุนายน\",\"กรกฎาคม\",\"สิงหาคม\",\"กันยายน\",\"ตุลาคม\",\"พฤศจิกายน\",\"ธันวาคม\"],monthNamesShort:[\"ม.ค.\",\"ก.พ.\",\"มี.ค.\",\"เม.ย.\",\"พ.ค.\",\"มิ.ย.\",\"ก.ค.\",\"ส.ค.\",\"ก.ย.\",\"ต.ค.\",\"พ.ย.\",\"ธ.ค.\"],dayNames:[\"อาทิตย์\",\"จันทร์\",\"อังคาร\",\"พุธ\",\"พฤหัสบดี\",\"ศุกร์\",\"เสาร์\"],dayNamesShort:[\"อา.\",\"จ.\",\"อ.\",\"พ.\",\"พฤ.\",\"ศ.\",\"ส.\"],dayNamesMin:[\"อา.\",\"จ.\",\"อ.\",\"พ.\",\"พฤ.\",\"ศ.\",\"ส.\"],weekHeader:\"Wk\",dateFormat:\"dd/mm/yy\",firstDay:0,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),a.fullCalendar.lang(\"th\",{buttonText:{month:\"เดือน\",week:\"สัปดาห์\",day:\"วัน\",list:\"แผนงาน\"},allDayText:\"ตลอดวัน\",eventLimitText:\"เพิ่มเติม\"})}(),function(){var c={1:\"'inci\",5:\"'inci\",8:\"'inci\",70:\"'inci\",80:\"'inci\",2:\"'nci\",7:\"'nci\",20:\"'nci\",50:\"'nci\",3:\"'üncü\",4:\"'üncü\",100:\"'üncü\",6:\"'ncı\",9:\"'uncu\",10:\"'uncu\",30:\"'uncu\",60:\"'ıncı\",90:\"'ıncı\"};(b.defineLocale||b.lang).call(b,\"tr\",{months:\"Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık\".split(\"_\"),monthsShort:\"Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara\".split(\"_\"),weekdays:\"Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi\".split(\"_\"),weekdaysShort:\"Paz_Pts_Sal_Çar_Per_Cum_Cts\".split(\"_\"),weekdaysMin:\"Pz_Pt_Sa_Ça_Pe_Cu_Ct\".split(\"_\"),longDateFormat:{LT:\"HH:mm\",LTS:\"LT:ss\",L:\"DD.MM.YYYY\",LL:\"D MMMM YYYY\",LLL:\"D MMMM YYYY LT\",LLLL:\"dddd, D MMMM YYYY LT\"},calendar:{sameDay:\"[bugün saat] LT\",nextDay:\"[yarın saat] LT\",nextWeek:\"[haftaya] dddd [saat] LT\",lastDay:\"[dün] LT\",lastWeek:\"[geçen hafta] dddd [saat] LT\",sameElse:\"L\"},relativeTime:{future:\"%s sonra\",past:\"%s önce\",s:\"birkaç saniye\",m:\"bir dakika\",mm:\"%d dakika\",h:\"bir saat\",hh:\"%d saat\",d:\"bir gün\",dd:\"%d gün\",M:\"bir ay\",MM:\"%d ay\",y:\"bir yıl\",yy:\"%d yıl\"},ordinalParse:/\\d{1,2}'(inci|nci|üncü|ncı|uncu|ıncı)/,ordinal:function(a){if(0===a)return a+\"'ıncı\";var b=a%10,d=a%100-b,e=a>=100?100:null;return a+(c[b]||c[d]||c[e])},week:{dow:1,doy:7}}),a.fullCalendar.datepickerLang(\"tr\",\"tr\",{closeText:\"kapat\",prevText:\"&#x3C;geri\",nextText:\"ileri&#x3e\",currentText:\"bugün\",monthNames:[\"Ocak\",\"Şubat\",\"Mart\",\"Nisan\",\"Mayıs\",\"Haziran\",\"Temmuz\",\"Ağustos\",\"Eylül\",\"Ekim\",\"Kasım\",\"Aralık\"],monthNamesShort:[\"Oca\",\"Şub\",\"Mar\",\"Nis\",\"May\",\"Haz\",\"Tem\",\"Ağu\",\"Eyl\",\"Eki\",\"Kas\",\"Ara\"],dayNames:[\"Pazar\",\"Pazartesi\",\"Salı\",\"Çarşamba\",\"Perşembe\",\"Cuma\",\"Cumartesi\"],dayNamesShort:[\"Pz\",\"Pt\",\"Sa\",\"Ça\",\"Pe\",\"Cu\",\"Ct\"],dayNamesMin:[\"Pz\",\"Pt\",\"Sa\",\"Ça\",\"Pe\",\"Cu\",\"Ct\"],weekHeader:\"Hf\",dateFormat:\"dd.mm.yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),a.fullCalendar.lang(\"tr\",{buttonText:{next:\"ileri\",month:\"Ay\",week:\"Hafta\",day:\"Gün\",list:\"Ajanda\"},allDayText:\"Tüm gün\",eventLimitText:\"daha fazla\"})}(),function(){function c(a,b){var c=a.split(\"_\");return b%10===1&&b%100!==11?c[0]:b%10>=2&&4>=b%10&&(10>b%100||b%100>=20)?c[1]:c[2]}function d(a,b,d){var e={mm:\"хвилина_хвилини_хвилин\",hh:\"година_години_годин\",dd:\"день_дні_днів\",MM:\"місяць_місяці_місяців\",yy:\"рік_роки_років\"};return\"m\"===d?b?\"хвилина\":\"хвилину\":\"h\"===d?b?\"година\":\"годину\":a+\" \"+c(e[d],+a)}function e(a,b){var c={nominative:\"січень_лютий_березень_квітень_травень_червень_липень_серпень_вересень_жовтень_листопад_грудень\".split(\"_\"),accusative:\"січня_лютого_березня_квітня_травня_червня_липня_серпня_вересня_жовтня_листопада_грудня\".split(\"_\")},d=/D[oD]? *MMMM?/.test(b)?\"accusative\":\"nominative\";return c[d][a.month()]}function f(a,b){var c={nominative:\"неділя_понеділок_вівторок_середа_четвер_п’ятниця_субота\".split(\"_\"),accusative:\"неділю_понеділок_вівторок_середу_четвер_п’ятницю_суботу\".split(\"_\"),genitive:\"неділі_понеділка_вівторка_середи_четверга_п’ятниці_суботи\".split(\"_\")},d=/(\\[[ВвУу]\\]) ?dddd/.test(b)?\"accusative\":/\\[?(?:минулої|наступної)? ?\\] ?dddd/.test(b)?\"genitive\":\"nominative\";return c[d][a.day()]}function g(a){return function(){return a+\"о\"+(11===this.hours()?\"б\":\"\")+\"] LT\"}}(b.defineLocale||b.lang).call(b,\"uk\",{months:e,monthsShort:\"січ_лют_бер_квіт_трав_черв_лип_серп_вер_жовт_лист_груд\".split(\"_\"),weekdays:f,weekdaysShort:\"нд_пн_вт_ср_чт_пт_сб\".split(\"_\"),weekdaysMin:\"нд_пн_вт_ср_чт_пт_сб\".split(\"_\"),longDateFormat:{LT:\"HH:mm\",LTS:\"LT:ss\",L:\"DD.MM.YYYY\",LL:\"D MMMM YYYY р.\",LLL:\"D MMMM YYYY р., LT\",LLLL:\"dddd, D MMMM YYYY р., LT\"},calendar:{sameDay:g(\"[Сьогодні \"),nextDay:g(\"[Завтра \"),lastDay:g(\"[Вчора \"),nextWeek:g(\"[У] dddd [\"),lastWeek:function(){switch(this.day()){case 0:case 3:case 5:case 6:return g(\"[Минулої] dddd [\").call(this);case 1:case 2:case 4:return g(\"[Минулого] dddd [\").call(this)}},sameElse:\"L\"},relativeTime:{future:\"за %s\",past:\"%s тому\",s:\"декілька секунд\",m:d,mm:d,h:\"годину\",hh:d,d:\"день\",dd:d,M:\"місяць\",MM:d,y:\"рік\",yy:d},meridiemParse:/ночі|ранку|дня|вечора/,isPM:function(a){return/^(дня|вечора)$/.test(a)},meridiem:function(a,b,c){return 4>a?\"ночі\":12>a?\"ранку\":17>a?\"дня\":\"вечора\"},ordinalParse:/\\d{1,2}-(й|го)/,ordinal:function(a,b){switch(b){case\"M\":case\"d\":case\"DDD\":case\"w\":case\"W\":return a+\"-й\";case\"D\":return a+\"-го\";default:return a}},week:{dow:1,doy:7}}),a.fullCalendar.datepickerLang(\"uk\",\"uk\",{closeText:\"Закрити\",prevText:\"&#x3C;\",nextText:\"&#x3E;\",currentText:\"Сьогодні\",monthNames:[\"Січень\",\"Лютий\",\"Березень\",\"Квітень\",\"Травень\",\"Червень\",\"Липень\",\"Серпень\",\"Вересень\",\"Жовтень\",\"Листопад\",\"Грудень\"],monthNamesShort:[\"Січ\",\"Лют\",\"Бер\",\"Кві\",\"Тра\",\"Чер\",\"Лип\",\"Сер\",\"Вер\",\"Жов\",\"Лис\",\"Гру\"],dayNames:[\"неділя\",\"понеділок\",\"вівторок\",\"середа\",\"четвер\",\"п’ятниця\",\"субота\"],dayNamesShort:[\"нед\",\"пнд\",\"вів\",\"срд\",\"чтв\",\"птн\",\"сбт\"],dayNamesMin:[\"Нд\",\"Пн\",\"Вт\",\"Ср\",\"Чт\",\"Пт\",\"Сб\"],weekHeader:\"Тиж\",dateFormat:\"dd.mm.yy\",firstDay:1,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),a.fullCalendar.lang(\"uk\",{buttonText:{month:\"Місяць\",week:\"Тиждень\",day:\"День\",list:\"Порядок денний\"},allDayText:\"Увесь день\",eventLimitText:function(a){return\"+ще \"+a+\"...\"}})}(),function(){(b.defineLocale||b.lang).call(b,\"vi\",{months:\"tháng 1_tháng 2_tháng 3_tháng 4_tháng 5_tháng 6_tháng 7_tháng 8_tháng 9_tháng 10_tháng 11_tháng 12\".split(\"_\"),monthsShort:\"Th01_Th02_Th03_Th04_Th05_Th06_Th07_Th08_Th09_Th10_Th11_Th12\".split(\"_\"),weekdays:\"chủ nhật_thứ hai_thứ ba_thứ tư_thứ năm_thứ sáu_thứ bảy\".split(\"_\"),weekdaysShort:\"CN_T2_T3_T4_T5_T6_T7\".split(\"_\"),weekdaysMin:\"CN_T2_T3_T4_T5_T6_T7\".split(\"_\"),longDateFormat:{LT:\"HH:mm\",LTS:\"LT:ss\",L:\"DD/MM/YYYY\",LL:\"D MMMM [năm] YYYY\",LLL:\"D MMMM [năm] YYYY LT\",LLLL:\"dddd, D MMMM [năm] YYYY LT\",l:\"DD/M/YYYY\",ll:\"D MMM YYYY\",lll:\"D MMM YYYY LT\",llll:\"ddd, D MMM YYYY LT\"},calendar:{sameDay:\"[Hôm nay lúc] LT\",nextDay:\"[Ngày mai lúc] LT\",nextWeek:\"dddd [tuần tới lúc] LT\",lastDay:\"[Hôm qua lúc] LT\",lastWeek:\"dddd [tuần rồi lúc] LT\",sameElse:\"L\"},relativeTime:{future:\"%s tới\",past:\"%s trước\",s:\"vài giây\",m:\"một phút\",mm:\"%d phút\",h:\"một giờ\",hh:\"%d giờ\",d:\"một ngày\",dd:\"%d ngày\",M:\"một tháng\",MM:\"%d tháng\",y:\"một năm\",yy:\"%d năm\"},ordinalParse:/\\d{1,2}/,ordinal:function(a){return a},week:{dow:1,doy:4}}),\na.fullCalendar.datepickerLang(\"vi\",\"vi\",{closeText:\"Đóng\",prevText:\"&#x3C;Trước\",nextText:\"Tiếp&#x3E;\",currentText:\"Hôm nay\",monthNames:[\"Tháng Một\",\"Tháng Hai\",\"Tháng Ba\",\"Tháng Tư\",\"Tháng Năm\",\"Tháng Sáu\",\"Tháng Bảy\",\"Tháng Tám\",\"Tháng Chín\",\"Tháng Mười\",\"Tháng Mười Một\",\"Tháng Mười Hai\"],monthNamesShort:[\"Tháng 1\",\"Tháng 2\",\"Tháng 3\",\"Tháng 4\",\"Tháng 5\",\"Tháng 6\",\"Tháng 7\",\"Tháng 8\",\"Tháng 9\",\"Tháng 10\",\"Tháng 11\",\"Tháng 12\"],dayNames:[\"Chủ Nhật\",\"Thứ Hai\",\"Thứ Ba\",\"Thứ Tư\",\"Thứ Năm\",\"Thứ Sáu\",\"Thứ Bảy\"],dayNamesShort:[\"CN\",\"T2\",\"T3\",\"T4\",\"T5\",\"T6\",\"T7\"],dayNamesMin:[\"CN\",\"T2\",\"T3\",\"T4\",\"T5\",\"T6\",\"T7\"],weekHeader:\"Tu\",dateFormat:\"dd/mm/yy\",firstDay:0,isRTL:!1,showMonthAfterYear:!1,yearSuffix:\"\"}),a.fullCalendar.lang(\"vi\",{buttonText:{month:\"Tháng\",week:\"Tuần\",day:\"Ngày\",list:\"Lịch biểu\"},allDayText:\"Cả ngày\",eventLimitText:function(a){return\"+ thêm \"+a}})}(),function(){(b.defineLocale||b.lang).call(b,\"zh-cn\",{months:\"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月\".split(\"_\"),monthsShort:\"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月\".split(\"_\"),weekdays:\"星期日_星期一_星期二_星期三_星期四_星期五_星期六\".split(\"_\"),weekdaysShort:\"周日_周一_周二_周三_周四_周五_周六\".split(\"_\"),weekdaysMin:\"日_一_二_三_四_五_六\".split(\"_\"),longDateFormat:{LT:\"Ah点mm\",LTS:\"Ah点m分s秒\",L:\"YYYY-MM-DD\",LL:\"YYYY年MMMD日\",LLL:\"YYYY年MMMD日LT\",LLLL:\"YYYY年MMMD日ddddLT\",l:\"YYYY-MM-DD\",ll:\"YYYY年MMMD日\",lll:\"YYYY年MMMD日LT\",llll:\"YYYY年MMMD日ddddLT\"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(a,b){return 12===a&&(a=0),\"凌晨\"===b||\"早上\"===b||\"上午\"===b?a:\"下午\"===b||\"晚上\"===b?a+12:a>=11?a:a+12},meridiem:function(a,b,c){var d=100*a+b;return 600>d?\"凌晨\":900>d?\"早上\":1130>d?\"上午\":1230>d?\"中午\":1800>d?\"下午\":\"晚上\"},calendar:{sameDay:function(){return 0===this.minutes()?\"[今天]Ah[点整]\":\"[今天]LT\"},nextDay:function(){return 0===this.minutes()?\"[明天]Ah[点整]\":\"[明天]LT\"},lastDay:function(){return 0===this.minutes()?\"[昨天]Ah[点整]\":\"[昨天]LT\"},nextWeek:function(){var a,c;return a=b().startOf(\"week\"),c=this.unix()-a.unix()>=604800?\"[下]\":\"[本]\",0===this.minutes()?c+\"dddAh点整\":c+\"dddAh点mm\"},lastWeek:function(){var a,c;return a=b().startOf(\"week\"),c=this.unix()<a.unix()?\"[上]\":\"[本]\",0===this.minutes()?c+\"dddAh点整\":c+\"dddAh点mm\"},sameElse:\"LL\"},ordinalParse:/\\d{1,2}(日|月|周)/,ordinal:function(a,b){switch(b){case\"d\":case\"D\":case\"DDD\":return a+\"日\";case\"M\":return a+\"月\";case\"w\":case\"W\":return a+\"周\";default:return a}},relativeTime:{future:\"%s内\",past:\"%s前\",s:\"几秒\",m:\"1分钟\",mm:\"%d分钟\",h:\"1小时\",hh:\"%d小时\",d:\"1天\",dd:\"%d天\",M:\"1个月\",MM:\"%d个月\",y:\"1年\",yy:\"%d年\"},week:{dow:1,doy:4}}),a.fullCalendar.datepickerLang(\"zh-cn\",\"zh-CN\",{closeText:\"关闭\",prevText:\"&#x3C;上月\",nextText:\"下月&#x3E;\",currentText:\"今天\",monthNames:[\"一月\",\"二月\",\"三月\",\"四月\",\"五月\",\"六月\",\"七月\",\"八月\",\"九月\",\"十月\",\"十一月\",\"十二月\"],monthNamesShort:[\"一月\",\"二月\",\"三月\",\"四月\",\"五月\",\"六月\",\"七月\",\"八月\",\"九月\",\"十月\",\"十一月\",\"十二月\"],dayNames:[\"星期日\",\"星期一\",\"星期二\",\"星期三\",\"星期四\",\"星期五\",\"星期六\"],dayNamesShort:[\"周日\",\"周一\",\"周二\",\"周三\",\"周四\",\"周五\",\"周六\"],dayNamesMin:[\"日\",\"一\",\"二\",\"三\",\"四\",\"五\",\"六\"],weekHeader:\"周\",dateFormat:\"yy-mm-dd\",firstDay:1,isRTL:!1,showMonthAfterYear:!0,yearSuffix:\"年\"}),a.fullCalendar.lang(\"zh-cn\",{buttonText:{month:\"月\",week:\"周\",day:\"日\",list:\"日程\"},allDayText:\"全天\",eventLimitText:function(a){return\"另外 \"+a+\" 个\"}})}(),function(){(b.defineLocale||b.lang).call(b,\"zh-tw\",{months:\"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月\".split(\"_\"),monthsShort:\"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月\".split(\"_\"),weekdays:\"星期日_星期一_星期二_星期三_星期四_星期五_星期六\".split(\"_\"),weekdaysShort:\"週日_週一_週二_週三_週四_週五_週六\".split(\"_\"),weekdaysMin:\"日_一_二_三_四_五_六\".split(\"_\"),longDateFormat:{LT:\"Ah點mm\",LTS:\"Ah點m分s秒\",L:\"YYYY年MMMD日\",LL:\"YYYY年MMMD日\",LLL:\"YYYY年MMMD日LT\",LLLL:\"YYYY年MMMD日ddddLT\",l:\"YYYY年MMMD日\",ll:\"YYYY年MMMD日\",lll:\"YYYY年MMMD日LT\",llll:\"YYYY年MMMD日ddddLT\"},meridiemParse:/早上|上午|中午|下午|晚上/,meridiemHour:function(a,b){return 12===a&&(a=0),\"早上\"===b||\"上午\"===b?a:\"中午\"===b?a>=11?a:a+12:\"下午\"===b||\"晚上\"===b?a+12:void 0},meridiem:function(a,b,c){var d=100*a+b;return 900>d?\"早上\":1130>d?\"上午\":1230>d?\"中午\":1800>d?\"下午\":\"晚上\"},calendar:{sameDay:\"[今天]LT\",nextDay:\"[明天]LT\",nextWeek:\"[下]ddddLT\",lastDay:\"[昨天]LT\",lastWeek:\"[上]ddddLT\",sameElse:\"L\"},ordinalParse:/\\d{1,2}(日|月|週)/,ordinal:function(a,b){switch(b){case\"d\":case\"D\":case\"DDD\":return a+\"日\";case\"M\":return a+\"月\";case\"w\":case\"W\":return a+\"週\";default:return a}},relativeTime:{future:\"%s內\",past:\"%s前\",s:\"幾秒\",m:\"一分鐘\",mm:\"%d分鐘\",h:\"一小時\",hh:\"%d小時\",d:\"一天\",dd:\"%d天\",M:\"一個月\",MM:\"%d個月\",y:\"一年\",yy:\"%d年\"}}),a.fullCalendar.datepickerLang(\"zh-tw\",\"zh-TW\",{closeText:\"關閉\",prevText:\"&#x3C;上月\",nextText:\"下月&#x3E;\",currentText:\"今天\",monthNames:[\"一月\",\"二月\",\"三月\",\"四月\",\"五月\",\"六月\",\"七月\",\"八月\",\"九月\",\"十月\",\"十一月\",\"十二月\"],monthNamesShort:[\"一月\",\"二月\",\"三月\",\"四月\",\"五月\",\"六月\",\"七月\",\"八月\",\"九月\",\"十月\",\"十一月\",\"十二月\"],dayNames:[\"星期日\",\"星期一\",\"星期二\",\"星期三\",\"星期四\",\"星期五\",\"星期六\"],dayNamesShort:[\"周日\",\"周一\",\"周二\",\"周三\",\"周四\",\"周五\",\"周六\"],dayNamesMin:[\"日\",\"一\",\"二\",\"三\",\"四\",\"五\",\"六\"],weekHeader:\"周\",dateFormat:\"yy/mm/dd\",firstDay:1,isRTL:!1,showMonthAfterYear:!0,yearSuffix:\"年\"}),a.fullCalendar.lang(\"zh-tw\",{buttonText:{month:\"月\",week:\"週\",day:\"天\",list:\"待辦事項\"},allDayText:\"全天\",eventLimitText:\"更多\"})}(),(b.locale||b.lang).call(b,\"en\"),a.fullCalendar.lang(\"en\"),a.datepicker&&a.datepicker.setDefaults(a.datepicker.regional[\"\"])});","/*!\n * FullCalendar v2.5.0 Google Calendar Plugin\n * Docs & License: http://fullcalendar.io/\n * (c) 2015 Adam Shaw\n */\n \n(function(factory) {\n\tif (typeof define === 'function' && define.amd) {\n\t\tdefine([ 'jquery' ], factory);\n\t}\n\telse if (typeof exports === 'object') { // Node/CommonJS\n\t\tmodule.exports = factory(require('jquery'));\n\t}\n\telse {\n\t\tfactory(jQuery);\n\t}\n})(function($) {\n\n\nvar API_BASE = 'https://www.googleapis.com/calendar/v3/calendars';\nvar FC = $.fullCalendar;\nvar applyAll = FC.applyAll;\n\n\nFC.sourceNormalizers.push(function(sourceOptions) {\n\tvar googleCalendarId = sourceOptions.googleCalendarId;\n\tvar url = sourceOptions.url;\n\tvar match;\n\n\t// if the Google Calendar ID hasn't been explicitly defined\n\tif (!googleCalendarId && url) {\n\n\t\t// detect if the ID was specified as a single string.\n\t\t// will match calendars like \"asdf1234@calendar.google.com\" in addition to person email calendars.\n\t\tif (/^[^\\/]+@([^\\/\\.]+\\.)*(google|googlemail|gmail)\\.com$/.test(url)) {\n\t\t\tgoogleCalendarId = url;\n\t\t}\n\t\t// try to scrape it out of a V1 or V3 API feed URL\n\t\telse if (\n\t\t\t(match = /^https:\\/\\/www.googleapis.com\\/calendar\\/v3\\/calendars\\/([^\\/]*)/.exec(url)) ||\n\t\t\t(match = /^https?:\\/\\/www.google.com\\/calendar\\/feeds\\/([^\\/]*)/.exec(url))\n\t\t) {\n\t\t\tgoogleCalendarId = decodeURIComponent(match[1]);\n\t\t}\n\n\t\tif (googleCalendarId) {\n\t\t\tsourceOptions.googleCalendarId = googleCalendarId;\n\t\t}\n\t}\n\n\n\tif (googleCalendarId) { // is this a Google Calendar?\n\n\t\t// make each Google Calendar source uneditable by default\n\t\tif (sourceOptions.editable == null) {\n\t\t\tsourceOptions.editable = false;\n\t\t}\n\n\t\t// We want removeEventSource to work, but it won't know about the googleCalendarId primitive.\n\t\t// Shoehorn it into the url, which will function as the unique primitive. Won't cause side effects.\n\t\t// This hack is obsolete since 2.2.3, but keep it so this plugin file is compatible with old versions.\n\t\tsourceOptions.url = googleCalendarId;\n\t}\n});\n\n\nFC.sourceFetchers.push(function(sourceOptions, start, end, timezone) {\n\tif (sourceOptions.googleCalendarId) {\n\t\treturn transformOptions(sourceOptions, start, end, timezone, this); // `this` is the calendar\n\t}\n});\n\n\nfunction transformOptions(sourceOptions, start, end, timezone, calendar) {\n\tvar url = API_BASE + '/' + encodeURIComponent(sourceOptions.googleCalendarId) + '/events?callback=?'; // jsonp\n\tvar apiKey = sourceOptions.googleCalendarApiKey || calendar.options.googleCalendarApiKey;\n\tvar success = sourceOptions.success;\n\tvar data;\n\tvar timezoneArg; // populated when a specific timezone. escaped to Google's liking\n\n\tfunction reportError(message, apiErrorObjs) {\n\t\tvar errorObjs = apiErrorObjs || [ { message: message } ]; // to be passed into error handlers\n\n\t\t// call error handlers\n\t\t(sourceOptions.googleCalendarError || $.noop).apply(calendar, errorObjs);\n\t\t(calendar.options.googleCalendarError || $.noop).apply(calendar, errorObjs);\n\n\t\t// print error to debug console\n\t\tFC.warn.apply(null, [ message ].concat(apiErrorObjs || []));\n\t}\n\n\tif (!apiKey) {\n\t\treportError(\"Specify a googleCalendarApiKey. See http://fullcalendar.io/docs/google_calendar/\");\n\t\treturn {}; // an empty source to use instead. won't fetch anything.\n\t}\n\n\t// The API expects an ISO8601 datetime with a time and timezone part.\n\t// Since the calendar's timezone offset isn't always known, request the date in UTC and pad it by a day on each\n\t// side, guaranteeing we will receive all events in the desired range, albeit a superset.\n\t// .utc() will set a zone and give it a 00:00:00 time.\n\tif (!start.hasZone()) {\n\t\tstart = start.clone().utc().add(-1, 'day');\n\t}\n\tif (!end.hasZone()) {\n\t\tend = end.clone().utc().add(1, 'day');\n\t}\n\n\t// when sending timezone names to Google, only accepts underscores, not spaces\n\tif (timezone && timezone != 'local') {\n\t\ttimezoneArg = timezone.replace(' ', '_');\n\t}\n\n\tdata = $.extend({}, sourceOptions.data || {}, {\n\t\tkey: apiKey,\n\t\ttimeMin: start.format(),\n\t\ttimeMax: end.format(),\n\t\ttimeZone: timezoneArg,\n\t\tsingleEvents: true,\n\t\tmaxResults: 9999\n\t});\n\n\treturn $.extend({}, sourceOptions, {\n\t\tgoogleCalendarId: null, // prevents source-normalizing from happening again\n\t\turl: url,\n\t\tdata: data,\n\t\tstartParam: false, // `false` omits this parameter. we already included it above\n\t\tendParam: false, // same\n\t\ttimezoneParam: false, // same\n\t\tsuccess: function(data) {\n\t\t\tvar events = [];\n\t\t\tvar successArgs;\n\t\t\tvar successRes;\n\n\t\t\tif (data.error) {\n\t\t\t\treportError('Google Calendar API: ' + data.error.message, data.error.errors);\n\t\t\t}\n\t\t\telse if (data.items) {\n\t\t\t\t$.each(data.items, function(i, entry) {\n\t\t\t\t\tvar url = entry.htmlLink;\n\n\t\t\t\t\t// make the URLs for each event show times in the correct timezone\n\t\t\t\t\tif (timezoneArg) {\n\t\t\t\t\t\turl = injectQsComponent(url, 'ctz=' + timezoneArg);\n\t\t\t\t\t}\n\n\t\t\t\t\tevents.push({\n\t\t\t\t\t\tid: entry.id,\n\t\t\t\t\t\ttitle: entry.summary,\n\t\t\t\t\t\tstart: entry.start.dateTime || entry.start.date, // try timed. will fall back to all-day\n\t\t\t\t\t\tend: entry.end.dateTime || entry.end.date, // same\n\t\t\t\t\t\turl: url,\n\t\t\t\t\t\tlocation: entry.location,\n\t\t\t\t\t\tdescription: entry.description\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\t\t// call the success handler(s) and allow it to return a new events array\n\t\t\t\tsuccessArgs = [ events ].concat(Array.prototype.slice.call(arguments, 1)); // forward other jq args\n\t\t\t\tsuccessRes = applyAll(success, this, successArgs);\n\t\t\t\tif ($.isArray(successRes)) {\n\t\t\t\t\treturn successRes;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn events;\n\t\t}\n\t});\n}\n\n\n// Injects a string like \"arg=value\" into the querystring of a URL\nfunction injectQsComponent(url, component) {\n\t// inject it after the querystring but before the fragment\n\treturn url.replace(/(\\?.*?)?(#|$)/, function(whole, qs, hash) {\n\t\treturn (qs ? qs + '&' : '?') + component + hash;\n\t});\n}\n\n\n});\n","\nTemplate.__checkName(\"fullcalendar\");\nTemplate[\"fullcalendar\"] = new Template(\"Template.fullcalendar\", (function() {\n  var view = this;\n  return HTML.Raw(\"<div></div>\");\n}));\n","Template.fullcalendar.rendered = function() {\n    var div = this.$(this.firstNode);\n    if(this.data != null) {\n        //jquery takes care of undefined values, no need to check here\n        div.attr('id', this.data.id);\n        div.addClass(this.data.class);\n    }\n    div.fullCalendar(this.data);\n};\n"]}}]