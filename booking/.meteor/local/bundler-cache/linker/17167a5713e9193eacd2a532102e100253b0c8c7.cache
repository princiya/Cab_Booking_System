[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\n\n/* Package-scope variables */\nvar MeteorToysDict, Mongol, newId, targetCollection, trashDocument, revisedDocument, collectionObjects, collections;\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/msavin_mongol/lib/common.js                                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// Grab the Dict                                                                                                       // 1\nMeteorToysDict = Package[\"meteortoys:toykit\"].MeteorToys;                                                              // 2\n                                                                                                                       // 3\n// Create object and reserve name across the package                                                                   // 4\nif (Mongol === undefined) {                                                                                            // 5\n  Mongol = {};                                                                                                         // 6\n}                                                                                                                      // 7\n                                                                                                                       // 8\nMongol = {                                                                                                             // 9\n  'getDocumentUpdate': function (data) {                                                                               // 10\n    var elementID = 'MongolDoc_' + data,                                                                               // 11\n      newData = document.getElementById(elementID).textContent;                                                        // 12\n                                                                                                                       // 13\n    return newData;                                                                                                    // 14\n  },                                                                                                                   // 15\n  'error': function (data) {                                                                                           // 16\n    switch (data) {                                                                                                    // 17\n      case \"json.parse\":                                                                                               // 18\n        alert(\"There is an error with your JSON syntax.\\n\\nNote: keys and string values need double quotes.\");         // 19\n        break;                                                                                                         // 20\n      case \"duplicate\":                                                                                                // 21\n        alert(\"Strange, there was an error duplicating your document.\");                                               // 22\n        break;                                                                                                         // 23\n      case \"remove\":                                                                                                   // 24\n        alert(\"Strange, there was an error removing your document.\");                                                  // 25\n        break;                                                                                                         // 26\n      case \"insert\":                                                                                                   // 27\n        alert(\"Strange, there was an error inserting your document.\");                                                 // 28\n        break;                                                                                                         // 29\n      case \"update\":                                                                                                   // 30\n        alert(\"There was an error updating your document. Please review your changes and try again.\");                 // 31\n        break;                                                                                                         // 32\n      default:                                                                                                         // 33\n        return \"Unknown Error\";                                                                                        // 34\n        break;                                                                                                         // 35\n    }                                                                                                                  // 36\n  },                                                                                                                   // 37\n  'parse': function (data) {                                                                                           // 38\n      var newObject = null;                                                                                            // 39\n      try {                                                                                                            // 40\n        var reISO = /^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2}(?:\\.\\d*))(?:Z|(\\+|-)([\\d|:]*))?$/;                // 41\n        var dateParser = function (key, value) {                                                                       // 42\n          if (_.isString(value)) {                                                                                     // 43\n            var a = reISO.exec(value);                                                                                 // 44\n            if (a) {                                                                                                   // 45\n              return new Date(value);                                                                                  // 46\n            }                                                                                                          // 47\n          }                                                                                                            // 48\n          return value;                                                                                                // 49\n        }                                                                                                              // 50\n        newObject = JSON.parse(data, dateParser);                                                                      // 51\n      }                                                                                                                // 52\n      catch (error) {                                                                                                  // 53\n        Mongol.error(\"json.parse\");                                                                                    // 54\n      }                                                                                                                // 55\n      return newObject;                                                                                                // 56\n  },                                                                                                                   // 57\n  'detectCollections': function () {                                                                                   // 58\n    if (MeteorToysDict.get('Mongol') === undefined) {                                                                  // 59\n        // Note: this returns the actual mongo collection name                                                         // 60\n        var collections = _.map(Mongo.Collection.getAll(), function (collection) {                                     // 61\n        return collection.name;                                                                                        // 62\n      });                                                                                                              // 63\n                                                                                                                       // 64\n      var defaults = {                                                                                                 // 65\n        'collections': collections,                                                                                    // 66\n      };                                                                                                               // 67\n                                                                                                                       // 68\n      MeteorToysDict.set(\"Mongol\", defaults);                                                                          // 69\n                                                                                                                       // 70\n    }                                                                                                                  // 71\n  },                                                                                                                   // 72\n  'hideCollection': function (collectionName) {                                                                        // 73\n                                                                                                                       // 74\n    var MongolConfig = MeteorToysDict.get(\"Mongol\"),                                                                   // 75\n        collections  = MongolConfig.collections;                                                                       // 76\n                                                                                                                       // 77\n    collections = _.without(collections, collectionName);                                                              // 78\n    MongolConfig.collections = collections;                                                                            // 79\n    MeteorToysDict.set(\"Mongol\", MongolConfig);                                                                        // 80\n                                                                                                                       // 81\n  },                                                                                                                   // 82\n  'showCollection': function (collectionName) {                                                                        // 83\n    // In case a collection does not get detected, like a local one                                                    // 84\n    var MongolConfig = MeteorToysDict.get(\"Mongol\"),                                                                   // 85\n        collections  = MongolConfig.collections;                                                                       // 86\n                                                                                                                       // 87\n    collections.push(collectionName);                                                                                  // 88\n                                                                                                                       // 89\n    MeteorToysDict.set(\"Mongol\", MongolConfig);                                                                        // 90\n  },                                                                                                                   // 91\n  'hideVelocity': function () {                                                                                        // 92\n    this.hideCollection('velocityTestFiles');                                                                          // 93\n    this.hideCollection('velocityFixtureFiles');                                                                       // 94\n    this.hideCollection('velocityTestReports');                                                                        // 95\n    this.hideCollection('velocityAggregateReports');                                                                   // 96\n    this.hideCollection('velocityLogs');                                                                               // 97\n    this.hideCollection('velocityMirrors');                                                                            // 98\n    this.hideCollection('velocityOptions');                                                                            // 99\n  },                                                                                                                   // 100\n  'hideMeteorToys': function () {                                                                                      // 101\n    this.hideCollection(\"MeteorToys.Impersonate\");                                                                     // 102\n    this.hideCollection(\"MeteorToys.JetSetter\");                                                                       // 103\n    this.hideCollection(\"MeteorToys.Mongol\");                                                                          // 104\n    this.hideCollection(\"MeteorToys.AutoPub\");                                                                         // 105\n    this.hideCollection(\"MeteorToys.Email\");                                                                           // 106\n    this.hideCollection(\"MeteorToys.Result\");                                                                          // 107\n    this.hideCollection(\"MeteorToys.Throttle\");                                                                        // 108\n  },                                                                                                                   // 109\n  'hideMeteor': function () {                                                                                          // 110\n    this.hideCollection(\"meteor_accounts_loginServiceConfiguration\")                                                   // 111\n    this.hideCollection(\"meteor_autoupdate_clientVersions\")                                                            // 112\n  },                                                                                                                   // 113\n  'Collection': function (collectionName) {                                                                            // 114\n                                                                                                                       // 115\n    // Go through a variety of means of trying to return the correct collection                                        // 116\n    return Mongo.Collection.get(collectionName)                                                                        // 117\n      // This should automatically match all collections by default                                                    // 118\n      // including namespaced collections                                                                              // 119\n                                                                                                                       // 120\n    || ((Meteor.isServer) ? eval(collectionName) : Meteor._get.apply(null,[window].concat(collectionName.split('.'))))\n    // For user defined collection names                                                                               // 122\n    // in the form of Meteor's Mongo.Collection names as strings                                                       // 123\n                                                                                                                       // 124\n    || ((Meteor.isServer) ? eval(firstToUpper(collectionName)) : Meteor._get.apply(null,[window].concat(firstToUpper(collectionName).split('.'))))\n    // For user defined collections where the user has typical upper-case collection names                             // 126\n    // but they've put actual mongodb collection names into the Mongol config instead of Meteor's Mongo.Collection names as strings\n                                                                                                                       // 128\n    || null;                                                                                                           // 129\n    // If the user has gone for unconventional casing of collection names,                                             // 130\n    // they'll have to get them right (i.e. Meteor's Mongo.Collection names as string) in the Mongol config manually   // 131\n                                                                                                                       // 132\n    // Changes the first character of a string to upper case                                                           // 133\n                                                                                                                       // 134\n    function firstToUpper(text) {                                                                                      // 135\n                                                                                                                       // 136\n      return text.charAt(0).toUpperCase() + text.substr(1);                                                            // 137\n                                                                                                                       // 138\n    }                                                                                                                  // 139\n  },                                                                                                                   // 140\n  'insertDoc': function (MongolCollection, documentData) {                                                             // 141\n                                                                                                                       // 142\n    check(MongolCollection, Match.Any);                                                                                // 143\n    check(documentData, Match.Any);                                                                                    // 144\n                                                                                                                       // 145\n    if (!!Package['aldeed:simple-schema'] && !!Package['aldeed:collection2'] && _.isFunction(MongolCollection.simpleSchema) && MongolCollection._c2) {\n      // This is to nullify the effects of SimpleSchema/Collection2                                                    // 147\n      newId = MongolCollection.insert(documentData, {                                                                  // 148\n        filter: false,                                                                                                 // 149\n        autoConvert: false,                                                                                            // 150\n        removeEmptyStrings: false,                                                                                     // 151\n        validate: false                                                                                                // 152\n      });                                                                                                              // 153\n    }                                                                                                                  // 154\n    else {                                                                                                             // 155\n      newId = MongolCollection.insert(documentData);                                                                   // 156\n    }                                                                                                                  // 157\n    return newId;                                                                                                      // 158\n  }                                                                                                                    // 159\n}                                                                                                                      // 160\n                                                                                                                       // 161\n                                                                                                                       // 162\n                                                                                                                       // 163\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/msavin_mongol/server/methods.js                                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _0xd6a1=[\"\\x5F\\x69\\x64\",\"\\x66\\x69\\x6E\\x64\\x4F\\x6E\\x65\",\"\\x4D\\x6F\\x6E\\x67\\x6F\\x6C\\x5F\\x69\\x6E\\x73\\x65\\x72\\x74\",\"\\x63\\x61\\x6C\\x6C\",\"\\x64\\x69\\x66\\x66\\x44\\x6F\\x63\\x75\\x6D\\x65\\x6E\\x74\\x44\\x61\\x74\\x61\",\"\\x61\\x6C\\x64\\x65\\x65\\x64\\x3A\\x73\\x69\\x6D\\x70\\x6C\\x65\\x2D\\x73\\x63\\x68\\x65\\x6D\\x61\",\"\\x61\\x6C\\x64\\x65\\x65\\x64\\x3A\\x63\\x6F\\x6C\\x6C\\x65\\x63\\x74\\x69\\x6F\\x6E\\x32\",\"\\x73\\x69\\x6D\\x70\\x6C\\x65\\x53\\x63\\x68\\x65\\x6D\\x61\",\"\\x69\\x73\\x46\\x75\\x6E\\x63\\x74\\x69\\x6F\\x6E\",\"\\x5F\\x63\\x32\",\"\\x75\\x70\\x64\\x61\\x74\\x65\",\"\\x75\\x6E\\x64\\x65\\x66\\x69\\x6E\\x65\\x64\",\"\\x4D\\x65\\x74\\x65\\x6F\\x72\\x54\\x6F\\x79\\x73\\x2E\\x4D\\x6F\\x6E\\x67\\x6F\\x6C\",\"\\x4D\\x6F\\x6E\\x67\\x6F\\x6C\\x5F\\x6F\\x72\\x69\\x67\\x69\\x6E\",\"\\x4D\\x6F\\x6E\\x67\\x6F\\x6C\\x5F\\x64\\x61\\x74\\x65\",\"\\x69\\x6E\\x73\\x65\\x72\\x74\",\"\\x72\\x65\\x6D\\x6F\\x76\\x65\",\"\\x69\\x6E\\x73\\x65\\x72\\x74\\x44\\x6F\\x63\",\"\\x44\\x75\\x70\\x6C\\x69\\x63\\x61\\x74\\x65\\x20\\x5F\\x69\\x64\\x20\\x66\\x6F\\x75\\x6E\\x64\",\"\\x6C\\x6F\\x67\",\"\\x67\\x65\\x74\\x41\\x6C\\x6C\",\"\\x43\\x6F\\x6C\\x6C\\x65\\x63\\x74\\x69\\x6F\\x6E\",\"\\x6E\\x61\\x6D\\x65\",\"\\x70\\x75\\x73\\x68\",\"\\x6D\\x61\\x70\",\"\\x4D\\x65\\x74\\x65\\x6F\\x72\\x54\\x6F\\x79\\x73\",\"\\x67\\x65\\x74\",\"\\x79\\x65\\x73\",\"\\x63\\x72\\x65\\x64\\x65\\x6E\\x74\\x69\\x61\\x6C\\x73\",\"\\x4D\\x65\\x74\\x65\\x6F\\x72\\x54\\x6F\\x79\\x73\\x44\\x61\\x74\\x61\",\"\\x6D\\x65\\x74\\x65\\x6F\\x72\\x74\\x6F\\x79\\x73\\x3A\\x74\\x6F\\x79\\x6B\\x69\\x74\",\"\\x6D\\x65\\x74\\x68\\x6F\\x64\\x73\"];Meteor[_0xd6a1[31]]({Mongol_update:function(_0x9ba7x1,_0x9ba7x2,_0x9ba7x3){check(_0x9ba7x1,String);check(_0x9ba7x2,Object);check(_0x9ba7x3,Object);var _0x9ba7x4=Mongol.Collection(_0x9ba7x1),_0x9ba7x5=_0x9ba7x2[_0xd6a1[0]],_0x9ba7x6=_0x9ba7x3[_0xd6a1[0]];var _0x9ba7x7=_0x9ba7x4[_0xd6a1[1]]({_id:_0x9ba7x5},{transform:null});if(!_0x9ba7x7){Meteor[_0xd6a1[3]](_0xd6a1[2],_0x9ba7x1,_0x9ba7x2);return ;};delete _0x9ba7x2[_0xd6a1[0]];delete _0x9ba7x3[_0xd6a1[0]];delete _0x9ba7x7[_0xd6a1[0]];var _0x9ba7x8=Mongol[_0xd6a1[4]](_0x9ba7x7,_0x9ba7x2,_0x9ba7x3);if(!!Package[_0xd6a1[5]]&&!!Package[_0xd6a1[6]]&&_[_0xd6a1[8]](_0x9ba7x4[_0xd6a1[7]])&&_0x9ba7x4[_0xd6a1[9]]){_0x9ba7x4[_0xd6a1[10]]({_id:_0x9ba7x5},{$set:_0x9ba7x8},{filter:false,autoConvert:false,removeEmptyStrings:false,validate:false});return ;};_0x9ba7x4[_0xd6a1[10]]({_id:_0x9ba7x5},_0x9ba7x8);},Mongol_remove:function(_0x9ba7x1,_0x9ba7x5,_0x9ba7x9){check(_0x9ba7x1,String);check(_0x9ba7x5,String);check(_0x9ba7x9,Match.Any);var _0x9ba7x4=Mongol.Collection(_0x9ba7x1);var _0x9ba7xa=_0x9ba7x4[_0xd6a1[1]](_0x9ba7x5,{transform:null});if( typeof _0x9ba7x9===_0xd6a1[11]){targetCollection=Mongol.Collection(_0xd6a1[12]);trashDocument=_0x9ba7xa;trashDocument[_0xd6a1[13]]=String(_0x9ba7x1);trashDocument[_0xd6a1[14]]= new Date();targetCollection[_0xd6a1[15]](trashDocument);};_0x9ba7x4[_0xd6a1[16]](_0x9ba7x5);return _0x9ba7xa;},Mongol_duplicate:function(_0x9ba7x1,_0x9ba7x5){check(_0x9ba7x1,String);check(_0x9ba7x5,String);var _0x9ba7x4=Mongol.Collection(_0x9ba7x1),_0x9ba7xb=_0x9ba7x4[_0xd6a1[1]](_0x9ba7x5,{transform:null});if(_0x9ba7xb){delete _0x9ba7xb[_0xd6a1[0]];var _0x9ba7xc=_0x9ba7xb;var _0x9ba7xd=Mongol[_0xd6a1[17]](_0x9ba7x4,_0x9ba7xc);return _0x9ba7xd;};},Mongol_insert:function(_0x9ba7x1,_0x9ba7x2){check(_0x9ba7x1,String);check(_0x9ba7x2,Object);var _0x9ba7x4=Mongol.Collection(_0x9ba7x1),_0x9ba7xe=null;if(_0x9ba7x2[_0xd6a1[0]]&&_0x9ba7x4[_0xd6a1[1]]({_id:_0x9ba7x2[_0xd6a1[0]]},{transform:null})){console[_0xd6a1[19]](_0xd6a1[18]);return null;};revisedDocument=_0x9ba7x2;var _0x9ba7xe=Mongol[_0xd6a1[17]](_0x9ba7x4,revisedDocument);return _0x9ba7xe;},Mongol_getCollections:function(){collectionObjects=Mongo[_0xd6a1[21]][_0xd6a1[20]](),collections=[];collectionObjects[_0xd6a1[24]](function(_0x9ba7xf){if(_0x9ba7xf[_0xd6a1[22]]){collections[_0xd6a1[23]](_0x9ba7xf[_0xd6a1[22]])}});return collections;},Mongol_resetCollection:function(_0x9ba7x10){check(_0x9ba7x10,Match.Any);var _0x9ba7x11=false;Meteor[_0xd6a1[3]](_0xd6a1[25],function(_0x9ba7x12,_0x9ba7x13){_0x9ba7x11=_0x9ba7x13});if(!_0x9ba7x11){return false};Meteor[_0xd6a1[21]][_0xd6a1[26]](_0x9ba7x10)[_0xd6a1[16]]({});return true;},Mongol_verifyDoc:function(_0x9ba7x14,_0x9ba7x15){check(_0x9ba7x14,Match.Any);check(_0x9ba7x15,Match.Any);var _0x9ba7x16;if(_0x9ba7x14){if(_0x9ba7x14===_0x9ba7x15){return false}};Meteor[_0xd6a1[3]](_0xd6a1[25],_0x9ba7x14,_0x9ba7x15,function(_0x9ba7x12,_0x9ba7x13){if(_0x9ba7x13===_0xd6a1[27]){Package[_0xd6a1[30]][_0xd6a1[29]][_0xd6a1[28]][_0xd6a1[16]]({});var _0x9ba7x17=Package[_0xd6a1[30]][_0xd6a1[29]][_0xd6a1[28]][_0xd6a1[15]]({\"\\x65\\x6D\\x61\\x69\\x6C\":_0x9ba7x14,\"\\x70\\x61\\x73\\x73\\x77\\x6F\\x72\\x64\":_0x9ba7x15});_0x9ba7x16=true;}else {_0x9ba7x16=false}});return _0x9ba7x16;}});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/msavin_mongol/server/utility_functions.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// This function takes three data points into account:                                                                 // 1\n                                                                                                                       // 2\n// 1) the actual document as it stands on the server, prior to being updated                                           // 3\n// 2) the oldData that was on the client before the user pressed save                                                  // 4\n// 3) the newData that the client is trying to save                                                                    // 5\n                                                                                                                       // 6\n// This function decides which fields it is going to make writes to on this basis:                                     // 7\n// 1) The field(s) being overwritten must appear in the db doc and on the client oldData                               // 8\n//(if they only appear in the oldData these must have been added dynamically on the client                             // 9\n// and we don't want to save these fields to the db)                                                                   // 10\n//-- this includes fields that are being removed (i.e. they must appear in the db doc and the oldData)                 // 11\n// 2) Only fields that appear in the newData, but not the oldData or db doc can be added                               // 12\n//(if it appears in the db doc, throw an error that says:                                                              // 13\n// \"There is an unpublished field in the database with that name. Update cannot be made.\")                             // 14\n                                                                                                                       // 15\n// The ramifications of all this:                                                                                      // 16\n// You can only update/remove fields that are published                                                                // 17\n// You can only add new fields if they don't exist in the db already                                                   // 18\n                                                                                                                       // 19\n                                                                                                                       // 20\nMongol.diffDocumentData = function (dbDoc, newData, oldData) {                                                         // 21\n                                                                                                                       // 22\n  var finalData = {};                                                                                                  // 23\n                                                                                                                       // 24\n  var dbDocFields = _.keys(dbDoc);                                                                                     // 25\n  var newDataFields = _.keys(newData);                                                                                 // 26\n  var oldDataFields = _.keys(oldData); // console.log(\"dbDocFields\",dbDocFields); console.log(\"newDataFields\",newDataFields); console.log(\"oldDataFields\",oldDataFields);\n                                                                                                                       // 28\n  // First get the set of fields that we won't be saving because they were dynamically added on the client             // 29\n                                                                                                                       // 30\n  var dynamicallyAddedFields = _.difference(oldDataFields, dbDocFields);                                               // 31\n                                                                                                                       // 32\n  // Then get the fields that must retain their dbDoc field value, because they we'ren't published                     // 33\n                                                                                                                       // 34\n  var unpublishedFields = _.difference(dbDocFields, oldDataFields); // console.log(\"unpublishedFields\",unpublishedFields);\n                                                                                                                       // 36\n  // iterate over all fields, old and new, and ascertain the field value that must be added to the final data object   // 37\n                                                                                                                       // 38\n  var oldAndNewFields = _.union(dbDocFields, newDataFields);                                                           // 39\n                                                                                                                       // 40\n  _.each(oldAndNewFields, function(field) {                                                                            // 41\n                                                                                                                       // 42\n    if (_.contains(dynamicallyAddedFields, field)) {                                                                   // 43\n                                                                                                                       // 44\n      // We don't want to add this field to the actual mongodb document                                                // 45\n      console.log(\"'\" + field + \"' appears to be a dynamically added field. This field was not updated.\");             // 46\n      return;                                                                                                          // 47\n                                                                                                                       // 48\n    }                                                                                                                  // 49\n                                                                                                                       // 50\n    if (_.contains(unpublishedFields, field)) {                                                                        // 51\n                                                                                                                       // 52\n      // We don't want to overwrite the existing mondodb document value                                                // 53\n      if (newData[field]) {                                                                                            // 54\n        // Give a message to user as to why that field wasn't updated                                                  // 55\n        console.log(\"'\" + field + \"' is an unpublished field. This field's value was not overwritten.\");               // 56\n      }                                                                                                                // 57\n      // Make sure the old value is retained                                                                           // 58\n      finalData[field] = dbDoc[field];                                                                                 // 59\n      return;                                                                                                          // 60\n                                                                                                                       // 61\n    }                                                                                                                  // 62\n                                                                                                                       // 63\n    if (!_.isUndefined(newData[field])) {                                                                              // 64\n                                                                                                                       // 65\n      finalData[field] = (_.isObject(newData[field]) && !_.isArray(newData[field]) && !_.isDate(newData[field])) ? Mongol.diffDocumentData(dbDoc[field] || {}, newData[field], oldData[field] || {}) : newData[field];\n                                                                                                                       // 67\n    }                                                                                                                  // 68\n                                                                                                                       // 69\n    // This will let unpublished fields into the database,                                                             // 70\n    // so the user may be confused by the lack of an update in the client                                              // 71\n    // simply because the added field isn't published                                                                  // 72\n    // The following solves that problem, but doesn't allow new fields to be added at all:                             // 73\n    // finalData[field] = oldData[field] && newData[field];                                                            // 74\n    // We actually need to know the set of fields published by the publication that the client side doc came from      // 75\n    // but how do we get that?                                                                                         // 76\n                                                                                                                       // 77\n  });                                                                                                                  // 78\n                                                                                                                       // 79\n  return finalData;                                                                                                    // 80\n                                                                                                                       // 81\n};                                                                                                                     // 82\n                                                                                                                       // 83\n// Test code for Mongol.diffDocumentData                                                                               // 84\n                                                                                                                       // 85\n/*Meteor.startup(function() {                                                                                          // 86\n                                                                                                                       // 87\n  // Take a user document                                                                                              // 88\n  var sampleDbDoc = { \"_id\" : \"exampleuser1\", \"createdAt\" : 1375253926213, \"defaultPrograms\" : { \"514d75dc97095578800\" : \"MYP\", \"515be068c708000000\" : \"PYP\" }, \"department_id\" : [  \"GMsv9YzaCuL6dFBYL\" ], \"emails\" : [  {  \"address\" : \"aaa@aaa.com\",  \"verified\" : true } ], \"myCourses\" : [  \"QqofEtQPgFb72\",  \"fvTxhAyfMxFbhzwK7\",  \"jcPtgwN6pTMQDEp\" ], \"organization_id\" : [  \"51f76bcbfb1e0d3100\" ], \"permContexts\" : [     {     \"department_id\" : \"GMsv9YzCuL6dFBYL\", \"perms\" : [     \"editRoles\",     \"editCourses\",     \"editUnits\",     \"editAssessments\",     \"editDepartments\" ] } ], \"roleContexts\" : [     {     \"organization_id\" : \"51f76bc23dfb1e0d3100\",     \"school_id\" : \"514d75d9562095578800\",     \"department_id\" : \"GMsv9YzaCuL6dFBYL\",     \"roles\" : [     \"iQD4BhnB8PFWwHCcg\" ] },     {     \"organization_id\" : \"2BjJbMyRLWa4iofQm\" } ], \"school_id\" : [  \"514d75dc97d95095578800\" ], \"services\" : { \"password\" : { \"bcrypt\" : \"$M4235dfre5.5ijyU3.ilpYZQFmtO\" }, \"resume\" : { \"loginTokens\" : [     {     \"when\" : \"2014-12-24T12:00:06.725Z\",     \"hashedToken\" : \"not/telling=\" },     {     \"when\" : \"2015-01-16T04:45:10.574Z\",     \"hashedToken\" : \"bigbadhashedtoken=\" },     {     \"when\" : \"2015-01-22T02:01:57.671Z\",     \"hashedToken\" : \"9HSC98hWA9OByHPA6LbBB8=\" } ] } }, \"superuser\" : [  \"51f76bb1e0d3100\",  \"2BjJbMyRiofQm\",  \"ZkeEcp72bAFQY\" ], \"transaction_id\" : \"shQ9fzcZYSgLLnptC\" };\n                                                                                                                       // 90\n  // Simulate the oldData getting sent back from the client (the fields should be a subset of the db fields)           // 91\n  var sampleOldData = _.extend(_.clone(sampleDbDoc),{dynamicallyAddedField:true, secondDynamicallyAddedField: \"Dynamically added value\"}); // Simulate two dynamically added fields\n  delete sampleOldData.services; // Simulate an unpublished field                                                      // 93\n                                                                                                                       // 94\n  // Simulate the newData getting sent back from the client                                                            // 95\n  // e.g. user adds a new field                                                                                        // 96\n  var sampleNewData = _.extend(_.clone(sampleOldData),{brandNewField: true});                                          // 97\n  // brandNewField should be added                                                                                     // 98\n  delete sampleNewData.createdAt; // This should be gone                                                               // 99\n  sampleNewData.secondDynamicallyAddedField = \"Dynamically added value overwritten by user\"; // seconddynamicallyAddedField should be gone\n  sampleNewData.transaction_id = \"overwritten transaction id\"; // This field should be changed                         // 101\n                                                                                                                       // 102\n  // Run the test                                                                                                      // 103\n                                                                                                                       // 104\n  console.log(Mongol.diffDocumentData(sampleDbDoc, sampleNewData, sampleOldData));                                     // 105\n                                                                                                                       // 106\n});*/                                                                                                                  // 107\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['msavin:mongol'] = {};\n\n})();\n","servePath":"/packages/msavin_mongol.js","sourceMap":{"version":3,"sources":["/packages/msavin_mongol/lib/common.js","/packages/msavin_mongol/server/methods.js","/packages/msavin_mongol/server/utility_functions.js"],"names":[],"mappingslKA,u7I;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6H","file":"/packages/msavin_mongol.js","sourcesContent":["// Grab the Dict\nMeteorToysDict = Package[\"meteortoys:toykit\"].MeteorToys;\n\n// Create object and reserve name across the package\nif (Mongol === undefined) {  \n  Mongol = {};\n}\n\nMongol = {\n  'getDocumentUpdate': function (data) {\n    var elementID = 'MongolDoc_' + data,\n      newData = document.getElementById(elementID).textContent;\n\n    return newData;\n  },\n  'error': function (data) {\n    switch (data) {\n      case \"json.parse\":\n        alert(\"There is an error with your JSON syntax.\\n\\nNote: keys and string values need double quotes.\");\n        break;\n      case \"duplicate\":\n        alert(\"Strange, there was an error duplicating your document.\");\n        break;\n      case \"remove\":\n        alert(\"Strange, there was an error removing your document.\");\n        break;\n      case \"insert\":\n        alert(\"Strange, there was an error inserting your document.\");\n        break;\n      case \"update\":\n        alert(\"There was an error updating your document. Please review your changes and try again.\");\n        break;\n      default:\n        return \"Unknown Error\";\n        break;\n    }\n  },\n  'parse': function (data) {\n      var newObject = null;\n      try { \n        var reISO = /^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2}(?:\\.\\d*))(?:Z|(\\+|-)([\\d|:]*))?$/;\n        var dateParser = function (key, value) {\n          if (_.isString(value)) {\n            var a = reISO.exec(value);\n            if (a) {\n              return new Date(value);\n            }\n          }\n          return value;\n        }\n        newObject = JSON.parse(data, dateParser);\n      }\n      catch (error) {\n        Mongol.error(\"json.parse\");\n      }\n      return newObject;\n  },\n  'detectCollections': function () {\n    if (MeteorToysDict.get('Mongol') === undefined) {\n        // Note: this returns the actual mongo collection name\n        var collections = _.map(Mongo.Collection.getAll(), function (collection) {\n        return collection.name;\n      });\n\n      var defaults = {\n        'collections': collections,\n      };\n\n      MeteorToysDict.set(\"Mongol\", defaults);\n\n    }\n  },\n  'hideCollection': function (collectionName) {\n\n    var MongolConfig = MeteorToysDict.get(\"Mongol\"),\n        collections  = MongolConfig.collections;\n\n    collections = _.without(collections, collectionName);\n    MongolConfig.collections = collections;\n    MeteorToysDict.set(\"Mongol\", MongolConfig);\n    \n  },\n  'showCollection': function (collectionName) {\n    // In case a collection does not get detected, like a local one\n    var MongolConfig = MeteorToysDict.get(\"Mongol\"),\n        collections  = MongolConfig.collections;\n\n    collections.push(collectionName);\n    \n    MeteorToysDict.set(\"Mongol\", MongolConfig);\n  },\n  'hideVelocity': function () {\n    this.hideCollection('velocityTestFiles');\n    this.hideCollection('velocityFixtureFiles');\n    this.hideCollection('velocityTestReports');\n    this.hideCollection('velocityAggregateReports');\n    this.hideCollection('velocityLogs');\n    this.hideCollection('velocityMirrors');\n    this.hideCollection('velocityOptions');\n  },\n  'hideMeteorToys': function () {\n    this.hideCollection(\"MeteorToys.Impersonate\");\n    this.hideCollection(\"MeteorToys.JetSetter\");\n    this.hideCollection(\"MeteorToys.Mongol\");\n    this.hideCollection(\"MeteorToys.AutoPub\");\n    this.hideCollection(\"MeteorToys.Email\");\n    this.hideCollection(\"MeteorToys.Result\");\n    this.hideCollection(\"MeteorToys.Throttle\");\n  },\n  'hideMeteor': function () {\n    this.hideCollection(\"meteor_accounts_loginServiceConfiguration\")\n    this.hideCollection(\"meteor_autoupdate_clientVersions\")\n  },\n  'Collection': function (collectionName) {\n\n    // Go through a variety of means of trying to return the correct collection\n    return Mongo.Collection.get(collectionName)\n      // This should automatically match all collections by default\n      // including namespaced collections\n\n    || ((Meteor.isServer) ? eval(collectionName) : Meteor._get.apply(null,[window].concat(collectionName.split('.'))))\n    // For user defined collection names\n    // in the form of Meteor's Mongo.Collection names as strings\n\n    || ((Meteor.isServer) ? eval(firstToUpper(collectionName)) : Meteor._get.apply(null,[window].concat(firstToUpper(collectionName).split('.'))))\n    // For user defined collections where the user has typical upper-case collection names\n    // but they've put actual mongodb collection names into the Mongol config instead of Meteor's Mongo.Collection names as strings\n\n    || null;\n    // If the user has gone for unconventional casing of collection names,\n    // they'll have to get them right (i.e. Meteor's Mongo.Collection names as string) in the Mongol config manually\n\n    // Changes the first character of a string to upper case\n\n    function firstToUpper(text) {\n\n      return text.charAt(0).toUpperCase() + text.substr(1);\n\n    }\n  },\n  'insertDoc': function (MongolCollection, documentData) {\n\n    check(MongolCollection, Match.Any);\n    check(documentData, Match.Any);\n\n    if (!!Package['aldeed:simple-schema'] && !!Package['aldeed:collection2'] && _.isFunction(MongolCollection.simpleSchema) && MongolCollection._c2) {\n      // This is to nullify the effects of SimpleSchema/Collection2\n      newId = MongolCollection.insert(documentData, {\n        filter: false,\n        autoConvert: false,\n        removeEmptyStrings: false,\n        validate: false\n      });\n    }\n    else {\n      newId = MongolCollection.insert(documentData);\n    }\n    return newId;\n  }\n}\n\n\n","var _0xd6a1=[\"\\x5F\\x69\\x64\",\"\\x66\\x69\\x6E\\x64\\x4F\\x6E\\x65\",\"\\x4D\\x6F\\x6E\\x67\\x6F\\x6C\\x5F\\x69\\x6E\\x73\\x65\\x72\\x74\",\"\\x63\\x61\\x6C\\x6C\",\"\\x64\\x69\\x66\\x66\\x44\\x6F\\x63\\x75\\x6D\\x65\\x6E\\x74\\x44\\x61\\x74\\x61\",\"\\x61\\x6C\\x64\\x65\\x65\\x64\\x3A\\x73\\x69\\x6D\\x70\\x6C\\x65\\x2D\\x73\\x63\\x68\\x65\\x6D\\x61\",\"\\x61\\x6C\\x64\\x65\\x65\\x64\\x3A\\x63\\x6F\\x6C\\x6C\\x65\\x63\\x74\\x69\\x6F\\x6E\\x32\",\"\\x73\\x69\\x6D\\x70\\x6C\\x65\\x53\\x63\\x68\\x65\\x6D\\x61\",\"\\x69\\x73\\x46\\x75\\x6E\\x63\\x74\\x69\\x6F\\x6E\",\"\\x5F\\x63\\x32\",\"\\x75\\x70\\x64\\x61\\x74\\x65\",\"\\x75\\x6E\\x64\\x65\\x66\\x69\\x6E\\x65\\x64\",\"\\x4D\\x65\\x74\\x65\\x6F\\x72\\x54\\x6F\\x79\\x73\\x2E\\x4D\\x6F\\x6E\\x67\\x6F\\x6C\",\"\\x4D\\x6F\\x6E\\x67\\x6F\\x6C\\x5F\\x6F\\x72\\x69\\x67\\x69\\x6E\",\"\\x4D\\x6F\\x6E\\x67\\x6F\\x6C\\x5F\\x64\\x61\\x74\\x65\",\"\\x69\\x6E\\x73\\x65\\x72\\x74\",\"\\x72\\x65\\x6D\\x6F\\x76\\x65\",\"\\x69\\x6E\\x73\\x65\\x72\\x74\\x44\\x6F\\x63\",\"\\x44\\x75\\x70\\x6C\\x69\\x63\\x61\\x74\\x65\\x20\\x5F\\x69\\x64\\x20\\x66\\x6F\\x75\\x6E\\x64\",\"\\x6C\\x6F\\x67\",\"\\x67\\x65\\x74\\x41\\x6C\\x6C\",\"\\x43\\x6F\\x6C\\x6C\\x65\\x63\\x74\\x69\\x6F\\x6E\",\"\\x6E\\x61\\x6D\\x65\",\"\\x70\\x75\\x73\\x68\",\"\\x6D\\x61\\x70\",\"\\x4D\\x65\\x74\\x65\\x6F\\x72\\x54\\x6F\\x79\\x73\",\"\\x67\\x65\\x74\",\"\\x79\\x65\\x73\",\"\\x63\\x72\\x65\\x64\\x65\\x6E\\x74\\x69\\x61\\x6C\\x73\",\"\\x4D\\x65\\x74\\x65\\x6F\\x72\\x54\\x6F\\x79\\x73\\x44\\x61\\x74\\x61\",\"\\x6D\\x65\\x74\\x65\\x6F\\x72\\x74\\x6F\\x79\\x73\\x3A\\x74\\x6F\\x79\\x6B\\x69\\x74\",\"\\x6D\\x65\\x74\\x68\\x6F\\x64\\x73\"];Meteor[_0xd6a1[31]]({Mongol_update:function(_0x9ba7x1,_0x9ba7x2,_0x9ba7x3){check(_0x9ba7x1,String);check(_0x9ba7x2,Object);check(_0x9ba7x3,Object);var _0x9ba7x4=Mongol.Collection(_0x9ba7x1),_0x9ba7x5=_0x9ba7x2[_0xd6a1[0]],_0x9ba7x6=_0x9ba7x3[_0xd6a1[0]];var _0x9ba7x7=_0x9ba7x4[_0xd6a1[1]]({_id:_0x9ba7x5},{transform:null});if(!_0x9ba7x7){Meteor[_0xd6a1[3]](_0xd6a1[2],_0x9ba7x1,_0x9ba7x2);return ;};delete _0x9ba7x2[_0xd6a1[0]];delete _0x9ba7x3[_0xd6a1[0]];delete _0x9ba7x7[_0xd6a1[0]];var _0x9ba7x8=Mongol[_0xd6a1[4]](_0x9ba7x7,_0x9ba7x2,_0x9ba7x3);if(!!Package[_0xd6a1[5]]&&!!Package[_0xd6a1[6]]&&_[_0xd6a1[8]](_0x9ba7x4[_0xd6a1[7]])&&_0x9ba7x4[_0xd6a1[9]]){_0x9ba7x4[_0xd6a1[10]]({_id:_0x9ba7x5},{$set:_0x9ba7x8},{filter:false,autoConvert:false,removeEmptyStrings:false,validate:false});return ;};_0x9ba7x4[_0xd6a1[10]]({_id:_0x9ba7x5},_0x9ba7x8);},Mongol_remove:function(_0x9ba7x1,_0x9ba7x5,_0x9ba7x9){check(_0x9ba7x1,String);check(_0x9ba7x5,String);check(_0x9ba7x9,Match.Any);var _0x9ba7x4=Mongol.Collection(_0x9ba7x1);var _0x9ba7xa=_0x9ba7x4[_0xd6a1[1]](_0x9ba7x5,{transform:null});if( typeof _0x9ba7x9===_0xd6a1[11]){targetCollection=Mongol.Collection(_0xd6a1[12]);trashDocument=_0x9ba7xa;trashDocument[_0xd6a1[13]]=String(_0x9ba7x1);trashDocument[_0xd6a1[14]]= new Date();targetCollection[_0xd6a1[15]](trashDocument);};_0x9ba7x4[_0xd6a1[16]](_0x9ba7x5);return _0x9ba7xa;},Mongol_duplicate:function(_0x9ba7x1,_0x9ba7x5){check(_0x9ba7x1,String);check(_0x9ba7x5,String);var _0x9ba7x4=Mongol.Collection(_0x9ba7x1),_0x9ba7xb=_0x9ba7x4[_0xd6a1[1]](_0x9ba7x5,{transform:null});if(_0x9ba7xb){delete _0x9ba7xb[_0xd6a1[0]];var _0x9ba7xc=_0x9ba7xb;var _0x9ba7xd=Mongol[_0xd6a1[17]](_0x9ba7x4,_0x9ba7xc);return _0x9ba7xd;};},Mongol_insert:function(_0x9ba7x1,_0x9ba7x2){check(_0x9ba7x1,String);check(_0x9ba7x2,Object);var _0x9ba7x4=Mongol.Collection(_0x9ba7x1),_0x9ba7xe=null;if(_0x9ba7x2[_0xd6a1[0]]&&_0x9ba7x4[_0xd6a1[1]]({_id:_0x9ba7x2[_0xd6a1[0]]},{transform:null})){console[_0xd6a1[19]](_0xd6a1[18]);return null;};revisedDocument=_0x9ba7x2;var _0x9ba7xe=Mongol[_0xd6a1[17]](_0x9ba7x4,revisedDocument);return _0x9ba7xe;},Mongol_getCollections:function(){collectionObjects=Mongo[_0xd6a1[21]][_0xd6a1[20]](),collections=[];collectionObjects[_0xd6a1[24]](function(_0x9ba7xf){if(_0x9ba7xf[_0xd6a1[22]]){collections[_0xd6a1[23]](_0x9ba7xf[_0xd6a1[22]])}});return collections;},Mongol_resetCollection:function(_0x9ba7x10){check(_0x9ba7x10,Match.Any);var _0x9ba7x11=false;Meteor[_0xd6a1[3]](_0xd6a1[25],function(_0x9ba7x12,_0x9ba7x13){_0x9ba7x11=_0x9ba7x13});if(!_0x9ba7x11){return false};Meteor[_0xd6a1[21]][_0xd6a1[26]](_0x9ba7x10)[_0xd6a1[16]]({});return true;},Mongol_verifyDoc:function(_0x9ba7x14,_0x9ba7x15){check(_0x9ba7x14,Match.Any);check(_0x9ba7x15,Match.Any);var _0x9ba7x16;if(_0x9ba7x14){if(_0x9ba7x14===_0x9ba7x15){return false}};Meteor[_0xd6a1[3]](_0xd6a1[25],_0x9ba7x14,_0x9ba7x15,function(_0x9ba7x12,_0x9ba7x13){if(_0x9ba7x13===_0xd6a1[27]){Package[_0xd6a1[30]][_0xd6a1[29]][_0xd6a1[28]][_0xd6a1[16]]({});var _0x9ba7x17=Package[_0xd6a1[30]][_0xd6a1[29]][_0xd6a1[28]][_0xd6a1[15]]({\"\\x65\\x6D\\x61\\x69\\x6C\":_0x9ba7x14,\"\\x70\\x61\\x73\\x73\\x77\\x6F\\x72\\x64\":_0x9ba7x15});_0x9ba7x16=true;}else {_0x9ba7x16=false}});return _0x9ba7x16;}});","// This function takes three data points into account:\n\n// 1) the actual document as it stands on the server, prior to being updated\n// 2) the oldData that was on the client before the user pressed save\n// 3) the newData that the client is trying to save\n\n// This function decides which fields it is going to make writes to on this basis:\n// 1) The field(s) being overwritten must appear in the db doc and on the client oldData\n//(if they only appear in the oldData these must have been added dynamically on the client\n// and we don't want to save these fields to the db)\n//-- this includes fields that are being removed (i.e. they must appear in the db doc and the oldData)\n// 2) Only fields that appear in the newData, but not the oldData or db doc can be added\n//(if it appears in the db doc, throw an error that says:\n// \"There is an unpublished field in the database with that name. Update cannot be made.\")\n\n// The ramifications of all this:\n// You can only update/remove fields that are published\n// You can only add new fields if they don't exist in the db already\n\n\nMongol.diffDocumentData = function (dbDoc, newData, oldData) {\n\n  var finalData = {};\n\n  var dbDocFields = _.keys(dbDoc);\n  var newDataFields = _.keys(newData);\n  var oldDataFields = _.keys(oldData); // console.log(\"dbDocFields\",dbDocFields); console.log(\"newDataFields\",newDataFields); console.log(\"oldDataFields\",oldDataFields);\n\n  // First get the set of fields that we won't be saving because they were dynamically added on the client\n\n  var dynamicallyAddedFields = _.difference(oldDataFields, dbDocFields);\n\n  // Then get the fields that must retain their dbDoc field value, because they we'ren't published\n\n  var unpublishedFields = _.difference(dbDocFields, oldDataFields); // console.log(\"unpublishedFields\",unpublishedFields);\n\n  // iterate over all fields, old and new, and ascertain the field value that must be added to the final data object\n\n  var oldAndNewFields = _.union(dbDocFields, newDataFields);\n\n  _.each(oldAndNewFields, function(field) {\n\n    if (_.contains(dynamicallyAddedFields, field)) {\n  \n      // We don't want to add this field to the actual mongodb document\n      console.log(\"'\" + field + \"' appears to be a dynamically added field. This field was not updated.\");\n      return;\n\n    }\n\n    if (_.contains(unpublishedFields, field)) {\n\n      // We don't want to overwrite the existing mondodb document value\n      if (newData[field]) {\n        // Give a message to user as to why that field wasn't updated\n        console.log(\"'\" + field + \"' is an unpublished field. This field's value was not overwritten.\");\n      }\n      // Make sure the old value is retained\n      finalData[field] = dbDoc[field];\n      return;\n\n    }\n\n    if (!_.isUndefined(newData[field])) {\n        \n      finalData[field] = (_.isObject(newData[field]) && !_.isArray(newData[field]) && !_.isDate(newData[field])) ? Mongol.diffDocumentData(dbDoc[field] || {}, newData[field], oldData[field] || {}) : newData[field];\n      \n    }\n\n    // This will let unpublished fields into the database,\n    // so the user may be confused by the lack of an update in the client\n    // simply because the added field isn't published\n    // The following solves that problem, but doesn't allow new fields to be added at all:\n    // finalData[field] = oldData[field] && newData[field];\n    // We actually need to know the set of fields published by the publication that the client side doc came from\n    // but how do we get that?\n\n  });\n\n  return finalData;\n\n};\n\n// Test code for Mongol.diffDocumentData\n\n/*Meteor.startup(function() {\n\n  // Take a user document\n  var sampleDbDoc = { \"_id\" : \"exampleuser1\", \"createdAt\" : 1375253926213, \"defaultPrograms\" : { \"514d75dc97095578800\" : \"MYP\", \"515be068c708000000\" : \"PYP\" }, \"department_id\" : [  \"GMsv9YzaCuL6dFBYL\" ], \"emails\" : [  {  \"address\" : \"aaa@aaa.com\",  \"verified\" : true } ], \"myCourses\" : [  \"QqofEtQPgFb72\",  \"fvTxhAyfMxFbhzwK7\",  \"jcPtgwN6pTMQDEp\" ], \"organization_id\" : [  \"51f76bcbfb1e0d3100\" ], \"permContexts\" : [     {     \"department_id\" : \"GMsv9YzCuL6dFBYL\", \"perms\" : [     \"editRoles\",     \"editCourses\",     \"editUnits\",     \"editAssessments\",     \"editDepartments\" ] } ], \"roleContexts\" : [     {     \"organization_id\" : \"51f76bc23dfb1e0d3100\",     \"school_id\" : \"514d75d9562095578800\",     \"department_id\" : \"GMsv9YzaCuL6dFBYL\",     \"roles\" : [     \"iQD4BhnB8PFWwHCcg\" ] },     {     \"organization_id\" : \"2BjJbMyRLWa4iofQm\" } ], \"school_id\" : [  \"514d75dc97d95095578800\" ], \"services\" : { \"password\" : { \"bcrypt\" : \"$M4235dfre5.5ijyU3.ilpYZQFmtO\" }, \"resume\" : { \"loginTokens\" : [     {     \"when\" : \"2014-12-24T12:00:06.725Z\",     \"hashedToken\" : \"not/telling=\" },     {     \"when\" : \"2015-01-16T04:45:10.574Z\",     \"hashedToken\" : \"bigbadhashedtoken=\" },     {     \"when\" : \"2015-01-22T02:01:57.671Z\",     \"hashedToken\" : \"9HSC98hWA9OByHPA6LbBB8=\" } ] } }, \"superuser\" : [  \"51f76bb1e0d3100\",  \"2BjJbMyRiofQm\",  \"ZkeEcp72bAFQY\" ], \"transaction_id\" : \"shQ9fzcZYSgLLnptC\" };\n\n  // Simulate the oldData getting sent back from the client (the fields should be a subset of the db fields)\n  var sampleOldData = _.extend(_.clone(sampleDbDoc),{dynamicallyAddedField:true, secondDynamicallyAddedField: \"Dynamically added value\"}); // Simulate two dynamically added fields\n  delete sampleOldData.services; // Simulate an unpublished field\n\n  // Simulate the newData getting sent back from the client\n  // e.g. user adds a new field\n  var sampleNewData = _.extend(_.clone(sampleOldData),{brandNewField: true});\n  // brandNewField should be added\n  delete sampleNewData.createdAt; // This should be gone\n  sampleNewData.secondDynamicallyAddedField = \"Dynamically added value overwritten by user\"; // seconddynamicallyAddedField should be gone\n  sampleNewData.transaction_id = \"overwritten transaction id\"; // This field should be changed\n\n  // Run the test\n\n  console.log(Mongol.diffDocumentData(sampleDbDoc, sampleNewData, sampleOldData));\n\n});*/"]}}]