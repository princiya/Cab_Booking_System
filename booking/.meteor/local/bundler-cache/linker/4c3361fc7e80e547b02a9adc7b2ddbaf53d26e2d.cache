[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar Random = Package.random.Random;\nvar MongoInternals = Package.mongo.MongoInternals;\nvar Mongo = Package.mongo.Mongo;\n\n/* Package-scope variables */\nvar exposeLivedata, exposeMongoLivedata, Fibers, MeteorX;\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                              //\n// packages/meteorhacks_meteorx/lib/livedata.js                                                 //\n//                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                //\nexposeLivedata = function(namespace) {                                                          // 1\n  //instrumenting session                                                                       // 2\n  var fakeSocket = {send: function() {}, close: function() {}, headers: []};                    // 3\n  var ddpConnectMessage = {msg: 'connect', version: 'pre1', support: ['pre1']};                 // 4\n  Meteor.default_server._handleConnect(fakeSocket, ddpConnectMessage);                          // 5\n                                                                                                // 6\n  if(fakeSocket._meteorSession) { //for newer meteor versions                                   // 7\n    namespace.Session = fakeSocket._meteorSession.constructor;                                  // 8\n                                                                                                // 9\n    exposeSubscription(fakeSocket._meteorSession, namespace);                                   // 10\n    exposeSessionCollectionView(fakeSocket._meteorSession, namespace);                          // 11\n                                                                                                // 12\n    if(Meteor.default_server._closeSession) {                                                   // 13\n      //0.7.x +                                                                                 // 14\n      Meteor.default_server._closeSession(fakeSocket._meteorSession);                           // 15\n    } else if(Meteor.default_server._destroySession) {                                          // 16\n      //0.6.6.x                                                                                 // 17\n      Meteor.default_server._destroySession(fakeSocket._meteorSession);                         // 18\n    }                                                                                           // 19\n  } else if(fakeSocket.meteor_session) { //support for 0.6.5.x                                  // 20\n    namespace.Session = fakeSocket.meteor_session.constructor;                                  // 21\n                                                                                                // 22\n    //instrumenting subscription                                                                // 23\n    exposeSubscription(fakeSocket.meteor_session, namespace);                                   // 24\n    exposeSessionCollectionView(fakeSocket._meteorSession, namespace);                          // 25\n                                                                                                // 26\n    fakeSocket.meteor_session.detach(fakeSocket);                                               // 27\n  } else {                                                                                      // 28\n    console.error('expose: session exposing failed');                                           // 29\n  }                                                                                             // 30\n};                                                                                              // 31\n                                                                                                // 32\nfunction exposeSubscription(session, namespace) {                                               // 33\n  var subId = Random.id();                                                                      // 34\n  var publicationHandler = function() {this.ready()};                                           // 35\n  var pubName = '__dummy_pub_' + Random.id();                                                   // 36\n                                                                                                // 37\n  session._startSubscription(publicationHandler, subId, [], pubName);                           // 38\n  var subscription = session._namedSubs[subId];                                                 // 39\n  namespace.Subscription = subscription.constructor;                                            // 40\n                                                                                                // 41\n  //cleaning up                                                                                 // 42\n  session._stopSubscription(subId);                                                             // 43\n}                                                                                               // 44\n                                                                                                // 45\nfunction exposeSessionCollectionView(session, namespace) {                                      // 46\n  var documentView = session.getCollectionView();                                               // 47\n  namespace.SessionCollectionView = documentView.constructor;                                   // 48\n                                                                                                // 49\n  var id = 'the-id';                                                                            // 50\n  documentView.added('sample-handle', id, {aa: 10});                                            // 51\n  namespace.SessionDocumentView = documentView.documents[id].constructor;                       // 52\n}                                                                                               // 53\n//////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                              //\n// packages/meteorhacks_meteorx/lib/mongo-livedata.js                                           //\n//                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                //\nexposeMongoLivedata = function(namespace) {                                                     // 1\n  var MongoColl = (typeof Mongo != \"undefined\")? Mongo.Collection: Meteor.Collection;           // 2\n  var coll = new MongoColl('__dummy_coll_' + Random.id());                                      // 3\n  //we need wait until db get connected with meteor, .findOne() does that                       // 4\n  coll.findOne();                                                                               // 5\n                                                                                                // 6\n  namespace.MongoConnection = MongoInternals.defaultRemoteCollectionDriver().mongo.constructor;\n  var cursor = coll.find();                                                                     // 8\n  namespace.MongoCursor = cursor.constructor;                                                   // 9\n  exposeOplogDriver(namespace, coll);                                                           // 10\n  exposePollingDriver(namespace, coll);                                                         // 11\n  exposeMultiplexer(namespace, coll);                                                           // 12\n}                                                                                               // 13\n                                                                                                // 14\nfunction exposeOplogDriver(namespace, coll) {                                                   // 15\n  var driver = _getObserverDriver(coll.find({}));                                               // 16\n  // verify observer driver is an oplog driver                                                  // 17\n  if(driver && typeof driver.constructor.cursorSupported == 'function') {                       // 18\n    namespace.MongoOplogDriver = driver.constructor;                                            // 19\n  }                                                                                             // 20\n}                                                                                               // 21\n                                                                                                // 22\nfunction exposePollingDriver(namespace, coll) {                                                 // 23\n  var cursor = coll.find({}, {limit: 20, _disableOplog: true});                                 // 24\n  var driver = _getObserverDriver(cursor);                                                      // 25\n  // verify observer driver is a polling driver                                                 // 26\n  if(driver && typeof driver.constructor.cursorSupported == 'undefined') {                      // 27\n    namespace.MongoPollingDriver = driver.constructor;                                          // 28\n  }                                                                                             // 29\n}                                                                                               // 30\n                                                                                                // 31\nfunction exposeMultiplexer(namespace, coll) {                                                   // 32\n  var multiplexer = _getMultiplexer(coll.find({}));                                             // 33\n  if(multiplexer) {                                                                             // 34\n    namespace.Multiplexer = multiplexer.constructor;                                            // 35\n  }                                                                                             // 36\n}                                                                                               // 37\n                                                                                                // 38\nfunction _getObserverDriver(cursor) {                                                           // 39\n  var multiplexer = _getMultiplexer(cursor);                                                    // 40\n  if(multiplexer && multiplexer._observeDriver) {                                               // 41\n    return multiplexer._observeDriver;                                                          // 42\n  }                                                                                             // 43\n}                                                                                               // 44\n                                                                                                // 45\nfunction _getMultiplexer(cursor) {                                                              // 46\n  var handler = cursor.observeChanges({added: Function.prototype});                             // 47\n  handler.stop();                                                                               // 48\n  return handler._multiplexer;                                                                  // 49\n}                                                                                               // 50\n                                                                                                // 51\n//////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                              //\n// packages/meteorhacks_meteorx/lib/server.js                                                   //\n//                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                //\nFibers = Npm.require('fibers');                                                                 // 1\n                                                                                                // 2\nMeteorX = {};                                                                                   // 3\nMeteorX._readyCallbacks = [];                                                                   // 4\nMeteorX._ready = false;                                                                         // 5\n                                                                                                // 6\nMeteorX.onReady = function(cb) {                                                                // 7\n  if(MeteorX._ready) {                                                                          // 8\n    return runWithAFiber(cb);                                                                   // 9\n  }                                                                                             // 10\n                                                                                                // 11\n  this._readyCallbacks.push(cb);                                                                // 12\n};                                                                                              // 13\n                                                                                                // 14\nMeteorX.Server = Meteor.server.constructor;                                                     // 15\nexposeLivedata(MeteorX);                                                                        // 16\n                                                                                                // 17\n// Before using any other MeteorX apis we need to hijack Mongo related code                     // 18\n// That'w what we are doing here.                                                               // 19\nMeteor.startup(function() {                                                                     // 20\n  runWithAFiber(function() {                                                                    // 21\n    exposeMongoLivedata(MeteorX);                                                               // 22\n  });                                                                                           // 23\n                                                                                                // 24\n  MeteorX._readyCallbacks.forEach(function(fn) {                                                // 25\n    runWithAFiber(fn);                                                                          // 26\n  });                                                                                           // 27\n  MeteorX._ready = true;                                                                        // 28\n});                                                                                             // 29\n                                                                                                // 30\nfunction runWithAFiber(cb) {                                                                    // 31\n  if(Fibers.current) {                                                                          // 32\n    cb();                                                                                       // 33\n  } else {                                                                                      // 34\n    new Fiber(cb).run();                                                                        // 35\n  }                                                                                             // 36\n}                                                                                               // 37\n                                                                                                // 38\n//////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['meteorhacks:meteorx'] = {\n  MeteorX: MeteorX\n};\n\n})();\n","servePath":"/packages/meteorhacks_meteorx.js","sourceMap":{"version":3,"sources":["/packages/meteorhacks_meteorx/lib/livedata.js","/packages/meteorhacks_meteorx/lib/mongo-livedata.js","/packages/meteorhacks_meteorx/lib/server.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qG;;;;;;;;;;;;;;;;;;ACpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qG;;;;;;;;;;;;;;;;;;AClDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qG","file":"/packages/meteorhacks_meteorx.js","sourcesContent":["exposeLivedata = function(namespace) {\n  //instrumenting session\n  var fakeSocket = {send: function() {}, close: function() {}, headers: []};\n  var ddpConnectMessage = {msg: 'connect', version: 'pre1', support: ['pre1']};\n  Meteor.default_server._handleConnect(fakeSocket, ddpConnectMessage);\n\n  if(fakeSocket._meteorSession) { //for newer meteor versions\n    namespace.Session = fakeSocket._meteorSession.constructor;\n\n    exposeSubscription(fakeSocket._meteorSession, namespace);\n    exposeSessionCollectionView(fakeSocket._meteorSession, namespace);\n\n    if(Meteor.default_server._closeSession) {\n      //0.7.x +\n      Meteor.default_server._closeSession(fakeSocket._meteorSession);\n    } else if(Meteor.default_server._destroySession) {\n      //0.6.6.x\n      Meteor.default_server._destroySession(fakeSocket._meteorSession);\n    }\n  } else if(fakeSocket.meteor_session) { //support for 0.6.5.x\n    namespace.Session = fakeSocket.meteor_session.constructor;\n\n    //instrumenting subscription\n    exposeSubscription(fakeSocket.meteor_session, namespace);\n    exposeSessionCollectionView(fakeSocket._meteorSession, namespace);\n\n    fakeSocket.meteor_session.detach(fakeSocket);\n  } else {\n    console.error('expose: session exposing failed');\n  }\n};\n\nfunction exposeSubscription(session, namespace) {\n  var subId = Random.id();\n  var publicationHandler = function() {this.ready()};\n  var pubName = '__dummy_pub_' + Random.id();\n\n  session._startSubscription(publicationHandler, subId, [], pubName);\n  var subscription = session._namedSubs[subId];\n  namespace.Subscription = subscription.constructor;\n\n  //cleaning up\n  session._stopSubscription(subId);\n}\n\nfunction exposeSessionCollectionView(session, namespace) {\n  var documentView = session.getCollectionView();\n  namespace.SessionCollectionView = documentView.constructor;\n\n  var id = 'the-id';\n  documentView.added('sample-handle', id, {aa: 10});\n  namespace.SessionDocumentView = documentView.documents[id].constructor;\n}","exposeMongoLivedata = function(namespace) {\n  var MongoColl = (typeof Mongo != \"undefined\")? Mongo.Collection: Meteor.Collection;\n  var coll = new MongoColl('__dummy_coll_' + Random.id());\n  //we need wait until db get connected with meteor, .findOne() does that\n  coll.findOne();\n\n  namespace.MongoConnection = MongoInternals.defaultRemoteCollectionDriver().mongo.constructor;\n  var cursor = coll.find();\n  namespace.MongoCursor = cursor.constructor;\n  exposeOplogDriver(namespace, coll);\n  exposePollingDriver(namespace, coll);\n  exposeMultiplexer(namespace, coll);\n}\n\nfunction exposeOplogDriver(namespace, coll) {\n  var driver = _getObserverDriver(coll.find({}));\n  // verify observer driver is an oplog driver\n  if(driver && typeof driver.constructor.cursorSupported == 'function') {\n    namespace.MongoOplogDriver = driver.constructor;\n  }\n}\n\nfunction exposePollingDriver(namespace, coll) {\n  var cursor = coll.find({}, {limit: 20, _disableOplog: true});\n  var driver = _getObserverDriver(cursor);\n  // verify observer driver is a polling driver\n  if(driver && typeof driver.constructor.cursorSupported == 'undefined') {\n    namespace.MongoPollingDriver = driver.constructor;\n  }\n}\n\nfunction exposeMultiplexer(namespace, coll) {\n  var multiplexer = _getMultiplexer(coll.find({}));\n  if(multiplexer) {\n    namespace.Multiplexer = multiplexer.constructor;\n  }\n}\n\nfunction _getObserverDriver(cursor) {\n  var multiplexer = _getMultiplexer(cursor);\n  if(multiplexer && multiplexer._observeDriver) {\n    return multiplexer._observeDriver;\n  }\n}\n\nfunction _getMultiplexer(cursor) {\n  var handler = cursor.observeChanges({added: Function.prototype});\n  handler.stop();\n  return handler._multiplexer;\n}\n","Fibers = Npm.require('fibers');\n\nMeteorX = {};\nMeteorX._readyCallbacks = [];\nMeteorX._ready = false;\n\nMeteorX.onReady = function(cb) {\n  if(MeteorX._ready) {\n    return runWithAFiber(cb);\n  }\n\n  this._readyCallbacks.push(cb);\n};\n\nMeteorX.Server = Meteor.server.constructor;\nexposeLivedata(MeteorX);\n\n// Before using any other MeteorX apis we need to hijack Mongo related code\n// That'w what we are doing here.\nMeteor.startup(function() {\n  runWithAFiber(function() {\n    exposeMongoLivedata(MeteorX);\n  });\n\n  MeteorX._readyCallbacks.forEach(function(fn) {\n    runWithAFiber(fn);\n  });\n  MeteorX._ready = true;\n});\n\nfunction runWithAFiber(cb) {\n  if(Fibers.current) {\n    cb();\n  } else {\n    new Fiber(cb).run();\n  }\n}\n"]}}]